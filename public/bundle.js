
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop$3() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$3;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$3;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$3;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert$1(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space$1() {
        return text(' ');
    }
    function empty$1() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }
    class HtmlTag {
        constructor(anchor = null) {
            this.a = anchor;
            this.e = this.n = null;
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.h(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert$1(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop$3;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop$3;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop$3, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$3, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$3, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = program.b - t;
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$3, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_outro_and_destroy_block(block, lookup) {
        block.f();
        outro_and_destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$3,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$3;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.35.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert$1(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function sineOut(t) {
        return Math.sin((t * Math.PI) / 2);
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }

    /* src\Tailwindcss.svelte generated by Svelte v3.35.0 */

    function create_fragment$1m(ctx) {
    	const block = {
    		c: noop$3,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$3,
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: noop$3
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1m($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tailwindcss", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tailwindcss> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Tailwindcss extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1m, create_fragment$1m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tailwindcss",
    			options,
    			id: create_fragment$1m.name
    		});
    	}
    }

    /**
     * This module used to unify mouse wheel behavior between different browsers in 2014
     * Now it's just a wrapper around addEventListener('wheel');
     *
     * Usage:
     *  var addWheelListener = require('wheel').addWheelListener;
     *  var removeWheelListener = require('wheel').removeWheelListener;
     *  addWheelListener(domElement, function (e) {
     *    // mouse wheel event
     *  });
     *  removeWheelListener(domElement, function);
     */

    var wheel = addWheelListener;

    // But also expose "advanced" api with unsubscribe:
    var addWheelListener_1 = addWheelListener;
    var removeWheelListener_1 = removeWheelListener;


    function addWheelListener(element, listener, useCapture) {
      element.addEventListener('wheel', listener, useCapture);
    }

    function removeWheelListener( element, listener, useCapture ) {
      element.removeEventListener('wheel', listener, useCapture);
    }
    wheel.addWheelListener = addWheelListener_1;
    wheel.removeWheelListener = removeWheelListener_1;

    /**
     * https://github.com/gre/bezier-easing
     * BezierEasing - use bezier curve for transition easing function
     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
     */

    // These values are established by empiricism with tests (tradeoff: performance VS precision)
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;

    var kSplineTableSize = 11;
    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

    var float32ArraySupported = typeof Float32Array === 'function';

    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
    function C$1 (aA1)      { return 3.0 * aA1; }

    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C$1(aA1)) * aT; }

    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
    function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C$1(aA1); }

    function binarySubdivide (aX, aA, aB, mX1, mX2) {
      var currentX, currentT, i = 0;
      do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
      return currentT;
    }

    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
     for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
       var currentSlope = getSlope(aGuessT, mX1, mX2);
       if (currentSlope === 0.0) {
         return aGuessT;
       }
       var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
       aGuessT -= currentX / currentSlope;
     }
     return aGuessT;
    }

    function LinearEasing (x) {
      return x;
    }

    var src = function bezier (mX1, mY1, mX2, mY2) {
      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
      }

      if (mX1 === mY1 && mX2 === mY2) {
        return LinearEasing;
      }

      // Precompute samples table
      var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }

      function getTForX (aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;

        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;

        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;

        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      }

      return function BezierEasing (x) {
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
          return 0;
        }
        if (x === 1) {
          return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
      };
    };

    // Predefined set of animations. Similar to CSS easing functions
    var animations = {
      ease:  src(0.25, 0.1, 0.25, 1),
      easeIn: src(0.42, 0, 1, 1),
      easeOut: src(0, 0, 0.58, 1),
      easeInOut: src(0.42, 0, 0.58, 1),
      linear: src(0, 0, 1, 1)
    };


    var amator = animate;
    var makeAggregateRaf_1 = makeAggregateRaf;
    var sharedScheduler = makeAggregateRaf();


    function animate(source, target, options) {
      var start = Object.create(null);
      var diff = Object.create(null);
      options = options || {};
      // We let clients specify their own easing function
      var easing = (typeof options.easing === 'function') ? options.easing : animations[options.easing];

      // if nothing is specified, default to ease (similar to CSS animations)
      if (!easing) {
        if (options.easing) {
          console.warn('Unknown easing function in amator: ' + options.easing);
        }
        easing = animations.ease;
      }

      var step = typeof options.step === 'function' ? options.step : noop$2;
      var done = typeof options.done === 'function' ? options.done : noop$2;

      var scheduler = getScheduler(options.scheduler);

      var keys = Object.keys(target);
      keys.forEach(function(key) {
        start[key] = source[key];
        diff[key] = target[key] - source[key];
      });

      var durationInMs = typeof options.duration === 'number' ? options.duration : 400;
      var durationInFrames = Math.max(1, durationInMs * 0.06); // 0.06 because 60 frames pers 1,000 ms
      var previousAnimationId;
      var frame = 0;

      previousAnimationId = scheduler.next(loop);

      return {
        cancel: cancel
      }

      function cancel() {
        scheduler.cancel(previousAnimationId);
        previousAnimationId = 0;
      }

      function loop() {
        var t = easing(frame/durationInFrames);
        frame += 1;
        setValues(t);
        if (frame <= durationInFrames) {
          previousAnimationId = scheduler.next(loop);
          step(source);
        } else {
          previousAnimationId = 0;
          setTimeout(function() { done(source); }, 0);
        }
      }

      function setValues(t) {
        keys.forEach(function(key) {
          source[key] = diff[key] * t + start[key];
        });
      }
    }

    function noop$2() { }

    function getScheduler(scheduler) {
      if (!scheduler) {
        var canRaf = typeof window !== 'undefined' && window.requestAnimationFrame;
        return canRaf ? rafScheduler() : timeoutScheduler()
      }
      if (typeof scheduler.next !== 'function') throw new Error('Scheduler is supposed to have next(cb) function')
      if (typeof scheduler.cancel !== 'function') throw new Error('Scheduler is supposed to have cancel(handle) function')

      return scheduler
    }

    function rafScheduler() {
      return {
        next: window.requestAnimationFrame.bind(window),
        cancel: window.cancelAnimationFrame.bind(window)
      }
    }

    function timeoutScheduler() {
      return {
        next: function(cb) {
          return setTimeout(cb, 1000/60)
        },
        cancel: function (id) {
          return clearTimeout(id)
        }
      }
    }

    function makeAggregateRaf() {
      var frontBuffer = new Set();
      var backBuffer = new Set();
      var frameToken = 0;

      return {
        next: next,
        cancel: next,
        clearAll: clearAll
      }

      function clearAll() {
        frontBuffer.clear();
        backBuffer.clear();
        cancelAnimationFrame(frameToken);
        frameToken = 0;
      }

      function next(callback) {
        backBuffer.add(callback);
        renderNextFrame();
      }

      function renderNextFrame() {
        if (!frameToken) frameToken = requestAnimationFrame(renderFrame);
      }

      function renderFrame() {
        frameToken = 0;

        var t = backBuffer;
        backBuffer = frontBuffer;
        frontBuffer = t;

        frontBuffer.forEach(function(callback) {
          callback();
        });
        frontBuffer.clear();
      }
    }
    amator.makeAggregateRaf = makeAggregateRaf_1;
    amator.sharedScheduler = sharedScheduler;

    var ngraph_events = function eventify(subject) {
      validateSubject(subject);

      var eventsStorage = createEventsStorage(subject);
      subject.on = eventsStorage.on;
      subject.off = eventsStorage.off;
      subject.fire = eventsStorage.fire;
      return subject;
    };

    function createEventsStorage(subject) {
      // Store all event listeners to this hash. Key is event name, value is array
      // of callback records.
      //
      // A callback record consists of callback function and its optional context:
      // { 'eventName' => [{callback: function, ctx: object}] }
      var registeredEvents = Object.create(null);

      return {
        on: function (eventName, callback, ctx) {
          if (typeof callback !== 'function') {
            throw new Error('callback is expected to be a function');
          }
          var handlers = registeredEvents[eventName];
          if (!handlers) {
            handlers = registeredEvents[eventName] = [];
          }
          handlers.push({callback: callback, ctx: ctx});

          return subject;
        },

        off: function (eventName, callback) {
          var wantToRemoveAll = (typeof eventName === 'undefined');
          if (wantToRemoveAll) {
            // Killing old events storage should be enough in this case:
            registeredEvents = Object.create(null);
            return subject;
          }

          if (registeredEvents[eventName]) {
            var deleteAllCallbacksForEvent = (typeof callback !== 'function');
            if (deleteAllCallbacksForEvent) {
              delete registeredEvents[eventName];
            } else {
              var callbacks = registeredEvents[eventName];
              for (var i = 0; i < callbacks.length; ++i) {
                if (callbacks[i].callback === callback) {
                  callbacks.splice(i, 1);
                }
              }
            }
          }

          return subject;
        },

        fire: function (eventName) {
          var callbacks = registeredEvents[eventName];
          if (!callbacks) {
            return subject;
          }

          var fireArguments;
          if (arguments.length > 1) {
            fireArguments = Array.prototype.splice.call(arguments, 1);
          }
          for(var i = 0; i < callbacks.length; ++i) {
            var callbackInfo = callbacks[i];
            callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);
          }

          return subject;
        }
      };
    }

    function validateSubject(subject) {
      if (!subject) {
        throw new Error('Eventify cannot use falsy object as events subject');
      }
      var reservedWords = ['on', 'fire', 'off'];
      for (var i = 0; i < reservedWords.length; ++i) {
        if (subject.hasOwnProperty(reservedWords[i])) {
          throw new Error("Subject cannot be eventified, since it already has property '" + reservedWords[i] + "'");
        }
      }
    }

    /**
     * Allows smooth kinetic scrolling of the surface
     */
    var kinetic_1 = kinetic;

    function kinetic(getPoint, scroll, settings) {
      if (typeof settings !== 'object') {
        // setting could come as boolean, we should ignore it, and use an object.
        settings = {};
      }

      var minVelocity = typeof settings.minVelocity === 'number' ? settings.minVelocity : 5;
      var amplitude = typeof settings.amplitude === 'number' ? settings.amplitude : 0.25;
      var cancelAnimationFrame = typeof settings.cancelAnimationFrame === 'function' ? settings.cancelAnimationFrame : getCancelAnimationFrame();
      var requestAnimationFrame = typeof settings.requestAnimationFrame === 'function' ? settings.requestAnimationFrame : getRequestAnimationFrame();

      var lastPoint;
      var timestamp;
      var timeConstant = 342;

      var ticker;
      var vx, targetX, ax;
      var vy, targetY, ay;

      var raf;

      return {
        start: start,
        stop: stop,
        cancel: dispose
      };

      function dispose() {
        cancelAnimationFrame(ticker);
        cancelAnimationFrame(raf);
      }

      function start() {
        lastPoint = getPoint();

        ax = ay = vx = vy = 0;
        timestamp = new Date();

        cancelAnimationFrame(ticker);
        cancelAnimationFrame(raf);

        // we start polling the point position to accumulate velocity
        // Once we stop(), we will use accumulated velocity to keep scrolling
        // an object.
        ticker = requestAnimationFrame(track);
      }

      function track() {
        var now = Date.now();
        var elapsed = now - timestamp;
        timestamp = now;

        var currentPoint = getPoint();

        var dx = currentPoint.x - lastPoint.x;
        var dy = currentPoint.y - lastPoint.y;

        lastPoint = currentPoint;

        var dt = 1000 / (1 + elapsed);

        // moving average
        vx = 0.8 * dx * dt + 0.2 * vx;
        vy = 0.8 * dy * dt + 0.2 * vy;

        ticker = requestAnimationFrame(track);
      }

      function stop() {
        cancelAnimationFrame(ticker);
        cancelAnimationFrame(raf);

        var currentPoint = getPoint();

        targetX = currentPoint.x;
        targetY = currentPoint.y;
        timestamp = Date.now();

        if (vx < -minVelocity || vx > minVelocity) {
          ax = amplitude * vx;
          targetX += ax;
        }

        if (vy < -minVelocity || vy > minVelocity) {
          ay = amplitude * vy;
          targetY += ay;
        }

        raf = requestAnimationFrame(autoScroll);
      }

      function autoScroll() {
        var elapsed = Date.now() - timestamp;

        var moving = false;
        var dx = 0;
        var dy = 0;

        if (ax) {
          dx = -ax * Math.exp(-elapsed / timeConstant);

          if (dx > 0.5 || dx < -0.5) moving = true;
          else dx = ax = 0;
        }

        if (ay) {
          dy = -ay * Math.exp(-elapsed / timeConstant);

          if (dy > 0.5 || dy < -0.5) moving = true;
          else dy = ay = 0;
        }

        if (moving) {
          scroll(targetX + dx, targetY + dy);
          raf = requestAnimationFrame(autoScroll);
        }
      }
    }

    function getCancelAnimationFrame() {
      if (typeof cancelAnimationFrame === 'function') return cancelAnimationFrame;
      return clearTimeout;
    }

    function getRequestAnimationFrame() {
      if (typeof requestAnimationFrame === 'function') return requestAnimationFrame;

      return function (handler) {
        return setTimeout(handler, 16);
      }
    }

    /**
     * Disallows selecting text.
     */
    var createTextSelectionInterceptor_1 = createTextSelectionInterceptor;

    function createTextSelectionInterceptor(useFake) {
      if (useFake) {
        return {
          capture: noop$1,
          release: noop$1
        };
      }

      var dragObject;
      var prevSelectStart;
      var prevDragStart;
      var wasCaptured = false;

      return {
        capture: capture,
        release: release
      };

      function capture(domObject) {
        wasCaptured = true;
        prevSelectStart = window.document.onselectstart;
        prevDragStart = window.document.ondragstart;

        window.document.onselectstart = disabled;

        dragObject = domObject;
        dragObject.ondragstart = disabled;
      }

      function release() {
        if (!wasCaptured) return;
        
        wasCaptured = false;
        window.document.onselectstart = prevSelectStart;
        if (dragObject) dragObject.ondragstart = prevDragStart;
      }
    }

    function disabled(e) {
      e.stopPropagation();
      return false;
    }

    function noop$1() {}

    var transform = Transform;

    function Transform() {
      this.x = 0;
      this.y = 0;
      this.scale = 1;
    }

    var svgController = makeSvgController;
    var canAttach$1 = isSVGElement;

    function makeSvgController(svgElement, options) {
      if (!isSVGElement(svgElement)) {
        throw new Error('svg element is required for svg.panzoom to work')
      }

      var owner = svgElement.ownerSVGElement;
      if (!owner) {
        throw new Error(
          'Do not apply panzoom to the root <svg> element. ' +
          'Use its child instead (e.g. <g></g>). ' +
          'As of March 2016 only FireFox supported transform on the root element')
      }

      if (!options.disableKeyboardInteraction) {
        owner.setAttribute('tabindex', 0);
      }

      var api = {
        getBBox: getBBox,
        getScreenCTM: getScreenCTM,
        getOwner: getOwner,
        applyTransform: applyTransform,
        initTransform: initTransform
      };
      
      return api

      function getOwner() {
        return owner
      }

      function getBBox() {
        var bbox =  svgElement.getBBox();
        return {
          left: bbox.x,
          top: bbox.y,
          width: bbox.width,
          height: bbox.height,
        }
      }

      function getScreenCTM() {
        var ctm = owner.getCTM();
        if (!ctm) {
          // This is likely firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=873106
          // The code below is not entirely correct, but still better than nothing
          return owner.getScreenCTM();
        }
        return ctm;
      }

      function initTransform(transform) {
        var screenCTM = svgElement.getCTM();

        // The above line returns null on Firefox
        if (screenCTM === null) {
          screenCTM = document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGMatrix();
        }

        transform.x = screenCTM.e;
        transform.y = screenCTM.f;
        transform.scale = screenCTM.a;
        owner.removeAttributeNS(null, 'viewBox');
      }

      function applyTransform(transform) {
        svgElement.setAttribute('transform', 'matrix(' +
          transform.scale + ' 0 0 ' +
          transform.scale + ' ' +
          transform.x + ' ' + transform.y + ')');
      }
    }

    function isSVGElement(element) {
      return element && element.ownerSVGElement && element.getCTM;
    }
    svgController.canAttach = canAttach$1;

    var domController = makeDomController;

    var canAttach = isDomElement;

    function makeDomController(domElement, options) {
      var elementValid = isDomElement(domElement); 
      if (!elementValid) {
        throw new Error('panzoom requires DOM element to be attached to the DOM tree')
      }

      var owner = domElement.parentElement;
      domElement.scrollTop = 0;
      
      if (!options.disableKeyboardInteraction) {
        owner.setAttribute('tabindex', 0);
      }

      var api = {
        getBBox: getBBox,
        getOwner: getOwner,
        applyTransform: applyTransform,
      };
      
      return api

      function getOwner() {
        return owner
      }

      function getBBox() {
        // TODO: We should probably cache this?
        return  {
          left: 0,
          top: 0,
          width: domElement.clientWidth,
          height: domElement.clientHeight
        }
      }

      function applyTransform(transform) {
        // TODO: Should we cache this?
        domElement.style.transformOrigin = '0 0 0';
        domElement.style.transform = 'matrix(' +
          transform.scale + ', 0, 0, ' +
          transform.scale + ', ' +
          transform.x + ', ' + transform.y + ')';
      }
    }

    function isDomElement(element) {
      return element && element.parentElement && element.style;
    }
    domController.canAttach = canAttach;

    /**
     * Allows to drag and zoom svg elements
     */





    var domTextSelectionInterceptor = createTextSelectionInterceptor_1();
    var fakeTextSelectorInterceptor = createTextSelectionInterceptor_1(true);




    var defaultZoomSpeed = 1;
    var defaultDoubleTapZoomSpeed = 1.75;
    var doubleTapSpeedInMS = 300;

    var panzoom = createPanZoom;

    /**
     * Creates a new instance of panzoom, so that an object can be panned and zoomed
     *
     * @param {DOMElement} domElement where panzoom should be attached.
     * @param {Object} options that configure behavior.
     */
    function createPanZoom(domElement, options) {
      options = options || {};

      var panController = options.controller;

      if (!panController) {
        if (svgController.canAttach(domElement)) {
          panController = svgController(domElement, options);
        } else if (domController.canAttach(domElement)) {
          panController = domController(domElement, options);
        }
      }

      if (!panController) {
        throw new Error(
          'Cannot create panzoom for the current type of dom element'
        );
      }
      var owner = panController.getOwner();
      // just to avoid GC pressure, every time we do intermediate transform
      // we return this object. For internal use only. Never give it back to the consumer of this library
      var storedCTMResult = { x: 0, y: 0 };

      var isDirty = false;
      var transform$1 = new transform();

      if (panController.initTransform) {
        panController.initTransform(transform$1);
      }

      var filterKey = typeof options.filterKey === 'function' ? options.filterKey : noop;
      // TODO: likely need to unite pinchSpeed with zoomSpeed
      var pinchSpeed = typeof options.pinchSpeed === 'number' ? options.pinchSpeed : 1;
      var bounds = options.bounds;
      var maxZoom = typeof options.maxZoom === 'number' ? options.maxZoom : Number.POSITIVE_INFINITY;
      var minZoom = typeof options.minZoom === 'number' ? options.minZoom : 0;

      var boundsPadding = typeof options.boundsPadding === 'number' ? options.boundsPadding : 0.05;
      var zoomDoubleClickSpeed = typeof options.zoomDoubleClickSpeed === 'number' ? options.zoomDoubleClickSpeed : defaultDoubleTapZoomSpeed;
      var beforeWheel = options.beforeWheel || noop;
      var beforeMouseDown = options.beforeMouseDown || noop;
      var speed = typeof options.zoomSpeed === 'number' ? options.zoomSpeed : defaultZoomSpeed;
      var transformOrigin = parseTransformOrigin(options.transformOrigin);
      var textSelection = options.enableTextSelection ? fakeTextSelectorInterceptor : domTextSelectionInterceptor;

      validateBounds(bounds);

      if (options.autocenter) {
        autocenter();
      }

      var frameAnimation;
      var lastTouchEndTime = 0;
      var lastSingleFingerOffset;
      var touchInProgress = false;

      // We only need to fire panstart when actual move happens
      var panstartFired = false;

      // cache mouse coordinates here
      var mouseX;
      var mouseY;

      var pinchZoomLength;

      var smoothScroll;
      if ('smoothScroll' in options && !options.smoothScroll) {
        // If user explicitly asked us not to use smooth scrolling, we obey
        smoothScroll = rigidScroll();
      } else {
        // otherwise we use forward smoothScroll settings to kinetic API
        // which makes scroll smoothing.
        smoothScroll = kinetic_1(getPoint, scroll, options.smoothScroll);
      }

      var moveByAnimation;
      var zoomToAnimation;

      var multiTouch;
      var paused = false;

      listenForEvents();

      var api = {
        dispose: dispose,
        moveBy: internalMoveBy,
        moveTo: moveTo,
        smoothMoveTo: smoothMoveTo, 
        centerOn: centerOn,
        zoomTo: publicZoomTo,
        zoomAbs: zoomAbs,
        smoothZoom: smoothZoom,
        smoothZoomAbs: smoothZoomAbs,
        showRectangle: showRectangle,

        pause: pause,
        resume: resume,
        isPaused: isPaused,

        getTransform: getTransformModel,

        getMinZoom: getMinZoom,
        setMinZoom: setMinZoom,

        getMaxZoom: getMaxZoom,
        setMaxZoom: setMaxZoom,

        getTransformOrigin: getTransformOrigin,
        setTransformOrigin: setTransformOrigin,

        getZoomSpeed: getZoomSpeed,
        setZoomSpeed: setZoomSpeed
      };

      ngraph_events(api);
      
      var initialX = typeof options.initialX === 'number' ? options.initialX : transform$1.x;
      var initialY = typeof options.initialY === 'number' ? options.initialY : transform$1.y;
      var initialZoom = typeof options.initialZoom === 'number' ? options.initialZoom : transform$1.scale;

      if(initialX != transform$1.x || initialY != transform$1.y || initialZoom != transform$1.Scale){
        zoomAbs(initialX, initialY, initialZoom);
      }

      return api;

      function pause() {
        releaseEvents();
        paused = true;
      }

      function resume() {
        if (paused) {
          listenForEvents();
          paused = false;
        }
      }

      function isPaused() {
        return paused;
      }

      function showRectangle(rect) {
        // TODO: this duplicates autocenter. I think autocenter should go.
        var clientRect = owner.getBoundingClientRect();
        var size = transformToScreen(clientRect.width, clientRect.height);

        var rectWidth = rect.right - rect.left;
        var rectHeight = rect.bottom - rect.top;
        if (!Number.isFinite(rectWidth) || !Number.isFinite(rectHeight)) {
          throw new Error('Invalid rectangle');
        }

        var dw = size.x / rectWidth;
        var dh = size.y / rectHeight;
        var scale = Math.min(dw, dh);
        transform$1.x = -(rect.left + rectWidth / 2) * scale + size.x / 2;
        transform$1.y = -(rect.top + rectHeight / 2) * scale + size.y / 2;
        transform$1.scale = scale;
      }

      function transformToScreen(x, y) {
        if (panController.getScreenCTM) {
          var parentCTM = panController.getScreenCTM();
          var parentScaleX = parentCTM.a;
          var parentScaleY = parentCTM.d;
          var parentOffsetX = parentCTM.e;
          var parentOffsetY = parentCTM.f;
          storedCTMResult.x = x * parentScaleX - parentOffsetX;
          storedCTMResult.y = y * parentScaleY - parentOffsetY;
        } else {
          storedCTMResult.x = x;
          storedCTMResult.y = y;
        }

        return storedCTMResult;
      }

      function autocenter() {
        var w; // width of the parent
        var h; // height of the parent
        var left = 0;
        var top = 0;
        var sceneBoundingBox = getBoundingBox();
        if (sceneBoundingBox) {
          // If we have bounding box - use it.
          left = sceneBoundingBox.left;
          top = sceneBoundingBox.top;
          w = sceneBoundingBox.right - sceneBoundingBox.left;
          h = sceneBoundingBox.bottom - sceneBoundingBox.top;
        } else {
          // otherwise just use whatever space we have
          var ownerRect = owner.getBoundingClientRect();
          w = ownerRect.width;
          h = ownerRect.height;
        }
        var bbox = panController.getBBox();
        if (bbox.width === 0 || bbox.height === 0) {
          // we probably do not have any elements in the SVG
          // just bail out;
          return;
        }
        var dh = h / bbox.height;
        var dw = w / bbox.width;
        var scale = Math.min(dw, dh);
        transform$1.x = -(bbox.left + bbox.width / 2) * scale + w / 2 + left;
        transform$1.y = -(bbox.top + bbox.height / 2) * scale + h / 2 + top;
        transform$1.scale = scale;
      }

      function getTransformModel() {
        // TODO: should this be read only?
        return transform$1;
      }

      function getMinZoom() {
        return minZoom;
      }

      function setMinZoom(newMinZoom) {
        minZoom = newMinZoom;
      }

      function getMaxZoom() {
        return maxZoom;
      }

      function setMaxZoom(newMaxZoom) {
        maxZoom = newMaxZoom;
      }

      function getTransformOrigin() {
        return transformOrigin;
      }

      function setTransformOrigin(newTransformOrigin) {
        transformOrigin = parseTransformOrigin(newTransformOrigin);
      }

      function getZoomSpeed() {
        return speed;
      }

      function setZoomSpeed(newSpeed) {
        if (!Number.isFinite(newSpeed)) {
          throw new Error('Zoom speed should be a number');
        }
        speed = newSpeed;
      }

      function getPoint() {
        return {
          x: transform$1.x,
          y: transform$1.y
        };
      }

      function moveTo(x, y) {
        transform$1.x = x;
        transform$1.y = y;

        keepTransformInsideBounds();

        triggerEvent('pan');
        makeDirty();
      }

      function moveBy(dx, dy) {
        moveTo(transform$1.x + dx, transform$1.y + dy);
      }

      function keepTransformInsideBounds() {
        var boundingBox = getBoundingBox();
        if (!boundingBox) return;

        var adjusted = false;
        var clientRect = getClientRect();

        var diff = boundingBox.left - clientRect.right;
        if (diff > 0) {
          transform$1.x += diff;
          adjusted = true;
        }
        // check the other side:
        diff = boundingBox.right - clientRect.left;
        if (diff < 0) {
          transform$1.x += diff;
          adjusted = true;
        }

        // y axis:
        diff = boundingBox.top - clientRect.bottom;
        if (diff > 0) {
          // we adjust transform, so that it matches exactly our bounding box:
          // transform.y = boundingBox.top - (boundingBox.height + boundingBox.y) * transform.scale =>
          // transform.y = boundingBox.top - (clientRect.bottom - transform.y) =>
          // transform.y = diff + transform.y =>
          transform$1.y += diff;
          adjusted = true;
        }

        diff = boundingBox.bottom - clientRect.top;
        if (diff < 0) {
          transform$1.y += diff;
          adjusted = true;
        }
        return adjusted;
      }

      /**
       * Returns bounding box that should be used to restrict scene movement.
       */
      function getBoundingBox() {
        if (!bounds) return; // client does not want to restrict movement

        if (typeof bounds === 'boolean') {
          // for boolean type we use parent container bounds
          var ownerRect = owner.getBoundingClientRect();
          var sceneWidth = ownerRect.width;
          var sceneHeight = ownerRect.height;

          return {
            left: sceneWidth * boundsPadding,
            top: sceneHeight * boundsPadding,
            right: sceneWidth * (1 - boundsPadding),
            bottom: sceneHeight * (1 - boundsPadding)
          };
        }

        return bounds;
      }

      function getClientRect() {
        var bbox = panController.getBBox();
        var leftTop = client(bbox.left, bbox.top);

        return {
          left: leftTop.x,
          top: leftTop.y,
          right: bbox.width * transform$1.scale + leftTop.x,
          bottom: bbox.height * transform$1.scale + leftTop.y
        };
      }

      function client(x, y) {
        return {
          x: x * transform$1.scale + transform$1.x,
          y: y * transform$1.scale + transform$1.y
        };
      }

      function makeDirty() {
        isDirty = true;
        frameAnimation = window.requestAnimationFrame(frame);
      }

      function zoomByRatio(clientX, clientY, ratio) {
        if (isNaN$1(clientX) || isNaN$1(clientY) || isNaN$1(ratio)) {
          throw new Error('zoom requires valid numbers');
        }

        var newScale = transform$1.scale * ratio;

        if (newScale < minZoom) {
          if (transform$1.scale === minZoom) return;

          ratio = minZoom / transform$1.scale;
        }
        if (newScale > maxZoom) {
          if (transform$1.scale === maxZoom) return;

          ratio = maxZoom / transform$1.scale;
        }

        var size = transformToScreen(clientX, clientY);

        transform$1.x = size.x - ratio * (size.x - transform$1.x);
        transform$1.y = size.y - ratio * (size.y - transform$1.y);

        // TODO: https://github.com/anvaka/panzoom/issues/112
        if (bounds && boundsPadding === 1 && minZoom === 1) {
          transform$1.scale *= ratio;
          keepTransformInsideBounds();
        } else {
          var transformAdjusted = keepTransformInsideBounds();
          if (!transformAdjusted) transform$1.scale *= ratio;
        }

        triggerEvent('zoom');

        makeDirty();
      }

      function zoomAbs(clientX, clientY, zoomLevel) {
        var ratio = zoomLevel / transform$1.scale;
        zoomByRatio(clientX, clientY, ratio);
      }

      function centerOn(ui) {
        var parent = ui.ownerSVGElement;
        if (!parent)
          throw new Error('ui element is required to be within the scene');

        // TODO: should i use controller's screen CTM?
        var clientRect = ui.getBoundingClientRect();
        var cx = clientRect.left + clientRect.width / 2;
        var cy = clientRect.top + clientRect.height / 2;

        var container = parent.getBoundingClientRect();
        var dx = container.width / 2 - cx;
        var dy = container.height / 2 - cy;

        internalMoveBy(dx, dy, true);
      }

      function smoothMoveTo(x, y){
        internalMoveBy(x - transform$1.x, y - transform$1.y, true);
      }

      function internalMoveBy(dx, dy, smooth) {
        if (!smooth) {
          return moveBy(dx, dy);
        }

        if (moveByAnimation) moveByAnimation.cancel();

        var from = { x: 0, y: 0 };
        var to = { x: dx, y: dy };
        var lastX = 0;
        var lastY = 0;

        moveByAnimation = amator(from, to, {
          step: function (v) {
            moveBy(v.x - lastX, v.y - lastY);

            lastX = v.x;
            lastY = v.y;
          }
        });
      }

      function scroll(x, y) {
        cancelZoomAnimation();
        moveTo(x, y);
      }

      function dispose() {
        releaseEvents();
      }

      function listenForEvents() {
        owner.addEventListener('mousedown', onMouseDown, { passive: false });
        owner.addEventListener('dblclick', onDoubleClick, { passive: false });
        owner.addEventListener('touchstart', onTouch, { passive: false });
        owner.addEventListener('keydown', onKeyDown, { passive: false });

        // Need to listen on the owner container, so that we are not limited
        // by the size of the scrollable domElement
        wheel.addWheelListener(owner, onMouseWheel, { passive: false });

        makeDirty();
      }

      function releaseEvents() {
        wheel.removeWheelListener(owner, onMouseWheel);
        owner.removeEventListener('mousedown', onMouseDown);
        owner.removeEventListener('keydown', onKeyDown);
        owner.removeEventListener('dblclick', onDoubleClick);
        owner.removeEventListener('touchstart', onTouch);

        if (frameAnimation) {
          window.cancelAnimationFrame(frameAnimation);
          frameAnimation = 0;
        }

        smoothScroll.cancel();

        releaseDocumentMouse();
        releaseTouches();
        textSelection.release();

        triggerPanEnd();
      }

      function frame() {
        if (isDirty) applyTransform();
      }

      function applyTransform() {
        isDirty = false;

        // TODO: Should I allow to cancel this?
        panController.applyTransform(transform$1);

        triggerEvent('transform');
        frameAnimation = 0;
      }

      function onKeyDown(e) {
        var x = 0,
          y = 0,
          z = 0;
        if (e.keyCode === 38) {
          y = 1; // up
        } else if (e.keyCode === 40) {
          y = -1; // down
        } else if (e.keyCode === 37) {
          x = 1; // left
        } else if (e.keyCode === 39) {
          x = -1; // right
        } else if (e.keyCode === 189 || e.keyCode === 109) {
          // DASH or SUBTRACT
          z = 1; // `-` -  zoom out
        } else if (e.keyCode === 187 || e.keyCode === 107) {
          // EQUAL SIGN or ADD
          z = -1; // `=` - zoom in (equal sign on US layout is under `+`)
        }

        if (filterKey(e, x, y, z)) {
          // They don't want us to handle the key: https://github.com/anvaka/panzoom/issues/45
          return;
        }

        if (x || y) {
          e.preventDefault();
          e.stopPropagation();

          var clientRect = owner.getBoundingClientRect();
          // movement speed should be the same in both X and Y direction:
          var offset = Math.min(clientRect.width, clientRect.height);
          var moveSpeedRatio = 0.05;
          var dx = offset * moveSpeedRatio * x;
          var dy = offset * moveSpeedRatio * y;

          // TODO: currently we do not animate this. It could be better to have animation
          internalMoveBy(dx, dy);
        }

        if (z) {
          var scaleMultiplier = getScaleMultiplier(z * 100);
          var offset = transformOrigin ? getTransformOriginOffset() : midPoint();
          publicZoomTo(offset.x, offset.y, scaleMultiplier);
        }
      }

      function midPoint() {
        var ownerRect = owner.getBoundingClientRect();
        return {
          x: ownerRect.width / 2,
          y: ownerRect.height / 2
        };
      }

      function onTouch(e) {
        // let the override the touch behavior
        beforeTouch(e);

        if (e.touches.length === 1) {
          return handleSingleFingerTouch(e, e.touches[0]);
        } else if (e.touches.length === 2) {
          // handleTouchMove() will care about pinch zoom.
          pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);
          multiTouch = true;
          startTouchListenerIfNeeded();
        }
      }

      function beforeTouch(e) {
        // TODO: Need to unify this filtering names. E.g. use `beforeTouch`
        if (options.onTouch && !options.onTouch(e)) {
          // if they return `false` from onTouch, we don't want to stop
          // events propagation. Fixes https://github.com/anvaka/panzoom/issues/12
          return;
        }

        e.stopPropagation();
        e.preventDefault();
      }

      function beforeDoubleClick(e) {
        // TODO: Need to unify this filtering names. E.g. use `beforeDoubleClick``
        if (options.onDoubleClick && !options.onDoubleClick(e)) {
          // if they return `false` from onTouch, we don't want to stop
          // events propagation. Fixes https://github.com/anvaka/panzoom/issues/46
          return;
        }

        e.preventDefault();
        e.stopPropagation();
      }

      function handleSingleFingerTouch(e) {
        var touch = e.touches[0];
        var offset = getOffsetXY(touch);
        lastSingleFingerOffset = offset;
        var point = transformToScreen(offset.x, offset.y);
        mouseX = point.x;
        mouseY = point.y;

        smoothScroll.cancel();
        startTouchListenerIfNeeded();
      }

      function startTouchListenerIfNeeded() {
        if (touchInProgress) {
          // no need to do anything, as we already listen to events;
          return;
        }

        touchInProgress = true;
        document.addEventListener('touchmove', handleTouchMove);
        document.addEventListener('touchend', handleTouchEnd);
        document.addEventListener('touchcancel', handleTouchEnd);
      }

      function handleTouchMove(e) {
        if (e.touches.length === 1) {
          e.stopPropagation();
          var touch = e.touches[0];

          var offset = getOffsetXY(touch);
          var point = transformToScreen(offset.x, offset.y);

          var dx = point.x - mouseX;
          var dy = point.y - mouseY;

          if (dx !== 0 && dy !== 0) {
            triggerPanStart();
          }
          mouseX = point.x;
          mouseY = point.y;
          internalMoveBy(dx, dy);
        } else if (e.touches.length === 2) {
          // it's a zoom, let's find direction
          multiTouch = true;
          var t1 = e.touches[0];
          var t2 = e.touches[1];
          var currentPinchLength = getPinchZoomLength(t1, t2);

          // since the zoom speed is always based on distance from 1, we need to apply
          // pinch speed only on that distance from 1:
          var scaleMultiplier =
            1 + (currentPinchLength / pinchZoomLength - 1) * pinchSpeed;

          var firstTouchPoint = getOffsetXY(t1);
          var secondTouchPoint = getOffsetXY(t2);
          mouseX = (firstTouchPoint.x + secondTouchPoint.x) / 2;
          mouseY = (firstTouchPoint.y + secondTouchPoint.y) / 2;
          if (transformOrigin) {
            var offset = getTransformOriginOffset();
            mouseX = offset.x;
            mouseY = offset.y;
          }

          publicZoomTo(mouseX, mouseY, scaleMultiplier);

          pinchZoomLength = currentPinchLength;
          e.stopPropagation();
          e.preventDefault();
        }
      }

      function handleTouchEnd(e) {
        if (e.touches.length > 0) {
          var offset = getOffsetXY(e.touches[0]);
          var point = transformToScreen(offset.x, offset.y);
          mouseX = point.x;
          mouseY = point.y;
        } else {
          var now = new Date();
          if (now - lastTouchEndTime < doubleTapSpeedInMS) {
            if (transformOrigin) {
              var offset = getTransformOriginOffset();
              smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);
            } else {
              // We want untransformed x/y here.
              smoothZoom(lastSingleFingerOffset.x, lastSingleFingerOffset.y, zoomDoubleClickSpeed);
            }
          }

          lastTouchEndTime = now;

          triggerPanEnd();
          releaseTouches();
        }
      }

      function getPinchZoomLength(finger1, finger2) {
        var dx = finger1.clientX - finger2.clientX;
        var dy = finger1.clientY - finger2.clientY;
        return Math.sqrt(dx * dx + dy * dy);
      }

      function onDoubleClick(e) {
        beforeDoubleClick(e);
        var offset = getOffsetXY(e);
        if (transformOrigin) {
          // TODO: looks like this is duplicated in the file.
          // Need to refactor
          offset = getTransformOriginOffset();
        }
        smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);
      }

      function onMouseDown(e) {
        // if client does not want to handle this event - just ignore the call
        if (beforeMouseDown(e)) return;

        if (touchInProgress) {
          // modern browsers will fire mousedown for touch events too
          // we do not want this: touch is handled separately.
          e.stopPropagation();
          return false;
        }
        // for IE, left click == 1
        // for Firefox, left click == 0
        var isLeftButton =
          (e.button === 1 && window.event !== null) || e.button === 0;
        if (!isLeftButton) return;

        smoothScroll.cancel();

        var offset = getOffsetXY(e);
        var point = transformToScreen(offset.x, offset.y);
        mouseX = point.x;
        mouseY = point.y;

        // We need to listen on document itself, since mouse can go outside of the
        // window, and we will loose it
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
        textSelection.capture(e.target || e.srcElement);

        return false;
      }

      function onMouseMove(e) {
        // no need to worry about mouse events when touch is happening
        if (touchInProgress) return;

        triggerPanStart();

        var offset = getOffsetXY(e);
        var point = transformToScreen(offset.x, offset.y);
        var dx = point.x - mouseX;
        var dy = point.y - mouseY;

        mouseX = point.x;
        mouseY = point.y;

        internalMoveBy(dx, dy);
      }

      function onMouseUp() {
        textSelection.release();
        triggerPanEnd();
        releaseDocumentMouse();
      }

      function releaseDocumentMouse() {
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        panstartFired = false;
      }

      function releaseTouches() {
        document.removeEventListener('touchmove', handleTouchMove);
        document.removeEventListener('touchend', handleTouchEnd);
        document.removeEventListener('touchcancel', handleTouchEnd);
        panstartFired = false;
        multiTouch = false;
        touchInProgress = false;
      }

      function onMouseWheel(e) {
        // if client does not want to handle this event - just ignore the call
        if (beforeWheel(e)) return;

        smoothScroll.cancel();

        var delta = e.deltaY;
        if (e.deltaMode > 0) delta *= 100;

        var scaleMultiplier = getScaleMultiplier(delta);

        if (scaleMultiplier !== 1) {
          var offset = transformOrigin
            ? getTransformOriginOffset()
            : getOffsetXY(e);
          publicZoomTo(offset.x, offset.y, scaleMultiplier);
          e.preventDefault();
        }
      }

      function getOffsetXY(e) {
        var offsetX, offsetY;
        // I tried using e.offsetX, but that gives wrong results for svg, when user clicks on a path.
        var ownerRect = owner.getBoundingClientRect();
        offsetX = e.clientX - ownerRect.left;
        offsetY = e.clientY - ownerRect.top;

        return { x: offsetX, y: offsetY };
      }

      function smoothZoom(clientX, clientY, scaleMultiplier) {
        var fromValue = transform$1.scale;
        var from = { scale: fromValue };
        var to = { scale: scaleMultiplier * fromValue };

        smoothScroll.cancel();
        cancelZoomAnimation();

        zoomToAnimation = amator(from, to, {
          step: function (v) {
            zoomAbs(clientX, clientY, v.scale);
          },
          done: triggerZoomEnd
        });
      }

      function smoothZoomAbs(clientX, clientY, toScaleValue) {
        var fromValue = transform$1.scale;
        var from = { scale: fromValue };
        var to = { scale: toScaleValue };

        smoothScroll.cancel();
        cancelZoomAnimation();

        zoomToAnimation = amator(from, to, {
          step: function (v) {
            zoomAbs(clientX, clientY, v.scale);
          }
        });
      }

      function getTransformOriginOffset() {
        var ownerRect = owner.getBoundingClientRect();
        return {
          x: ownerRect.width * transformOrigin.x,
          y: ownerRect.height * transformOrigin.y
        };
      }

      function publicZoomTo(clientX, clientY, scaleMultiplier) {
        smoothScroll.cancel();
        cancelZoomAnimation();
        return zoomByRatio(clientX, clientY, scaleMultiplier);
      }

      function cancelZoomAnimation() {
        if (zoomToAnimation) {
          zoomToAnimation.cancel();
          zoomToAnimation = null;
        }
      }

      function getScaleMultiplier(delta) {
        var sign = Math.sign(delta);
        var deltaAdjustedSpeed = Math.min(0.25, Math.abs(speed * delta / 128));
        return 1 - sign * deltaAdjustedSpeed;
      }

      function triggerPanStart() {
        if (!panstartFired) {
          triggerEvent('panstart');
          panstartFired = true;
          smoothScroll.start();
        }
      }

      function triggerPanEnd() {
        if (panstartFired) {
          // we should never run smooth scrolling if it was multiTouch (pinch zoom animation):
          if (!multiTouch) smoothScroll.stop();
          triggerEvent('panend');
        }
      }

      function triggerZoomEnd() {
        triggerEvent('zoomend');
      }

      function triggerEvent(name) {
        api.fire(name, api);
      }
    }

    function parseTransformOrigin(options) {
      if (!options) return;
      if (typeof options === 'object') {
        if (!isNumber(options.x) || !isNumber(options.y))
          failTransformOrigin(options);
        return options;
      }

      failTransformOrigin();
    }

    function failTransformOrigin(options) {
      console.error(options);
      throw new Error(
        [
          'Cannot parse transform origin.',
          'Some good examples:',
          '  "center center" can be achieved with {x: 0.5, y: 0.5}',
          '  "top center" can be achieved with {x: 0.5, y: 0}',
          '  "bottom right" can be achieved with {x: 1, y: 1}'
        ].join('\n')
      );
    }

    function noop() { }

    function validateBounds(bounds) {
      var boundsType = typeof bounds;
      if (boundsType === 'undefined' || boundsType === 'boolean') return; // this is okay
      // otherwise need to be more thorough:
      var validBounds =
        isNumber(bounds.left) &&
        isNumber(bounds.top) &&
        isNumber(bounds.bottom) &&
        isNumber(bounds.right);

      if (!validBounds)
        throw new Error(
          'Bounds object is not valid. It can be: ' +
          'undefined, boolean (true|false) or an object {left, top, right, bottom}'
        );
    }

    function isNumber(x) {
      return Number.isFinite(x);
    }

    // IE 11 does not support isNaN:
    function isNaN$1(value) {
      if (Number.isNaN) {
        return Number.isNaN(value);
      }

      return value !== value;
    }

    function rigidScroll() {
      return {
        start: noop,
        stop: noop,
        cancel: noop
      };
    }

    function autoRun() {
      if (typeof document === 'undefined') return;

      var scripts = document.getElementsByTagName('script');
      if (!scripts) return;
      var panzoomScript;

      for (var i = 0; i < scripts.length; ++i) {
        var x = scripts[i];
        if (x.src && x.src.match(/\bpanzoom(\.min)?\.js/)) {
          panzoomScript = x;
          break;
        }
      }

      if (!panzoomScript) return;

      var query = panzoomScript.getAttribute('query');
      if (!query) return;

      var globalName = panzoomScript.getAttribute('name') || 'pz';
      var started = Date.now();

      tryAttach();

      function tryAttach() {
        var el = document.querySelector(query);
        if (!el) {
          var now = Date.now();
          var elapsed = now - started;
          if (elapsed < 2000) {
            // Let's wait a bit
            setTimeout(tryAttach, 100);
            return;
          }
          // If we don't attach within 2 seconds to the target element, consider it a failure
          console.error('Cannot find the panzoom element', globalName);
          return;
        }
        var options = collectOptions(panzoomScript);
        console.log(options);
        window[globalName] = createPanZoom(el, options);
      }

      function collectOptions(script) {
        var attrs = script.attributes;
        var options = {};
        for (var i = 0; i < attrs.length; ++i) {
          var attr = attrs[i];
          var nameValue = getPanzoomAttributeNameValue(attr);
          if (nameValue) {
            options[nameValue.name] = nameValue.value;
          }
        }

        return options;
      }

      function getPanzoomAttributeNameValue(attr) {
        if (!attr.name) return;
        var isPanZoomAttribute =
          attr.name[0] === 'p' && attr.name[1] === 'z' && attr.name[2] === '-';

        if (!isPanZoomAttribute) return;

        var name = attr.name.substr(3);
        var value = JSON.parse(attr.value);
        return { name: name, value: value };
      }
    }

    autoRun();

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$3) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$3) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop$3;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$3;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$3;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var GRID_PROTOCOL_VERSION_MAJOR = "1";
    var GRID_PROTOCOL_VERSION_MINOR = "1";
    var GRID_PROTOCOL_VERSION_PATCH = "9";
    var GRID_MODULE_PO16_RevB = "0";
    var GRID_MODULE_PO16_RevC = "8";
    var GRID_MODULE_BU16_RevB = "128";
    var GRID_MODULE_BU16_RevC = "136";
    var GRID_MODULE_PBF4_RevA = "64";
    var GRID_MODULE_EN16_RevA = "192";
    var GRID_MODULE_EN16_RevD = "193";
    var GRID_MODULE_EN16_ND_RevA = "200";
    var GRID_MODULE_EN16_ND_RevD = "201";
    var GRID_PARAMETER_HEARTBEAT_interval = "250";
    var GRID_PARAMETER_PING_interval = "100";
    var GRID_PARAMETER_TEXT_maxlength = "150";
    var GRID_PARAMETER_PACKET_maxlength = "400";
    var GRID_PARAMETER_PACKET_marign = "200";
    var GRID_CONST_NUL = "0x00";
    var GRID_CONST_SOH = "0x01";
    var GRID_CONST_STX = "0x02";
    var GRID_CONST_ETX = "0x03";
    var GRID_CONST_EOB = "0x17";
    var GRID_CONST_EOT = "0x04";
    var GRID_CONST_LF = "0x0A";
    var GRID_CONST_ACK = "0x06";
    var GRID_CONST_NAK = "0x15";
    var GRID_CONST_CAN = "0x18";
    var GRID_CONST_NORTH = "0x11";
    var GRID_CONST_EAST = "0x12";
    var GRID_CONST_SOUTH = "0x13";
    var GRID_CONST_WEST = "0x14";
    var GRID_CONST_DCT = "0x0E";
    var GRID_CONST_BRC = "0x0F";
    var GRID_CONST_BELL = "0x07";
    var GRID_PARAMETER_MIDI_NOTEOFF = "0x80";
    var GRID_PARAMETER_MIDI_NOTEON = "0x90";
    var GRID_PARAMETER_MIDI_CONTROLCHANGE = "0xB0";
    var GRID_PARAMETER_KEYBOARD_KEYDOWN = "128";
    var GRID_PARAMETER_KEYBOARD_KEYUP = "129";
    var GRID_PARAMETER_KEYBOARD_MODIFIER = "130";
    var GRID_PARAMETER_KEYBOARD_NOTMODIFIER = "131";
    var GRID_BRC_frame = "%c%c............%c";
    var GRID_BRC_LEN_offset = "2";
    var GRID_BRC_LEN_length = "2";
    var GRID_BRC_ID_offset = "4";
    var GRID_BRC_ID_length = "2";
    var GRID_BRC_DX_offset = "6";
    var GRID_BRC_DX_length = "2";
    var GRID_BRC_DY_offset = "8";
    var GRID_BRC_DY_length = "2";
    var GRID_BRC_AGE_offset = "10";
    var GRID_BRC_AGE_length = "2";
    var GRID_BRC_ROT_offset = "12";
    var GRID_BRC_ROT_length = "2";
    var GRID_INSTR_length = "1";
    var GRID_INSTR_offset = "4";
    var GRID_INSTR_ACKNOWLEDGE_code = "0xA";
    var GRID_INSTR_NACKNOWLEDGE_code = "0xB";
    var GRID_INSTR_CONFIGURE_code = "0xC";
    var GRID_INSTR_REPORT_code = "0xD";
    var GRID_INSTR_FETCH_code = "0xF";
    var GRID_INSTR_EXECUTE_code = "0xE";
    var GRID_CLASS_length = "3";
    var GRID_CLASS_offset = "1";
    var GRID_CLASS_MIDI_code = "0x000";
    var GRID_CLASS_MIDI_frame = "%c%03x_........%c";
    var GRID_CLASS_MIDI_CHANNEL_offset = "5";
    var GRID_CLASS_MIDI_CHANNEL_length = "2";
    var GRID_CLASS_MIDI_COMMAND_offset = "7";
    var GRID_CLASS_MIDI_COMMAND_length = "2";
    var GRID_CLASS_MIDI_PARAM1_offset = "9";
    var GRID_CLASS_MIDI_PARAM1_length = "2";
    var GRID_CLASS_MIDI_PARAM2_offset = "11";
    var GRID_CLASS_MIDI_PARAM2_length = "2";
    var GRID_CLASS_HEARTBEAT_code = "0x010";
    var GRID_CLASS_HEARTBEAT_frame = "%c%03x_..........%c";
    var GRID_CLASS_HEARTBEAT_TYPE_offset = "5";
    var GRID_CLASS_HEARTBEAT_TYPE_length = "2";
    var GRID_CLASS_HEARTBEAT_HWCFG_offset = "7";
    var GRID_CLASS_HEARTBEAT_HWCFG_length = "2";
    var GRID_CLASS_HEARTBEAT_VMAJOR_offset = "9";
    var GRID_CLASS_HEARTBEAT_VMAJOR_length = "2";
    var GRID_CLASS_HEARTBEAT_VMINOR_offset = "11";
    var GRID_CLASS_HEARTBEAT_VMINOR_length = "2";
    var GRID_CLASS_HEARTBEAT_VPATCH_offset = "13";
    var GRID_CLASS_HEARTBEAT_VPATCH_length = "2";
    var GRID_CLASS_SERIALNUMBER_code = "0x011";
    var GRID_CLASS_SERIALNUMBER_frame = "%c%03x_................................%c";
    var GRID_CLASS_SERIALNUMBER_WORD0_offset = "5";
    var GRID_CLASS_SERIALNUMBER_WORD0_length = "8";
    var GRID_CLASS_SERIALNUMBER_WORD1_offset = "13";
    var GRID_CLASS_SERIALNUMBER_WORD1_length = "8";
    var GRID_CLASS_SERIALNUMBER_WORD2_offset = "21";
    var GRID_CLASS_SERIALNUMBER_WORD2_length = "8";
    var GRID_CLASS_SERIALNUMBER_WORD3_offset = "29";
    var GRID_CLASS_SERIALNUMBER_WORD3_length = "8";
    var GRID_CLASS_RESETCAUSE_code = "0x012";
    var GRID_CLASS_RESETCAUSE_frame = "%c%03x_..%c";
    var GRID_CLASS_RESETCAUSE_CAUSE_offset = "5";
    var GRID_CLASS_RESETCAUSE_CAUSE_length = "2";
    var GRID_CLASS_RESET_code = "0x013";
    var GRID_CLASS_RESET_frame = "%c%03xe%c";
    var GRID_CLASS_UPTIME_code = "0x014";
    var GRID_CLASS_UPTIME_frame = "%c%03x_........%c";
    var GRID_CLASS_UPTIME_UPTIME_offset = "5";
    var GRID_CLASS_UPTIME_UPTIME_length = "8";
    var GRID_CLASS_DEBUGTEXT_code = "0x020";
    var GRID_CLASS_DEBUGTEXT_frame_start = "%c%03xe";
    var GRID_CLASS_DEBUGTEXT_frame_end = "%c";
    var GRID_CLASS_BANKACTIVE_code = "0x030";
    var GRID_CLASS_BANKACTIVE_format = "%c%03x%01x%02x%c";
    var GRID_CLASS_BANKACTIVE_frame = "%c%03x_..%c";
    var GRID_CLASS_BANKACTIVE_BANKNUMBER_offset = "5";
    var GRID_CLASS_BANKACTIVE_BANKNUMBER_length = "2";
    var GRID_CLASS_BANKENABLED_code = "0x031";
    var GRID_CLASS_BANKENABLED_frame = "%c%03x_....%c";
    var GRID_CLASS_BANKENABLED_BANKNUMBER_offset = "5";
    var GRID_CLASS_BANKENABLED_BANKNUMBER_length = "2";
    var GRID_CLASS_BANKENABLED_ISENABLED_offset = "7";
    var GRID_CLASS_BANKENABLED_ISENABLED_length = "2";
    var GRID_CLASS_BANKCOLOR_code = "0x032";
    var GRID_CLASS_BANKCOLOR_frame = "%c%03x_........%c";
    var GRID_CLASS_BANKCOLOR_NUM_offset = "5";
    var GRID_CLASS_BANKCOLOR_NUM_length = "2";
    var GRID_CLASS_BANKCOLOR_RED_offset = "7";
    var GRID_CLASS_BANKCOLOR_RED_length = "2";
    var GRID_CLASS_BANKCOLOR_GRE_offset = "9";
    var GRID_CLASS_BANKCOLOR_GRE_length = "2";
    var GRID_CLASS_BANKCOLOR_BLU_offset = "11";
    var GRID_CLASS_BANKCOLOR_BLU_length = "2";
    var GRID_CLASS_LEDPHASE_code = "0x040";
    var GRID_CLASS_LEDPHASE_format = "%c%03x%01x%02x%02x%02x%c";
    var GRID_CLASS_LEDPHASE_frame = "%c%03x_......%c";
    var GRID_CLASS_LEDPHASE_NUM_offset = "5";
    var GRID_CLASS_LEDPHASE_NUM_length = "2";
    var GRID_CLASS_LEDPHASE_LAY_offset = "7";
    var GRID_CLASS_LEDPHASE_LAY_length = "2";
    var GRID_CLASS_LEDPHASE_PHA_offset = "9";
    var GRID_CLASS_LEDPHASE_PHA_length = "2";
    var GRID_CLASS_LEDCOLOR_code = "0x041";
    var GRID_CLASS_LEDCOLOR_format = "%c%03x%01x%02x%02x%02x%02x%02x%c";
    var GRID_CLASS_LEDCOLOR_frame = "%c%03x_..........%c";
    var GRID_CLASS_LEDCOLOR_NUM_offset = "5";
    var GRID_CLASS_LEDCOLOR_NUM_length = "2";
    var GRID_CLASS_LEDCOLOR_LAY_offset = "7";
    var GRID_CLASS_LEDCOLOR_LAY_length = "2";
    var GRID_CLASS_LEDCOLOR_RED_offset = "9";
    var GRID_CLASS_LEDCOLOR_RED_length = "2";
    var GRID_CLASS_LEDCOLOR_GRE_offset = "11";
    var GRID_CLASS_LEDCOLOR_GRE_length = "2";
    var GRID_CLASS_LEDCOLOR_BLU_offset = "13";
    var GRID_CLASS_LEDCOLOR_BLU_length = "2";
    var GRID_CLASS_LEDPREVIEW_code = "0x042";
    var GRID_CLASS_LEDPREVIEW_frame = "%c%03x_............%c";
    var GRID_CLASS_LEDPREVIEW_frame_start = "%c%03x_....";
    var GRID_CLASS_LEDPREVIEW_frame_end = "%c";
    var GRID_CLASS_LEDPREVIEW_LENGTH_offset = "5";
    var GRID_CLASS_LEDPREVIEW_LENGTH_length = "4";
    var GRID_CLASS_LEDPREVIEW_NUM_offset = "9";
    var GRID_CLASS_LEDPREVIEW_NUM_length = "2";
    var GRID_CLASS_LEDPREVIEW_RED_offset = "11";
    var GRID_CLASS_LEDPREVIEW_RED_length = "2";
    var GRID_CLASS_LEDPREVIEW_GRE_offset = "13";
    var GRID_CLASS_LEDPREVIEW_GRE_length = "2";
    var GRID_CLASS_LEDPREVIEW_BLU_offset = "15";
    var GRID_CLASS_LEDPREVIEW_BLU_length = "2";
    var GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH = "20";
    var GRID_LUA_FNC_G_LED_PHASE_short = "glp";
    var GRID_LUA_FNC_G_LED_PHASE_human = "led_value";
    var GRID_LUA_FNC_G_LED_PHASE_fnptr = "l_grid_led_set_phase";
    var GRID_LUA_FNC_G_LED_MIN_short = "gln";
    var GRID_LUA_FNC_G_LED_MIN_human = "led_color_min";
    var GRID_LUA_FNC_G_LED_MIN_fnptr = "l_grid_led_set_min";
    var GRID_LUA_FNC_G_LED_MID_short = "gld";
    var GRID_LUA_FNC_G_LED_MID_human = "led_color_mid";
    var GRID_LUA_FNC_G_LED_MID_fnptr = "l_grid_led_set_mid";
    var GRID_LUA_FNC_G_LED_MAX_short = "glx";
    var GRID_LUA_FNC_G_LED_MAX_human = "led_color_max";
    var GRID_LUA_FNC_G_LED_MAX_fnptr = "l_grid_led_set_max";
    var GRID_LUA_FNC_G_LED_COLOR_short = "glc";
    var GRID_LUA_FNC_G_LED_COLOR_human = "led_color";
    var GRID_LUA_FNC_G_LED_COLOR_fnptr = "l_grid_led_set_color";
    var GRID_LUA_FNC_G_LED_FREQUENCY_short = "glf";
    var GRID_LUA_FNC_G_LED_FREQUENCY_human = "led_animation_rate";
    var GRID_LUA_FNC_G_LED_FREQUENCY_fnptr = "l_grid_led_set_frequency";
    var GRID_LUA_FNC_G_LED_SHAPE_short = "gls";
    var GRID_LUA_FNC_G_LED_SHAPE_human = "led_animation_type";
    var GRID_LUA_FNC_G_LED_SHAPE_fnptr = "l_grid_led_set_phase";
    var GRID_LUA_FNC_G_LED_PSF_short = "glpfs";
    var GRID_LUA_FNC_G_LED_PSF_human = "led_animation_phase_rate_type";
    var GRID_LUA_FNC_G_LED_PSF_fnptr = "l_grid_led_set_pfs";
    var GRID_LUA_FNC_G_MIDI_SEND_short = "gms";
    var GRID_LUA_FNC_G_MIDI_SEND_human = "midi_send";
    var GRID_LUA_FNC_G_MIDI_SEND_fnptr = "l_grid_midi_send";
    var GRID_LUA_FNC_E_ELEMENT_INDEX_index = "0";
    var GRID_LUA_FNC_E_ELEMENT_INDEX_helper = "0";
    var GRID_LUA_FNC_E_ELEMENT_INDEX_short = "ind";
    var GRID_LUA_FNC_E_ELEMENT_INDEX_human = "element_index";
    var GRID_LUA_FNC_E_BUTTON_NUMBER_index = "1";
    var GRID_LUA_FNC_E_BUTTON_NUMBER_helper = "1";
    var GRID_LUA_FNC_E_BUTTON_NUMBER_short = "bnu";
    var GRID_LUA_FNC_E_BUTTON_NUMBER_human = "button_number";
    var GRID_LUA_FNC_E_BUTTON_VALUE_index = "2";
    var GRID_LUA_FNC_E_BUTTON_VALUE_helper = "2";
    var GRID_LUA_FNC_E_BUTTON_VALUE_short = "bva";
    var GRID_LUA_FNC_E_BUTTON_VALUE_human = "button_value";
    var GRID_LUA_FNC_E_BUTTON_MIN_index = "3";
    var GRID_LUA_FNC_E_BUTTON_MIN_helper = "3";
    var GRID_LUA_FNC_E_BUTTON_MIN_short = "bmi";
    var GRID_LUA_FNC_E_BUTTON_MIN_human = "button_min";
    var GRID_LUA_FNC_E_BUTTON_MAX_index = "4";
    var GRID_LUA_FNC_E_BUTTON_MAX_helper = "4";
    var GRID_LUA_FNC_E_BUTTON_MAX_short = "bma";
    var GRID_LUA_FNC_E_BUTTON_MAX_human = "button_max";
    var GRID_LUA_FNC_E_BUTTON_MODE_index = "5";
    var GRID_LUA_FNC_E_BUTTON_MODE_helper = "5";
    var GRID_LUA_FNC_E_BUTTON_MODE_short = "bmo";
    var GRID_LUA_FNC_E_BUTTON_MODE_human = "button_mode";
    var GRID_LUA_FNC_E_BUTTON_ELAPSED_index = "6";
    var GRID_LUA_FNC_E_BUTTON_ELAPSED_helper = "6";
    var GRID_LUA_FNC_E_BUTTON_ELAPSED_short = "bel";
    var GRID_LUA_FNC_E_BUTTON_ELAPSED_human = "button_elapsed_time";
    var GRID_LUA_FNC_E_BUTTON_STATE_index = "7";
    var GRID_LUA_FNC_E_BUTTON_STATE_helper = "7";
    var GRID_LUA_FNC_E_BUTTON_STATE_short = "bst";
    var GRID_LUA_FNC_E_BUTTON_STATE_human = "button_state";
    var GRID_LUA_FNC_E_ENCODER_NUMBER_index = "8";
    var GRID_LUA_FNC_E_ENCODER_NUMBER_helper = "8";
    var GRID_LUA_FNC_E_ENCODER_NUMBER_short = "enu";
    var GRID_LUA_FNC_E_ENCODER_NUMBER_human = "encoder_number";
    var GRID_LUA_FNC_E_ENCODER_VALUE_index = "9";
    var GRID_LUA_FNC_E_ENCODER_VALUE_helper = "9";
    var GRID_LUA_FNC_E_ENCODER_VALUE_short = "eva";
    var GRID_LUA_FNC_E_ENCODER_VALUE_human = "encoder_value";
    var GRID_LUA_FNC_E_ENCODER_MIN_index = "10";
    var GRID_LUA_FNC_E_ENCODER_MIN_helper = "10";
    var GRID_LUA_FNC_E_ENCODER_MIN_short = "emi";
    var GRID_LUA_FNC_E_ENCODER_MIN_human = "encoder_min";
    var GRID_LUA_FNC_E_ENCODER_MAX_index = "11";
    var GRID_LUA_FNC_E_ENCODER_MAX_helper = "11";
    var GRID_LUA_FNC_E_ENCODER_MAX_short = "ema";
    var GRID_LUA_FNC_E_ENCODER_MAX_human = "encoder_max";
    var GRID_LUA_FNC_E_ENCODER_MODE_index = "12";
    var GRID_LUA_FNC_E_ENCODER_MODE_helper = "12";
    var GRID_LUA_FNC_E_ENCODER_MODE_short = "emo";
    var GRID_LUA_FNC_E_ENCODER_MODE_human = "encoder_mode";
    var GRID_LUA_FNC_E_ENCODER_ELAPSED_index = "13";
    var GRID_LUA_FNC_E_ENCODER_ELAPSED_helper = "13";
    var GRID_LUA_FNC_E_ENCODER_ELAPSED_short = "eel";
    var GRID_LUA_FNC_E_ENCODER_ELAPSED_human = "encoder_elapsed_time";
    var GRID_LUA_FNC_E_LIST_length = "14";
    var GRID_LUA_E_LIST_init = "init_encoder";
    var GRID_LUA_FNC_P_ELEMENT_INDEX_index = "0";
    var GRID_LUA_FNC_P_ELEMENT_INDEX_helper = "0";
    var GRID_LUA_FNC_P_ELEMENT_INDEX_short = "ind";
    var GRID_LUA_FNC_P_ELEMENT_INDEX_human = "element_index";
    var GRID_LUA_FNC_P_POTMETER_NUMBER_index = "1";
    var GRID_LUA_FNC_P_POTMETER_NUMBER_helper = "1";
    var GRID_LUA_FNC_P_POTMETER_NUMBER_short = "pnu";
    var GRID_LUA_FNC_P_POTMETER_NUMBER_human = "potmeter_number";
    var GRID_LUA_FNC_P_POTMETER_VALUE_index = "2";
    var GRID_LUA_FNC_P_POTMETER_VALUE_helper = "2";
    var GRID_LUA_FNC_P_POTMETER_VALUE_short = "pva";
    var GRID_LUA_FNC_P_POTMETER_VALUE_human = "potmeter_value";
    var GRID_LUA_FNC_P_POTMETER_MIN_index = "3";
    var GRID_LUA_FNC_P_POTMETER_MIN_helper = "3";
    var GRID_LUA_FNC_P_POTMETER_MIN_short = "pmi";
    var GRID_LUA_FNC_P_POTMETER_MIN_human = "potmeter_min";
    var GRID_LUA_FNC_P_POTMETER_MAX_index = "4";
    var GRID_LUA_FNC_P_POTMETER_MAX_helper = "4";
    var GRID_LUA_FNC_P_POTMETER_MAX_short = "pma";
    var GRID_LUA_FNC_P_POTMETER_MAX_human = "potmeter_max";
    var GRID_LUA_FNC_P_POTMETER_MODE_index = "5";
    var GRID_LUA_FNC_P_POTMETER_MODE_helper = "5";
    var GRID_LUA_FNC_P_POTMETER_MODE_short = "pmo";
    var GRID_LUA_FNC_P_POTMETER_MODE_human = "potmeter_resolution";
    var GRID_LUA_FNC_P_POTMETER_ELAPSED_index = "6";
    var GRID_LUA_FNC_P_POTMETER_ELAPSED_helper = "6";
    var GRID_LUA_FNC_P_POTMETER_ELAPSED_short = "pel";
    var GRID_LUA_FNC_P_POTMETER_ELAPSED_human = "potmeter_elapsed_time";
    var GRID_LUA_FNC_P_LIST_length = "7";
    var GRID_LUA_P_LIST_init = "init_potmeter";
    var GRID_LUA_FNC_B_ELEMENT_INDEX_index = "0";
    var GRID_LUA_FNC_B_ELEMENT_INDEX_helper = "0";
    var GRID_LUA_FNC_B_ELEMENT_INDEX_short = "ind";
    var GRID_LUA_FNC_B_ELEMENT_INDEX_human = "element_index";
    var GRID_LUA_FNC_B_BUTTON_NUMBER_index = "1";
    var GRID_LUA_FNC_B_BUTTON_NUMBER_helper = "1";
    var GRID_LUA_FNC_B_BUTTON_NUMBER_short = "bnu";
    var GRID_LUA_FNC_B_BUTTON_NUMBER_human = "button_number";
    var GRID_LUA_FNC_B_BUTTON_VALUE_index = "2";
    var GRID_LUA_FNC_B_BUTTON_VALUE_helper = "2";
    var GRID_LUA_FNC_B_BUTTON_VALUE_short = "bva";
    var GRID_LUA_FNC_B_BUTTON_VALUE_human = "button_value";
    var GRID_LUA_FNC_B_BUTTON_MIN_index = "3";
    var GRID_LUA_FNC_B_BUTTON_MIN_helper = "3";
    var GRID_LUA_FNC_B_BUTTON_MIN_short = "bmi";
    var GRID_LUA_FNC_B_BUTTON_MIN_human = "button_min";
    var GRID_LUA_FNC_B_BUTTON_MAX_index = "4";
    var GRID_LUA_FNC_B_BUTTON_MAX_helper = "4";
    var GRID_LUA_FNC_B_BUTTON_MAX_short = "bma";
    var GRID_LUA_FNC_B_BUTTON_MAX_human = "button_max";
    var GRID_LUA_FNC_B_BUTTON_MODE_index = "5";
    var GRID_LUA_FNC_B_BUTTON_MODE_helper = "5";
    var GRID_LUA_FNC_B_BUTTON_MODE_short = "bmo";
    var GRID_LUA_FNC_B_BUTTON_MODE_human = "button_resolution";
    var GRID_LUA_FNC_B_BUTTON_ELAPSED_index = "6";
    var GRID_LUA_FNC_B_BUTTON_ELAPSED_helper = "6";
    var GRID_LUA_FNC_B_BUTTON_ELAPSED_short = "bel";
    var GRID_LUA_FNC_B_BUTTON_ELAPSED_human = "button_elapsed_time";
    var GRID_LUA_FNC_B_BUTTON_STATE_index = "7";
    var GRID_LUA_FNC_B_BUTTON_STATE_helper = "7";
    var GRID_LUA_FNC_B_BUTTON_STATE_short = "bst";
    var GRID_LUA_FNC_B_BUTTON_STATE_human = "button_state";
    var GRID_LUA_FNC_B_LIST_length = "8";
    var GRID_LUA_B_LIST_init = "init_button";
    var GRID_LUA_KW_ELEMENT_short = "ele";
    var GRID_LUA_KW_THIS_short = "this";
    var GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH = "6";
    var GRID_PARAMETER_ELEMENTTYPE_SYSTEM_code = "00";
    var GRID_PARAMETER_ELEMENTTYPE_POTENTIOMETER_code = "01";
    var GRID_PARAMETER_ELEMENTTYPE_BUTTON_code = "02";
    var GRID_PARAMETER_ELEMENTTYPE_ENCODER_code = "03";
    var GRID_CLASS_EVENT_code = "0x050";
    var GRID_CLASS_EVENT_frame = "%c%03x_........%c";
    var GRID_CLASS_EVENT_BANKNUMBER_offset = "5";
    var GRID_CLASS_EVENT_BANKNUMBER_length = "2";
    var GRID_CLASS_EVENT_ELEMENTNUMBER_offset = "7";
    var GRID_CLASS_EVENT_ELEMENTNUMBER_length = "2";
    var GRID_CLASS_EVENT_EVENTTYPE_offset = "9";
    var GRID_CLASS_EVENT_EVENTTYPE_length = "2";
    var GRID_CLASS_EVENT_EVENTPARAM_offset = "11";
    var GRID_CLASS_EVENT_EVENTPARAM_length = "2";
    var GRID_CLASS_GLOBALSTORE_code = "0x060";
    var GRID_CLASS_GLOBALSTORE_frame = "%c%03xe%c";
    var GRID_CLASS_GLOBALLOAD_code = "0x061";
    var GRID_CLASS_GLOBALLOAD_frame = "%c%03xe%c";
    var GRID_CLASS_GLOBALCLEAR_code = "0x062";
    var GRID_CLASS_GLOBALCLEAR_frame = "%c%03xe%c";
    var GRID_CLASS_GLOBALRECALL_code = "0x063";
    var GRID_CLASS_GLOBALRECALL_frame = "%c%03xe..%c";
    var GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset = "5";
    var GRID_CLASS_GLOBALRECALL_BANKNUMBER_length = "2";
    var GRID_CLASS_LOCALSTORE_code = "0x070";
    var GRID_CLASS_LOCALSTORE_frame = "%c%03xe%c";
    var GRID_CLASS_LOCALLOAD_code = "0x071";
    var GRID_CLASS_LOCALLOAD_frame = "%c%03xe%c";
    var GRID_CLASS_LOCALCLEAR_code = "0x072";
    var GRID_CLASS_LOCALCLEAR_frame = "%c%03xe%c";
    var GRID_CLASS_CONFIGURATION_code = "0x080";
    var GRID_CLASS_CONFIGURATION_frame = "%c%03x_......%c";
    var GRID_CLASS_CONFIGURATION_frame_start = "%c%03x_......";
    var GRID_CLASS_CONFIGURATION_frame_end = "%c";
    var GRID_CLASS_CONFIGURATION_BANKNUMBER_offset = "5";
    var GRID_CLASS_CONFIGURATION_BANKNUMBER_length = "2";
    var GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset = "7";
    var GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length = "2";
    var GRID_CLASS_CONFIGURATION_EVENTTYPE_offset = "9";
    var GRID_CLASS_CONFIGURATION_EVENTTYPE_length = "2";
    var GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset = "11";
    var GRID_CLASS_CONFIGURATION_ACTIONSTRING_length = "0";
    var GRID_CLASS_CONFIGDEFAULT_code = "0x081";
    var GRID_CLASS_CONFIGDEFAULT_frame = "%c%03x_......%c";
    var GRID_CLASS_CONFIGDEFAULT_frame_start = "%c%03x_......";
    var GRID_CLASS_CONFIGDEFAULT_frame_end = "%c";
    var GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset = "5";
    var GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_length = "2";
    var GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset = "7";
    var GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_length = "2";
    var GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset = "9";
    var GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_length = "2";
    var GRID_CLASS_CONFIG_code = "0x082";
    var GRID_CLASS_CONFIG_frame = "%c%03x_..........%c";
    var GRID_CLASS_CONFIG_frame_start = "%c%03x_..........";
    var GRID_CLASS_CONFIG_frame_end = "%c";
    var GRID_CLASS_CONFIG_PAGENUMBER_offset = "5";
    var GRID_CLASS_CONFIG_PAGENUMBER_length = "2";
    var GRID_CLASS_CONFIG_ELEMENTNUMBER_offset = "7";
    var GRID_CLASS_CONFIG_ELEMENTNUMBER_length = "2";
    var GRID_CLASS_CONFIG_EVENTTYPE_offset = "9";
    var GRID_CLASS_CONFIG_EVENTTYPE_length = "2";
    var GRID_CLASS_CONFIG_ACTIONLENGTH_offset = "11";
    var GRID_CLASS_CONFIG_ACTIONLENGTH_length = "4";
    var GRID_CLASS_CONFIG_ACTIONSTRING_offset = "15";
    var GRID_CLASS_CONFIG_ACTIONSTRING_length = "0";
    var GRID_CLASS_HIDKEYSTATUS_code = "0x090";
    var GRID_CLASS_HIDKEYSTATUS_frame = "%c%03x_..%c";
    var GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset = "5";
    var GRID_CLASS_HIDKEYSTATUS_ISENABLED_length = "2";
    var GRID_CLASS_HIDKEYBOARD_code = "0x091";
    var GRID_CLASS_HIDKEYBOARD_frame = "%c%03x_....%c";
    var GRID_CLASS_HIDKEYBOARD_frame_start = "%c%03x_";
    var GRID_CLASS_HIDKEYBOARD_frame_end = "%c";
    var GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset = "5";
    var GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length = "1";
    var GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset = "6";
    var GRID_CLASS_HIDKEYBOARD_KEYSTATE_length = "1";
    var GRID_CLASS_HIDKEYBOARD_KEYCODE_offset = "7";
    var GRID_CLASS_HIDKEYBOARD_KEYCODE_length = "2";
    var grid_protocol_nightly = {
    	GRID_PROTOCOL_VERSION_MAJOR: GRID_PROTOCOL_VERSION_MAJOR,
    	GRID_PROTOCOL_VERSION_MINOR: GRID_PROTOCOL_VERSION_MINOR,
    	GRID_PROTOCOL_VERSION_PATCH: GRID_PROTOCOL_VERSION_PATCH,
    	GRID_MODULE_PO16_RevB: GRID_MODULE_PO16_RevB,
    	GRID_MODULE_PO16_RevC: GRID_MODULE_PO16_RevC,
    	GRID_MODULE_BU16_RevB: GRID_MODULE_BU16_RevB,
    	GRID_MODULE_BU16_RevC: GRID_MODULE_BU16_RevC,
    	GRID_MODULE_PBF4_RevA: GRID_MODULE_PBF4_RevA,
    	GRID_MODULE_EN16_RevA: GRID_MODULE_EN16_RevA,
    	GRID_MODULE_EN16_RevD: GRID_MODULE_EN16_RevD,
    	GRID_MODULE_EN16_ND_RevA: GRID_MODULE_EN16_ND_RevA,
    	GRID_MODULE_EN16_ND_RevD: GRID_MODULE_EN16_ND_RevD,
    	GRID_PARAMETER_HEARTBEAT_interval: GRID_PARAMETER_HEARTBEAT_interval,
    	GRID_PARAMETER_PING_interval: GRID_PARAMETER_PING_interval,
    	GRID_PARAMETER_TEXT_maxlength: GRID_PARAMETER_TEXT_maxlength,
    	GRID_PARAMETER_PACKET_maxlength: GRID_PARAMETER_PACKET_maxlength,
    	GRID_PARAMETER_PACKET_marign: GRID_PARAMETER_PACKET_marign,
    	GRID_CONST_NUL: GRID_CONST_NUL,
    	GRID_CONST_SOH: GRID_CONST_SOH,
    	GRID_CONST_STX: GRID_CONST_STX,
    	GRID_CONST_ETX: GRID_CONST_ETX,
    	GRID_CONST_EOB: GRID_CONST_EOB,
    	GRID_CONST_EOT: GRID_CONST_EOT,
    	GRID_CONST_LF: GRID_CONST_LF,
    	GRID_CONST_ACK: GRID_CONST_ACK,
    	GRID_CONST_NAK: GRID_CONST_NAK,
    	GRID_CONST_CAN: GRID_CONST_CAN,
    	GRID_CONST_NORTH: GRID_CONST_NORTH,
    	GRID_CONST_EAST: GRID_CONST_EAST,
    	GRID_CONST_SOUTH: GRID_CONST_SOUTH,
    	GRID_CONST_WEST: GRID_CONST_WEST,
    	GRID_CONST_DCT: GRID_CONST_DCT,
    	GRID_CONST_BRC: GRID_CONST_BRC,
    	GRID_CONST_BELL: GRID_CONST_BELL,
    	GRID_PARAMETER_MIDI_NOTEOFF: GRID_PARAMETER_MIDI_NOTEOFF,
    	GRID_PARAMETER_MIDI_NOTEON: GRID_PARAMETER_MIDI_NOTEON,
    	GRID_PARAMETER_MIDI_CONTROLCHANGE: GRID_PARAMETER_MIDI_CONTROLCHANGE,
    	GRID_PARAMETER_KEYBOARD_KEYDOWN: GRID_PARAMETER_KEYBOARD_KEYDOWN,
    	GRID_PARAMETER_KEYBOARD_KEYUP: GRID_PARAMETER_KEYBOARD_KEYUP,
    	GRID_PARAMETER_KEYBOARD_MODIFIER: GRID_PARAMETER_KEYBOARD_MODIFIER,
    	GRID_PARAMETER_KEYBOARD_NOTMODIFIER: GRID_PARAMETER_KEYBOARD_NOTMODIFIER,
    	GRID_BRC_frame: GRID_BRC_frame,
    	GRID_BRC_LEN_offset: GRID_BRC_LEN_offset,
    	GRID_BRC_LEN_length: GRID_BRC_LEN_length,
    	GRID_BRC_ID_offset: GRID_BRC_ID_offset,
    	GRID_BRC_ID_length: GRID_BRC_ID_length,
    	GRID_BRC_DX_offset: GRID_BRC_DX_offset,
    	GRID_BRC_DX_length: GRID_BRC_DX_length,
    	GRID_BRC_DY_offset: GRID_BRC_DY_offset,
    	GRID_BRC_DY_length: GRID_BRC_DY_length,
    	GRID_BRC_AGE_offset: GRID_BRC_AGE_offset,
    	GRID_BRC_AGE_length: GRID_BRC_AGE_length,
    	GRID_BRC_ROT_offset: GRID_BRC_ROT_offset,
    	GRID_BRC_ROT_length: GRID_BRC_ROT_length,
    	GRID_INSTR_length: GRID_INSTR_length,
    	GRID_INSTR_offset: GRID_INSTR_offset,
    	GRID_INSTR_ACKNOWLEDGE_code: GRID_INSTR_ACKNOWLEDGE_code,
    	GRID_INSTR_NACKNOWLEDGE_code: GRID_INSTR_NACKNOWLEDGE_code,
    	GRID_INSTR_CONFIGURE_code: GRID_INSTR_CONFIGURE_code,
    	GRID_INSTR_REPORT_code: GRID_INSTR_REPORT_code,
    	GRID_INSTR_FETCH_code: GRID_INSTR_FETCH_code,
    	GRID_INSTR_EXECUTE_code: GRID_INSTR_EXECUTE_code,
    	GRID_CLASS_length: GRID_CLASS_length,
    	GRID_CLASS_offset: GRID_CLASS_offset,
    	GRID_CLASS_MIDI_code: GRID_CLASS_MIDI_code,
    	GRID_CLASS_MIDI_frame: GRID_CLASS_MIDI_frame,
    	GRID_CLASS_MIDI_CHANNEL_offset: GRID_CLASS_MIDI_CHANNEL_offset,
    	GRID_CLASS_MIDI_CHANNEL_length: GRID_CLASS_MIDI_CHANNEL_length,
    	GRID_CLASS_MIDI_COMMAND_offset: GRID_CLASS_MIDI_COMMAND_offset,
    	GRID_CLASS_MIDI_COMMAND_length: GRID_CLASS_MIDI_COMMAND_length,
    	GRID_CLASS_MIDI_PARAM1_offset: GRID_CLASS_MIDI_PARAM1_offset,
    	GRID_CLASS_MIDI_PARAM1_length: GRID_CLASS_MIDI_PARAM1_length,
    	GRID_CLASS_MIDI_PARAM2_offset: GRID_CLASS_MIDI_PARAM2_offset,
    	GRID_CLASS_MIDI_PARAM2_length: GRID_CLASS_MIDI_PARAM2_length,
    	GRID_CLASS_HEARTBEAT_code: GRID_CLASS_HEARTBEAT_code,
    	GRID_CLASS_HEARTBEAT_frame: GRID_CLASS_HEARTBEAT_frame,
    	GRID_CLASS_HEARTBEAT_TYPE_offset: GRID_CLASS_HEARTBEAT_TYPE_offset,
    	GRID_CLASS_HEARTBEAT_TYPE_length: GRID_CLASS_HEARTBEAT_TYPE_length,
    	GRID_CLASS_HEARTBEAT_HWCFG_offset: GRID_CLASS_HEARTBEAT_HWCFG_offset,
    	GRID_CLASS_HEARTBEAT_HWCFG_length: GRID_CLASS_HEARTBEAT_HWCFG_length,
    	GRID_CLASS_HEARTBEAT_VMAJOR_offset: GRID_CLASS_HEARTBEAT_VMAJOR_offset,
    	GRID_CLASS_HEARTBEAT_VMAJOR_length: GRID_CLASS_HEARTBEAT_VMAJOR_length,
    	GRID_CLASS_HEARTBEAT_VMINOR_offset: GRID_CLASS_HEARTBEAT_VMINOR_offset,
    	GRID_CLASS_HEARTBEAT_VMINOR_length: GRID_CLASS_HEARTBEAT_VMINOR_length,
    	GRID_CLASS_HEARTBEAT_VPATCH_offset: GRID_CLASS_HEARTBEAT_VPATCH_offset,
    	GRID_CLASS_HEARTBEAT_VPATCH_length: GRID_CLASS_HEARTBEAT_VPATCH_length,
    	GRID_CLASS_SERIALNUMBER_code: GRID_CLASS_SERIALNUMBER_code,
    	GRID_CLASS_SERIALNUMBER_frame: GRID_CLASS_SERIALNUMBER_frame,
    	GRID_CLASS_SERIALNUMBER_WORD0_offset: GRID_CLASS_SERIALNUMBER_WORD0_offset,
    	GRID_CLASS_SERIALNUMBER_WORD0_length: GRID_CLASS_SERIALNUMBER_WORD0_length,
    	GRID_CLASS_SERIALNUMBER_WORD1_offset: GRID_CLASS_SERIALNUMBER_WORD1_offset,
    	GRID_CLASS_SERIALNUMBER_WORD1_length: GRID_CLASS_SERIALNUMBER_WORD1_length,
    	GRID_CLASS_SERIALNUMBER_WORD2_offset: GRID_CLASS_SERIALNUMBER_WORD2_offset,
    	GRID_CLASS_SERIALNUMBER_WORD2_length: GRID_CLASS_SERIALNUMBER_WORD2_length,
    	GRID_CLASS_SERIALNUMBER_WORD3_offset: GRID_CLASS_SERIALNUMBER_WORD3_offset,
    	GRID_CLASS_SERIALNUMBER_WORD3_length: GRID_CLASS_SERIALNUMBER_WORD3_length,
    	GRID_CLASS_RESETCAUSE_code: GRID_CLASS_RESETCAUSE_code,
    	GRID_CLASS_RESETCAUSE_frame: GRID_CLASS_RESETCAUSE_frame,
    	GRID_CLASS_RESETCAUSE_CAUSE_offset: GRID_CLASS_RESETCAUSE_CAUSE_offset,
    	GRID_CLASS_RESETCAUSE_CAUSE_length: GRID_CLASS_RESETCAUSE_CAUSE_length,
    	GRID_CLASS_RESET_code: GRID_CLASS_RESET_code,
    	GRID_CLASS_RESET_frame: GRID_CLASS_RESET_frame,
    	GRID_CLASS_UPTIME_code: GRID_CLASS_UPTIME_code,
    	GRID_CLASS_UPTIME_frame: GRID_CLASS_UPTIME_frame,
    	GRID_CLASS_UPTIME_UPTIME_offset: GRID_CLASS_UPTIME_UPTIME_offset,
    	GRID_CLASS_UPTIME_UPTIME_length: GRID_CLASS_UPTIME_UPTIME_length,
    	GRID_CLASS_DEBUGTEXT_code: GRID_CLASS_DEBUGTEXT_code,
    	GRID_CLASS_DEBUGTEXT_frame_start: GRID_CLASS_DEBUGTEXT_frame_start,
    	GRID_CLASS_DEBUGTEXT_frame_end: GRID_CLASS_DEBUGTEXT_frame_end,
    	GRID_CLASS_BANKACTIVE_code: GRID_CLASS_BANKACTIVE_code,
    	GRID_CLASS_BANKACTIVE_format: GRID_CLASS_BANKACTIVE_format,
    	GRID_CLASS_BANKACTIVE_frame: GRID_CLASS_BANKACTIVE_frame,
    	GRID_CLASS_BANKACTIVE_BANKNUMBER_offset: GRID_CLASS_BANKACTIVE_BANKNUMBER_offset,
    	GRID_CLASS_BANKACTIVE_BANKNUMBER_length: GRID_CLASS_BANKACTIVE_BANKNUMBER_length,
    	GRID_CLASS_BANKENABLED_code: GRID_CLASS_BANKENABLED_code,
    	GRID_CLASS_BANKENABLED_frame: GRID_CLASS_BANKENABLED_frame,
    	GRID_CLASS_BANKENABLED_BANKNUMBER_offset: GRID_CLASS_BANKENABLED_BANKNUMBER_offset,
    	GRID_CLASS_BANKENABLED_BANKNUMBER_length: GRID_CLASS_BANKENABLED_BANKNUMBER_length,
    	GRID_CLASS_BANKENABLED_ISENABLED_offset: GRID_CLASS_BANKENABLED_ISENABLED_offset,
    	GRID_CLASS_BANKENABLED_ISENABLED_length: GRID_CLASS_BANKENABLED_ISENABLED_length,
    	GRID_CLASS_BANKCOLOR_code: GRID_CLASS_BANKCOLOR_code,
    	GRID_CLASS_BANKCOLOR_frame: GRID_CLASS_BANKCOLOR_frame,
    	GRID_CLASS_BANKCOLOR_NUM_offset: GRID_CLASS_BANKCOLOR_NUM_offset,
    	GRID_CLASS_BANKCOLOR_NUM_length: GRID_CLASS_BANKCOLOR_NUM_length,
    	GRID_CLASS_BANKCOLOR_RED_offset: GRID_CLASS_BANKCOLOR_RED_offset,
    	GRID_CLASS_BANKCOLOR_RED_length: GRID_CLASS_BANKCOLOR_RED_length,
    	GRID_CLASS_BANKCOLOR_GRE_offset: GRID_CLASS_BANKCOLOR_GRE_offset,
    	GRID_CLASS_BANKCOLOR_GRE_length: GRID_CLASS_BANKCOLOR_GRE_length,
    	GRID_CLASS_BANKCOLOR_BLU_offset: GRID_CLASS_BANKCOLOR_BLU_offset,
    	GRID_CLASS_BANKCOLOR_BLU_length: GRID_CLASS_BANKCOLOR_BLU_length,
    	GRID_CLASS_LEDPHASE_code: GRID_CLASS_LEDPHASE_code,
    	GRID_CLASS_LEDPHASE_format: GRID_CLASS_LEDPHASE_format,
    	GRID_CLASS_LEDPHASE_frame: GRID_CLASS_LEDPHASE_frame,
    	GRID_CLASS_LEDPHASE_NUM_offset: GRID_CLASS_LEDPHASE_NUM_offset,
    	GRID_CLASS_LEDPHASE_NUM_length: GRID_CLASS_LEDPHASE_NUM_length,
    	GRID_CLASS_LEDPHASE_LAY_offset: GRID_CLASS_LEDPHASE_LAY_offset,
    	GRID_CLASS_LEDPHASE_LAY_length: GRID_CLASS_LEDPHASE_LAY_length,
    	GRID_CLASS_LEDPHASE_PHA_offset: GRID_CLASS_LEDPHASE_PHA_offset,
    	GRID_CLASS_LEDPHASE_PHA_length: GRID_CLASS_LEDPHASE_PHA_length,
    	GRID_CLASS_LEDCOLOR_code: GRID_CLASS_LEDCOLOR_code,
    	GRID_CLASS_LEDCOLOR_format: GRID_CLASS_LEDCOLOR_format,
    	GRID_CLASS_LEDCOLOR_frame: GRID_CLASS_LEDCOLOR_frame,
    	GRID_CLASS_LEDCOLOR_NUM_offset: GRID_CLASS_LEDCOLOR_NUM_offset,
    	GRID_CLASS_LEDCOLOR_NUM_length: GRID_CLASS_LEDCOLOR_NUM_length,
    	GRID_CLASS_LEDCOLOR_LAY_offset: GRID_CLASS_LEDCOLOR_LAY_offset,
    	GRID_CLASS_LEDCOLOR_LAY_length: GRID_CLASS_LEDCOLOR_LAY_length,
    	GRID_CLASS_LEDCOLOR_RED_offset: GRID_CLASS_LEDCOLOR_RED_offset,
    	GRID_CLASS_LEDCOLOR_RED_length: GRID_CLASS_LEDCOLOR_RED_length,
    	GRID_CLASS_LEDCOLOR_GRE_offset: GRID_CLASS_LEDCOLOR_GRE_offset,
    	GRID_CLASS_LEDCOLOR_GRE_length: GRID_CLASS_LEDCOLOR_GRE_length,
    	GRID_CLASS_LEDCOLOR_BLU_offset: GRID_CLASS_LEDCOLOR_BLU_offset,
    	GRID_CLASS_LEDCOLOR_BLU_length: GRID_CLASS_LEDCOLOR_BLU_length,
    	GRID_CLASS_LEDPREVIEW_code: GRID_CLASS_LEDPREVIEW_code,
    	GRID_CLASS_LEDPREVIEW_frame: GRID_CLASS_LEDPREVIEW_frame,
    	GRID_CLASS_LEDPREVIEW_frame_start: GRID_CLASS_LEDPREVIEW_frame_start,
    	GRID_CLASS_LEDPREVIEW_frame_end: GRID_CLASS_LEDPREVIEW_frame_end,
    	GRID_CLASS_LEDPREVIEW_LENGTH_offset: GRID_CLASS_LEDPREVIEW_LENGTH_offset,
    	GRID_CLASS_LEDPREVIEW_LENGTH_length: GRID_CLASS_LEDPREVIEW_LENGTH_length,
    	GRID_CLASS_LEDPREVIEW_NUM_offset: GRID_CLASS_LEDPREVIEW_NUM_offset,
    	GRID_CLASS_LEDPREVIEW_NUM_length: GRID_CLASS_LEDPREVIEW_NUM_length,
    	GRID_CLASS_LEDPREVIEW_RED_offset: GRID_CLASS_LEDPREVIEW_RED_offset,
    	GRID_CLASS_LEDPREVIEW_RED_length: GRID_CLASS_LEDPREVIEW_RED_length,
    	GRID_CLASS_LEDPREVIEW_GRE_offset: GRID_CLASS_LEDPREVIEW_GRE_offset,
    	GRID_CLASS_LEDPREVIEW_GRE_length: GRID_CLASS_LEDPREVIEW_GRE_length,
    	GRID_CLASS_LEDPREVIEW_BLU_offset: GRID_CLASS_LEDPREVIEW_BLU_offset,
    	GRID_CLASS_LEDPREVIEW_BLU_length: GRID_CLASS_LEDPREVIEW_BLU_length,
    	GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH: GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH,
    	GRID_LUA_FNC_G_LED_PHASE_short: GRID_LUA_FNC_G_LED_PHASE_short,
    	GRID_LUA_FNC_G_LED_PHASE_human: GRID_LUA_FNC_G_LED_PHASE_human,
    	GRID_LUA_FNC_G_LED_PHASE_fnptr: GRID_LUA_FNC_G_LED_PHASE_fnptr,
    	GRID_LUA_FNC_G_LED_MIN_short: GRID_LUA_FNC_G_LED_MIN_short,
    	GRID_LUA_FNC_G_LED_MIN_human: GRID_LUA_FNC_G_LED_MIN_human,
    	GRID_LUA_FNC_G_LED_MIN_fnptr: GRID_LUA_FNC_G_LED_MIN_fnptr,
    	GRID_LUA_FNC_G_LED_MID_short: GRID_LUA_FNC_G_LED_MID_short,
    	GRID_LUA_FNC_G_LED_MID_human: GRID_LUA_FNC_G_LED_MID_human,
    	GRID_LUA_FNC_G_LED_MID_fnptr: GRID_LUA_FNC_G_LED_MID_fnptr,
    	GRID_LUA_FNC_G_LED_MAX_short: GRID_LUA_FNC_G_LED_MAX_short,
    	GRID_LUA_FNC_G_LED_MAX_human: GRID_LUA_FNC_G_LED_MAX_human,
    	GRID_LUA_FNC_G_LED_MAX_fnptr: GRID_LUA_FNC_G_LED_MAX_fnptr,
    	GRID_LUA_FNC_G_LED_COLOR_short: GRID_LUA_FNC_G_LED_COLOR_short,
    	GRID_LUA_FNC_G_LED_COLOR_human: GRID_LUA_FNC_G_LED_COLOR_human,
    	GRID_LUA_FNC_G_LED_COLOR_fnptr: GRID_LUA_FNC_G_LED_COLOR_fnptr,
    	GRID_LUA_FNC_G_LED_FREQUENCY_short: GRID_LUA_FNC_G_LED_FREQUENCY_short,
    	GRID_LUA_FNC_G_LED_FREQUENCY_human: GRID_LUA_FNC_G_LED_FREQUENCY_human,
    	GRID_LUA_FNC_G_LED_FREQUENCY_fnptr: GRID_LUA_FNC_G_LED_FREQUENCY_fnptr,
    	GRID_LUA_FNC_G_LED_SHAPE_short: GRID_LUA_FNC_G_LED_SHAPE_short,
    	GRID_LUA_FNC_G_LED_SHAPE_human: GRID_LUA_FNC_G_LED_SHAPE_human,
    	GRID_LUA_FNC_G_LED_SHAPE_fnptr: GRID_LUA_FNC_G_LED_SHAPE_fnptr,
    	GRID_LUA_FNC_G_LED_PSF_short: GRID_LUA_FNC_G_LED_PSF_short,
    	GRID_LUA_FNC_G_LED_PSF_human: GRID_LUA_FNC_G_LED_PSF_human,
    	GRID_LUA_FNC_G_LED_PSF_fnptr: GRID_LUA_FNC_G_LED_PSF_fnptr,
    	GRID_LUA_FNC_G_MIDI_SEND_short: GRID_LUA_FNC_G_MIDI_SEND_short,
    	GRID_LUA_FNC_G_MIDI_SEND_human: GRID_LUA_FNC_G_MIDI_SEND_human,
    	GRID_LUA_FNC_G_MIDI_SEND_fnptr: GRID_LUA_FNC_G_MIDI_SEND_fnptr,
    	GRID_LUA_FNC_E_ELEMENT_INDEX_index: GRID_LUA_FNC_E_ELEMENT_INDEX_index,
    	GRID_LUA_FNC_E_ELEMENT_INDEX_helper: GRID_LUA_FNC_E_ELEMENT_INDEX_helper,
    	GRID_LUA_FNC_E_ELEMENT_INDEX_short: GRID_LUA_FNC_E_ELEMENT_INDEX_short,
    	GRID_LUA_FNC_E_ELEMENT_INDEX_human: GRID_LUA_FNC_E_ELEMENT_INDEX_human,
    	GRID_LUA_FNC_E_BUTTON_NUMBER_index: GRID_LUA_FNC_E_BUTTON_NUMBER_index,
    	GRID_LUA_FNC_E_BUTTON_NUMBER_helper: GRID_LUA_FNC_E_BUTTON_NUMBER_helper,
    	GRID_LUA_FNC_E_BUTTON_NUMBER_short: GRID_LUA_FNC_E_BUTTON_NUMBER_short,
    	GRID_LUA_FNC_E_BUTTON_NUMBER_human: GRID_LUA_FNC_E_BUTTON_NUMBER_human,
    	GRID_LUA_FNC_E_BUTTON_VALUE_index: GRID_LUA_FNC_E_BUTTON_VALUE_index,
    	GRID_LUA_FNC_E_BUTTON_VALUE_helper: GRID_LUA_FNC_E_BUTTON_VALUE_helper,
    	GRID_LUA_FNC_E_BUTTON_VALUE_short: GRID_LUA_FNC_E_BUTTON_VALUE_short,
    	GRID_LUA_FNC_E_BUTTON_VALUE_human: GRID_LUA_FNC_E_BUTTON_VALUE_human,
    	GRID_LUA_FNC_E_BUTTON_MIN_index: GRID_LUA_FNC_E_BUTTON_MIN_index,
    	GRID_LUA_FNC_E_BUTTON_MIN_helper: GRID_LUA_FNC_E_BUTTON_MIN_helper,
    	GRID_LUA_FNC_E_BUTTON_MIN_short: GRID_LUA_FNC_E_BUTTON_MIN_short,
    	GRID_LUA_FNC_E_BUTTON_MIN_human: GRID_LUA_FNC_E_BUTTON_MIN_human,
    	GRID_LUA_FNC_E_BUTTON_MAX_index: GRID_LUA_FNC_E_BUTTON_MAX_index,
    	GRID_LUA_FNC_E_BUTTON_MAX_helper: GRID_LUA_FNC_E_BUTTON_MAX_helper,
    	GRID_LUA_FNC_E_BUTTON_MAX_short: GRID_LUA_FNC_E_BUTTON_MAX_short,
    	GRID_LUA_FNC_E_BUTTON_MAX_human: GRID_LUA_FNC_E_BUTTON_MAX_human,
    	GRID_LUA_FNC_E_BUTTON_MODE_index: GRID_LUA_FNC_E_BUTTON_MODE_index,
    	GRID_LUA_FNC_E_BUTTON_MODE_helper: GRID_LUA_FNC_E_BUTTON_MODE_helper,
    	GRID_LUA_FNC_E_BUTTON_MODE_short: GRID_LUA_FNC_E_BUTTON_MODE_short,
    	GRID_LUA_FNC_E_BUTTON_MODE_human: GRID_LUA_FNC_E_BUTTON_MODE_human,
    	GRID_LUA_FNC_E_BUTTON_ELAPSED_index: GRID_LUA_FNC_E_BUTTON_ELAPSED_index,
    	GRID_LUA_FNC_E_BUTTON_ELAPSED_helper: GRID_LUA_FNC_E_BUTTON_ELAPSED_helper,
    	GRID_LUA_FNC_E_BUTTON_ELAPSED_short: GRID_LUA_FNC_E_BUTTON_ELAPSED_short,
    	GRID_LUA_FNC_E_BUTTON_ELAPSED_human: GRID_LUA_FNC_E_BUTTON_ELAPSED_human,
    	GRID_LUA_FNC_E_BUTTON_STATE_index: GRID_LUA_FNC_E_BUTTON_STATE_index,
    	GRID_LUA_FNC_E_BUTTON_STATE_helper: GRID_LUA_FNC_E_BUTTON_STATE_helper,
    	GRID_LUA_FNC_E_BUTTON_STATE_short: GRID_LUA_FNC_E_BUTTON_STATE_short,
    	GRID_LUA_FNC_E_BUTTON_STATE_human: GRID_LUA_FNC_E_BUTTON_STATE_human,
    	GRID_LUA_FNC_E_ENCODER_NUMBER_index: GRID_LUA_FNC_E_ENCODER_NUMBER_index,
    	GRID_LUA_FNC_E_ENCODER_NUMBER_helper: GRID_LUA_FNC_E_ENCODER_NUMBER_helper,
    	GRID_LUA_FNC_E_ENCODER_NUMBER_short: GRID_LUA_FNC_E_ENCODER_NUMBER_short,
    	GRID_LUA_FNC_E_ENCODER_NUMBER_human: GRID_LUA_FNC_E_ENCODER_NUMBER_human,
    	GRID_LUA_FNC_E_ENCODER_VALUE_index: GRID_LUA_FNC_E_ENCODER_VALUE_index,
    	GRID_LUA_FNC_E_ENCODER_VALUE_helper: GRID_LUA_FNC_E_ENCODER_VALUE_helper,
    	GRID_LUA_FNC_E_ENCODER_VALUE_short: GRID_LUA_FNC_E_ENCODER_VALUE_short,
    	GRID_LUA_FNC_E_ENCODER_VALUE_human: GRID_LUA_FNC_E_ENCODER_VALUE_human,
    	GRID_LUA_FNC_E_ENCODER_MIN_index: GRID_LUA_FNC_E_ENCODER_MIN_index,
    	GRID_LUA_FNC_E_ENCODER_MIN_helper: GRID_LUA_FNC_E_ENCODER_MIN_helper,
    	GRID_LUA_FNC_E_ENCODER_MIN_short: GRID_LUA_FNC_E_ENCODER_MIN_short,
    	GRID_LUA_FNC_E_ENCODER_MIN_human: GRID_LUA_FNC_E_ENCODER_MIN_human,
    	GRID_LUA_FNC_E_ENCODER_MAX_index: GRID_LUA_FNC_E_ENCODER_MAX_index,
    	GRID_LUA_FNC_E_ENCODER_MAX_helper: GRID_LUA_FNC_E_ENCODER_MAX_helper,
    	GRID_LUA_FNC_E_ENCODER_MAX_short: GRID_LUA_FNC_E_ENCODER_MAX_short,
    	GRID_LUA_FNC_E_ENCODER_MAX_human: GRID_LUA_FNC_E_ENCODER_MAX_human,
    	GRID_LUA_FNC_E_ENCODER_MODE_index: GRID_LUA_FNC_E_ENCODER_MODE_index,
    	GRID_LUA_FNC_E_ENCODER_MODE_helper: GRID_LUA_FNC_E_ENCODER_MODE_helper,
    	GRID_LUA_FNC_E_ENCODER_MODE_short: GRID_LUA_FNC_E_ENCODER_MODE_short,
    	GRID_LUA_FNC_E_ENCODER_MODE_human: GRID_LUA_FNC_E_ENCODER_MODE_human,
    	GRID_LUA_FNC_E_ENCODER_ELAPSED_index: GRID_LUA_FNC_E_ENCODER_ELAPSED_index,
    	GRID_LUA_FNC_E_ENCODER_ELAPSED_helper: GRID_LUA_FNC_E_ENCODER_ELAPSED_helper,
    	GRID_LUA_FNC_E_ENCODER_ELAPSED_short: GRID_LUA_FNC_E_ENCODER_ELAPSED_short,
    	GRID_LUA_FNC_E_ENCODER_ELAPSED_human: GRID_LUA_FNC_E_ENCODER_ELAPSED_human,
    	GRID_LUA_FNC_E_LIST_length: GRID_LUA_FNC_E_LIST_length,
    	GRID_LUA_E_LIST_init: GRID_LUA_E_LIST_init,
    	GRID_LUA_FNC_P_ELEMENT_INDEX_index: GRID_LUA_FNC_P_ELEMENT_INDEX_index,
    	GRID_LUA_FNC_P_ELEMENT_INDEX_helper: GRID_LUA_FNC_P_ELEMENT_INDEX_helper,
    	GRID_LUA_FNC_P_ELEMENT_INDEX_short: GRID_LUA_FNC_P_ELEMENT_INDEX_short,
    	GRID_LUA_FNC_P_ELEMENT_INDEX_human: GRID_LUA_FNC_P_ELEMENT_INDEX_human,
    	GRID_LUA_FNC_P_POTMETER_NUMBER_index: GRID_LUA_FNC_P_POTMETER_NUMBER_index,
    	GRID_LUA_FNC_P_POTMETER_NUMBER_helper: GRID_LUA_FNC_P_POTMETER_NUMBER_helper,
    	GRID_LUA_FNC_P_POTMETER_NUMBER_short: GRID_LUA_FNC_P_POTMETER_NUMBER_short,
    	GRID_LUA_FNC_P_POTMETER_NUMBER_human: GRID_LUA_FNC_P_POTMETER_NUMBER_human,
    	GRID_LUA_FNC_P_POTMETER_VALUE_index: GRID_LUA_FNC_P_POTMETER_VALUE_index,
    	GRID_LUA_FNC_P_POTMETER_VALUE_helper: GRID_LUA_FNC_P_POTMETER_VALUE_helper,
    	GRID_LUA_FNC_P_POTMETER_VALUE_short: GRID_LUA_FNC_P_POTMETER_VALUE_short,
    	GRID_LUA_FNC_P_POTMETER_VALUE_human: GRID_LUA_FNC_P_POTMETER_VALUE_human,
    	GRID_LUA_FNC_P_POTMETER_MIN_index: GRID_LUA_FNC_P_POTMETER_MIN_index,
    	GRID_LUA_FNC_P_POTMETER_MIN_helper: GRID_LUA_FNC_P_POTMETER_MIN_helper,
    	GRID_LUA_FNC_P_POTMETER_MIN_short: GRID_LUA_FNC_P_POTMETER_MIN_short,
    	GRID_LUA_FNC_P_POTMETER_MIN_human: GRID_LUA_FNC_P_POTMETER_MIN_human,
    	GRID_LUA_FNC_P_POTMETER_MAX_index: GRID_LUA_FNC_P_POTMETER_MAX_index,
    	GRID_LUA_FNC_P_POTMETER_MAX_helper: GRID_LUA_FNC_P_POTMETER_MAX_helper,
    	GRID_LUA_FNC_P_POTMETER_MAX_short: GRID_LUA_FNC_P_POTMETER_MAX_short,
    	GRID_LUA_FNC_P_POTMETER_MAX_human: GRID_LUA_FNC_P_POTMETER_MAX_human,
    	GRID_LUA_FNC_P_POTMETER_MODE_index: GRID_LUA_FNC_P_POTMETER_MODE_index,
    	GRID_LUA_FNC_P_POTMETER_MODE_helper: GRID_LUA_FNC_P_POTMETER_MODE_helper,
    	GRID_LUA_FNC_P_POTMETER_MODE_short: GRID_LUA_FNC_P_POTMETER_MODE_short,
    	GRID_LUA_FNC_P_POTMETER_MODE_human: GRID_LUA_FNC_P_POTMETER_MODE_human,
    	GRID_LUA_FNC_P_POTMETER_ELAPSED_index: GRID_LUA_FNC_P_POTMETER_ELAPSED_index,
    	GRID_LUA_FNC_P_POTMETER_ELAPSED_helper: GRID_LUA_FNC_P_POTMETER_ELAPSED_helper,
    	GRID_LUA_FNC_P_POTMETER_ELAPSED_short: GRID_LUA_FNC_P_POTMETER_ELAPSED_short,
    	GRID_LUA_FNC_P_POTMETER_ELAPSED_human: GRID_LUA_FNC_P_POTMETER_ELAPSED_human,
    	GRID_LUA_FNC_P_LIST_length: GRID_LUA_FNC_P_LIST_length,
    	GRID_LUA_P_LIST_init: GRID_LUA_P_LIST_init,
    	GRID_LUA_FNC_B_ELEMENT_INDEX_index: GRID_LUA_FNC_B_ELEMENT_INDEX_index,
    	GRID_LUA_FNC_B_ELEMENT_INDEX_helper: GRID_LUA_FNC_B_ELEMENT_INDEX_helper,
    	GRID_LUA_FNC_B_ELEMENT_INDEX_short: GRID_LUA_FNC_B_ELEMENT_INDEX_short,
    	GRID_LUA_FNC_B_ELEMENT_INDEX_human: GRID_LUA_FNC_B_ELEMENT_INDEX_human,
    	GRID_LUA_FNC_B_BUTTON_NUMBER_index: GRID_LUA_FNC_B_BUTTON_NUMBER_index,
    	GRID_LUA_FNC_B_BUTTON_NUMBER_helper: GRID_LUA_FNC_B_BUTTON_NUMBER_helper,
    	GRID_LUA_FNC_B_BUTTON_NUMBER_short: GRID_LUA_FNC_B_BUTTON_NUMBER_short,
    	GRID_LUA_FNC_B_BUTTON_NUMBER_human: GRID_LUA_FNC_B_BUTTON_NUMBER_human,
    	GRID_LUA_FNC_B_BUTTON_VALUE_index: GRID_LUA_FNC_B_BUTTON_VALUE_index,
    	GRID_LUA_FNC_B_BUTTON_VALUE_helper: GRID_LUA_FNC_B_BUTTON_VALUE_helper,
    	GRID_LUA_FNC_B_BUTTON_VALUE_short: GRID_LUA_FNC_B_BUTTON_VALUE_short,
    	GRID_LUA_FNC_B_BUTTON_VALUE_human: GRID_LUA_FNC_B_BUTTON_VALUE_human,
    	GRID_LUA_FNC_B_BUTTON_MIN_index: GRID_LUA_FNC_B_BUTTON_MIN_index,
    	GRID_LUA_FNC_B_BUTTON_MIN_helper: GRID_LUA_FNC_B_BUTTON_MIN_helper,
    	GRID_LUA_FNC_B_BUTTON_MIN_short: GRID_LUA_FNC_B_BUTTON_MIN_short,
    	GRID_LUA_FNC_B_BUTTON_MIN_human: GRID_LUA_FNC_B_BUTTON_MIN_human,
    	GRID_LUA_FNC_B_BUTTON_MAX_index: GRID_LUA_FNC_B_BUTTON_MAX_index,
    	GRID_LUA_FNC_B_BUTTON_MAX_helper: GRID_LUA_FNC_B_BUTTON_MAX_helper,
    	GRID_LUA_FNC_B_BUTTON_MAX_short: GRID_LUA_FNC_B_BUTTON_MAX_short,
    	GRID_LUA_FNC_B_BUTTON_MAX_human: GRID_LUA_FNC_B_BUTTON_MAX_human,
    	GRID_LUA_FNC_B_BUTTON_MODE_index: GRID_LUA_FNC_B_BUTTON_MODE_index,
    	GRID_LUA_FNC_B_BUTTON_MODE_helper: GRID_LUA_FNC_B_BUTTON_MODE_helper,
    	GRID_LUA_FNC_B_BUTTON_MODE_short: GRID_LUA_FNC_B_BUTTON_MODE_short,
    	GRID_LUA_FNC_B_BUTTON_MODE_human: GRID_LUA_FNC_B_BUTTON_MODE_human,
    	GRID_LUA_FNC_B_BUTTON_ELAPSED_index: GRID_LUA_FNC_B_BUTTON_ELAPSED_index,
    	GRID_LUA_FNC_B_BUTTON_ELAPSED_helper: GRID_LUA_FNC_B_BUTTON_ELAPSED_helper,
    	GRID_LUA_FNC_B_BUTTON_ELAPSED_short: GRID_LUA_FNC_B_BUTTON_ELAPSED_short,
    	GRID_LUA_FNC_B_BUTTON_ELAPSED_human: GRID_LUA_FNC_B_BUTTON_ELAPSED_human,
    	GRID_LUA_FNC_B_BUTTON_STATE_index: GRID_LUA_FNC_B_BUTTON_STATE_index,
    	GRID_LUA_FNC_B_BUTTON_STATE_helper: GRID_LUA_FNC_B_BUTTON_STATE_helper,
    	GRID_LUA_FNC_B_BUTTON_STATE_short: GRID_LUA_FNC_B_BUTTON_STATE_short,
    	GRID_LUA_FNC_B_BUTTON_STATE_human: GRID_LUA_FNC_B_BUTTON_STATE_human,
    	GRID_LUA_FNC_B_LIST_length: GRID_LUA_FNC_B_LIST_length,
    	GRID_LUA_B_LIST_init: GRID_LUA_B_LIST_init,
    	GRID_LUA_KW_ELEMENT_short: GRID_LUA_KW_ELEMENT_short,
    	GRID_LUA_KW_THIS_short: GRID_LUA_KW_THIS_short,
    	GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH: GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH,
    	GRID_PARAMETER_ELEMENTTYPE_SYSTEM_code: GRID_PARAMETER_ELEMENTTYPE_SYSTEM_code,
    	GRID_PARAMETER_ELEMENTTYPE_POTENTIOMETER_code: GRID_PARAMETER_ELEMENTTYPE_POTENTIOMETER_code,
    	GRID_PARAMETER_ELEMENTTYPE_BUTTON_code: GRID_PARAMETER_ELEMENTTYPE_BUTTON_code,
    	GRID_PARAMETER_ELEMENTTYPE_ENCODER_code: GRID_PARAMETER_ELEMENTTYPE_ENCODER_code,
    	GRID_CLASS_EVENT_code: GRID_CLASS_EVENT_code,
    	GRID_CLASS_EVENT_frame: GRID_CLASS_EVENT_frame,
    	GRID_CLASS_EVENT_BANKNUMBER_offset: GRID_CLASS_EVENT_BANKNUMBER_offset,
    	GRID_CLASS_EVENT_BANKNUMBER_length: GRID_CLASS_EVENT_BANKNUMBER_length,
    	GRID_CLASS_EVENT_ELEMENTNUMBER_offset: GRID_CLASS_EVENT_ELEMENTNUMBER_offset,
    	GRID_CLASS_EVENT_ELEMENTNUMBER_length: GRID_CLASS_EVENT_ELEMENTNUMBER_length,
    	GRID_CLASS_EVENT_EVENTTYPE_offset: GRID_CLASS_EVENT_EVENTTYPE_offset,
    	GRID_CLASS_EVENT_EVENTTYPE_length: GRID_CLASS_EVENT_EVENTTYPE_length,
    	GRID_CLASS_EVENT_EVENTPARAM_offset: GRID_CLASS_EVENT_EVENTPARAM_offset,
    	GRID_CLASS_EVENT_EVENTPARAM_length: GRID_CLASS_EVENT_EVENTPARAM_length,
    	GRID_CLASS_GLOBALSTORE_code: GRID_CLASS_GLOBALSTORE_code,
    	GRID_CLASS_GLOBALSTORE_frame: GRID_CLASS_GLOBALSTORE_frame,
    	GRID_CLASS_GLOBALLOAD_code: GRID_CLASS_GLOBALLOAD_code,
    	GRID_CLASS_GLOBALLOAD_frame: GRID_CLASS_GLOBALLOAD_frame,
    	GRID_CLASS_GLOBALCLEAR_code: GRID_CLASS_GLOBALCLEAR_code,
    	GRID_CLASS_GLOBALCLEAR_frame: GRID_CLASS_GLOBALCLEAR_frame,
    	GRID_CLASS_GLOBALRECALL_code: GRID_CLASS_GLOBALRECALL_code,
    	GRID_CLASS_GLOBALRECALL_frame: GRID_CLASS_GLOBALRECALL_frame,
    	GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset: GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset,
    	GRID_CLASS_GLOBALRECALL_BANKNUMBER_length: GRID_CLASS_GLOBALRECALL_BANKNUMBER_length,
    	GRID_CLASS_LOCALSTORE_code: GRID_CLASS_LOCALSTORE_code,
    	GRID_CLASS_LOCALSTORE_frame: GRID_CLASS_LOCALSTORE_frame,
    	GRID_CLASS_LOCALLOAD_code: GRID_CLASS_LOCALLOAD_code,
    	GRID_CLASS_LOCALLOAD_frame: GRID_CLASS_LOCALLOAD_frame,
    	GRID_CLASS_LOCALCLEAR_code: GRID_CLASS_LOCALCLEAR_code,
    	GRID_CLASS_LOCALCLEAR_frame: GRID_CLASS_LOCALCLEAR_frame,
    	GRID_CLASS_CONFIGURATION_code: GRID_CLASS_CONFIGURATION_code,
    	GRID_CLASS_CONFIGURATION_frame: GRID_CLASS_CONFIGURATION_frame,
    	GRID_CLASS_CONFIGURATION_frame_start: GRID_CLASS_CONFIGURATION_frame_start,
    	GRID_CLASS_CONFIGURATION_frame_end: GRID_CLASS_CONFIGURATION_frame_end,
    	GRID_CLASS_CONFIGURATION_BANKNUMBER_offset: GRID_CLASS_CONFIGURATION_BANKNUMBER_offset,
    	GRID_CLASS_CONFIGURATION_BANKNUMBER_length: GRID_CLASS_CONFIGURATION_BANKNUMBER_length,
    	GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset: GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset,
    	GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length: GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length,
    	GRID_CLASS_CONFIGURATION_EVENTTYPE_offset: GRID_CLASS_CONFIGURATION_EVENTTYPE_offset,
    	GRID_CLASS_CONFIGURATION_EVENTTYPE_length: GRID_CLASS_CONFIGURATION_EVENTTYPE_length,
    	GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset: GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset,
    	GRID_CLASS_CONFIGURATION_ACTIONSTRING_length: GRID_CLASS_CONFIGURATION_ACTIONSTRING_length,
    	GRID_CLASS_CONFIGDEFAULT_code: GRID_CLASS_CONFIGDEFAULT_code,
    	GRID_CLASS_CONFIGDEFAULT_frame: GRID_CLASS_CONFIGDEFAULT_frame,
    	GRID_CLASS_CONFIGDEFAULT_frame_start: GRID_CLASS_CONFIGDEFAULT_frame_start,
    	GRID_CLASS_CONFIGDEFAULT_frame_end: GRID_CLASS_CONFIGDEFAULT_frame_end,
    	GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset: GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset,
    	GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_length: GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_length,
    	GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset: GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset,
    	GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_length: GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_length,
    	GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset: GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset,
    	GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_length: GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_length,
    	GRID_CLASS_CONFIG_code: GRID_CLASS_CONFIG_code,
    	GRID_CLASS_CONFIG_frame: GRID_CLASS_CONFIG_frame,
    	GRID_CLASS_CONFIG_frame_start: GRID_CLASS_CONFIG_frame_start,
    	GRID_CLASS_CONFIG_frame_end: GRID_CLASS_CONFIG_frame_end,
    	GRID_CLASS_CONFIG_PAGENUMBER_offset: GRID_CLASS_CONFIG_PAGENUMBER_offset,
    	GRID_CLASS_CONFIG_PAGENUMBER_length: GRID_CLASS_CONFIG_PAGENUMBER_length,
    	GRID_CLASS_CONFIG_ELEMENTNUMBER_offset: GRID_CLASS_CONFIG_ELEMENTNUMBER_offset,
    	GRID_CLASS_CONFIG_ELEMENTNUMBER_length: GRID_CLASS_CONFIG_ELEMENTNUMBER_length,
    	GRID_CLASS_CONFIG_EVENTTYPE_offset: GRID_CLASS_CONFIG_EVENTTYPE_offset,
    	GRID_CLASS_CONFIG_EVENTTYPE_length: GRID_CLASS_CONFIG_EVENTTYPE_length,
    	GRID_CLASS_CONFIG_ACTIONLENGTH_offset: GRID_CLASS_CONFIG_ACTIONLENGTH_offset,
    	GRID_CLASS_CONFIG_ACTIONLENGTH_length: GRID_CLASS_CONFIG_ACTIONLENGTH_length,
    	GRID_CLASS_CONFIG_ACTIONSTRING_offset: GRID_CLASS_CONFIG_ACTIONSTRING_offset,
    	GRID_CLASS_CONFIG_ACTIONSTRING_length: GRID_CLASS_CONFIG_ACTIONSTRING_length,
    	GRID_CLASS_HIDKEYSTATUS_code: GRID_CLASS_HIDKEYSTATUS_code,
    	GRID_CLASS_HIDKEYSTATUS_frame: GRID_CLASS_HIDKEYSTATUS_frame,
    	GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset: GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset,
    	GRID_CLASS_HIDKEYSTATUS_ISENABLED_length: GRID_CLASS_HIDKEYSTATUS_ISENABLED_length,
    	GRID_CLASS_HIDKEYBOARD_code: GRID_CLASS_HIDKEYBOARD_code,
    	GRID_CLASS_HIDKEYBOARD_frame: GRID_CLASS_HIDKEYBOARD_frame,
    	GRID_CLASS_HIDKEYBOARD_frame_start: GRID_CLASS_HIDKEYBOARD_frame_start,
    	GRID_CLASS_HIDKEYBOARD_frame_end: GRID_CLASS_HIDKEYBOARD_frame_end,
    	GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset: GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,
    	GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length: GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length,
    	GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset: GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset,
    	GRID_CLASS_HIDKEYBOARD_KEYSTATE_length: GRID_CLASS_HIDKEYBOARD_KEYSTATE_length,
    	GRID_CLASS_HIDKEYBOARD_KEYCODE_offset: GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,
    	GRID_CLASS_HIDKEYBOARD_KEYCODE_length: GRID_CLASS_HIDKEYBOARD_KEYCODE_length
    };

    var grid_protocol = /*#__PURE__*/Object.freeze({
        __proto__: null,
        GRID_PROTOCOL_VERSION_MAJOR: GRID_PROTOCOL_VERSION_MAJOR,
        GRID_PROTOCOL_VERSION_MINOR: GRID_PROTOCOL_VERSION_MINOR,
        GRID_PROTOCOL_VERSION_PATCH: GRID_PROTOCOL_VERSION_PATCH,
        GRID_MODULE_PO16_RevB: GRID_MODULE_PO16_RevB,
        GRID_MODULE_PO16_RevC: GRID_MODULE_PO16_RevC,
        GRID_MODULE_BU16_RevB: GRID_MODULE_BU16_RevB,
        GRID_MODULE_BU16_RevC: GRID_MODULE_BU16_RevC,
        GRID_MODULE_PBF4_RevA: GRID_MODULE_PBF4_RevA,
        GRID_MODULE_EN16_RevA: GRID_MODULE_EN16_RevA,
        GRID_MODULE_EN16_RevD: GRID_MODULE_EN16_RevD,
        GRID_MODULE_EN16_ND_RevA: GRID_MODULE_EN16_ND_RevA,
        GRID_MODULE_EN16_ND_RevD: GRID_MODULE_EN16_ND_RevD,
        GRID_PARAMETER_HEARTBEAT_interval: GRID_PARAMETER_HEARTBEAT_interval,
        GRID_PARAMETER_PING_interval: GRID_PARAMETER_PING_interval,
        GRID_PARAMETER_TEXT_maxlength: GRID_PARAMETER_TEXT_maxlength,
        GRID_PARAMETER_PACKET_maxlength: GRID_PARAMETER_PACKET_maxlength,
        GRID_PARAMETER_PACKET_marign: GRID_PARAMETER_PACKET_marign,
        GRID_CONST_NUL: GRID_CONST_NUL,
        GRID_CONST_SOH: GRID_CONST_SOH,
        GRID_CONST_STX: GRID_CONST_STX,
        GRID_CONST_ETX: GRID_CONST_ETX,
        GRID_CONST_EOB: GRID_CONST_EOB,
        GRID_CONST_EOT: GRID_CONST_EOT,
        GRID_CONST_LF: GRID_CONST_LF,
        GRID_CONST_ACK: GRID_CONST_ACK,
        GRID_CONST_NAK: GRID_CONST_NAK,
        GRID_CONST_CAN: GRID_CONST_CAN,
        GRID_CONST_NORTH: GRID_CONST_NORTH,
        GRID_CONST_EAST: GRID_CONST_EAST,
        GRID_CONST_SOUTH: GRID_CONST_SOUTH,
        GRID_CONST_WEST: GRID_CONST_WEST,
        GRID_CONST_DCT: GRID_CONST_DCT,
        GRID_CONST_BRC: GRID_CONST_BRC,
        GRID_CONST_BELL: GRID_CONST_BELL,
        GRID_PARAMETER_MIDI_NOTEOFF: GRID_PARAMETER_MIDI_NOTEOFF,
        GRID_PARAMETER_MIDI_NOTEON: GRID_PARAMETER_MIDI_NOTEON,
        GRID_PARAMETER_MIDI_CONTROLCHANGE: GRID_PARAMETER_MIDI_CONTROLCHANGE,
        GRID_PARAMETER_KEYBOARD_KEYDOWN: GRID_PARAMETER_KEYBOARD_KEYDOWN,
        GRID_PARAMETER_KEYBOARD_KEYUP: GRID_PARAMETER_KEYBOARD_KEYUP,
        GRID_PARAMETER_KEYBOARD_MODIFIER: GRID_PARAMETER_KEYBOARD_MODIFIER,
        GRID_PARAMETER_KEYBOARD_NOTMODIFIER: GRID_PARAMETER_KEYBOARD_NOTMODIFIER,
        GRID_BRC_frame: GRID_BRC_frame,
        GRID_BRC_LEN_offset: GRID_BRC_LEN_offset,
        GRID_BRC_LEN_length: GRID_BRC_LEN_length,
        GRID_BRC_ID_offset: GRID_BRC_ID_offset,
        GRID_BRC_ID_length: GRID_BRC_ID_length,
        GRID_BRC_DX_offset: GRID_BRC_DX_offset,
        GRID_BRC_DX_length: GRID_BRC_DX_length,
        GRID_BRC_DY_offset: GRID_BRC_DY_offset,
        GRID_BRC_DY_length: GRID_BRC_DY_length,
        GRID_BRC_AGE_offset: GRID_BRC_AGE_offset,
        GRID_BRC_AGE_length: GRID_BRC_AGE_length,
        GRID_BRC_ROT_offset: GRID_BRC_ROT_offset,
        GRID_BRC_ROT_length: GRID_BRC_ROT_length,
        GRID_INSTR_length: GRID_INSTR_length,
        GRID_INSTR_offset: GRID_INSTR_offset,
        GRID_INSTR_ACKNOWLEDGE_code: GRID_INSTR_ACKNOWLEDGE_code,
        GRID_INSTR_NACKNOWLEDGE_code: GRID_INSTR_NACKNOWLEDGE_code,
        GRID_INSTR_CONFIGURE_code: GRID_INSTR_CONFIGURE_code,
        GRID_INSTR_REPORT_code: GRID_INSTR_REPORT_code,
        GRID_INSTR_FETCH_code: GRID_INSTR_FETCH_code,
        GRID_INSTR_EXECUTE_code: GRID_INSTR_EXECUTE_code,
        GRID_CLASS_length: GRID_CLASS_length,
        GRID_CLASS_offset: GRID_CLASS_offset,
        GRID_CLASS_MIDI_code: GRID_CLASS_MIDI_code,
        GRID_CLASS_MIDI_frame: GRID_CLASS_MIDI_frame,
        GRID_CLASS_MIDI_CHANNEL_offset: GRID_CLASS_MIDI_CHANNEL_offset,
        GRID_CLASS_MIDI_CHANNEL_length: GRID_CLASS_MIDI_CHANNEL_length,
        GRID_CLASS_MIDI_COMMAND_offset: GRID_CLASS_MIDI_COMMAND_offset,
        GRID_CLASS_MIDI_COMMAND_length: GRID_CLASS_MIDI_COMMAND_length,
        GRID_CLASS_MIDI_PARAM1_offset: GRID_CLASS_MIDI_PARAM1_offset,
        GRID_CLASS_MIDI_PARAM1_length: GRID_CLASS_MIDI_PARAM1_length,
        GRID_CLASS_MIDI_PARAM2_offset: GRID_CLASS_MIDI_PARAM2_offset,
        GRID_CLASS_MIDI_PARAM2_length: GRID_CLASS_MIDI_PARAM2_length,
        GRID_CLASS_HEARTBEAT_code: GRID_CLASS_HEARTBEAT_code,
        GRID_CLASS_HEARTBEAT_frame: GRID_CLASS_HEARTBEAT_frame,
        GRID_CLASS_HEARTBEAT_TYPE_offset: GRID_CLASS_HEARTBEAT_TYPE_offset,
        GRID_CLASS_HEARTBEAT_TYPE_length: GRID_CLASS_HEARTBEAT_TYPE_length,
        GRID_CLASS_HEARTBEAT_HWCFG_offset: GRID_CLASS_HEARTBEAT_HWCFG_offset,
        GRID_CLASS_HEARTBEAT_HWCFG_length: GRID_CLASS_HEARTBEAT_HWCFG_length,
        GRID_CLASS_HEARTBEAT_VMAJOR_offset: GRID_CLASS_HEARTBEAT_VMAJOR_offset,
        GRID_CLASS_HEARTBEAT_VMAJOR_length: GRID_CLASS_HEARTBEAT_VMAJOR_length,
        GRID_CLASS_HEARTBEAT_VMINOR_offset: GRID_CLASS_HEARTBEAT_VMINOR_offset,
        GRID_CLASS_HEARTBEAT_VMINOR_length: GRID_CLASS_HEARTBEAT_VMINOR_length,
        GRID_CLASS_HEARTBEAT_VPATCH_offset: GRID_CLASS_HEARTBEAT_VPATCH_offset,
        GRID_CLASS_HEARTBEAT_VPATCH_length: GRID_CLASS_HEARTBEAT_VPATCH_length,
        GRID_CLASS_SERIALNUMBER_code: GRID_CLASS_SERIALNUMBER_code,
        GRID_CLASS_SERIALNUMBER_frame: GRID_CLASS_SERIALNUMBER_frame,
        GRID_CLASS_SERIALNUMBER_WORD0_offset: GRID_CLASS_SERIALNUMBER_WORD0_offset,
        GRID_CLASS_SERIALNUMBER_WORD0_length: GRID_CLASS_SERIALNUMBER_WORD0_length,
        GRID_CLASS_SERIALNUMBER_WORD1_offset: GRID_CLASS_SERIALNUMBER_WORD1_offset,
        GRID_CLASS_SERIALNUMBER_WORD1_length: GRID_CLASS_SERIALNUMBER_WORD1_length,
        GRID_CLASS_SERIALNUMBER_WORD2_offset: GRID_CLASS_SERIALNUMBER_WORD2_offset,
        GRID_CLASS_SERIALNUMBER_WORD2_length: GRID_CLASS_SERIALNUMBER_WORD2_length,
        GRID_CLASS_SERIALNUMBER_WORD3_offset: GRID_CLASS_SERIALNUMBER_WORD3_offset,
        GRID_CLASS_SERIALNUMBER_WORD3_length: GRID_CLASS_SERIALNUMBER_WORD3_length,
        GRID_CLASS_RESETCAUSE_code: GRID_CLASS_RESETCAUSE_code,
        GRID_CLASS_RESETCAUSE_frame: GRID_CLASS_RESETCAUSE_frame,
        GRID_CLASS_RESETCAUSE_CAUSE_offset: GRID_CLASS_RESETCAUSE_CAUSE_offset,
        GRID_CLASS_RESETCAUSE_CAUSE_length: GRID_CLASS_RESETCAUSE_CAUSE_length,
        GRID_CLASS_RESET_code: GRID_CLASS_RESET_code,
        GRID_CLASS_RESET_frame: GRID_CLASS_RESET_frame,
        GRID_CLASS_UPTIME_code: GRID_CLASS_UPTIME_code,
        GRID_CLASS_UPTIME_frame: GRID_CLASS_UPTIME_frame,
        GRID_CLASS_UPTIME_UPTIME_offset: GRID_CLASS_UPTIME_UPTIME_offset,
        GRID_CLASS_UPTIME_UPTIME_length: GRID_CLASS_UPTIME_UPTIME_length,
        GRID_CLASS_DEBUGTEXT_code: GRID_CLASS_DEBUGTEXT_code,
        GRID_CLASS_DEBUGTEXT_frame_start: GRID_CLASS_DEBUGTEXT_frame_start,
        GRID_CLASS_DEBUGTEXT_frame_end: GRID_CLASS_DEBUGTEXT_frame_end,
        GRID_CLASS_BANKACTIVE_code: GRID_CLASS_BANKACTIVE_code,
        GRID_CLASS_BANKACTIVE_format: GRID_CLASS_BANKACTIVE_format,
        GRID_CLASS_BANKACTIVE_frame: GRID_CLASS_BANKACTIVE_frame,
        GRID_CLASS_BANKACTIVE_BANKNUMBER_offset: GRID_CLASS_BANKACTIVE_BANKNUMBER_offset,
        GRID_CLASS_BANKACTIVE_BANKNUMBER_length: GRID_CLASS_BANKACTIVE_BANKNUMBER_length,
        GRID_CLASS_BANKENABLED_code: GRID_CLASS_BANKENABLED_code,
        GRID_CLASS_BANKENABLED_frame: GRID_CLASS_BANKENABLED_frame,
        GRID_CLASS_BANKENABLED_BANKNUMBER_offset: GRID_CLASS_BANKENABLED_BANKNUMBER_offset,
        GRID_CLASS_BANKENABLED_BANKNUMBER_length: GRID_CLASS_BANKENABLED_BANKNUMBER_length,
        GRID_CLASS_BANKENABLED_ISENABLED_offset: GRID_CLASS_BANKENABLED_ISENABLED_offset,
        GRID_CLASS_BANKENABLED_ISENABLED_length: GRID_CLASS_BANKENABLED_ISENABLED_length,
        GRID_CLASS_BANKCOLOR_code: GRID_CLASS_BANKCOLOR_code,
        GRID_CLASS_BANKCOLOR_frame: GRID_CLASS_BANKCOLOR_frame,
        GRID_CLASS_BANKCOLOR_NUM_offset: GRID_CLASS_BANKCOLOR_NUM_offset,
        GRID_CLASS_BANKCOLOR_NUM_length: GRID_CLASS_BANKCOLOR_NUM_length,
        GRID_CLASS_BANKCOLOR_RED_offset: GRID_CLASS_BANKCOLOR_RED_offset,
        GRID_CLASS_BANKCOLOR_RED_length: GRID_CLASS_BANKCOLOR_RED_length,
        GRID_CLASS_BANKCOLOR_GRE_offset: GRID_CLASS_BANKCOLOR_GRE_offset,
        GRID_CLASS_BANKCOLOR_GRE_length: GRID_CLASS_BANKCOLOR_GRE_length,
        GRID_CLASS_BANKCOLOR_BLU_offset: GRID_CLASS_BANKCOLOR_BLU_offset,
        GRID_CLASS_BANKCOLOR_BLU_length: GRID_CLASS_BANKCOLOR_BLU_length,
        GRID_CLASS_LEDPHASE_code: GRID_CLASS_LEDPHASE_code,
        GRID_CLASS_LEDPHASE_format: GRID_CLASS_LEDPHASE_format,
        GRID_CLASS_LEDPHASE_frame: GRID_CLASS_LEDPHASE_frame,
        GRID_CLASS_LEDPHASE_NUM_offset: GRID_CLASS_LEDPHASE_NUM_offset,
        GRID_CLASS_LEDPHASE_NUM_length: GRID_CLASS_LEDPHASE_NUM_length,
        GRID_CLASS_LEDPHASE_LAY_offset: GRID_CLASS_LEDPHASE_LAY_offset,
        GRID_CLASS_LEDPHASE_LAY_length: GRID_CLASS_LEDPHASE_LAY_length,
        GRID_CLASS_LEDPHASE_PHA_offset: GRID_CLASS_LEDPHASE_PHA_offset,
        GRID_CLASS_LEDPHASE_PHA_length: GRID_CLASS_LEDPHASE_PHA_length,
        GRID_CLASS_LEDCOLOR_code: GRID_CLASS_LEDCOLOR_code,
        GRID_CLASS_LEDCOLOR_format: GRID_CLASS_LEDCOLOR_format,
        GRID_CLASS_LEDCOLOR_frame: GRID_CLASS_LEDCOLOR_frame,
        GRID_CLASS_LEDCOLOR_NUM_offset: GRID_CLASS_LEDCOLOR_NUM_offset,
        GRID_CLASS_LEDCOLOR_NUM_length: GRID_CLASS_LEDCOLOR_NUM_length,
        GRID_CLASS_LEDCOLOR_LAY_offset: GRID_CLASS_LEDCOLOR_LAY_offset,
        GRID_CLASS_LEDCOLOR_LAY_length: GRID_CLASS_LEDCOLOR_LAY_length,
        GRID_CLASS_LEDCOLOR_RED_offset: GRID_CLASS_LEDCOLOR_RED_offset,
        GRID_CLASS_LEDCOLOR_RED_length: GRID_CLASS_LEDCOLOR_RED_length,
        GRID_CLASS_LEDCOLOR_GRE_offset: GRID_CLASS_LEDCOLOR_GRE_offset,
        GRID_CLASS_LEDCOLOR_GRE_length: GRID_CLASS_LEDCOLOR_GRE_length,
        GRID_CLASS_LEDCOLOR_BLU_offset: GRID_CLASS_LEDCOLOR_BLU_offset,
        GRID_CLASS_LEDCOLOR_BLU_length: GRID_CLASS_LEDCOLOR_BLU_length,
        GRID_CLASS_LEDPREVIEW_code: GRID_CLASS_LEDPREVIEW_code,
        GRID_CLASS_LEDPREVIEW_frame: GRID_CLASS_LEDPREVIEW_frame,
        GRID_CLASS_LEDPREVIEW_frame_start: GRID_CLASS_LEDPREVIEW_frame_start,
        GRID_CLASS_LEDPREVIEW_frame_end: GRID_CLASS_LEDPREVIEW_frame_end,
        GRID_CLASS_LEDPREVIEW_LENGTH_offset: GRID_CLASS_LEDPREVIEW_LENGTH_offset,
        GRID_CLASS_LEDPREVIEW_LENGTH_length: GRID_CLASS_LEDPREVIEW_LENGTH_length,
        GRID_CLASS_LEDPREVIEW_NUM_offset: GRID_CLASS_LEDPREVIEW_NUM_offset,
        GRID_CLASS_LEDPREVIEW_NUM_length: GRID_CLASS_LEDPREVIEW_NUM_length,
        GRID_CLASS_LEDPREVIEW_RED_offset: GRID_CLASS_LEDPREVIEW_RED_offset,
        GRID_CLASS_LEDPREVIEW_RED_length: GRID_CLASS_LEDPREVIEW_RED_length,
        GRID_CLASS_LEDPREVIEW_GRE_offset: GRID_CLASS_LEDPREVIEW_GRE_offset,
        GRID_CLASS_LEDPREVIEW_GRE_length: GRID_CLASS_LEDPREVIEW_GRE_length,
        GRID_CLASS_LEDPREVIEW_BLU_offset: GRID_CLASS_LEDPREVIEW_BLU_offset,
        GRID_CLASS_LEDPREVIEW_BLU_length: GRID_CLASS_LEDPREVIEW_BLU_length,
        GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH: GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH,
        GRID_LUA_FNC_G_LED_PHASE_short: GRID_LUA_FNC_G_LED_PHASE_short,
        GRID_LUA_FNC_G_LED_PHASE_human: GRID_LUA_FNC_G_LED_PHASE_human,
        GRID_LUA_FNC_G_LED_PHASE_fnptr: GRID_LUA_FNC_G_LED_PHASE_fnptr,
        GRID_LUA_FNC_G_LED_MIN_short: GRID_LUA_FNC_G_LED_MIN_short,
        GRID_LUA_FNC_G_LED_MIN_human: GRID_LUA_FNC_G_LED_MIN_human,
        GRID_LUA_FNC_G_LED_MIN_fnptr: GRID_LUA_FNC_G_LED_MIN_fnptr,
        GRID_LUA_FNC_G_LED_MID_short: GRID_LUA_FNC_G_LED_MID_short,
        GRID_LUA_FNC_G_LED_MID_human: GRID_LUA_FNC_G_LED_MID_human,
        GRID_LUA_FNC_G_LED_MID_fnptr: GRID_LUA_FNC_G_LED_MID_fnptr,
        GRID_LUA_FNC_G_LED_MAX_short: GRID_LUA_FNC_G_LED_MAX_short,
        GRID_LUA_FNC_G_LED_MAX_human: GRID_LUA_FNC_G_LED_MAX_human,
        GRID_LUA_FNC_G_LED_MAX_fnptr: GRID_LUA_FNC_G_LED_MAX_fnptr,
        GRID_LUA_FNC_G_LED_COLOR_short: GRID_LUA_FNC_G_LED_COLOR_short,
        GRID_LUA_FNC_G_LED_COLOR_human: GRID_LUA_FNC_G_LED_COLOR_human,
        GRID_LUA_FNC_G_LED_COLOR_fnptr: GRID_LUA_FNC_G_LED_COLOR_fnptr,
        GRID_LUA_FNC_G_LED_FREQUENCY_short: GRID_LUA_FNC_G_LED_FREQUENCY_short,
        GRID_LUA_FNC_G_LED_FREQUENCY_human: GRID_LUA_FNC_G_LED_FREQUENCY_human,
        GRID_LUA_FNC_G_LED_FREQUENCY_fnptr: GRID_LUA_FNC_G_LED_FREQUENCY_fnptr,
        GRID_LUA_FNC_G_LED_SHAPE_short: GRID_LUA_FNC_G_LED_SHAPE_short,
        GRID_LUA_FNC_G_LED_SHAPE_human: GRID_LUA_FNC_G_LED_SHAPE_human,
        GRID_LUA_FNC_G_LED_SHAPE_fnptr: GRID_LUA_FNC_G_LED_SHAPE_fnptr,
        GRID_LUA_FNC_G_LED_PSF_short: GRID_LUA_FNC_G_LED_PSF_short,
        GRID_LUA_FNC_G_LED_PSF_human: GRID_LUA_FNC_G_LED_PSF_human,
        GRID_LUA_FNC_G_LED_PSF_fnptr: GRID_LUA_FNC_G_LED_PSF_fnptr,
        GRID_LUA_FNC_G_MIDI_SEND_short: GRID_LUA_FNC_G_MIDI_SEND_short,
        GRID_LUA_FNC_G_MIDI_SEND_human: GRID_LUA_FNC_G_MIDI_SEND_human,
        GRID_LUA_FNC_G_MIDI_SEND_fnptr: GRID_LUA_FNC_G_MIDI_SEND_fnptr,
        GRID_LUA_FNC_E_ELEMENT_INDEX_index: GRID_LUA_FNC_E_ELEMENT_INDEX_index,
        GRID_LUA_FNC_E_ELEMENT_INDEX_helper: GRID_LUA_FNC_E_ELEMENT_INDEX_helper,
        GRID_LUA_FNC_E_ELEMENT_INDEX_short: GRID_LUA_FNC_E_ELEMENT_INDEX_short,
        GRID_LUA_FNC_E_ELEMENT_INDEX_human: GRID_LUA_FNC_E_ELEMENT_INDEX_human,
        GRID_LUA_FNC_E_BUTTON_NUMBER_index: GRID_LUA_FNC_E_BUTTON_NUMBER_index,
        GRID_LUA_FNC_E_BUTTON_NUMBER_helper: GRID_LUA_FNC_E_BUTTON_NUMBER_helper,
        GRID_LUA_FNC_E_BUTTON_NUMBER_short: GRID_LUA_FNC_E_BUTTON_NUMBER_short,
        GRID_LUA_FNC_E_BUTTON_NUMBER_human: GRID_LUA_FNC_E_BUTTON_NUMBER_human,
        GRID_LUA_FNC_E_BUTTON_VALUE_index: GRID_LUA_FNC_E_BUTTON_VALUE_index,
        GRID_LUA_FNC_E_BUTTON_VALUE_helper: GRID_LUA_FNC_E_BUTTON_VALUE_helper,
        GRID_LUA_FNC_E_BUTTON_VALUE_short: GRID_LUA_FNC_E_BUTTON_VALUE_short,
        GRID_LUA_FNC_E_BUTTON_VALUE_human: GRID_LUA_FNC_E_BUTTON_VALUE_human,
        GRID_LUA_FNC_E_BUTTON_MIN_index: GRID_LUA_FNC_E_BUTTON_MIN_index,
        GRID_LUA_FNC_E_BUTTON_MIN_helper: GRID_LUA_FNC_E_BUTTON_MIN_helper,
        GRID_LUA_FNC_E_BUTTON_MIN_short: GRID_LUA_FNC_E_BUTTON_MIN_short,
        GRID_LUA_FNC_E_BUTTON_MIN_human: GRID_LUA_FNC_E_BUTTON_MIN_human,
        GRID_LUA_FNC_E_BUTTON_MAX_index: GRID_LUA_FNC_E_BUTTON_MAX_index,
        GRID_LUA_FNC_E_BUTTON_MAX_helper: GRID_LUA_FNC_E_BUTTON_MAX_helper,
        GRID_LUA_FNC_E_BUTTON_MAX_short: GRID_LUA_FNC_E_BUTTON_MAX_short,
        GRID_LUA_FNC_E_BUTTON_MAX_human: GRID_LUA_FNC_E_BUTTON_MAX_human,
        GRID_LUA_FNC_E_BUTTON_MODE_index: GRID_LUA_FNC_E_BUTTON_MODE_index,
        GRID_LUA_FNC_E_BUTTON_MODE_helper: GRID_LUA_FNC_E_BUTTON_MODE_helper,
        GRID_LUA_FNC_E_BUTTON_MODE_short: GRID_LUA_FNC_E_BUTTON_MODE_short,
        GRID_LUA_FNC_E_BUTTON_MODE_human: GRID_LUA_FNC_E_BUTTON_MODE_human,
        GRID_LUA_FNC_E_BUTTON_ELAPSED_index: GRID_LUA_FNC_E_BUTTON_ELAPSED_index,
        GRID_LUA_FNC_E_BUTTON_ELAPSED_helper: GRID_LUA_FNC_E_BUTTON_ELAPSED_helper,
        GRID_LUA_FNC_E_BUTTON_ELAPSED_short: GRID_LUA_FNC_E_BUTTON_ELAPSED_short,
        GRID_LUA_FNC_E_BUTTON_ELAPSED_human: GRID_LUA_FNC_E_BUTTON_ELAPSED_human,
        GRID_LUA_FNC_E_BUTTON_STATE_index: GRID_LUA_FNC_E_BUTTON_STATE_index,
        GRID_LUA_FNC_E_BUTTON_STATE_helper: GRID_LUA_FNC_E_BUTTON_STATE_helper,
        GRID_LUA_FNC_E_BUTTON_STATE_short: GRID_LUA_FNC_E_BUTTON_STATE_short,
        GRID_LUA_FNC_E_BUTTON_STATE_human: GRID_LUA_FNC_E_BUTTON_STATE_human,
        GRID_LUA_FNC_E_ENCODER_NUMBER_index: GRID_LUA_FNC_E_ENCODER_NUMBER_index,
        GRID_LUA_FNC_E_ENCODER_NUMBER_helper: GRID_LUA_FNC_E_ENCODER_NUMBER_helper,
        GRID_LUA_FNC_E_ENCODER_NUMBER_short: GRID_LUA_FNC_E_ENCODER_NUMBER_short,
        GRID_LUA_FNC_E_ENCODER_NUMBER_human: GRID_LUA_FNC_E_ENCODER_NUMBER_human,
        GRID_LUA_FNC_E_ENCODER_VALUE_index: GRID_LUA_FNC_E_ENCODER_VALUE_index,
        GRID_LUA_FNC_E_ENCODER_VALUE_helper: GRID_LUA_FNC_E_ENCODER_VALUE_helper,
        GRID_LUA_FNC_E_ENCODER_VALUE_short: GRID_LUA_FNC_E_ENCODER_VALUE_short,
        GRID_LUA_FNC_E_ENCODER_VALUE_human: GRID_LUA_FNC_E_ENCODER_VALUE_human,
        GRID_LUA_FNC_E_ENCODER_MIN_index: GRID_LUA_FNC_E_ENCODER_MIN_index,
        GRID_LUA_FNC_E_ENCODER_MIN_helper: GRID_LUA_FNC_E_ENCODER_MIN_helper,
        GRID_LUA_FNC_E_ENCODER_MIN_short: GRID_LUA_FNC_E_ENCODER_MIN_short,
        GRID_LUA_FNC_E_ENCODER_MIN_human: GRID_LUA_FNC_E_ENCODER_MIN_human,
        GRID_LUA_FNC_E_ENCODER_MAX_index: GRID_LUA_FNC_E_ENCODER_MAX_index,
        GRID_LUA_FNC_E_ENCODER_MAX_helper: GRID_LUA_FNC_E_ENCODER_MAX_helper,
        GRID_LUA_FNC_E_ENCODER_MAX_short: GRID_LUA_FNC_E_ENCODER_MAX_short,
        GRID_LUA_FNC_E_ENCODER_MAX_human: GRID_LUA_FNC_E_ENCODER_MAX_human,
        GRID_LUA_FNC_E_ENCODER_MODE_index: GRID_LUA_FNC_E_ENCODER_MODE_index,
        GRID_LUA_FNC_E_ENCODER_MODE_helper: GRID_LUA_FNC_E_ENCODER_MODE_helper,
        GRID_LUA_FNC_E_ENCODER_MODE_short: GRID_LUA_FNC_E_ENCODER_MODE_short,
        GRID_LUA_FNC_E_ENCODER_MODE_human: GRID_LUA_FNC_E_ENCODER_MODE_human,
        GRID_LUA_FNC_E_ENCODER_ELAPSED_index: GRID_LUA_FNC_E_ENCODER_ELAPSED_index,
        GRID_LUA_FNC_E_ENCODER_ELAPSED_helper: GRID_LUA_FNC_E_ENCODER_ELAPSED_helper,
        GRID_LUA_FNC_E_ENCODER_ELAPSED_short: GRID_LUA_FNC_E_ENCODER_ELAPSED_short,
        GRID_LUA_FNC_E_ENCODER_ELAPSED_human: GRID_LUA_FNC_E_ENCODER_ELAPSED_human,
        GRID_LUA_FNC_E_LIST_length: GRID_LUA_FNC_E_LIST_length,
        GRID_LUA_E_LIST_init: GRID_LUA_E_LIST_init,
        GRID_LUA_FNC_P_ELEMENT_INDEX_index: GRID_LUA_FNC_P_ELEMENT_INDEX_index,
        GRID_LUA_FNC_P_ELEMENT_INDEX_helper: GRID_LUA_FNC_P_ELEMENT_INDEX_helper,
        GRID_LUA_FNC_P_ELEMENT_INDEX_short: GRID_LUA_FNC_P_ELEMENT_INDEX_short,
        GRID_LUA_FNC_P_ELEMENT_INDEX_human: GRID_LUA_FNC_P_ELEMENT_INDEX_human,
        GRID_LUA_FNC_P_POTMETER_NUMBER_index: GRID_LUA_FNC_P_POTMETER_NUMBER_index,
        GRID_LUA_FNC_P_POTMETER_NUMBER_helper: GRID_LUA_FNC_P_POTMETER_NUMBER_helper,
        GRID_LUA_FNC_P_POTMETER_NUMBER_short: GRID_LUA_FNC_P_POTMETER_NUMBER_short,
        GRID_LUA_FNC_P_POTMETER_NUMBER_human: GRID_LUA_FNC_P_POTMETER_NUMBER_human,
        GRID_LUA_FNC_P_POTMETER_VALUE_index: GRID_LUA_FNC_P_POTMETER_VALUE_index,
        GRID_LUA_FNC_P_POTMETER_VALUE_helper: GRID_LUA_FNC_P_POTMETER_VALUE_helper,
        GRID_LUA_FNC_P_POTMETER_VALUE_short: GRID_LUA_FNC_P_POTMETER_VALUE_short,
        GRID_LUA_FNC_P_POTMETER_VALUE_human: GRID_LUA_FNC_P_POTMETER_VALUE_human,
        GRID_LUA_FNC_P_POTMETER_MIN_index: GRID_LUA_FNC_P_POTMETER_MIN_index,
        GRID_LUA_FNC_P_POTMETER_MIN_helper: GRID_LUA_FNC_P_POTMETER_MIN_helper,
        GRID_LUA_FNC_P_POTMETER_MIN_short: GRID_LUA_FNC_P_POTMETER_MIN_short,
        GRID_LUA_FNC_P_POTMETER_MIN_human: GRID_LUA_FNC_P_POTMETER_MIN_human,
        GRID_LUA_FNC_P_POTMETER_MAX_index: GRID_LUA_FNC_P_POTMETER_MAX_index,
        GRID_LUA_FNC_P_POTMETER_MAX_helper: GRID_LUA_FNC_P_POTMETER_MAX_helper,
        GRID_LUA_FNC_P_POTMETER_MAX_short: GRID_LUA_FNC_P_POTMETER_MAX_short,
        GRID_LUA_FNC_P_POTMETER_MAX_human: GRID_LUA_FNC_P_POTMETER_MAX_human,
        GRID_LUA_FNC_P_POTMETER_MODE_index: GRID_LUA_FNC_P_POTMETER_MODE_index,
        GRID_LUA_FNC_P_POTMETER_MODE_helper: GRID_LUA_FNC_P_POTMETER_MODE_helper,
        GRID_LUA_FNC_P_POTMETER_MODE_short: GRID_LUA_FNC_P_POTMETER_MODE_short,
        GRID_LUA_FNC_P_POTMETER_MODE_human: GRID_LUA_FNC_P_POTMETER_MODE_human,
        GRID_LUA_FNC_P_POTMETER_ELAPSED_index: GRID_LUA_FNC_P_POTMETER_ELAPSED_index,
        GRID_LUA_FNC_P_POTMETER_ELAPSED_helper: GRID_LUA_FNC_P_POTMETER_ELAPSED_helper,
        GRID_LUA_FNC_P_POTMETER_ELAPSED_short: GRID_LUA_FNC_P_POTMETER_ELAPSED_short,
        GRID_LUA_FNC_P_POTMETER_ELAPSED_human: GRID_LUA_FNC_P_POTMETER_ELAPSED_human,
        GRID_LUA_FNC_P_LIST_length: GRID_LUA_FNC_P_LIST_length,
        GRID_LUA_P_LIST_init: GRID_LUA_P_LIST_init,
        GRID_LUA_FNC_B_ELEMENT_INDEX_index: GRID_LUA_FNC_B_ELEMENT_INDEX_index,
        GRID_LUA_FNC_B_ELEMENT_INDEX_helper: GRID_LUA_FNC_B_ELEMENT_INDEX_helper,
        GRID_LUA_FNC_B_ELEMENT_INDEX_short: GRID_LUA_FNC_B_ELEMENT_INDEX_short,
        GRID_LUA_FNC_B_ELEMENT_INDEX_human: GRID_LUA_FNC_B_ELEMENT_INDEX_human,
        GRID_LUA_FNC_B_BUTTON_NUMBER_index: GRID_LUA_FNC_B_BUTTON_NUMBER_index,
        GRID_LUA_FNC_B_BUTTON_NUMBER_helper: GRID_LUA_FNC_B_BUTTON_NUMBER_helper,
        GRID_LUA_FNC_B_BUTTON_NUMBER_short: GRID_LUA_FNC_B_BUTTON_NUMBER_short,
        GRID_LUA_FNC_B_BUTTON_NUMBER_human: GRID_LUA_FNC_B_BUTTON_NUMBER_human,
        GRID_LUA_FNC_B_BUTTON_VALUE_index: GRID_LUA_FNC_B_BUTTON_VALUE_index,
        GRID_LUA_FNC_B_BUTTON_VALUE_helper: GRID_LUA_FNC_B_BUTTON_VALUE_helper,
        GRID_LUA_FNC_B_BUTTON_VALUE_short: GRID_LUA_FNC_B_BUTTON_VALUE_short,
        GRID_LUA_FNC_B_BUTTON_VALUE_human: GRID_LUA_FNC_B_BUTTON_VALUE_human,
        GRID_LUA_FNC_B_BUTTON_MIN_index: GRID_LUA_FNC_B_BUTTON_MIN_index,
        GRID_LUA_FNC_B_BUTTON_MIN_helper: GRID_LUA_FNC_B_BUTTON_MIN_helper,
        GRID_LUA_FNC_B_BUTTON_MIN_short: GRID_LUA_FNC_B_BUTTON_MIN_short,
        GRID_LUA_FNC_B_BUTTON_MIN_human: GRID_LUA_FNC_B_BUTTON_MIN_human,
        GRID_LUA_FNC_B_BUTTON_MAX_index: GRID_LUA_FNC_B_BUTTON_MAX_index,
        GRID_LUA_FNC_B_BUTTON_MAX_helper: GRID_LUA_FNC_B_BUTTON_MAX_helper,
        GRID_LUA_FNC_B_BUTTON_MAX_short: GRID_LUA_FNC_B_BUTTON_MAX_short,
        GRID_LUA_FNC_B_BUTTON_MAX_human: GRID_LUA_FNC_B_BUTTON_MAX_human,
        GRID_LUA_FNC_B_BUTTON_MODE_index: GRID_LUA_FNC_B_BUTTON_MODE_index,
        GRID_LUA_FNC_B_BUTTON_MODE_helper: GRID_LUA_FNC_B_BUTTON_MODE_helper,
        GRID_LUA_FNC_B_BUTTON_MODE_short: GRID_LUA_FNC_B_BUTTON_MODE_short,
        GRID_LUA_FNC_B_BUTTON_MODE_human: GRID_LUA_FNC_B_BUTTON_MODE_human,
        GRID_LUA_FNC_B_BUTTON_ELAPSED_index: GRID_LUA_FNC_B_BUTTON_ELAPSED_index,
        GRID_LUA_FNC_B_BUTTON_ELAPSED_helper: GRID_LUA_FNC_B_BUTTON_ELAPSED_helper,
        GRID_LUA_FNC_B_BUTTON_ELAPSED_short: GRID_LUA_FNC_B_BUTTON_ELAPSED_short,
        GRID_LUA_FNC_B_BUTTON_ELAPSED_human: GRID_LUA_FNC_B_BUTTON_ELAPSED_human,
        GRID_LUA_FNC_B_BUTTON_STATE_index: GRID_LUA_FNC_B_BUTTON_STATE_index,
        GRID_LUA_FNC_B_BUTTON_STATE_helper: GRID_LUA_FNC_B_BUTTON_STATE_helper,
        GRID_LUA_FNC_B_BUTTON_STATE_short: GRID_LUA_FNC_B_BUTTON_STATE_short,
        GRID_LUA_FNC_B_BUTTON_STATE_human: GRID_LUA_FNC_B_BUTTON_STATE_human,
        GRID_LUA_FNC_B_LIST_length: GRID_LUA_FNC_B_LIST_length,
        GRID_LUA_B_LIST_init: GRID_LUA_B_LIST_init,
        GRID_LUA_KW_ELEMENT_short: GRID_LUA_KW_ELEMENT_short,
        GRID_LUA_KW_THIS_short: GRID_LUA_KW_THIS_short,
        GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH: GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH,
        GRID_PARAMETER_ELEMENTTYPE_SYSTEM_code: GRID_PARAMETER_ELEMENTTYPE_SYSTEM_code,
        GRID_PARAMETER_ELEMENTTYPE_POTENTIOMETER_code: GRID_PARAMETER_ELEMENTTYPE_POTENTIOMETER_code,
        GRID_PARAMETER_ELEMENTTYPE_BUTTON_code: GRID_PARAMETER_ELEMENTTYPE_BUTTON_code,
        GRID_PARAMETER_ELEMENTTYPE_ENCODER_code: GRID_PARAMETER_ELEMENTTYPE_ENCODER_code,
        GRID_CLASS_EVENT_code: GRID_CLASS_EVENT_code,
        GRID_CLASS_EVENT_frame: GRID_CLASS_EVENT_frame,
        GRID_CLASS_EVENT_BANKNUMBER_offset: GRID_CLASS_EVENT_BANKNUMBER_offset,
        GRID_CLASS_EVENT_BANKNUMBER_length: GRID_CLASS_EVENT_BANKNUMBER_length,
        GRID_CLASS_EVENT_ELEMENTNUMBER_offset: GRID_CLASS_EVENT_ELEMENTNUMBER_offset,
        GRID_CLASS_EVENT_ELEMENTNUMBER_length: GRID_CLASS_EVENT_ELEMENTNUMBER_length,
        GRID_CLASS_EVENT_EVENTTYPE_offset: GRID_CLASS_EVENT_EVENTTYPE_offset,
        GRID_CLASS_EVENT_EVENTTYPE_length: GRID_CLASS_EVENT_EVENTTYPE_length,
        GRID_CLASS_EVENT_EVENTPARAM_offset: GRID_CLASS_EVENT_EVENTPARAM_offset,
        GRID_CLASS_EVENT_EVENTPARAM_length: GRID_CLASS_EVENT_EVENTPARAM_length,
        GRID_CLASS_GLOBALSTORE_code: GRID_CLASS_GLOBALSTORE_code,
        GRID_CLASS_GLOBALSTORE_frame: GRID_CLASS_GLOBALSTORE_frame,
        GRID_CLASS_GLOBALLOAD_code: GRID_CLASS_GLOBALLOAD_code,
        GRID_CLASS_GLOBALLOAD_frame: GRID_CLASS_GLOBALLOAD_frame,
        GRID_CLASS_GLOBALCLEAR_code: GRID_CLASS_GLOBALCLEAR_code,
        GRID_CLASS_GLOBALCLEAR_frame: GRID_CLASS_GLOBALCLEAR_frame,
        GRID_CLASS_GLOBALRECALL_code: GRID_CLASS_GLOBALRECALL_code,
        GRID_CLASS_GLOBALRECALL_frame: GRID_CLASS_GLOBALRECALL_frame,
        GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset: GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset,
        GRID_CLASS_GLOBALRECALL_BANKNUMBER_length: GRID_CLASS_GLOBALRECALL_BANKNUMBER_length,
        GRID_CLASS_LOCALSTORE_code: GRID_CLASS_LOCALSTORE_code,
        GRID_CLASS_LOCALSTORE_frame: GRID_CLASS_LOCALSTORE_frame,
        GRID_CLASS_LOCALLOAD_code: GRID_CLASS_LOCALLOAD_code,
        GRID_CLASS_LOCALLOAD_frame: GRID_CLASS_LOCALLOAD_frame,
        GRID_CLASS_LOCALCLEAR_code: GRID_CLASS_LOCALCLEAR_code,
        GRID_CLASS_LOCALCLEAR_frame: GRID_CLASS_LOCALCLEAR_frame,
        GRID_CLASS_CONFIGURATION_code: GRID_CLASS_CONFIGURATION_code,
        GRID_CLASS_CONFIGURATION_frame: GRID_CLASS_CONFIGURATION_frame,
        GRID_CLASS_CONFIGURATION_frame_start: GRID_CLASS_CONFIGURATION_frame_start,
        GRID_CLASS_CONFIGURATION_frame_end: GRID_CLASS_CONFIGURATION_frame_end,
        GRID_CLASS_CONFIGURATION_BANKNUMBER_offset: GRID_CLASS_CONFIGURATION_BANKNUMBER_offset,
        GRID_CLASS_CONFIGURATION_BANKNUMBER_length: GRID_CLASS_CONFIGURATION_BANKNUMBER_length,
        GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset: GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset,
        GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length: GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length,
        GRID_CLASS_CONFIGURATION_EVENTTYPE_offset: GRID_CLASS_CONFIGURATION_EVENTTYPE_offset,
        GRID_CLASS_CONFIGURATION_EVENTTYPE_length: GRID_CLASS_CONFIGURATION_EVENTTYPE_length,
        GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset: GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset,
        GRID_CLASS_CONFIGURATION_ACTIONSTRING_length: GRID_CLASS_CONFIGURATION_ACTIONSTRING_length,
        GRID_CLASS_CONFIGDEFAULT_code: GRID_CLASS_CONFIGDEFAULT_code,
        GRID_CLASS_CONFIGDEFAULT_frame: GRID_CLASS_CONFIGDEFAULT_frame,
        GRID_CLASS_CONFIGDEFAULT_frame_start: GRID_CLASS_CONFIGDEFAULT_frame_start,
        GRID_CLASS_CONFIGDEFAULT_frame_end: GRID_CLASS_CONFIGDEFAULT_frame_end,
        GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset: GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset,
        GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_length: GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_length,
        GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset: GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset,
        GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_length: GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_length,
        GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset: GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset,
        GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_length: GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_length,
        GRID_CLASS_CONFIG_code: GRID_CLASS_CONFIG_code,
        GRID_CLASS_CONFIG_frame: GRID_CLASS_CONFIG_frame,
        GRID_CLASS_CONFIG_frame_start: GRID_CLASS_CONFIG_frame_start,
        GRID_CLASS_CONFIG_frame_end: GRID_CLASS_CONFIG_frame_end,
        GRID_CLASS_CONFIG_PAGENUMBER_offset: GRID_CLASS_CONFIG_PAGENUMBER_offset,
        GRID_CLASS_CONFIG_PAGENUMBER_length: GRID_CLASS_CONFIG_PAGENUMBER_length,
        GRID_CLASS_CONFIG_ELEMENTNUMBER_offset: GRID_CLASS_CONFIG_ELEMENTNUMBER_offset,
        GRID_CLASS_CONFIG_ELEMENTNUMBER_length: GRID_CLASS_CONFIG_ELEMENTNUMBER_length,
        GRID_CLASS_CONFIG_EVENTTYPE_offset: GRID_CLASS_CONFIG_EVENTTYPE_offset,
        GRID_CLASS_CONFIG_EVENTTYPE_length: GRID_CLASS_CONFIG_EVENTTYPE_length,
        GRID_CLASS_CONFIG_ACTIONLENGTH_offset: GRID_CLASS_CONFIG_ACTIONLENGTH_offset,
        GRID_CLASS_CONFIG_ACTIONLENGTH_length: GRID_CLASS_CONFIG_ACTIONLENGTH_length,
        GRID_CLASS_CONFIG_ACTIONSTRING_offset: GRID_CLASS_CONFIG_ACTIONSTRING_offset,
        GRID_CLASS_CONFIG_ACTIONSTRING_length: GRID_CLASS_CONFIG_ACTIONSTRING_length,
        GRID_CLASS_HIDKEYSTATUS_code: GRID_CLASS_HIDKEYSTATUS_code,
        GRID_CLASS_HIDKEYSTATUS_frame: GRID_CLASS_HIDKEYSTATUS_frame,
        GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset: GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset,
        GRID_CLASS_HIDKEYSTATUS_ISENABLED_length: GRID_CLASS_HIDKEYSTATUS_ISENABLED_length,
        GRID_CLASS_HIDKEYBOARD_code: GRID_CLASS_HIDKEYBOARD_code,
        GRID_CLASS_HIDKEYBOARD_frame: GRID_CLASS_HIDKEYBOARD_frame,
        GRID_CLASS_HIDKEYBOARD_frame_start: GRID_CLASS_HIDKEYBOARD_frame_start,
        GRID_CLASS_HIDKEYBOARD_frame_end: GRID_CLASS_HIDKEYBOARD_frame_end,
        GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset: GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,
        GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length: GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length,
        GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset: GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset,
        GRID_CLASS_HIDKEYBOARD_KEYSTATE_length: GRID_CLASS_HIDKEYBOARD_KEYSTATE_length,
        GRID_CLASS_HIDKEYBOARD_KEYCODE_offset: GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,
        GRID_CLASS_HIDKEYBOARD_KEYCODE_length: GRID_CLASS_HIDKEYBOARD_KEYCODE_length,
        'default': grid_protocol_nightly
    });

    const GRID = grid_protocol;

    function isElectron() {
      // Renderer process
      if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
          return true;
      }

      // Main process
      if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {
          return true;
      }

      // Detect the user agent when the `nodeIntegration` option is set to true
      if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
          return true;
      }

      return false;
    }

    function checkOS() {
        if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
          return process.platform;
      }

      // Main process
      if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {
          return process.platform;
      }

      // Detect the user agent when the `nodeIntegration` option is set to true
      if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
        return process.platform;
      }

      return 'browser';
    }

    const appSettings = writable({
      size: 2,
      version: {
        major: +GRID.GRID_PROTOCOL_VERSION_MAJOR,
        minor: +GRID.GRID_PROTOCOL_VERSION_MINOR,
        patch: +GRID.GRID_PROTOCOL_VERSION_PATCH
      },
      overlays: {controlName: false},
      debugMode: false,
      selectedDisplay: '',
      layoutMode: false,
      isElectron: isElectron(),
      configType: 'uiEvents',
      activePanel: 'gridConfiguration',
      preferences: false,
      os: checkOS()
    });

    const preferenceStore = writable({
      midiMonitor: {
        show: false,
        option: true
      }
    });

    const layout = writable([]);

    // Template Parameter Event Assignment table.
    const TPEA = {
      down: {
        desc: 'down',
        value: '4',
        code: 'DP'
      },
      up: {
        desc: 'up',
        value: '5',
        code: 'DR'
      },
      rotation: {
        // same as slide, just it's easier to read
        desc: 'rotation',
        value: '1',
        code: 'AVC7'
      },
      slide: {
        // same as rotation, just it's easier to read
        desc: 'slide',
        value: '1',
        code: 'AVC7'
      },
      push_rot: {
        desc: 'push rot',
        value: '13',
        code: 'ENCPUSHROT'
      },
      init: {
        desc: 'bank init',
        value: '0',
        code: 'INIT'
      }
    };

    var GRID_CONTROLLER = {

      elementEvents: {
        button: [ TPEA.init, TPEA.down, TPEA.up ],
        potentiometer: [ TPEA.init, TPEA.rotation ],
        fader: [ TPEA.init, TPEA.slide ],
        blank: [],
        encoder: [ TPEA.init, TPEA.down, TPEA.up, TPEA.rotation, TPEA.push_rot ]
      },

      moduleElements: {
        PO16: [
          'potentiometer', 'potentiometer', 'potentiometer', 'potentiometer',
          'potentiometer', 'potentiometer', 'potentiometer', 'potentiometer',
          'potentiometer', 'potentiometer', 'potentiometer', 'potentiometer',
          'potentiometer', 'potentiometer', 'potentiometer', 'potentiometer'
        ],
        PBF4: [
          'potentiometer', 'potentiometer', 'potentiometer', 'potentiometer',
          'fader', 'fader', 'fader', 'fader', 
          'button', 'button', 'button', 'button', 
          'blank', 'blank', 'blank', 'blank'
        ],
        BU16: [
          'button','button','button','button',
          'button','button','button','button',
          'button','button','button','button',
          'button','button','button','button'
        ],
        EN16: [
          'encoder', 'encoder', 'encoder', 'encoder',
          'encoder', 'encoder', 'encoder', 'encoder',
          'encoder', 'encoder', 'encoder', 'encoder',
          'encoder', 'encoder', 'encoder', 'encoder',
        ]
      },

      create: function(header, version, moduleType, virtual){

        let controller = {
          // implement the module id rep / req
          id: "",
          dx: "",
          dy: "",
          fwVersion: {
            major: "",
            minor: "",
            patch: "",
          },
          alive: Date.now(),
          virtual: "",
          map: {
            top: {dx: "", dy: "",},
            right: {dx: "", dy: ""},
            bot: {dx: "", dy: ""},
            left: {dx: "", dy: ""},
          },
          rot: "",
          isConnectedByUsb: "",
          isLanding: "",
          banks: [], // consider naming to "local"
          global: {}
        };

        // generic check, code below if works only if all parameters are provided
        if(moduleType !== undefined && header !== undefined && version !== undefined && moduleType !== undefined && virtual !== undefined){
          
          controller = {
            // implement the module id rep / req
            id: moduleType + '_' + 'dx:' + header.dx + ';dy:' + header.dy,
            dx: header.dx,
            dy: header.dy,
            fwVersion: {
              major: version.vmajor,
              minor: version.vminor,
              patch: version.vpatch
            },
            alive: Date.now(),
            virtual: virtual,
            map: {
              top: {dx: header.dx, dy: header.dy+1},
              right: {dx: header.dx+1, dy: header.dy},
              bot: {dx: header.dx, dy: header.dy-1},
              left: {dx: header.dx-1, dy: header.dy},
            },
            rot: header.rot * -90,
            isConnectedByUsb: (header.dx == 0 && header.dx == 0) ? true : false,
            isLanding: false,
            banks: this.createElementSettings(moduleType, virtual), // consider naming to "local"
            global: {  
              bankColors: [[255,0,0],[255,0,0],[255,0,0],[255,0,0]],
              bankEnabled: [true,true,true,true],
              cfgStatus: virtual ? 'not_expected' : 'expected'
            }
          };
          
        }
        
        return controller;

      },

      createElementSettings: function(moduleType, virtual){

        moduleType = moduleType.substr(0,4);

        let banks = [];

        //banks
        for (let b = 0; b < 4; b++) {  

          let control_elements = [];

          // control elements
          for (let i = 0; i < 16; i++) {
            let events = [];
            let obj = {
              controlElementType: this.moduleElements[moduleType][i],
              controlElementName: '',
            };
            // events
            for (let j=0; j < this.elementEvents[this.moduleElements[moduleType][i]].length; j++) {
              events.push({        
                event: this.elementEvents[this.moduleElements[moduleType][i]][j], 
                // actions // low level config string
                config: [],
                cfgStatus: (virtual || obj.controlElementType == "blank") ? 'not_expected' : 'expected'
              });
            }
            control_elements[i] = {events: events, ...obj, };
          }

          banks[b] = control_elements;

        }

        return banks;
        
      },
        
    };

    let global_id = 0;

    const GRID_PROTOCOL = {

      initialize: function(){

        let HWCFG = {};
        let CONST = {};
        let INSTR = {};
        let CLASSES = {};
        let BRC = {};

        let LUA = {};

        let VERSION = {};
        let PARAMETERS = {};
        let HEARTBEAT_INTERVAL = 0;

        let PROTOCOL = {};

        for (const key in grid_protocol) {
          if(typeof grid_protocol[key] !== 'object'){

            // GRID MODULE HWCFGS
            if(key.startsWith('GRID_MODULE_')){
              let paramName = key.substr('GRID_MODULE_'.length);
              HWCFG[paramName] = +grid_protocol[key];
            }

            if(key == 'GRID_PARAMETER_HEARTBEAT_interval'){
              HEARTBEAT_INTERVAL = +grid_protocol[key] + 10;
            }

            // GRID INSTRUCTIONS
            if(key.startsWith('GRID_INSTR')){
              let paramName = key.slice(11).slice(0,-5);
              let dec = parseInt(grid_protocol[key], 16); 
              INSTR[paramName] = dec;
            }
            
            // GRID CONSTS
            if(key.startsWith('GRID_CONST')){
              let paramName = key.slice(11);
              let dec = parseInt(grid_protocol[key], 16); 
              CONST[paramName] = dec;
            } 

            // GRID TEMPLATE PARAMETERS
            if(key.startsWith('GRID_PARAMETER_TEMPLATEINDEX_')){
              const param = key.substr('GRID_PARAMETER_TEMPLATEINDEX_'.length).slice(0,-5);
              PARAMETERS[param] = grid_protocol[key];
            }

            // GRID VERSION
            if(key.startsWith('GRID_PROTOCOL_VERSION_')){
              const param = key.substr('GRID_PROTOCOL_VERSION_'.length);
              VERSION[param] = +grid_protocol[key];
            }

            // GRID BROADCAST 
            else if(key.startsWith('GRID_BRC_') && key['GRID_BRC_'.length] == key['GRID_BRC_'.length].toUpperCase()){    
              const param = key.substr('GRID_BRC_'.length).split('_');
              BRC[param[0]] = {offset: 0, length: 0};
            } 

            // GRID CLASS XXX CODES
            else if(key.startsWith('GRID_CLASS_') && key.slice(-4) == 'code'){
              CLASSES[key.slice('GRID_CLASS_'.length).slice(0,-5)] = +grid_protocol[key];
            }

            if(key.startsWith('GRID_LUA_')){
              let paramSet = key.split('_');
              let value = grid_protocol[key];
              createNestedObject( LUA, paramSet.slice(3,), value );
            }

            let param = '';

            if(key.startsWith('GRID_CLASS_')){
              param = key.split('_')[2];
              if(param[0] == param[0].toUpperCase()){
                if (!PROTOCOL.hasOwnProperty(param)) {
                  PROTOCOL[param] = {};
                }
              }
            }

          }
        }

        function createNestedObject( base, names, value ) {
          // If a value is given, remove the last name and keep it for later:
          var lastName = arguments.length === 3 ? names.pop() : false;
      
          // Walk the hierarchy, creating new objects where needed.
          // If the lastName was removed, then the last object is not set yet:
          for( var i = 0; i < names.length; i++ ) {
              base = base[ names[i] ] = base[ names[i] ] || {};
          }
      
          // If a value was given, set it to the last name:
          if( lastName ) base = base[ lastName ] = value;
      
          // Return the last object in the hierarchy:
          return base;
      }  
        for(const key in grid_protocol){
          if(typeof grid_protocol[key] !== 'object'){
            let paramName = '';
            let className = '';
            if(key.startsWith('GRID_CLASS_')){
              className = key.split('_')[2];
              if(className[0] == className[0].toUpperCase()){
                paramName = key.split('_')[3];
                if(paramName[0] == paramName[0].toUpperCase()){
                  if(key.slice(-6) == 'offset'){
                    PROTOCOL[className][paramName] = {...PROTOCOL[className][paramName], offset: 0};
                  }else {
                    PROTOCOL[className][paramName] = {...PROTOCOL[className][paramName], length: 0};
                  }
                  PROTOCOL[className][paramName][key.slice(-6)] = +grid_protocol[key];
                }
              }
            }
          }
        }

        for (const key in grid_protocol) {
          if(typeof grid_protocol[key] !== 'object'){
            if(key.startsWith('GRID_BRC_') && key['GRID_BRC_'.length] == key['GRID_BRC_'.length].toUpperCase()){
              const param = key.substr('GRID_BRC_'.length).split('_');
              BRC[param[0]][param[1]] = +grid_protocol[key];
            }
          }
        }

        this.PROTOCOL = {
          ...PROTOCOL,
          BRC: BRC , 
          LUA: LUA,
          CLASSES: CLASSES, 
          HWCFG: HWCFG, 
          CONST: CONST,
          INSTR: INSTR,
          VERSION: VERSION,
          PARAMETERS: PARAMETERS,
          HEARTBEAT_INTERVAL: HEARTBEAT_INTERVAL,
          AGE: Math.floor(Math.random()*255).toString(16).padStart(2, '0')
        };
        
      },

      decode_config: function(){
        return 'config decoded';
      },

      encode_actions: function(){
        return 'actions encoded';
      },

      decode_serial: function(serialData){
        /**
         * 
         * Slices serial data between STX 0x02 and ETX 0x03 for further processing by GRID_CLASS_XXX_code's.
         * 
         */

        this.PROTOCOL.CLASSES;
        this.PROTOCOL.INSTR;

        let _decoded = [];
        let id = 0; 

        //console.log(serialData);
        serialData.forEach((element,i) => {  
          
          // GRID_CONST_STX -> LENGTH:3 CLASS_code 0xYYY
          if(element == 2){ 
            id = ""+ i +"";
            _decoded = this.build_decoder('main',_decoded, id, serialData, i);    
          }

          // GRID_CONST_ETX
          if(element == 3){
            let obj = _decoded.find(o => o.id === id);
            if(obj !== undefined){
              obj.length = i - obj.offset;
            }
          }
        });

        
        return this.decode_by_class(serialData, _decoded);

      },

      param2lower: function(parameters){
        let obj = {};
        for (const key in parameters) {
          const _key = key.toLowerCase();
          obj[_key] = parameters[key];
        }
        return obj;
      },

      decode_by_class: function(serialData, decoded){

        let DATA = {
          BANKCOLOR: [],
          BANKENABLED: []
        };

        DATA.BRC = this.decode_by_code(serialData, 'BRC');

        decoded.forEach((obj)=>{

          let array = serialData.slice(obj.offset, obj.length + obj.offset);

          // special processing
          if(obj.class == "EVENT"){
            DATA.EVENT = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "HEARTBEAT"){
            DATA.HEARTBEAT = this.decode_by_code(array, obj.class);
            let moduleType = this.utility_moduleLookup(DATA.HEARTBEAT.HWCFG);
            DATA.CONTROLLER = GRID_CONTROLLER.create(
              this.param2lower(DATA.BRC), 
              this.param2lower(DATA.HEARTBEAT), 
              moduleType, 
            false);
          }
          if(obj.class == "CONFIGURATION"){   
            //console.log(array);
            let cfgs = this.detect_class_codes(array);
            let cfg_array = [];
            cfgs.forEach((c,i) => {
              cfg_array[i] = array.slice(c.offset, c.offset + c.length + 1);
            });
            DATA.CONFIGURATION_CFGS = cfg_array;
            DATA.CONFIGURATION = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "RAW"){
            DATA.RAW = { "RAW" : array };
          }

          // normal processing
          if(obj.class == "MIDIRELATIVE"){
            DATA.MIDIRELATIVE = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "MIDIABSOLUTE"){
            DATA.MIDIABSOLUTE = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "BANKACTIVE"){
            DATA.BANKACTIVE = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "LEDPHASE"){
            DATA.LEDPHASE = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "LEDCOLOR"){
            DATA.LEDCOLOR = this.decode_by_code(array, obj.class);
          }
          if(obj.class == "HIDKEYBOARD"){
            DATA.HIDKEYBOARD = this.decode_by_code(array, obj.class);
          }

          // HID state
          if(obj.class == "HIDKEYSTATUS"){
            DATA.HIDKEYSTATUS = this.decode_by_code(array, obj.class);
          }

          // global settings
          if(obj.class == "BANKENABLED"){
            DATA.BANKENABLED.push(this.decode_by_code(array, obj.class));
          }
          if(obj.class == "BANKCOLOR"){
            DATA.BANKCOLOR.push(this.decode_by_code(array, obj.class));
          }

          // commands
          if(obj.class == "LOCALSTORE"){
            DATA.COMMAND = { 'LOCALSTORE': obj.instr };
          }
          if(obj.class == "LOCALRECALL"){
            DATA.COMMAND = { 'LOCALRECALL': obj.instr };
          }
          if(obj.class == "LOCALCLEAR"){
            DATA.COMMAND = { 'LOCALCLEAR': obj.instr };
          }
          if(obj.class == "GLOBALSTORE"){
            DATA.COMMAND = { 'GLOBALSTORE': obj.instr };
          }
          if(obj.class == "GLOBALRECALL"){
            DATA.COMMAND = { 'GLOBALRECALL': obj.instr };
          }
          if(obj.class == "GLOBALCLEAR"){
            DATA.COMMAND = { 'GLOBALCLEAR': obj.instr };
          }

        });

        return DATA;
      },

      decode_by_code: function(serialData, classCode){
        var CLASS = this.PROTOCOL[classCode];
        var object = {};
        for (const param in CLASS) {
          let _value = serialData.slice(
            CLASS[param].offset, CLASS[param].length + CLASS[param].offset
          );    
          let value;

          if (_value[0] < 91 && _value[0] > 64 ){
            value = String.fromCharCode(..._value);
          }else {
            value = parseInt("0x"+String.fromCharCode(..._value));    
          }
           
          if(param == 'DX' || param == 'DY'){
            object[param] = value - 127;
          } else {
            object[param] = value;
          }
        }
       
        return object;
      },

      detect_class_codes(array){
        //console.log(array);
        let _decoded = [];
        let id = '';
        array.forEach((elem, index)=>{
          if(elem == 130){
            id = "" + index + "";
            _decoded = this.build_decoder('config',_decoded, id, array, index);
          }

          if(elem == 131){
            let obj = _decoded.find(o => o.id == id);
            if(obj !== undefined){
              obj.length = index - obj.offset;
            }
          }
        });

        //console.log(array, _decoded);
        return _decoded;
      },

      get_module_info: function(MODULE_INFO){
        let DX = 0;
        let DY = 0;
        let ROT = 0;

        if(MODULE_INFO !== ''){
          DX = +MODULE_INFO.dx + 127;
          DY = +MODULE_INFO.dy + 127;
          switch (MODULE_INFO.rot){
            case -0:
              ROT = 0; break;
            case 90:
              ROT = 1; break;
            case 180:
              ROT = 2; break;
            case 270:
              ROT = 3; break;
          }
        }
        return {ROT, DX, DY};
      },

      build_decoder: function(mode, array, id, data, index){
        const CLASSES = this.PROTOCOL.CLASSES;
        const INSTR = this.PROTOCOL.INSTR;
        
        // CLASS BUILD
        let class_name = '';
        if(data.length > 3 && mode == 'config'){
          class_name = parseInt("0x"+String.fromCharCode(data[index+1], data[index+2], data[index+3]));
        }

        if(mode == 'main' && !(data[index] == 2 && data[index+1] == 48 && data[index+2] == 3)){      
          class_name = parseInt("0x"+String.fromCharCode(data[index+1], data[index+2], data[index+3]));
        }

        // INSTR DETECTION
        let instr = parseInt('0x'+String.fromCharCode(data[index+4]));

        let rawFlag = true;
        for (const key in INSTR){
          if(INSTR[key] == instr){ 
            instr = key;
          }
        }       

        for (const key in CLASSES){
          if(CLASSES[key] == class_name){ 
            array.push({id: id, class: key, offset: index, instr: instr});  
            rawFlag = false;   
          }
        }    

        if(rawFlag){
          array.push({id: id, class: "RAW", offset: index, instr: instr}); 
        }

        
        return array;
      },

      cfg_to_action: function(CFGS){

        let _decoded = [];

        if(CFGS !== "" && CFGS !== undefined){
          _decoded = this.detect_class_codes(CFGS);
          let actions = {};

          _decoded.forEach(obj => {
            let cfg = CFGS.slice(obj.offset, obj.offset + obj.length);
            // RAW EXCEPTION
            if(obj.class == "RAW"){
              let output = cfg.map(arg => {
                return String.fromCharCode(arg)
              });
              output = output.splice(1,).join('');
              actions = {name: this.transform_action_name(obj.class), value: obj.class, parameters: output};
            } else {
              actions = {name: this.transform_action_name(obj.class), value: obj.class, parameters: this.decode_by_code(cfg, obj.class)};
            }
          });
          
          return actions
        }
       
      },

      transform_action_name: function(actionValue){

        let name = "";

        if(actionValue == "MIDIRELATIVE"){
          name = "MIDI Dynamic";
        }
        if(actionValue == "MIDIABSOLUTE"){
          name = "MIDI Static";
        }
        if(actionValue == "LEDCOLOR"){
          name = "LED Color";
        }
        if(actionValue == "LEDPHASE"){
          name = "LED Phase";
        }
        if(actionValue == "HIDKEYBOARD"){
          name = "Keyboard";
        }
        return name;
      },

      // former configure(), special cfg mode for raw actions
      action_to_cfg: function(CLASS_NAME, PARAMETERS){

        let body = [];

        if(CLASS_NAME == "RAW"){

          body = PARAMETERS;

        } else {

          let CLASS = this.PROTOCOL.CLASSES[CLASS_NAME].toString(16).padStart(3,'0');

          body = [
            this.PROTOCOL.CONST.STX + 128,
            ...[CLASS.charCodeAt(0), CLASS.charCodeAt(1), CLASS.charCodeAt(2)],
            this.PROTOCOL.INSTR.EXECUTE.toString(16).charCodeAt(0),
            ...this.encode_class_parameters(PARAMETERS, this.PROTOCOL[CLASS_NAME]),
            this.PROTOCOL.CONST.ETX + 128
          ];

        }

        return body;
      
      },

      // former serialize_actions()
      serialize_cfgs: function(PARAMETERS, ACTIONS){
        let CONFIG = this.PROTOCOL.CLASSES['CONFIGURATION'].toString(16).padStart(3, '0');
        const body = [
            this.PROTOCOL.CONST.STX,
            ...[CONFIG.charCodeAt(0), CONFIG.charCodeAt(1), CONFIG.charCodeAt(2)],
            this.PROTOCOL.INSTR.EXECUTE.toString(16).charCodeAt(0) ,
            ...this.encode_class_parameters(PARAMETERS, this.PROTOCOL['CONFIGURATION']),
            ...ACTIONS,
            this.PROTOCOL.CONST.ETX
        ];
        return body;
      },

      configure_raw: function(PARAMETERS){
        const body = [
            this.PROTOCOL.CONST.STX + 128,
            ...PARAMETERS,
            this.PROTOCOL.CONST.ETX + 128
        ];
        return body;
      },

      encode: function (MODULE_INFO, CLASS_NAME, INSTR_CODE, PARAMETERS, SERIALIZED){

        const BRC = this.get_module_info(MODULE_INFO);

        const PROTOCOL = this.PROTOCOL;

        const prepend = [PROTOCOL.CONST.SOH, PROTOCOL.CONST.BRC];
        
        let BRC_PARAMETERS = [
          {ID: this.utility_genId()}, 
          {DX: BRC.DX}, 
          {DY: BRC.DY}, 
          {AGE: PROTOCOL.AGE}, // ON PROTOCOL INIT, THIS IS GENERATED!
          {ROT: BRC.ROT}
        ];

        BRC_PARAMETERS = this.encode_class_parameters(BRC_PARAMETERS, PROTOCOL['BRC']);

        let command = '';

        if(SERIALIZED !== ''){

          command = SERIALIZED;

        } else {
          let CLASS = PROTOCOL.CLASSES[CLASS_NAME].toString(16).padStart(3,'0');
          command = [
            PROTOCOL.CONST.STX,
            ...[CLASS.charCodeAt(0), CLASS.charCodeAt(1), CLASS.charCodeAt(2)],
            PROTOCOL.INSTR[INSTR_CODE].toString(16).charCodeAt(0),
            ...this.encode_class_parameters(PARAMETERS, PROTOCOL[CLASS_NAME]),
            PROTOCOL.CONST.ETX
          ];
        }  
         
        const append = [
          PROTOCOL.CONST.EOB,
          ...command ,
          PROTOCOL.CONST.EOT
        ];

        let message = prepend.concat(BRC_PARAMETERS, append);

        let length = (message.length+2).toString(16).padStart(2,'0');
        length = [length.charCodeAt(0), length.charCodeAt(1)];
        message = [...message.slice(0,2), ...length, ...message.slice(2,)];

        let checksum = [...message].reduce((a, b) => a ^ b).toString(16).padStart(2,'0');

        message = [...message, checksum.charCodeAt(0), checksum.charCodeAt(1)];

        return message;
      },

      encode_class_parameters: function(PARAMETERS, INFO){
        //console.log('encode class params',PARAMETERS, INFO)
        let _parameters = [];
        if(PARAMETERS !== ''){
          PARAMETERS.forEach(CLASS => {     
            for (const key in CLASS) {
              let param = [];
              let p = CLASS[key].toString(16).padStart(INFO[key].length,'0');
              for (let i = 0; i < INFO[key].length; i++) {
                param[i] = p.charCodeAt(i);            
              }
              _parameters = [..._parameters, ...param];
            }
          });
        }
        return _parameters;
      },

      encode_debugger: function (brc, command){

        const PROTOCOL = this.PROTOCOL;

        const prepend = String.fromCharCode(PROTOCOL.CONST.SOH) + String.fromCharCode(PROTOCOL.CONST.BRC);

        let BRC_PARAMETERS = [
          this.utility_genId(), +brc[0], +brc[1], +brc[2], +brc[3]
        ];
        
        let params = '';
        BRC_PARAMETERS.forEach(param => {
          params += param.toString(16).padStart(2, '0');
        });
         
        const append = 
          String.fromCharCode(PROTOCOL.CONST.EOB) + 
          command +
          String.fromCharCode(PROTOCOL.CONST.EOT);

        let message = prepend + params + append;

        message = message.slice(0,2) + (message.length+2).toString(16).padStart(2, '0') + message.slice(2,);

        let checksum = [...message].map(a => a.charCodeAt(0)).reduce((a, b) => a ^ b).toString(16); 

        message = message + checksum;

        return message;
      },

      utility_genId: function() {
        if((global_id / 255) == 1){
          global_id = 0;
        }
        return global_id += 1;
      },
      
      utility_moduleLookup: function(hwcfg){
        var HWCFG = this.PROTOCOL.HWCFG;
        for (const key in HWCFG) {
          if(HWCFG[key] == hwcfg)
            return key;
          }
      },
    };

    const parameter_parser$1 = function(param){
      if(param !== "" && param !== undefined){

        let temp_param = [];
        let temp_array = Array.from(param.toString());

        temp_array.forEach((p,i)=>{
          temp_param.push(p.charCodeAt(0));
        });


        let parameter;

        if (temp_param[0] < 91 && temp_param[0] > 64 ){
          parameter = String.fromCharCode(...temp_param);
        }else {
          // length may be changeable in the future, as padding depends on the specific parameter type
          parameter = parseInt(param).toString(16).padStart(2,'0');
        }

        return parameter
      }
    };

    const check_for_matching_value = function (list, parameter, index) {
      let defined = list[index].find(item => item.value == parameter);
      defined ? defined = defined.info : null;
      return defined;
    };

    const WebSocket = require('ws');

    const wss = new WebSocket.Server({port: 1040});

    let connection = undefined;

    let filters = {
      heartbeat: false
    };

    wss.on('connection', function (ws) {
      console.log('Client connected!');
        
      connection = ws;

      ws.on('message', function (evt) {
        const msg = JSON.parse(evt);
        let type = msg.type;
        let data = msg.data;

        if(type == 'filter'){
          filters[data.class] = data.status;
        }
        if(type == 'command'){
          writeSerialCommand(data);
        }
      });


      ws.on('close', function () {
        console.log('Client disconnected!');
        //clearInterval(id);
      });
    });

    function writeSerialCommand({brc, command}){
      let data = GRID_PROTOCOL.encode_debugger(brc, command);
      // websocket debug info to client
      sendDataToClient('output', data);
      serialComm$1.write(data);    
    }


    function sendDataToClient(type, serial){

      if(serial.slice(30).startsWith('010') && serial.length == 48){
        if(filters.heartbeat){
          return;
        } else {
          type = 'heartbeat';
        }
      }

      let _serial = [];
      Array.from(serial).forEach(c => {
        _serial.push(c.charCodeAt(0));
      });

      if(connection !== undefined){
        connection.send(JSON.stringify({type: type, data: _serial}));
      }
      
    }

    function createSerialComm(){
      const store = writable({
        list: [],
        open: undefined,
        selected: '',
        isEnabled: false
      });

      function addToCommDebug(args){
          let output = args;
          if(typeof output == 'object'){
            output = args.map(arg => {
              return String.fromCharCode(arg)
            });
            output = output.join('');
          }
          sendDataToClient('output', output);
      }


      return {
        ...store,
        enabled: (bool) => {
          store.update(store => {store.isEnabled = bool; return store;});
        },
        write: (args) => { 
          if(get_store_value(store).isEnabled){
            addToCommDebug(args);

            let port = get_store_value(store).open;
            
            if(typeof args == 'object')
              port.write([...args, 10]);
            else
              port.write(args+'\n');

            commIndicator.tick('tx');
          }
          return;
        },
        selected: (port) => {
          store.update(store => {
            store.selected = port;
            return store;
          });
          return;
        },
        open: (port) => {
          store.update(store=>{
            store.open = port;
            return store;
          });
          return;
        }
      }
    }

    const serialComm$1 = createSerialComm();

    const commIndicator = createCommIndicator();

    function createCommIndicator(){

      const { subscribe, update } = writable({tx: 0, rx: 0});

    	return {
    		subscribe,
    		tick: (direction) => {
          update(t => { t[direction] = 1; return t});
          setTimeout(()=>{
            update(t => { t[direction] = 0; return t });
          },100);
        }
    	}
    }

    function createSerialCommDebug(){
      const store = writable([]);

      const limit = 100;

      return {
        ...store,
        store: (array) => {
          let serial = get_store_value(store);
          if(serial.length >= limit){
            serial = serial.slice(1);
            serial[serial.length] = {type: 'input', data: array};
          } else {
            serial = [...serial, {type: 'input', data: array}];
          }
          store.update(s => {
            s = serial;
            return s;
          });
        }
      }
    }

    const serialCommDebug = createSerialCommDebug();

    function createMessageStore(){

      const store = writable({
        changed: 0,
        expected: 0,
        fetched: 0,
        received: 0,
        sent_to_grid: 0
      });

      return {
        ...store,

        expected: (num) => {
          store.update(store => {store.expected = num; return store});
        },

        fetched: (num) => {
          store.update(store => {store.fetched = num; return store});
        },

        received: (num) => {
          store.update(store => {store.received = num; return store});
        },

        changed: (num) => {
          store.update(store => {store.changed = num; return store});
        },

        sent_to_grid: (num) => {
          store.update(store => {store.sent_to_grid = num; return store});
        },

        multipleChanges: ( num )=>{
          //store.set({message: `Applying number of changes...`, value: `${max}/${max-num+2}`});
        },
        reset: () => {
        }
      }
    }

    const messageStore = createMessageStore();

    GRID_PROTOCOL.initialize();

    function createRuntimeStore$1(){

      // provide a dummy grid controller module to this store
      const store = writable([]);

      return {
        ...store,
        actionToConfig: (action) => {
          const cfg = GRID_PROTOCOL.action_to_cfg(action.name, action.parameters);
          return cfg;
        },
        configsToActions: (cfgs) => {
          let actions = [];
          cfgs.forEach((cfg,i)=>{
            actions[i] = GRID_PROTOCOL.cfg_to_action(cfg);
          });
          return actions;
        },
        fetchLocalConfig: (controller, inputStore) => {
          const cfg = GRID_PROTOCOL.encode(
            { 
              dx: controller.dx, 
              dy: controller.dy,
              rot: controller.rot
            },
            "CONFIGURATION",
            "FETCH",
            [
              { BANKNUMBER: parameter_parser$1(inputStore.bankActive)}, 
              { ELEMENTNUMBER: parameter_parser$1(inputStore.elementNumber)}, 
              { EVENTTYPE: parameter_parser$1(inputStore.eventType)}, 
              { ACTIONSTRING: "" }
            ],
            ""
          );
          return cfg;
        },
        fetchGlobalConfig: (controller, bank) => {
          const cfg = GRID_PROTOCOL.encode(
            "",
            "GLOBALRECALL",
            "EXECUTE",
            [{BANKNUMBER: bank}],
            ""
          );
          return cfg;
        },
        sendCfgToGrid: (config, moduleInfo, bankNumber, elementNumber, eventType) => {
          const params = [
            { BANKNUMBER: parameter_parser$1(bankNumber) },
            { ELEMENTNUMBER: parameter_parser$1(elementNumber) },
            { EVENTTYPE: parameter_parser$1(eventType) }
          ];
          
          let array = [];
          config.forEach(a => {
            array.push(...a);
          });
      
          const serialized = GRID_PROTOCOL.serialize_cfgs(params, array);
          serialComm$1.write(GRID_PROTOCOL.encode(moduleInfo,'','','',serialized));
        }
      }
    }

    const runtime$1 = createRuntimeStore$1();

    /** 
    export const gridSyncProcess = readable(counter, function start(set){

      function getConfig(controller, inputStore){
        if(controller !== undefined && inputStore !== undefined){
          const fetch = runtime.fetchLocalConfig(controller, inputStore);
          serialComm.write(fetch);
        }
      }

      function sendConfig(config, controller, bankNumber, elementNumber, eventType){
        runtime.sendCfgToGrid(
          config, 
          {
            dx: controller.dx, 
            dy: controller.dy, 
            rot: controller.rot
          },
          bankNumber, 
          elementNumber,
          eventType
        );
      }

      function synchronize(){
        const grid = get(runtime);
        let changes = 0;
        let gate = 0;
        
        let num_of_fetched = 0;
        let num_of_received = 0;
        let num_of_sent_to_grid = 0;
        let num_of_changed = 0;
        grid.forEach((controller) => {
          controller.banks.forEach((bank, bankNumber) => {
            bank.forEach((controlElement, elementNumber) => {
              controlElement.events.forEach(event =>{

                if(event.cfgStatus == "fetched"){
                  num_of_fetched++;
                }

                if(event.cfgStatus == "received"){
                  num_of_received++;
                }

                if(event.cfgStatus == "sent_to_grid"){
                  num_of_sent_to_grid++;
                }

                if(event.cfgStatus == "changed"){
                  num_of_changed++;
                }


                if(event.cfgStatus == "expected" || event.cfgStatus == "fetched" && gate == 0){
                  console.log(controller, event.cfgStatus)
                  getConfig(controller, {bankActive: bankNumber, elementNumber: elementNumber, eventType: event.event.value});
                  event.cfgStatus = "fetched";

                  gate = 1
                }
                
             
                if(event.cfgStatus == "changed" && gate == 0){
                  sendConfig(event.config, controller, bankNumber, elementNumber, event.event.value)
                  event.cfgStatus = "sent_to_grid";
                  gate = 1;
                }
         

              })
            })
          })
        })

        messageStore.fetched(num_of_fetched)
        messageStore.received(num_of_received)
        messageStore.changed(num_of_changed)
        messageStore.sent_to_grid(num_of_sent_to_grid)

        if(changes > 1){
          //messageStore.multipleChanges(changes);
        }
        if(changes == 0){
          //messageStore.reset();
        }
      }

      const interval = setInterval(() => {
        counter++;
        counter = counter % 100;
        set(counter);
        synchronize();
      }, 15);

      return function stop(){
        counter = 0;
        clearInterval(interval);
      }
    });
    */

    const bankActiveStore = writable({
      bankActive: 0
    });

    const bankColorStore = writable({
      bankColors: [[255,0,0],[255,0,0],[255,0,0],[255,0,0]]
    });

    const numberOfModulesStore = writable();

    const globalConfigReportStore = writable({
      bankEnabled: [true,true,true,true], 
      bankColors: [[255,0,0],[255,0,0],[255,0,0],[255,0,0]],
      bankNames: ['','','',''],
      isVirtual: true
    });

    const localConfigReportStore = writable({
      cfgs: []
    });

    function createlocalInputStore() {

      const defaultValues = { 
        id: "",
        dx: "",
        dy: "",
        elementNumber: -1, // should be checked out if grid sends back array or not
        eventType: 0
      };

      // {...obj} syntax used to shallow copy default values. used to reset the store.
    	const store = writable({...defaultValues});

    	return {
        ...store,
        // This is used to re-init local settings panel if a module is removed which values have been displayed
    		setToDefault: (removed = 'reset') => {

          const current = get_store_value(store);

          if(removed.dx == current.dx && removed.dy == current.dy){
            store.set({...defaultValues});
          }

          if(removed == 'reset'){
            store.set({...defaultValues});
          }
        }
    	};
    }

    const localInputStore = createlocalInputStore();

    const localInputEventParamStore = writable({
      eventParam: -1,
    });

    const hidKeyStatusStore = writable({
      isEnabled: 1
    });

    const derivedLocalInputStore = derived(
      [localInputStore, localInputEventParamStore],
      ([$a, $b]) => Object.assign($a, $b)
    );

    const derivedInputStore = derived(
      [bankActiveStore, localInputStore], 
      ([$a, $b]) => Object.assign($a, $b)
    );

    function create_commands(){

      const store = writable({
        GLOBALSTORE: {msg:'',valid:false},
        GLOBALRECALL:  {msg:'',valid:false},
        GLOBALCLEAR:  {msg:'',valid:false},
        LOCALSTORE:  {msg:'',valid:false},
        LOCALRECALL:  {msg:'',valid:false},
        LOCALCLEAR:  {msg:'',valid:false},
        response: {COMMAND: {'':''}}
      });

      return {
        ...store,
        start: (arg) => {
          // should rework this part
          let time = 20000;

          store.update(store => {store[arg].msg = 'wait'; return store;});
          
          if(arg.substr(arg.length - 5) == 'CLEAR') time = 10000;

          setTimeout(()=>{
            const res = get_store_value(store).response;
            if(res.COMMAND.hasOwnProperty("")) { 
              store.update(store => {store[arg].msg  = 'failure'; return store;});
            }      }, time);
        },
        response: (arg) => {
          let _key = '';
          for (const key in arg.COMMAND) {
            if (arg.COMMAND.hasOwnProperty(key)) {
              _key = key;
            }
          }
          store.update(store => {store.response = arg; return store});
          setTimeout(()=>{ store.update(store => {store[_key].msg  = 'success'; return store});},1500);
        },
        validity: (string, bool) => {
          store.update(store => {
            store[string].valid = bool;
            return store;
          });
        },
      }
    }

    const commands = create_commands();

    /* src\app\core\serialport\SerialPort.svelte generated by Svelte v3.35.0 */

    const { console: console_1$r } = globals;

    function create_fragment$1l(ctx) {
    	const block = {
    		c: noop$3,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$3,
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: noop$3
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1l($$self, $$props, $$invalidate) {
    	let $serialComm;
    	let $localInputStore;
    	validate_store(serialComm$1, "serialComm");
    	component_subscribe($$self, serialComm$1, $$value => $$invalidate(4, $serialComm = $$value));
    	validate_store(localInputStore, "localInputStore");
    	component_subscribe($$self, localInputStore, $$value => $$invalidate(5, $localInputStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SerialPort", slots, []);
    	const SerialPort = require("serialport");
    	const Readline = SerialPort.parsers.Readline;
    	const dispatch = createEventDispatcher();
    	let GRID = GRID_PROTOCOL;
    	GRID.initialize();
    	let PORT = { path: 0 };
    	let { runtime = [] } = $$props;
    	let { layout = [] } = $$props;
    	let selectedPort = "";

    	function coroner() {
    		setInterval(
    			() => {
    				// Don't interfere with virtual modules.
    				let _removed = runtime.find(g => Date.now() - g.alive > GRID.PROTOCOL.HEARTBEAT_INTERVAL * 2 && !g.virtual);

    				let _processgrid = runtime.map(g => {
    					if (Date.now() - g.alive > GRID.PROTOCOL.HEARTBEAT_INTERVAL * 2 && !g.virtual) {
    						g.alive = "dead";
    					}

    					return g;
    				});

    				let _usedgrid = _processgrid.filter(g => g.alive !== "dead");

    				//console.log('_usedgird length...', _usedgrid)
    				if (_removed !== undefined && _usedgrid.length !== undefined) {
    					// re-initialize Local Settings panel, if the module has been removed which had it's settings opened.
    					localInputStore.setToDefault(_removed);

    					dispatch("coroner", { usedgrid: _usedgrid, removed: _removed });
    				}
    			},
    			GRID.PROTOCOL.HEARTBEAT_INTERVAL
    		);
    	}

    	function discoverPorts() {
    		setInterval(
    			() => {
    				listSerialPorts();
    			},
    			GRID.PROTOCOL.HEARTBEAT_INTERVAL
    		);
    	}

    	function listSerialPorts() {
    		SerialPort.list().then(ports => {
    			//ports.length == 0 ? serialpaths = [] : null;
    			serialComm$1.update(store => {
    				store.list = [];
    				return store;
    			});

    			ports.forEach((port, i) => {
    				let isGrid = 0;

    				if (port.productId) {
    					if (port.productId == "ECAD" || port.productId == "ecad" || port.productId == "ECAC" || port.productId == "ecac") {
    						isGrid = 1;
    					}
    				}

    				// collect all ports in an array
    				serialComm$1.update(store => {
    					store.selected = port.path;
    					store.list[i] = { isGrid, port };
    					return store;
    				});

    				if (isGrid && $serialComm.open == undefined) {
    					selectedPort = port.path;
    					openSerialPort();
    				}
    			});

    			const thereIsGrid = ports.find(p => p.productId == "ECAD" || p.productId == "ecad" || p.productId == "ECAC" || p.productId == "ecac");

    			if (!thereIsGrid) {
    				closeSerialPort();
    			}
    		}).catch(err => {
    			console.error(err);
    		});
    	}

    	function openSerialPort() {
    		const store = $serialComm;

    		// don't let reopen port if it's already opened!
    		if (!store.isEnabled) {
    			const serial = store.list.find(serial => serial.port.path === selectedPort);
    			PORT = new SerialPort(serial.port.path, { autoOpen: false });
    			serialComm$1.open(PORT);
    			serialComm$1.enabled(true);
    			readSerialPort();
    		}
    	}

    	function updateSelectedPort(port) {
    		selectedPort = port;
    	}

    	function closeSerialPort() {
    		if (PORT.path !== 0) {
    			PORT.close(function (err) {
    				console.warn("port closed", err);
    			});

    			serialComm$1.update(store => {
    				store.open = undefined;
    				store.isEnabled = false;
    				store.list = [];
    				return store;
    			});

    			// reset UI
    			$$invalidate(0, runtime = []);

    			$$invalidate(1, layout = []);
    			localInputStore.setToDefault();
    			PORT = { path: 0 };
    		}
    	}

    	function readSerialPort() {
    		console.log("We are proceeding with reading the port.");

    		PORT.open(function (err) {
    			if (err) {
    				console.error("Error opening port: ", err.message);
    				closeSerialPort();
    			}
    		}); //currentPorts[i] = port.path;

    		PORT.on("error", function (err) {
    			console.log("Error", err);
    		});

    		PORT.on("open", function () {
    			console.log("Port is open.", PORT.path);
    		});

    		runSerialParser(PORT);
    	}

    	function makeThisUsable(RESPONSE) {
    		try {
    			let controller = runtime.find(g => g.dx == RESPONSE.BRC.DX && g.dy == RESPONSE.BRC.DY);
    			controller.instr = RESPONSE.COMMAND;
    		} catch(error) {
    			console.error(error);
    		}
    	}

    	function runSerialParser(port) {
    		const parser = port.pipe(new Readline({ encoding: "hex" }));

    		parser.on("data", function (data) {
    			let temp_array = Array.from(data);
    			let array = [];

    			for (let index = 0; index < temp_array.length; index += 2) {
    				array.push(temp_array[index] + "" + temp_array[index + 1]);
    			}

    			let RESPONSE = {};
    			let _array = [];

    			array.forEach((element, i) => {
    				_array[i] = parseInt("0x" + element);
    			});

    			let DATA = GRID.decode_serial(_array);
    			let d_array = "";

    			_array.forEach((element, i) => {
    				d_array += String.fromCharCode(element);
    			});

    			// websocket debug info to client
    			sendDataToClient("input", d_array);

    			// filter heartbeat messages
    			if (!(d_array.slice(30).startsWith("010") && d_array.length == 48)) {
    				commIndicator.tick("rx");
    				RESPONSE = GRID.decode_serial(_array);
    				RESPONSE.COMMAND ? makeThisUsable(RESPONSE) : null;
    				RESPONSE.COMMAND ? commands.response(RESPONSE) : null;
    			}

    			updateGridUsedAndAlive(DATA.CONTROLLER);

    			// global config recall
    			if (DATA.BANKCOLOR.length > 0 || DATA.BANKENABLED.length > 0) {
    				globalConfigReportStore.update(store => {
    					store.bankColors = DATA.BANKCOLOR.map(bank => {
    						return [bank.RED, bank.GRE, bank.BLU];
    					});

    					store.bankEnabled = DATA.BANKENABLED.map(bank => {
    						return bank.ISENABLED == 1 ? true : false;
    					});

    					store.isVirtual = false;
    					return store;
    				});

    				bankActiveStore.update(store => {
    					if (store.bankActive == -1) {
    						store.bankActive = 0;
    					}

    					return store;
    				});
    			}

    			// local config recall
    			if (DATA.CONFIGURATION) {
    				localConfigReportStore.update(store => {
    					store.frame = DATA.CONFIGURATION;
    					store.cfgs = DATA.CONFIGURATION_CFGS;
    					store.brc = DATA.BRC;
    					return store;
    				});
    			}

    			// local input update (user interaction)
    			if (DATA.EVENT) {
    				if (DATA.EVENT.EVENTTYPE !== 12) {
    					// avoid validator retrigger on changing things on a the same parameter, as grid sends back the event with each config. 
    					//console.log($localInputStore.eventParam, DATA.EVENT)
    					if ($localInputStore.elementNumber !== DATA.EVENT.ELEMENTNUMBER || $localInputStore.eventType !== DATA.EVENT.EVENTTYPE) {
    						// now not using due to changed protocol
    						localInputStore.update(store => {
    							store.dx = DATA.BRC.DX;
    							store.dy = DATA.BRC.DY;
    							store.elementNumber = DATA.EVENT.ELEMENTNUMBER;
    							store.eventType = DATA.EVENT.EVENTTYPE;
    							return store;
    						});
    					}

    					localInputEventParamStore.update(store => {
    						store.eventParam = DATA.EVENT.EVENTPARAM;
    						return store;
    					});
    				}
    			}

    			if (DATA.HIDKEYSTATUS) {
    				hidKeyStatusStore.update(store => {
    					store.isEnabled = DATA.HIDKEYSTATUS.ISENABLED;
    					return store;
    				});
    			}

    			// bank change by user
    			if (DATA.BANKACTIVE) {
    				if (DATA.BANKACTIVE.BANKNUMBER !== 255) {
    					bankActiveStore.update(store => {
    						store.bankActive = DATA.BANKACTIVE.BANKNUMBER;
    						return store;
    					});
    				}
    			}
    		});
    	}

    	function updateGridUsedAndAlive(controller) {
    		if (controller !== undefined) {
    			let exists = false;

    			runtime.forEach(g => {
    				if (g.id == controller.id && g.virtual == false) {
    					exists = true;
    				}
    			});

    			if (!exists) {
    				runtime.push(controller);

    				dispatch("change", {
    					data: {
    						moduleId: controller.id,
    						cellId: "dx:" + controller.dx + ";" + "dy:" + controller.dy,
    						isVirtual: false
    					}
    				});
    			}

    			if (exists) {
    				runtime.map(c => {
    					if (c.id === controller.id && c.virtual == false) {
    						c.alive = Date.now();
    					}

    					return c;
    				});
    			}

    			if (!exists) {
    				numberOfModulesStore.set(runtime.length);
    			}

    			$$invalidate(0, runtime);
    		}
    	}

    	onDestroy(() => {
    		clearInterval(discoverPorts);
    		clearInterval(coroner);
    		closeSerialPort();
    	});

    	onMount(() => {
    		discoverPorts();
    		coroner();
    	});

    	const writable_props = ["runtime", "layout"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$r.warn(`<SerialPort> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("runtime" in $$props) $$invalidate(0, runtime = $$props.runtime);
    		if ("layout" in $$props) $$invalidate(1, layout = $$props.layout);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		GRID_PROTOCOL,
    		sendDataToClient,
    		localInputStore,
    		hidKeyStatusStore,
    		localInputEventParamStore,
    		bankActiveStore,
    		localConfigReportStore,
    		numberOfModulesStore,
    		globalConfigReportStore,
    		commIndicator,
    		serialComm: serialComm$1,
    		SerialPort,
    		Readline,
    		createEventDispatcher,
    		commands,
    		dispatch,
    		GRID,
    		PORT,
    		runtime,
    		layout,
    		selectedPort,
    		coroner,
    		discoverPorts,
    		listSerialPorts,
    		openSerialPort,
    		updateSelectedPort,
    		closeSerialPort,
    		readSerialPort,
    		makeThisUsable,
    		runSerialParser,
    		updateGridUsedAndAlive,
    		$serialComm,
    		$localInputStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("GRID" in $$props) GRID = $$props.GRID;
    		if ("PORT" in $$props) PORT = $$props.PORT;
    		if ("runtime" in $$props) $$invalidate(0, runtime = $$props.runtime);
    		if ("layout" in $$props) $$invalidate(1, layout = $$props.layout);
    		if ("selectedPort" in $$props) selectedPort = $$props.selectedPort;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [runtime, layout];
    }

    class SerialPort_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1l, create_fragment$1l, safe_not_equal, { runtime: 0, layout: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SerialPort_1",
    			options,
    			id: create_fragment$1l.name
    		});
    	}

    	get runtime() {
    		throw new Error("<SerialPort>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set runtime(value) {
    		throw new Error("<SerialPort>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		throw new Error("<SerialPort>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set layout(value) {
    		throw new Error("<SerialPort>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\ui\components\ColorPicker.svelte generated by Svelte v3.35.0 */

    const { console: console_1$q } = globals;
    const file$1a = "src\\app\\settings\\ui\\components\\ColorPicker.svelte";

    // (259:4) {#if showAlpha}
    function create_if_block$w(ctx) {
    	let div;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			attr_dev(input, "class", "alpha-value slider svelte-gctzqw");
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", "0");
    			attr_dev(input, "max", "100");
    			add_location(input, file$1a, 260, 8, 6426);
    			attr_dev(div, "class", "alpha-selector mt-2 svelte-gctzqw");
    			add_location(div, file$1a, 259, 6, 6382);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			set_input_value(input, /*alphaValue*/ ctx[2]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*alphaDown*/ ctx[4], false, false, false),
    					listen_dev(input, "change", /*input_change_input_handler_1*/ ctx[8]),
    					listen_dev(input, "input", /*input_change_input_handler_1*/ ctx[8])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*alphaValue*/ 4) {
    				set_input_value(input, /*alphaValue*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$w.name,
    		type: "if",
    		source: "(259:4) {#if showAlpha}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1k(ctx) {
    	let div;
    	let input;
    	let t;
    	let mounted;
    	let dispose;
    	let if_block = /*showAlpha*/ ctx[0] && create_if_block$w(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t = space$1();
    			if (if_block) if_block.c();
    			attr_dev(input, "class", "hue-selector slider svelte-gctzqw");
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", "0");
    			attr_dev(input, "max", "1536");
    			toggle_class(input, "mb-2", /*showAlpha*/ ctx[0]);
    			add_location(input, file$1a, 256, 4, 6218);
    			attr_dev(div, "class", "w-full flex flex-col secondary p-4");
    			add_location(div, file$1a, 255, 2, 6164);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			set_input_value(input, /*hueValue*/ ctx[1]);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*hueDown*/ ctx[3], false, false, false),
    					listen_dev(input, "change", /*input_change_input_handler*/ ctx[7]),
    					listen_dev(input, "input", /*input_change_input_handler*/ ctx[7])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*hueValue*/ 2) {
    				set_input_value(input, /*hueValue*/ ctx[1]);
    			}

    			if (dirty & /*showAlpha*/ 1) {
    				toggle_class(input, "mb-2", /*showAlpha*/ ctx[0]);
    			}

    			if (/*showAlpha*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$w(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function hsvToRgb(h, s, v) {
    	var r, g, b;
    	var i = Math.floor(h * 6);
    	var f = h * 6 - i;
    	var p = v * (1 - s);
    	var q = v * (1 - f * s);
    	var t = v * (1 - (1 - f) * s);

    	switch (i % 6) {
    		case 0:
    			(r = v, g = t, b = p);
    			break;
    		case 1:
    			(r = q, g = v, b = p);
    			break;
    		case 2:
    			(r = p, g = v, b = t);
    			break;
    		case 3:
    			(r = p, g = q, b = v);
    			break;
    		case 4:
    			(r = t, g = p, b = v);
    			break;
    		case 5:
    			(r = v, g = p, b = q);
    			break;
    	}

    	return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    }

    function rgb2hex(rgb) {
    	rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);

    	return rgb && rgb.length === 4
    	? "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2)
    	: "";
    }

    function instance$1k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ColorPicker", slots, []);
    	let { startColor = "rgb(255,0,0)" } = $$props; //rgb!
    	let { alpha = 1 } = $$props;
    	let { showAlpha = true } = $$props;
    	let hueValue = 0;
    	let alphaValue = 0;

    	Number.prototype.mod = function (n) {
    		return (this % n + n) % n;
    	};

    	const dispatch = createEventDispatcher();
    	let tracked;
    	let h = 1;
    	let s = 1;
    	let v = 1;
    	let a = 1;
    	let r = 255;
    	let g = 0;
    	let b = 0;
    	let hexValue; /* = '#FF0000';*/

    	function setStartColor() {
    		$$invalidate(5, startColor = rgb2hex(startColor).toUpperCase());
    		let hex = startColor.replace("#", "");

    		if (hex.length !== 6 && hex.length !== 3 && !hex.match(/([^A-F0-9])/gi)) {
    			//alert('Invalid property value (startColor)');
    			return;
    		}

    		let hexFiltered = "";

    		if (hex.length === 3) hex.split("").forEach(c => {
    			hexFiltered += c + c;
    		}); else hexFiltered = hex;

    		hexValue = hexFiltered;
    		r = parseInt(hexFiltered.substring(0, 2), 16);
    		g = parseInt(hexFiltered.substring(2, 4), 16);
    		b = parseInt(hexFiltered.substring(4, 6), 16);
    		a = alpha;
    		rgbToHSV(r, g, b, true);
    		$$invalidate(1, hueValue = h * 1536);
    		$$invalidate(2, alphaValue = a * 100);
    	}

    	function colorChangeCallback() {
    		//console.log('colorChangeCallback', r,g,b,a);
    		dispatch("colorChange", { r, g, b, a });
    	}

    	function mouseUp(event) {
    		tracked = null;
    	}

    	function hueDown(event) {
    		let slider = event.target.value;
    		h = slider / 1536;
    		colorChange();
    	}

    	function alphaDown(event) {
    		let slider = event.target.value;
    		a = slider / 100;
    		colorChange();
    	}

    	function colorChange() {
    		//console.log('colorChange');
    		let rgb = hsvToRgb(h, s, v);

    		r = rgb[0];
    		g = rgb[1];
    		b = rgb[2];
    		hexValue = RGBAToHex();
    		colorChangeCallback();
    	}

    	function RGBAToHex() {
    		let rHex = r.toString(16);
    		let gHex = g.toString(16);
    		let bHex = b.toString(16);
    		if (rHex.length == 1) rHex = "0" + rHex;
    		if (gHex.length == 1) gHex = "0" + gHex;
    		if (bHex.length == 1) bHex = "0" + bHex;
    		return ("#" + rHex + gHex + bHex).toUpperCase();
    	}

    	function rgbToHSV(r, g, b, update) {
    		let rperc, gperc, bperc, max, min, diff, pr, hnew, snew, vnew;
    		rperc = r / 255;
    		gperc = g / 255;
    		bperc = b / 255;
    		max = Math.max(rperc, gperc, bperc);
    		min = Math.min(rperc, gperc, bperc);
    		diff = max - min;
    		vnew = max;
    		vnew == 0 ? snew = 0 : snew = diff / max;

    		for (let i = 0; i < 3; i++) {
    			if ([rperc, gperc, bperc][i] === max) {
    				pr = i;
    				break;
    			}
    		}

    		if (diff == 0) {
    			hnew = 0;

    			if (update) {
    				h = hnew;
    				s = snew;
    				v = vnew;
    				console.log("rgbToHSV-diff");
    				colorChange();
    				return;
    			} else {
    				return { h: hnew, s: snew, v: vnew };
    			}
    		} else {
    			switch (pr) {
    				case 0:
    					hnew = 60 * ((gperc - bperc) / diff % 6) / 360;
    					break;
    				case 1:
    					hnew = 60 * ((bperc - rperc) / diff + 2) / 360;
    					break;
    				case 2:
    					hnew = 60 * ((rperc - gperc) / diff + 4) / 360;
    					break;
    			}

    			if (hnew < 0) hnew += 6;
    		}

    		if (update) {
    			h = hnew;
    			s = snew;
    			v = vnew;
    		} else //colorChange(); 
    		{
    			return {
    				h: hnew, //disable sending colorchange on init
    				s: snew,
    				v: vnew
    			};
    		}
    	}

    	onMount(() => {
    		setStartColor();
    	});

    	const writable_props = ["startColor", "alpha", "showAlpha"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$q.warn(`<ColorPicker> was created with unknown prop '${key}'`);
    	});

    	function input_change_input_handler() {
    		hueValue = to_number(this.value);
    		$$invalidate(1, hueValue);
    	}

    	function input_change_input_handler_1() {
    		alphaValue = to_number(this.value);
    		$$invalidate(2, alphaValue);
    	}

    	$$self.$$set = $$props => {
    		if ("startColor" in $$props) $$invalidate(5, startColor = $$props.startColor);
    		if ("alpha" in $$props) $$invalidate(6, alpha = $$props.alpha);
    		if ("showAlpha" in $$props) $$invalidate(0, showAlpha = $$props.showAlpha);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		startColor,
    		alpha,
    		showAlpha,
    		hueValue,
    		alphaValue,
    		dispatch,
    		tracked,
    		h,
    		s,
    		v,
    		a,
    		r,
    		g,
    		b,
    		hexValue,
    		setStartColor,
    		colorChangeCallback,
    		mouseUp,
    		hueDown,
    		alphaDown,
    		colorChange,
    		hsvToRgb,
    		RGBAToHex,
    		rgbToHSV,
    		rgb2hex
    	});

    	$$self.$inject_state = $$props => {
    		if ("startColor" in $$props) $$invalidate(5, startColor = $$props.startColor);
    		if ("alpha" in $$props) $$invalidate(6, alpha = $$props.alpha);
    		if ("showAlpha" in $$props) $$invalidate(0, showAlpha = $$props.showAlpha);
    		if ("hueValue" in $$props) $$invalidate(1, hueValue = $$props.hueValue);
    		if ("alphaValue" in $$props) $$invalidate(2, alphaValue = $$props.alphaValue);
    		if ("tracked" in $$props) tracked = $$props.tracked;
    		if ("h" in $$props) h = $$props.h;
    		if ("s" in $$props) s = $$props.s;
    		if ("v" in $$props) v = $$props.v;
    		if ("a" in $$props) a = $$props.a;
    		if ("r" in $$props) r = $$props.r;
    		if ("g" in $$props) g = $$props.g;
    		if ("b" in $$props) b = $$props.b;
    		if ("hexValue" in $$props) hexValue = $$props.hexValue;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		showAlpha,
    		hueValue,
    		alphaValue,
    		hueDown,
    		alphaDown,
    		startColor,
    		alpha,
    		input_change_input_handler,
    		input_change_input_handler_1
    	];
    }

    class ColorPicker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1k, create_fragment$1k, safe_not_equal, { startColor: 5, alpha: 6, showAlpha: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColorPicker",
    			options,
    			id: create_fragment$1k.name
    		});
    	}

    	get startColor() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set startColor(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get alpha() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set alpha(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showAlpha() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showAlpha(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\ui\components\Toggle.svelte generated by Svelte v3.35.0 */
    const file$19 = "src\\app\\settings\\ui\\components\\Toggle.svelte";

    function create_fragment$1j(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "toggle svelte-1htsfe5");
    			add_location(input, file$19, 14, 0, 222);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			input.checked = /*toggleValue*/ ctx[0];

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[2]),
    					listen_dev(input, "change", /*handleChange*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*toggleValue*/ 1) {
    				input.checked = /*toggleValue*/ ctx[0];
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Toggle", slots, []);
    	const dispatch = createEventDispatcher();
    	let { toggleValue = "" } = $$props;

    	function handleChange() {
    		dispatch("change", {});
    	}

    	const writable_props = ["toggleValue"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Toggle> was created with unknown prop '${key}'`);
    	});

    	function input_change_handler() {
    		toggleValue = this.checked;
    		$$invalidate(0, toggleValue);
    	}

    	$$self.$$set = $$props => {
    		if ("toggleValue" in $$props) $$invalidate(0, toggleValue = $$props.toggleValue);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		toggleValue,
    		handleChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("toggleValue" in $$props) $$invalidate(0, toggleValue = $$props.toggleValue);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [toggleValue, handleChange, input_change_handler];
    }

    class Toggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1j, create_fragment$1j, safe_not_equal, { toggleValue: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggle",
    			options,
    			id: create_fragment$1j.name
    		});
    	}

    	get toggleValue() {
    		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggleValue(value) {
    		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\global\BankTab.svelte generated by Svelte v3.35.0 */

    const { console: console_1$p } = globals;
    const file$18 = "src\\app\\settings\\global\\BankTab.svelte";

    // (110:0) {#if tab === selected}
    function create_if_block$v(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let t0;
    	let div1;
    	let toggle;
    	let t1;
    	let div3;
    	let t3;
    	let current;

    	function select_block_type(ctx, dirty) {
    		if (/*bankEnabled*/ ctx[3]) return create_if_block_2$d;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	toggle = new Toggle({
    			props: { toggleValue: /*bankEnabled*/ ctx[3] },
    			$$inline: true
    		});

    	toggle.$on("change", /*handleBankEnabled*/ ctx[5]);
    	let if_block1 = /*startColor*/ ctx[2] && create_if_block_1$j(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space$1();
    			div1 = element("div");
    			create_component(toggle.$$.fragment);
    			t1 = space$1();
    			div3 = element("div");
    			div3.textContent = "Bank Color";
    			t3 = space$1();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "text-gray-200 ");
    			add_location(div0, file$18, 125, 6, 2644);
    			attr_dev(div1, "class", "relative flex items-center justify-center");
    			add_location(div1, file$18, 132, 6, 2845);
    			attr_dev(div2, "class", "flex justify-between text-white p-2 my-1 items-center");
    			add_location(div2, file$18, 124, 4, 2569);
    			attr_dev(div3, "class", "p-2 text-white");
    			add_location(div3, file$18, 137, 4, 3010);
    			attr_dev(div4, "class", "flex flex-col");
    			add_location(div4, file$18, 111, 2, 2244);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			if_block0.m(div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(toggle, div1, null);
    			append_dev(div4, t1);
    			append_dev(div4, div3);
    			append_dev(div4, t3);
    			if (if_block1) if_block1.m(div4, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			const toggle_changes = {};
    			if (dirty & /*bankEnabled*/ 8) toggle_changes.toggleValue = /*bankEnabled*/ ctx[3];
    			toggle.$set(toggle_changes);

    			if (/*startColor*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*startColor*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$j(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div4, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(toggle.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(toggle.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if_block0.d();
    			destroy_component(toggle);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$v.name,
    		type: "if",
    		source: "(110:0) {#if tab === selected}",
    		ctx
    	});

    	return block;
    }

    // (129:8) {:else}
    function create_else_block$b(ctx) {
    	let t;
    	let span;

    	const block = {
    		c: function create() {
    			t = text("Bank Enable ");
    			span = element("span");
    			attr_dev(span, "class", "");
    			add_location(span, file$18, 129, 22, 2786);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(129:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (127:8) {#if bankEnabled}
    function create_if_block_2$d(ctx) {
    	let t;
    	let span;

    	const block = {
    		c: function create() {
    			t = text("Bank Enable ");
    			span = element("span");
    			attr_dev(span, "class", "");
    			add_location(span, file$18, 127, 22, 2723);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$d.name,
    		type: "if",
    		source: "(127:8) {#if bankEnabled}",
    		ctx
    	});

    	return block;
    }

    // (140:4) {#if startColor}
    function create_if_block_1$j(ctx) {
    	let div;
    	let colorpicker;
    	let current;

    	colorpicker = new ColorPicker({
    			props: {
    				startColor: /*startColor*/ ctx[2],
    				showAlpha: false
    			},
    			$$inline: true
    		});

    	colorpicker.$on("colorChange", /*debounce*/ ctx[4]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(colorpicker.$$.fragment);
    			attr_dev(div, "class", "flex px-2");
    			add_location(div, file$18, 140, 4, 3084);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(colorpicker, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const colorpicker_changes = {};
    			if (dirty & /*startColor*/ 4) colorpicker_changes.startColor = /*startColor*/ ctx[2];
    			colorpicker.$set(colorpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(colorpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(colorpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(colorpicker);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$j.name,
    		type: "if",
    		source: "(140:4) {#if startColor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1i(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*tab*/ ctx[0] === /*selected*/ ctx[1] && create_if_block$v(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*tab*/ ctx[0] === /*selected*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*tab, selected*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$v(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("BankTab", slots, []);
    	const dispatch = createEventDispatcher();
    	let { tab } = $$props;

    	//export let globalData;
    	let rgb = [];

    	let enabled = true;
    	let { selected = 0 } = $$props;
    	let { globalData = undefined } = $$props;
    	let { bankName = undefined } = $$props;

    	// Colorpicker variables.
    	let startColor = "rgb('255,0,0')";

    	let bankEnabled;
    	let timer;

    	const debounce = value => {
    		clearTimeout(timer);

    		timer = setTimeout(
    			() => {
    				colorCallback(value);
    			},
    			25
    		);
    	};

    	function colorCallback(rgba) {
    		rgb[0] = Math.floor(rgba.detail.r * rgba.detail.a);
    		rgb[1] = Math.floor(rgba.detail.g * rgba.detail.a);
    		rgb[2] = Math.floor(rgba.detail.b * rgba.detail.a);
    		console.log(rgba);

    		dispatch("BANKCOLOR", {
    			className: "BANKCOLOR",
    			parameters: [
    				{ "NUM": selected },
    				{ "RED": rgb[0] },
    				{ "GRE": rgb[1] },
    				{ "BLU": rgb[2] }
    			]
    		});
    	}

    	function handleBankEnabled() {
    		console.log(bankEnabled);
    		$$invalidate(3, bankEnabled = !bankEnabled);
    		let _state = bankEnabled;
    		_state ? _state = 1 : _state = 0;

    		dispatch("BANKENABLED", {
    			className: "BANKENABLED",
    			parameters: [{ "BANKNUMBER": selected }, { "ISENABLED": _state }]
    		});
    	}

    	const writable_props = ["tab", "selected", "globalData", "bankName"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$p.warn(`<BankTab> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("tab" in $$props) $$invalidate(0, tab = $$props.tab);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("globalData" in $$props) $$invalidate(6, globalData = $$props.globalData);
    		if ("bankName" in $$props) $$invalidate(7, bankName = $$props.bankName);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		ColorPicker,
    		Toggle,
    		dispatch,
    		tab,
    		rgb,
    		enabled,
    		selected,
    		globalData,
    		bankName,
    		startColor,
    		bankEnabled,
    		timer,
    		debounce,
    		colorCallback,
    		handleBankEnabled
    	});

    	$$self.$inject_state = $$props => {
    		if ("tab" in $$props) $$invalidate(0, tab = $$props.tab);
    		if ("rgb" in $$props) rgb = $$props.rgb;
    		if ("enabled" in $$props) enabled = $$props.enabled;
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("globalData" in $$props) $$invalidate(6, globalData = $$props.globalData);
    		if ("bankName" in $$props) $$invalidate(7, bankName = $$props.bankName);
    		if ("startColor" in $$props) $$invalidate(2, startColor = $$props.startColor);
    		if ("bankEnabled" in $$props) $$invalidate(3, bankEnabled = $$props.bankEnabled);
    		if ("timer" in $$props) timer = $$props.timer;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*globalData, selected*/ 66) {
    			if (globalData !== undefined) {
    				$$invalidate(2, startColor = "rgb(" + globalData.bankColors[selected] + ")");
    				$$invalidate(3, bankEnabled = globalData.bankEnabled[selected]);
    			} //console.log(bankEnabled);
    		}
    	};

    	return [
    		tab,
    		selected,
    		startColor,
    		bankEnabled,
    		debounce,
    		handleBankEnabled,
    		globalData,
    		bankName
    	];
    }

    class BankTab extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1i, create_fragment$1i, safe_not_equal, {
    			tab: 0,
    			selected: 1,
    			globalData: 6,
    			bankName: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BankTab",
    			options,
    			id: create_fragment$1i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*tab*/ ctx[0] === undefined && !("tab" in props)) {
    			console_1$p.warn("<BankTab> was created without expected prop 'tab'");
    		}
    	}

    	get tab() {
    		throw new Error("<BankTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tab(value) {
    		throw new Error("<BankTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<BankTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<BankTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get globalData() {
    		throw new Error("<BankTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set globalData(value) {
    		throw new Error("<BankTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bankName() {
    		throw new Error("<BankTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bankName(value) {
    		throw new Error("<BankTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\shared\helpers\Tooltip.svelte generated by Svelte v3.35.0 */
    const file$17 = "src\\app\\shared\\helpers\\Tooltip.svelte";

    // (13:2) {#if tooltip}
    function create_if_block$u(ctx) {
    	let div;
    	let div_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div = element("div");
    			set_style(div, "background-color", "#2D374D");
    			attr_dev(div, "class", "absolute block left-0 text-base font-normal ml-8 w-64 p-2 rounded shadow-xl");
    			add_location(div, file$17, 13, 4, 446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = /*text*/ ctx[0];
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*text*/ 1) div.innerHTML = /*text*/ ctx[0];		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { delay: 250 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { delay: 250 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$u.name,
    		type: "if",
    		source: "(13:2) {#if tooltip}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1h(ctx) {
    	let div1;
    	let div0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*tooltip*/ ctx[1] && create_if_block$u(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "?";
    			t1 = space$1();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "w-6 h-6 rounded-full cursor-helper bg-secondary text-xs text-center flex items-center justify-center hover:text-important p-1");
    			add_location(div0, file$17, 11, 2, 243);
    			attr_dev(div1, "class", "text-white flex relative z-50");
    			add_location(div1, file$17, 10, 0, 125);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			if (if_block) if_block.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[2], false, false, false),
    					listen_dev(div1, "mouseenter", /*mouseenter_handler*/ ctx[3], false, false, false),
    					listen_dev(div1, "mouseleave", /*mouseleave_handler*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*tooltip*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*tooltip*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$u(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tooltip", slots, []);
    	let { text = "" } = $$props;
    	let tooltip = false;
    	const writable_props = ["text"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tooltip> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(1, tooltip = !tooltip);
    	const mouseenter_handler = () => $$invalidate(1, tooltip = true);
    	const mouseleave_handler = () => $$invalidate(1, tooltip = false);

    	$$self.$$set = $$props => {
    		if ("text" in $$props) $$invalidate(0, text = $$props.text);
    	};

    	$$self.$capture_state = () => ({ fade, text, tooltip });

    	$$self.$inject_state = $$props => {
    		if ("text" in $$props) $$invalidate(0, text = $$props.text);
    		if ("tooltip" in $$props) $$invalidate(1, tooltip = $$props.tooltip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [text, tooltip, click_handler, mouseenter_handler, mouseleave_handler];
    }

    class Tooltip extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1h, create_fragment$1h, safe_not_equal, { text: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tooltip",
    			options,
    			id: create_fragment$1h.name
    		});
    	}

    	get text() {
    		throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\shared\Commands.svelte generated by Svelte v3.35.0 */

    const { console: console_1$o } = globals;
    const file$16 = "src\\app\\settings\\shared\\Commands.svelte";

    // (64:8) {#if $commands[MODE+'STORE'].msg == 'wait'}
    function create_if_block_2$c(ctx) {
    	let div1;
    	let div0;
    	let div1_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "mr-1 loader ease-linear rounded-full border-2 border-t-2 h-4 w-4 border-secondary svelte-8ucn0u");
    			add_location(div0, file$16, 65, 12, 1952);
    			add_location(div1, file$16, 64, 10, 1917);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$c.name,
    		type: "if",
    		source: "(64:8) {#if $commands[MODE+'STORE'].msg == 'wait'}",
    		ctx
    	});

    	return block;
    }

    // (79:8) {#if $commands[MODE+'CLEAR'].msg == 'wait'}
    function create_if_block_1$i(ctx) {
    	let div1;
    	let div0;
    	let div1_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "mr-1 loader ease-linear rounded-full border-2 border-t-2 h-4 w-4 border-secondary svelte-8ucn0u");
    			add_location(div0, file$16, 80, 12, 2660);
    			add_location(div1, file$16, 79, 10, 2625);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(79:8) {#if $commands[MODE+'CLEAR'].msg == 'wait'}",
    		ctx
    	});

    	return block;
    }

    // (91:2) {#if $commands[MODE+'STORE'].msg == 'failure' || $commands[MODE+'CLEAR'].msg == 'failure'}
    function create_if_block$t(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Failed to catch response from Grid in time...";
    			attr_dev(div, "class", "text-important text-xs pl-2");
    			add_location(div, file$16, 91, 4, 3119);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$t.name,
    		type: "if",
    		source: "(91:2) {#if $commands[MODE+'STORE'].msg == 'failure' || $commands[MODE+'CLEAR'].msg == 'failure'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1g(ctx) {
    	let div5;
    	let div4;
    	let div1;
    	let button0;
    	let t0;
    	let div0;
    	let button0_disabled_value;
    	let t2;
    	let div3;
    	let button1;
    	let t3;
    	let div2;
    	let button1_disabled_value;
    	let t5;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "wait" && create_if_block_2$c(ctx);
    	let if_block1 = /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait" && create_if_block_1$i(ctx);
    	let if_block2 = (/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "failure" || /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "failure") && create_if_block$t(ctx);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			button0 = element("button");
    			if (if_block0) if_block0.c();
    			t0 = space$1();
    			div0 = element("div");
    			div0.textContent = "Store";
    			t2 = space$1();
    			div3 = element("div");
    			button1 = element("button");
    			if (if_block1) if_block1.c();
    			t3 = space$1();
    			div2 = element("div");
    			div2.textContent = "Clear";
    			t5 = space$1();
    			if (if_block2) if_block2.c();
    			attr_dev(div0, "class", "transition-all duration-500 delay-200 ease-in-out svelte-8ucn0u");
    			toggle_class(div0, "clicked", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "wait");
    			add_location(div0, file$16, 68, 8, 2096);
    			button0.disabled = button0_disabled_value = !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid;
    			attr_dev(button0, "class", "button store svelte-8ucn0u");
    			toggle_class(button0, "disabled", !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			toggle_class(button0, "enabled", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			toggle_class(button0, "success", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "success" && !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			add_location(button0, file$16, 55, 6, 1498);
    			attr_dev(div1, "class", "flex pr-1");
    			add_location(div1, file$16, 54, 4, 1467);
    			attr_dev(div2, "class", "transition-all duration-500 delay-200 ease-in-out svelte-8ucn0u");
    			toggle_class(div2, "clicked", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait");
    			add_location(div2, file$16, 83, 8, 2804);
    			button1.disabled = button1_disabled_value = /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait";
    			attr_dev(button1, "class", "button clear svelte-8ucn0u");
    			toggle_class(button1, "disabled", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait");
    			toggle_class(button1, "success", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "success");
    			add_location(button1, file$16, 72, 6, 2303);
    			attr_dev(div3, "class", "pl-1 flex items-center");
    			add_location(div3, file$16, 71, 4, 2259);
    			attr_dev(div4, "class", "flex flex-grow justify-between m-2 rounded-lg");
    			add_location(div4, file$16, 53, 2, 1402);
    			attr_dev(div5, "class", "bg-primary flex flex-col rounded-lg z-20");
    			add_location(div5, file$16, 52, 0, 1344);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, div1);
    			append_dev(div1, button0);
    			if (if_block0) if_block0.m(button0, null);
    			append_dev(button0, t0);
    			append_dev(button0, div0);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, button1);
    			if (if_block1) if_block1.m(button1, null);
    			append_dev(button1, t3);
    			append_dev(button1, div2);
    			append_dev(div5, t5);
    			if (if_block2) if_block2.m(div5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*handleStore*/ ctx[2], false, false, false),
    					listen_dev(button1, "click", /*handleClear*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "wait") {
    				if (if_block0) {
    					if (dirty & /*$commands, MODE*/ 3) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$c(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(button0, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(div0, "clicked", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "wait");
    			}

    			if (!current || dirty & /*$commands, MODE*/ 3 && button0_disabled_value !== (button0_disabled_value = !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid)) {
    				prop_dev(button0, "disabled", button0_disabled_value);
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(button0, "disabled", !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(button0, "enabled", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(button0, "success", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "success" && !/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].valid);
    			}

    			if (/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait") {
    				if (if_block1) {
    					if (dirty & /*$commands, MODE*/ 3) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$i(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(button1, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(div2, "clicked", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait");
    			}

    			if (!current || dirty & /*$commands, MODE*/ 3 && button1_disabled_value !== (button1_disabled_value = /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait")) {
    				prop_dev(button1, "disabled", button1_disabled_value);
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(button1, "disabled", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "wait");
    			}

    			if (dirty & /*$commands, MODE*/ 3) {
    				toggle_class(button1, "success", /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "success");
    			}

    			if (/*$commands*/ ctx[1][/*MODE*/ ctx[0] + "STORE"].msg == "failure" || /*$commands*/ ctx[1][/*MODE*/ ctx[0] + "CLEAR"].msg == "failure") {
    				if (if_block2) ; else {
    					if_block2 = create_if_block$t(ctx);
    					if_block2.c();
    					if_block2.m(div5, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1g($$self, $$props, $$invalidate) {
    	let $commands;
    	validate_store(commands, "commands");
    	component_subscribe($$self, commands, $$value => $$invalidate(1, $commands = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Commands", slots, []);
    	let { MODE = "" } = $$props;
    	let _comm;

    	function handleStore() {
    		const command = GRID_PROTOCOL.encode("", `${MODE}STORE`, "EXECUTE", "", "");
    		serialComm$1.write(command);

    		// set configs
    		commands.validity(`${MODE}STORE`, false);

    		commands.start(`${MODE}STORE`);
    		console.log(`Store ${MODE} settings on Grid!`);
    	}

    	function handleClear() {
    		const command = GRID_PROTOCOL.encode("", `${MODE}CLEAR`, "EXECUTE", "", "");
    		serialComm$1.write(command);
    		commands.start(`${MODE}CLEAR`);
    		console.log(`Clear ${MODE} settings on Grid!`);
    	}

    	let tooltip;

    	onMount(() => {
    		if (MODE == "GLOBAL") {
    			tooltip = "Store will save your global configuration in your Grid modules memory and Clear will clear it from there.";
    		} else {
    			tooltip = "Store will save your local configuration in your Grid modules memory and Clear will clear it from there.";
    		}

    		commands.subscribe(value => {
    			
    		});
    	});

    	const writable_props = ["MODE"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$o.warn(`<Commands> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("MODE" in $$props) $$invalidate(0, MODE = $$props.MODE);
    	};

    	$$self.$capture_state = () => ({
    		GRID_PROTOCOL,
    		serialComm: serialComm$1,
    		Tooltip,
    		fade,
    		commands,
    		onMount,
    		MODE,
    		_comm,
    		handleStore,
    		handleClear,
    		tooltip,
    		$commands
    	});

    	$$self.$inject_state = $$props => {
    		if ("MODE" in $$props) $$invalidate(0, MODE = $$props.MODE);
    		if ("_comm" in $$props) _comm = $$props._comm;
    		if ("tooltip" in $$props) tooltip = $$props.tooltip;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [MODE, $commands, handleStore, handleClear];
    }

    class Commands extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, { MODE: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Commands",
    			options,
    			id: create_fragment$1g.name
    		});
    	}

    	get MODE() {
    		throw new Error("<Commands>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set MODE(value) {
    		throw new Error("<Commands>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const tour = writable({});

    /* src\app\settings\global\GlobalSettings.svelte generated by Svelte v3.35.0 */

    const { Object: Object_1$1, console: console_1$n } = globals;
    const file$15 = "src\\app\\settings\\global\\GlobalSettings.svelte";

    function get_each_context$v(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[13] = i;
    	return child_ctx;
    }

    function get_each_context_1$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (140:10) {#each tabs as tab}
    function create_each_block_1$b(ctx) {
    	let button;
    	let t0_value = /*tab*/ ctx[11] + 1 + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*tab*/ ctx[11]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space$1();
    			attr_dev(button, "class", "m-2 p-1 text-white flex-grow outline-none border-0 rounded hover:bg-highlight-400 focus:outline-none");
    			toggle_class(button, "shadow-md", /*selected*/ ctx[0] === /*tab*/ ctx[11]);
    			toggle_class(button, "bg-highlight", /*selected*/ ctx[0] === /*tab*/ ctx[11]);
    			add_location(button, file$15, 140, 12, 4318);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*selected, tabs*/ 9) {
    				toggle_class(button, "shadow-md", /*selected*/ ctx[0] === /*tab*/ ctx[11]);
    			}

    			if (dirty & /*selected, tabs*/ 9) {
    				toggle_class(button, "bg-highlight", /*selected*/ ctx[0] === /*tab*/ ctx[11]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$b.name,
    		type: "each",
    		source: "(140:10) {#each tabs as tab}",
    		ctx
    	});

    	return block;
    }

    // (152:10) {#each tabs as tab, index}
    function create_each_block$v(ctx) {
    	let banktab;
    	let current;

    	banktab = new BankTab({
    			props: {
    				tab: /*tab*/ ctx[11],
    				selected: /*selected*/ ctx[0],
    				globalData: /*globalData*/ ctx[1]
    			},
    			$$inline: true
    		});

    	banktab.$on("BANKCOLOR", /*handleColorChange*/ ctx[4]);
    	banktab.$on("BANKENABLED", /*handleBankEnabledChange*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(banktab.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(banktab, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const banktab_changes = {};
    			if (dirty & /*selected*/ 1) banktab_changes.selected = /*selected*/ ctx[0];
    			if (dirty & /*globalData*/ 2) banktab_changes.globalData = /*globalData*/ ctx[1];
    			banktab.$set(banktab_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(banktab.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(banktab.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(banktab, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$v.name,
    		type: "each",
    		source: "(152:10) {#each tabs as tab, index}",
    		ctx
    	});

    	return block;
    }

    // (172:4) {#if selected == -1}
    function create_if_block_1$h(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "⚠️";
    			t1 = space$1();
    			span1 = element("span");
    			span1.textContent = "Please select a bank to start configuration!";
    			attr_dev(span0, "class", "flicker pr-2");
    			add_location(span0, file$15, 174, 8, 5281);
    			add_location(span1, file$15, 175, 8, 5327);
    			attr_dev(div, "class", "text-important m-2 flex items-center");
    			add_location(div, file$15, 173, 6, 5221);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(div, t1);
    			append_dev(div, span1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(172:4) {#if selected == -1}",
    		ctx
    	});

    	return block;
    }

    // (180:4) {#if selected !== -1}
    function create_if_block$s(ctx) {
    	let commands_1;
    	let current;

    	commands_1 = new Commands({
    			props: { MODE: "GLOBAL" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(commands_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(commands_1, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(commands_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(commands_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(commands_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$s.name,
    		type: "if",
    		source: "(180:4) {#if selected !== -1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1f(ctx) {
    	let div8;
    	let div7;
    	let div1;
    	let div0;
    	let t1;
    	let div6;
    	let div2;
    	let t3;
    	let div5;
    	let div3;
    	let t4;
    	let div4;
    	let t5;
    	let hr;
    	let t6;
    	let t7;
    	let current;
    	let each_value_1 = /*tabs*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$b(get_each_context_1$b(ctx, each_value_1, i));
    	}

    	let each_value = /*tabs*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$v(get_each_context$v(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block0 = /*selected*/ ctx[0] == -1 && create_if_block_1$h(ctx);
    	let if_block1 = /*selected*/ ctx[0] !== -1 && create_if_block$s(ctx);

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			div7 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Global Settings";
    			t1 = space$1();
    			div6 = element("div");
    			div2 = element("div");
    			div2.textContent = "Banks";
    			t3 = space$1();
    			div5 = element("div");
    			div3 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t4 = space$1();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space$1();
    			hr = element("hr");
    			t6 = space$1();
    			if (if_block0) if_block0.c();
    			t7 = space$1();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "mr-2");
    			add_location(div0, file$15, 129, 6, 3996);
    			attr_dev(div1, "class", "text-xl font-bold text-white m-2 flex items-center justify-between");
    			add_location(div1, file$15, 128, 4, 3908);
    			attr_dev(div2, "class", "text-gray-700 py-1 ml-2");
    			add_location(div2, file$15, 133, 6, 4095);
    			attr_dev(div3, "class", "flex mx-1 secondary rounded-lg shadow");
    			add_location(div3, file$15, 138, 8, 4222);
    			attr_dev(div4, "class", "my-2 flex flex-col justify-between");
    			add_location(div4, file$15, 150, 8, 4700);
    			attr_dev(div5, "class", "flex flex-col rounded-lg");
    			add_location(div5, file$15, 137, 6, 4174);
    			attr_dev(hr, "class", "text-secondary border-none h-1 rounded bg-secondary m-2");
    			add_location(hr, file$15, 165, 6, 5083);
    			attr_dev(div6, "class", "flex flex-col mt-4");
    			add_location(div6, file$15, 132, 4, 4055);
    			attr_dev(div7, "class", "inline-block w-full primary rounded-lg p-1 m-2 ");
    			toggle_class(div7, "tour", /*$tour*/ ctx[2].selectedName == "GlobalSettings");
    			add_location(div7, file$15, 126, 2, 3787);
    			attr_dev(div8, "class", "flex");
    			add_location(div8, file$15, 125, 0, 3765);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    			append_dev(div7, div1);
    			append_dev(div1, div0);
    			append_dev(div7, t1);
    			append_dev(div7, div6);
    			append_dev(div6, div2);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div5, div3);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div3, null);
    			}

    			append_dev(div5, t4);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div4, null);
    			}

    			append_dev(div6, t5);
    			append_dev(div6, hr);
    			append_dev(div7, t6);
    			if (if_block0) if_block0.m(div7, null);
    			append_dev(div7, t7);
    			if (if_block1) if_block1.m(div7, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selected, tabs, changeSelected*/ 73) {
    				each_value_1 = /*tabs*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$b(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$b(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div3, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*tabs, selected, globalData, handleColorChange, handleBankEnabledChange*/ 59) {
    				each_value = /*tabs*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$v(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$v(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div4, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*selected*/ ctx[0] == -1) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_1$h(ctx);
    					if_block0.c();
    					if_block0.m(div7, t7);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*selected*/ ctx[0] !== -1) {
    				if (if_block1) {
    					if (dirty & /*selected*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$s(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div7, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$tour*/ 4) {
    				toggle_class(div7, "tour", /*$tour*/ ctx[2].selectedName == "GlobalSettings");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1f($$self, $$props, $$invalidate) {
    	let $runtime;
    	let $tour;
    	validate_store(runtime$1, "runtime");
    	component_subscribe($$self, runtime$1, $$value => $$invalidate(8, $runtime = $$value));
    	validate_store(tour, "tour");
    	component_subscribe($$self, tour, $$value => $$invalidate(2, $tour = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("GlobalSettings", slots, []);
    	let selected = 0;
    	let globalData;
    	let tabs = [0, 1, 2, 3];

    	function handleColorChange(e) {
    		const PARAMS = e.detail.parameters;

    		runtime$1.update(runtime => {
    			runtime.forEach(controller => {
    				controller.global.bankColors[PARAMS[0].NUM] = [PARAMS[1].RED, PARAMS[2].GRE, PARAMS[3].BLU];
    				console.log(controller, PARAMS);
    			});

    			return runtime;
    		});

    		console.log("$runtime (color) change", $runtime);
    		const command = GRID_PROTOCOL.encode("", e.detail.className, "EXECUTE", e.detail.parameters, "");
    		commands.validity("GLOBALSTORE", true);
    		serialComm$1.write(command);
    	}

    	function handleBankEnabledChange(e) {
    		const PARAMS = e.detail.parameters;

    		$runtime.forEach(controller => {
    			controller.global.bankEnabled[PARAMS[0].BANKNUMBER] = PARAMS[1].ISENABLED;
    		});

    		console.log("$runtime (bankenabled) change", $runtime);
    		const command = GRID_PROTOCOL.encode("", e.detail.className, "EXECUTE", e.detail.parameters, "");
    		commands.validity("GLOBALSTORE", true);
    		serialComm$1.write(command);
    	}

    	function changeSelected(bank) {
    		bankActiveStore.update(store => {
    			store.bankActive = bank;
    			return store;
    		});

    		const command = GRID_PROTOCOL.encode("", "BANKACTIVE", "EXECUTE", [{ "BANKNUMBER": bank }], "");
    		serialComm$1.write(command);
    	}

    	function renderGlobalConfiguration() {
    		if ($runtime[0]) {
    			// here rework is needed. switching up from working with virtual modules to real modules may break the config fetch
    			if (Object.keys($runtime[0].global).length !== 0 && (!globalData.isVirtual || $runtime[0].virtual)) {
    				$$invalidate(1, globalData = $runtime[0].global);
    				updateRuntimeWithGlobalConfig(globalData);
    			} else {
    				// could be expanded the whole function to fetch global settings from all the modules
    				const fetch = runtime$1.fetchGlobalConfig("7f7f", "ff");

    				serialComm$1.write(fetch);
    			}
    		}
    	}

    	function updateRuntimeWithGlobalConfig(globalData) {
    		runtime$1.update(runtime => {
    			runtime.forEach(controller => {
    				controller.global = globalData;
    			});

    			return runtime;
    		});
    	}

    	onMount(() => {
    		// triggers on successful runtime.fetchGlobalConfig
    		globalConfigReportStore.subscribe(store => {
    			$$invalidate(1, globalData = store);

    			// load to runtime all the controllers you see
    			console.log("LOAD RUNTIME...", store, $runtime);

    			updateRuntimeWithGlobalConfig(store);
    			renderGlobalConfiguration();
    		});

    		// on init and on module change serial port connected module change run this!
    		numberOfModulesStore.subscribe(number => {
    			renderGlobalConfiguration();
    		});

    		// this is very similiar to local input store, on trigger check runtime for config
    		bankActiveStore.subscribe(store => {
    			$$invalidate(0, selected = store.bankActive);
    			renderGlobalConfiguration();
    		});
    	});

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$n.warn(`<GlobalSettings> was created with unknown prop '${key}'`);
    	});

    	const click_handler = tab => {
    		changeSelected(tab);
    	};

    	$$self.$capture_state = () => ({
    		BankTab,
    		localInputStore,
    		globalConfigReportStore,
    		bankActiveStore,
    		numberOfModulesStore,
    		runtime: runtime$1,
    		serialComm: serialComm$1,
    		Commands,
    		GRID_PROTOCOL,
    		commands,
    		Tooltip,
    		onMount,
    		tour,
    		selected,
    		globalData,
    		tabs,
    		handleColorChange,
    		handleBankEnabledChange,
    		changeSelected,
    		renderGlobalConfiguration,
    		updateRuntimeWithGlobalConfig,
    		$runtime,
    		$tour
    	});

    	$$self.$inject_state = $$props => {
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("globalData" in $$props) $$invalidate(1, globalData = $$props.globalData);
    		if ("tabs" in $$props) $$invalidate(3, tabs = $$props.tabs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selected,
    		globalData,
    		$tour,
    		tabs,
    		handleColorChange,
    		handleBankEnabledChange,
    		changeSelected,
    		click_handler
    	];
    }

    class GlobalSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GlobalSettings",
    			options,
    			id: create_fragment$1f.name
    		});
    	}
    }

    const profileStore = writable();

    function flip(node, animation, params = {}) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const scaleX = animation.from.width / node.clientWidth;
        const scaleY = animation.from.height / node.clientHeight;
        const dx = (animation.from.left - animation.to.left) / scaleX;
        const dy = (animation.from.top - animation.to.top) / scaleY;
        const d = Math.sqrt(dx * dx + dy * dy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
        };
    }

    function createActionListChangeStore(){
      const store = writable(null);

      return {
        ...store,
        click: (arg) => {
          store.set(arg);
          store.set(null);
          return;
        }
      }
    }

    const actionListChange = createActionListChangeStore();

    /* src\app\settings\local\ActionList.svelte generated by Svelte v3.35.0 */

    const { console: console_1$m } = globals;
    const file$14 = "src\\app\\settings\\local\\ActionList.svelte";

    function get_each_context$u(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	child_ctx[22] = i;
    	return child_ctx;
    }

    const get_default_slot_changes$9 = dirty => ({
    	action: dirty & /*actions*/ 1,
    	index: dirty & /*actions*/ 1
    });

    const get_default_slot_context$9 = ctx => ({
    	action: /*action*/ ctx[20],
    	index: /*index*/ ctx[22]
    });

    // (185:8) {#each actions as action, index (action)}
    function create_each_block$u(key_1, ctx) {
    	let div5;
    	let div0;
    	let t0_value = /*action*/ ctx[20].name + "";
    	let t0;
    	let t1;
    	let div4;
    	let div3;
    	let div1;
    	let t3;
    	let div2;
    	let button0;
    	let svg0;
    	let path0;
    	let path1;
    	let button0_style_value;
    	let t4;
    	let button1;
    	let svg1;
    	let path2;
    	let path3;
    	let button1_style_value;
    	let t5;
    	let t6;
    	let div5_id_value;
    	let div5_data_index_value;
    	let div5_data_id_value;
    	let rect;
    	let stop_animation = noop$3;
    	let current;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[10](/*index*/ ctx[22], ...args);
    	}

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[11](/*index*/ ctx[22], ...args);
    	}

    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$9);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			div1.textContent = "Order";
    			t3 = space$1();
    			div2 = element("div");
    			button0 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t4 = space$1();
    			button1 = element("button");
    			svg1 = svg_element("svg");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			t5 = space$1();
    			if (default_slot) default_slot.c();
    			t6 = space$1();
    			attr_dev(div0, "class", "pb-2 text-white svelte-bc4ndu");
    			add_location(div0, file$14, 192, 16, 4819);
    			attr_dev(div1, "class", "invisible text-xs");
    			add_location(div1, file$14, 195, 24, 4959);
    			attr_dev(path0, "d", "M0 0h24v24H0V0z");
    			attr_dev(path0, "fill", "none");
    			add_location(path0, file$14, 201, 140, 5494);
    			attr_dev(path1, "d", "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6 1.41 1.41z");
    			add_location(path1, file$14, 201, 179, 5533);
    			attr_dev(svg0, "class", "fill-current");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "width", "12px");
    			attr_dev(svg0, "height", "12px");
    			add_location(svg0, file$14, 201, 32, 5386);
    			attr_dev(button0, "class", "up focus:outline-none  border-none svelte-bc4ndu");
    			attr_dev(button0, "style", button0_style_value = "display: " + (/*index*/ ctx[22] > 0 ? "" : "none") + ";");
    			add_location(button0, file$14, 197, 28, 5091);
    			attr_dev(path2, "d", "M0 0h24v24H0V0z");
    			attr_dev(path2, "fill", "none");
    			add_location(path2, file$14, 207, 140, 6101);
    			attr_dev(path3, "d", "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z");
    			add_location(path3, file$14, 207, 179, 6140);
    			attr_dev(svg1, "class", "fill-current");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "width", "12px");
    			attr_dev(svg1, "height", "12px");
    			add_location(svg1, file$14, 207, 32, 5993);
    			attr_dev(button1, "class", "down focus:outline-none border-none svelte-bc4ndu");

    			attr_dev(button1, "style", button1_style_value = "display: " + (/*index*/ ctx[22] < /*actions*/ ctx[0].length - 1
    			? ""
    			: "none") + ";");

    			add_location(button1, file$14, 203, 28, 5680);
    			attr_dev(div2, "class", "buttons bg-secondary svelte-bc4ndu");
    			add_location(div2, file$14, 196, 24, 5027);
    			add_location(div3, file$14, 194, 20, 4928);
    			attr_dev(div4, "class", "wrapper svelte-bc4ndu");
    			add_location(div4, file$14, 193, 16, 4885);

    			attr_dev(div5, "id", div5_id_value = /*grabbed*/ ctx[2] && (/*action*/ ctx[20].id
    			? /*action*/ ctx[20].id
    			: JSON.stringify(/*action*/ ctx[20])) == /*grabbed*/ ctx[2].dataset.id
    			? "grabbed"
    			: "");

    			attr_dev(div5, "class", "item svelte-bc4ndu");
    			attr_dev(div5, "data-index", div5_data_index_value = /*index*/ ctx[22]);

    			attr_dev(div5, "data-id", div5_data_id_value = /*action*/ ctx[20].id
    			? /*action*/ ctx[20].id
    			: JSON.stringify(/*action*/ ctx[20]));

    			attr_dev(div5, "data-graby", "0");
    			add_location(div5, file$14, 185, 12, 4443);
    			this.first = div5;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div0, t0);
    			append_dev(div5, t1);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, svg0);
    			append_dev(svg0, path0);
    			append_dev(svg0, path1);
    			append_dev(div2, t4);
    			append_dev(div2, button1);
    			append_dev(button1, svg1);
    			append_dev(svg1, path2);
    			append_dev(svg1, path3);
    			append_dev(div4, t5);

    			if (default_slot) {
    				default_slot.m(div4, null);
    			}

    			append_dev(div5, t6);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler, false, false, false),
    					listen_dev(button1, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*actions*/ 1) && t0_value !== (t0_value = /*action*/ ctx[20].name + "")) set_data_dev(t0, t0_value);

    			if (!current || dirty & /*actions*/ 1 && button0_style_value !== (button0_style_value = "display: " + (/*index*/ ctx[22] > 0 ? "" : "none") + ";")) {
    				attr_dev(button0, "style", button0_style_value);
    			}

    			if (!current || dirty & /*actions*/ 1 && button1_style_value !== (button1_style_value = "display: " + (/*index*/ ctx[22] < /*actions*/ ctx[0].length - 1
    			? ""
    			: "none") + ";")) {
    				attr_dev(button1, "style", button1_style_value);
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, actions*/ 129) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$9, get_default_slot_context$9);
    				}
    			}

    			if (!current || dirty & /*grabbed, actions*/ 5 && div5_id_value !== (div5_id_value = /*grabbed*/ ctx[2] && (/*action*/ ctx[20].id
    			? /*action*/ ctx[20].id
    			: JSON.stringify(/*action*/ ctx[20])) == /*grabbed*/ ctx[2].dataset.id
    			? "grabbed"
    			: "")) {
    				attr_dev(div5, "id", div5_id_value);
    			}

    			if (!current || dirty & /*actions*/ 1 && div5_data_index_value !== (div5_data_index_value = /*index*/ ctx[22])) {
    				attr_dev(div5, "data-index", div5_data_index_value);
    			}

    			if (!current || dirty & /*actions*/ 1 && div5_data_id_value !== (div5_data_id_value = /*action*/ ctx[20].id
    			? /*action*/ ctx[20].id
    			: JSON.stringify(/*action*/ ctx[20]))) {
    				attr_dev(div5, "data-id", div5_data_id_value);
    			}
    		},
    		r: function measure() {
    			rect = div5.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div5);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div5, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$u.name,
    		type: "each",
    		source: "(185:8) {#each actions as action, index (action)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1e(ctx) {
    	let main;
    	let div0;
    	let p;
    	let div0_class_value;
    	let div0_style_value;
    	let t;
    	let div1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*actions*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*action*/ ctx[20];
    	validate_each_keys(ctx, each_value, get_each_context$u, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$u(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$u(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			main = element("main");
    			div0 = element("div");
    			p = element("p");
    			t = space$1();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(p, "class", "svelte-bc4ndu");
    			add_location(p, file$14, 182, 61, 4337);
    			attr_dev(div0, "id", "ghost");
    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*grabbed*/ ctx[2] ? "item haunting" : "item") + " svelte-bc4ndu"));
    			attr_dev(div0, "style", div0_style_value = "top: " + (/*mouseY*/ ctx[3] + /*offsetY*/ ctx[4] - /*layerY*/ ctx[5]) + "px");
    			add_location(div0, file$14, 178, 4, 4170);
    			attr_dev(div1, "class", "list svelte-bc4ndu");
    			add_location(div1, file$14, 183, 8, 4360);
    			attr_dev(main, "class", "dragdroplist svelte-bc4ndu");
    			add_location(main, file$14, 176, 0, 4135);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div0);
    			append_dev(div0, p);
    			/*div0_binding*/ ctx[9](div0);
    			append_dev(main, t);
    			append_dev(main, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*grabbed*/ 4 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*grabbed*/ ctx[2] ? "item haunting" : "item") + " svelte-bc4ndu"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (!current || dirty & /*mouseY, offsetY, layerY*/ 56 && div0_style_value !== (div0_style_value = "top: " + (/*mouseY*/ ctx[3] + /*offsetY*/ ctx[4] - /*layerY*/ ctx[5]) + "px")) {
    				attr_dev(div0, "style", div0_style_value);
    			}

    			if (dirty & /*grabbed, actions, JSON, $$scope, moveDatum*/ 197) {
    				each_value = /*actions*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$u, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, fix_and_outro_and_destroy_block, create_each_block$u, null, get_each_context$u);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			/*div0_binding*/ ctx[9](null);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ActionList", slots, ['default']);
    	let { actions = [] } = $$props;
    	let ghost;
    	let grabbed;
    	let lastTarget;
    	let mouseY = 0; // pointer y coordinate within client
    	let offsetY = 0; // y distance from top of grabbed element to pointer
    	let layerY = 0; // distance from top of list to top of client
    	let flag;

    	function changeOrder(arg) {
    		actionListChange.click(arg);
    	}

    	function grab(clientY, element) {
    		// modify grabbed element
    		$$invalidate(2, grabbed = element);

    		$$invalidate(2, grabbed.dataset.grabY = clientY, grabbed);

    		// modify ghost element (which is actually dragged)
    		$$invalidate(1, ghost.innerHTML = grabbed.innerHTML, ghost);

    		// record offset from cursor to top of element
    		// (used for positioning ghost)
    		$$invalidate(4, offsetY = grabbed.getBoundingClientRect().y - clientY);

    		drag(clientY);
    	}

    	// drag handler updates cursor position
    	function drag(clientY) {
    		if (grabbed) {
    			$$invalidate(3, mouseY = clientY);
    			$$invalidate(5, layerY = ghost.parentNode.getBoundingClientRect().y);
    		}
    	}

    	// touchEnter handler emulates the mouseenter event for touch input
    	// (more or less)
    	function touchEnter(ev) {
    		drag(ev.clientY);

    		// trigger dragEnter the first time the cursor moves over a list item
    		let target = document.elementFromPoint(ev.clientX, ev.clientY).closest(".item");

    		if (target && target != lastTarget) {
    			lastTarget = target;
    			dragEnter(ev, target);
    		}
    	}

    	function dragEnter(ev, target) {
    		// swap items in data
    		if (grabbed && target != grabbed && target.classList.contains("item")) {
    			moveDatum(parseInt(grabbed.dataset.index), parseInt(target.dataset.index));
    		}
    	}

    	// does the actual moving of items in data
    	function moveDatum(from, to) {
    		let temp = actions[from];
    		$$invalidate(0, actions = [...actions.slice(0, from), ...actions.slice(from + 1)]);
    		$$invalidate(0, actions = [...actions.slice(0, to), temp, ...actions.slice(to)]);
    		changeOrder("trigger");
    	}

    	function release(ev) {
    		console.log("release");
    		$$invalidate(2, grabbed = null);
    	}

    	const writable_props = ["actions"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$m.warn(`<ActionList> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			ghost = $$value;
    			$$invalidate(1, ghost);
    		});
    	}

    	const click_handler = function (index, ev) {
    		moveDatum(index, index - 1);
    	};

    	const click_handler_1 = function (index, ev) {
    		moveDatum(index, index + 1);
    	};

    	$$self.$$set = $$props => {
    		if ("actions" in $$props) $$invalidate(0, actions = $$props.actions);
    		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		flip,
    		actionListChange,
    		actions,
    		ghost,
    		grabbed,
    		lastTarget,
    		mouseY,
    		offsetY,
    		layerY,
    		flag,
    		changeOrder,
    		grab,
    		drag,
    		touchEnter,
    		dragEnter,
    		moveDatum,
    		release
    	});

    	$$self.$inject_state = $$props => {
    		if ("actions" in $$props) $$invalidate(0, actions = $$props.actions);
    		if ("ghost" in $$props) $$invalidate(1, ghost = $$props.ghost);
    		if ("grabbed" in $$props) $$invalidate(2, grabbed = $$props.grabbed);
    		if ("lastTarget" in $$props) lastTarget = $$props.lastTarget;
    		if ("mouseY" in $$props) $$invalidate(3, mouseY = $$props.mouseY);
    		if ("offsetY" in $$props) $$invalidate(4, offsetY = $$props.offsetY);
    		if ("layerY" in $$props) $$invalidate(5, layerY = $$props.layerY);
    		if ("flag" in $$props) flag = $$props.flag;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		actions,
    		ghost,
    		grabbed,
    		mouseY,
    		offsetY,
    		layerY,
    		moveDatum,
    		$$scope,
    		slots,
    		div0_binding,
    		click_handler,
    		click_handler_1
    	];
    }

    class ActionList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, { actions: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ActionList",
    			options,
    			id: create_fragment$1e.name
    		});
    	}

    	get actions() {
    		throw new Error("<ActionList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set actions(value) {
    		throw new Error("<ActionList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /** Dispatch event on click outside of node */
    function clickOutside$1(node) {
      
      const handleClick = event => {
        if (node && !node.contains(event.target) && !event.defaultPrevented) {
          // here we could make a large array, about all the cases where the click outside shouldn't be triggered
          if(event.target.id !== 'show-advanced'){ 
            node.dispatchEvent(
              new CustomEvent('click-outside', node)
            );
          }
        }
      };

    	document.addEventListener('click', handleClick, true);
      
      return {
        destroy() {
          document.removeEventListener('click', handleClick, true);
        }
    	}
    }

    /* src\app\settings\ui\components\DropDownInput.svelte generated by Svelte v3.35.0 */
    const file$13 = "src\\app\\settings\\ui\\components\\DropDownInput.svelte";

    function get_each_context$t(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (22:2) {#if focus}
    function create_if_block$r(ctx) {
    	let ul;
    	let each_value = /*optionList*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$t(get_each_context$t(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(ul, "max-height", "250px");
    			set_style(ul, "min-width", "100px");
    			set_style(ul, "z-index", "9000");
    			attr_dev(ul, "class", "fixed scrollbar block border-t overflow-y-auto border-important text-white cursor-pointer  w-auto bg-secondary svelte-e0t5tt");
    			toggle_class(ul, "shadow", /*focus*/ ctx[2]);
    			add_location(ul, file$13, 22, 2, 694);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dropDownValue, optionList, focus, handleChange*/ 15) {
    				each_value = /*optionList*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$t(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$t(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*focus*/ 4) {
    				toggle_class(ul, "shadow", /*focus*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$r.name,
    		type: "if",
    		source: "(22:2) {#if focus}",
    		ctx
    	});

    	return block;
    }

    // (24:4) {#each optionList as option, index}
    function create_each_block$t(ctx) {
    	let li;
    	let t_value = /*option*/ ctx[10].info + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[7](/*option*/ ctx[10], ...args);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "hover:bg-black p-1 pl-2 svelte-e0t5tt");
    			add_location(li, file$13, 24, 6, 943);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*optionList*/ 2 && t_value !== (t_value = /*option*/ ctx[10].info + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$t.name,
    		type: "each",
    		source: "(24:4) {#each optionList as option, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1d(ctx) {
    	let main;
    	let input;
    	let t;
    	let mounted;
    	let dispose;
    	let if_block = /*focus*/ ctx[2] && create_if_block$r(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			input = element("input");
    			t = space$1();
    			if (if_block) if_block.c();
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "w-full bg-secondary text-white p-1 pl-2 rounded-none focus:outline-none svelte-e0t5tt");
    			toggle_class(input, "shadow", /*focus*/ ctx[2]);
    			add_location(input, file$13, 20, 2, 425);
    			attr_dev(main, "class", "w-full relative svelte-e0t5tt");
    			add_location(main, file$13, 19, 0, 335);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, input);
    			set_input_value(input, /*dropDownValue*/ ctx[0]);
    			append_dev(main, t);
    			if (if_block) if_block.m(main, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "click", /*click_handler*/ ctx[4], false, false, false),
    					listen_dev(input, "change", /*handleChange*/ ctx[3], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
    					listen_dev(input, "input", /*input_handler*/ ctx[6], false, false, false),
    					action_destroyer(clickOutside$1.call(null, main)),
    					listen_dev(main, "click-outside", /*click_outside_handler*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropDownValue*/ 1 && input.value !== /*dropDownValue*/ ctx[0]) {
    				set_input_value(input, /*dropDownValue*/ ctx[0]);
    			}

    			if (dirty & /*focus*/ 4) {
    				toggle_class(input, "shadow", /*focus*/ ctx[2]);
    			}

    			if (/*focus*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$r(ctx);
    					if_block.c();
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("DropDownInput", slots, []);
    	const dispatch = createEventDispatcher();
    	let { dropDownValue = "" } = $$props;
    	let { optionList = [] } = $$props;
    	let focus;

    	function handleChange() {
    		dispatch("change", {});
    	}

    	const writable_props = ["dropDownValue", "optionList"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DropDownInput> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$$invalidate(2, focus = true);
    	};

    	function input_input_handler() {
    		dropDownValue = this.value;
    		$$invalidate(0, dropDownValue);
    	}

    	const input_handler = e => {
    		$$invalidate(2, focus = false);
    		handleChange();
    	};

    	const click_handler_1 = (option, e) => {
    		$$invalidate(0, dropDownValue = option.value);
    		$$invalidate(2, focus = false);
    		handleChange();
    	};

    	const click_outside_handler = () => {
    		$$invalidate(2, focus = false);
    	};

    	$$self.$$set = $$props => {
    		if ("dropDownValue" in $$props) $$invalidate(0, dropDownValue = $$props.dropDownValue);
    		if ("optionList" in $$props) $$invalidate(1, optionList = $$props.optionList);
    	};

    	$$self.$capture_state = () => ({
    		clickOutside: clickOutside$1,
    		createEventDispatcher,
    		dispatch,
    		dropDownValue,
    		optionList,
    		focus,
    		handleChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("dropDownValue" in $$props) $$invalidate(0, dropDownValue = $$props.dropDownValue);
    		if ("optionList" in $$props) $$invalidate(1, optionList = $$props.optionList);
    		if ("focus" in $$props) $$invalidate(2, focus = $$props.focus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dropDownValue,
    		optionList,
    		focus,
    		handleChange,
    		click_handler,
    		input_input_handler,
    		input_handler,
    		click_handler_1,
    		click_outside_handler
    	];
    }

    class DropDownInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, { dropDownValue: 0, optionList: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DropDownInput",
    			options,
    			id: create_fragment$1d.name
    		});
    	}

    	get dropDownValue() {
    		throw new Error("<DropDownInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dropDownValue(value) {
    		throw new Error("<DropDownInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionList() {
    		throw new Error("<DropDownInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionList(value) {
    		throw new Error("<DropDownInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const build_array = () => {
      let arr = [];
      for (let i = 0; i < 16; i++) {
        arr[i] = {value: Number(i+1), info: `${'Ch. ' + Number(i+1)}`};
      }
      return arr;
    };

    const buildOptionList = function(elementInfo, eventInfo, action, filter){
      const eventType = eventInfo.code;
      const actionName = action.value;
      const elementType = elementInfo.substr(0,1).toUpperCase();
      let options = [];

      if(actionName == "MIDIRELATIVE"){

        // BUTTON
        if(elementType == "B" || elementType == "E"){
          if(eventType == "DP" || eventType == "DR" || (eventType == "INIT" && elementType == "B")){
            options =  [
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'B0', info: 'Control Number'}, 
                {value: 'B1', info: 'Reversed Control Number'}
              ],[
                {value: 'B2', info: 'Control Value'},
                {value: 'B3', info: 'Toggle 2-step'},
                {value: 'B4', info: 'Toggle 3-step'}
              ]
            ];
          }
        }

        // ENCODER
        if(elementType == "E"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'E0', info: 'Default Control Number'}, 
                {value: 'E1', info: 'Reversed Control Number'}
              ],
              [
                {value: 'E2', info: 'Encoder Absolute Value'},
                {value: 'E3', info: 'Encoder Absolute Slow'},
                {value: 'E4', info: 'Encoder Absolute Fast'},
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
          if(eventType == 'ENCPUSHROT'){
            options =  [
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'E0', info: 'Default Control Number'}, 
                {value: 'E1', info: 'Reversed Control Number'}
              ],
              [
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
        }

        // POTENTIOMETER || FADER
        if(elementType == "P" || elementType == "F"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'P0', info: 'Default Control Number'}, 
                {value: 'P1', info: 'Reversed Control Number'},
              ],
              [
                {value: 'P2', info: 'Absolute Value'},
              ]
            ];
          }
        }

      }


      if(actionName == "MIDIABSOLUTE"){

        // BUTTON
        if(elementType == "B" || elementType == "E"){
          if(eventType == "DP" || eventType == "DR" || (eventType == "INIT" && elementType == "B")){
            options =  [
              build_array(),
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'B0', info: 'Control Number'}, 
                {value: 'B1', info: 'Reversed Control Number'}
              ],[
                {value: 'B2', info: 'Control Value'},
                {value: 'B3', info: 'Toggle 2-step'},
                {value: 'B4', info: 'Toggle 3-step'}
              ]
            ];
          }
        }

        // ENCODER
        if(elementType == "E" ){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              build_array(),
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'E0', info: 'Default Control Number'}, 
                {value: 'E1', info: 'Reversed Control Number'}
              ],
              [
                {value: 'E2', info: 'Encoder Absolute Value'},
                {value: 'E3', info: 'Encoder Absolute Slow'},
                {value: 'E4', info: 'Encoder Absolute Fast'},
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
          if(eventType == 'ENCPUSHROT'){
            options =  [
              build_array(),
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'E0', info: 'Default Control Number'}, 
                {value: 'E1', info: 'Reversed Control Number'}
              ],
              [
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
        }

        // POTENTIOMETER || FADER
        if(elementType == "P" || elementType == "F"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              build_array(),
              [
                {value: '176', info: 'Control Change'}, 
                {value: '144', info: 'Note On'}, 
                {value: '128', info: 'Note Off'}
              ],
              [
                {value: 'P0', info: 'Default Control Number'}, 
                {value: 'P1', info: 'Reversed Control Number'}
              ],
              [
                {value: 'P2', info: 'Absolute Value'},
              ]
            ];
          }
        }

      }

      if(actionName == "LEDCOLOR"){

        // BUTTON
        if(elementType == "B" || elementType == "E"){
          if(eventType == "DP" || eventType == "DR" || (eventType == "INIT" && elementType == "B")){
            options =  [
              [
                {value: 'B0', info: 'This LED'}, 
                {value: 'B1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'}, 
              ],
              [
                {value: 'Z1', info: 'Def Red Color'}, 
              ],
              [
                {value: 'Z2', info: 'Def Green Color'}, 
              ],
              [
                {value: 'Z3', info: 'Def Blue Color'}, 
              ]
            ];
          }
        }

        // ENCODER
        if(elementType == "E"){
          if(eventType == "AVC7" || eventType == 'ENCPUSHROT' || eventType == "INIT"){
            options =  [
              [
                {value: 'E0', info: 'This LED'}, 
                {value: 'E1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'}, 
              ],
              [
                {value: 'Z1', info: 'Def Red Color'}, 
              ],
              [
                {value: 'Z2', info: 'Def Green Color'}, 
              ],
              [
                {value: 'Z3', info: 'Def Blue Color'}, 
              ]
            ];
          }
        }

        // POTENTIOMETER || FADER
        if(elementType == "P" || elementType == "F"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              [
                {value: 'P0', info: 'This LED'}, 
                {value: 'P1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'}, 
              ],
              [
                {value: 'Z1', info: 'Def Red Color'}, 
              ],
              [
                {value: 'Z2', info: 'Def Green Color'}, 
              ],
              [
                {value: 'Z3', info: 'Def Blue Color'}, 
              ]
            ];
          }
        }

      }

      if(actionName == "LEDPHASE"){

        // BUTTON
        if(elementType == "B" || elementType == "E"){
          if(eventType == "DP" || eventType == "DR" || (eventType == "INIT" && elementType == "B")){
            options =  [
              [
                {value: 'B0', info: 'This LED'}, 
                {value: 'B1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'},  
              ],
              [
                {value: 'B2', info: 'Control Value'},
                {value: 'B3', info: 'Toggle 2-step'},
                {value: 'B4', info: 'Toggle 3-step'}
              ]
            ];
          }
        }

        // ENCODER
        if(elementType == "E"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              [
                {value: 'E0', info: 'This LED'}, 
                {value: 'E1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'},  
              ],
              [
                {value: 'E2', info: 'Encoder Absolute Value'},
                {value: 'E3', info: 'Encoder Absolute Slow'},
                {value: 'E4', info: 'Encoder Absolute Fast'},
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
          if(eventType == 'ENCPUSHROT'){
            options =  [
              [
                {value: 'E0', info: 'This LED'}, 
                {value: 'E1', info: 'Reversed LED'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'},  
              ],
              [
                {value: 'E5', info: 'Encoder Relative Change'},
                {value: 'E6', info: 'Encoder Relative Slow'},
                {value: 'E7', info: 'Encoder Relative Fast'},
              ]
            ];
          }
        }

        // POTENTIOMETER || FADER
        if(elementType == "P" || elementType == "F"){
          if(eventType == "AVC7" || eventType == "INIT"){
            options =  [
              [
                {value: 'P0', info: 'This LED.'}, 
                {value: 'P1', info: 'Reversed LED.'}, 
              ],
              [
                {value: '1', info: 'A Layer'}, 
                {value: '2', info: 'B Layer'},  
              ],
              [
                {value: 'P2', info: 'Absolute Value'},
              ]
            ];
          }
        }
        
      }

      if(actionName == 'HIDKEYMACRO' || actionName == 'HIDKEYBOARD'){
        // BUTTON
        if(elementType == "B" || elementType == "E"){
          if(eventType == "DP" || eventType == "DR" || eventType == 'ENCPUSHROT' || (eventType == "INIT" && elementType == "B")){
            // MODIFIER
            if(filter == 1){
              options = [
                [
                  {value: '0x00', info: 'none'},
                  {value: '0x01', info: 'left ctrl'},
                  {value: '0x02', info: 'left shift'},
                  {value: '0x04', info: 'left alt'},
                  {value: '0x08', info: 'left ui'},
                  {value: '0x10', info: 'right ctrl'},
                  {value: '0x20', info: 'right shift'},
                  {value: '0x40', info: 'right alt'},
                  {value: '0x80', info: 'right ui'}
                ]
              ];
              
            }
            // NOT MODIFIER
            if(filter == 0) {
              options =  [
                [
                  {value: 30, info: 1},
                  {value: 31, info: 2},
                  {value: 32, info: 3},
                  {value: 33, info: 4},
                  {value: 34, info: 5},
                  {value: 35, info: 6},
                  {value: 36, info: 7},
                  {value: 37, info: 8},
                  {value: 38, info: 9},
                  {value: 39, info: 0},
                  {value: '0x04', info: 'A'},
                  {value: '0x05', info: 'B'},
                  {value: '0x06', info: 'C'},
                  {value: '0x07', info: 'D'},
                  {value: '0x08', info: 'E'},
                  {value: '0x09', info: 'F'},
                  {value: '0x0A', info: 'G'},
                  {value: '0x0B', info: 'H'},
                  {value: '0x0C', info: 'I'},
                  {value: '0x0D', info: 'J'},
                  {value: '0x0E', info: 'K'},
                  {value: '0x0F', info: 'L'},
                  {value: '0x10', info: 'M'},
                  {value: '0x11', info: 'N'},
                  {value: '0x12', info: 'O'},
                  {value: '0x13', info: 'P'},
                  {value: '0x14', info: 'Q'},
                  {value: '0x15', info: 'R'},
                  {value: '0x16', info: 'S'},
                  {value: '0x17', info: 'T'},
                  {value: '0x18', info: 'U'},
                  {value: '0x19', info: 'V'},
                  {value: '0x1A', info: 'W'},
                  {value: '0x1B', info: 'X'},
                  {value: '0x1C', info: 'Y'},
                  {value: '0x1D', info: 'Z'},
                  {value: 40, info: 'enter'},
                  {value: 41, info: 'escape'},
                  {value: 42, info: 'backspace'},
                  {value: 43, info: 'tab'},
                  {value: 44, info: 'spacebar'},
                  {value: 45, info: 'underscore or _'},
                  {value: 46, info: 'plus or +'},
                  {value: 47, info: 'open bracket or {'},
                  {value: 48, info: 'close bracket or }'},
                  {value: 49, info: 'backslash or \''},
                  {value: 50, info: 'hash or #'},
                  {value: 51, info: 'colon or :'},
                  {value: 52, info: 'quote or "'},
                  {value: 53, info: 'tilde or ~'},
                  {value: 54, info: 'comma or ,'},
                  {value: 55, info: 'dot or .'},
                  {value: 56, info: 'slash or /'},
                  {value: 57, info: 'caps lock'},
                  {value: 58, info: 'F1'},
                  {value: 59, info: 'F2'},
                  {value: 60, info: 'F3'},
                  {value: 61, info: 'F4'},
                  {value: 62, info: 'F5'},
                  {value: 63, info: 'F6'},
                  {value: 64, info: 'F7'},
                  {value: 65, info: 'F8'},
                  {value: 66, info: 'F9'},
                  {value: 67, info: 'F10'},
                  {value: 68, info: 'F11'},
                  {value: 69, info: 'F12'},
                  {value: 70, info: 'printscreen'},
                  {value: 71, info: 'scroll lock'},
                  {value: 72, info: 'pause'},
                  {value: 73, info: 'insert'},
                  {value: 74, info: 'home'},
                  {value: 75, info: 'pageup'},
                  {value: 76, info: 'delete'},
                  {value: 77, info: 'end'},
                  {value: 78, info: 'pagedown'},
                  {value: 79, info: 'right'},
                  {value: 80, info: 'left'},
                  {value: 81, info: 'down'},
                  {value: 82, info: 'up'},
                  {value: 83, info: 'keypad num lock'},
                  {value: 84, info: 'keypad divide'},
                  {value: 85, info: 'keypad multiply'},
                  {value: 86, info: 'keypad minus'},
                  {value: 87, info: 'keypad plus'},
                  {value: 88, info: 'keypad enter'},
                  {value: 89, info: 'keypad 1'},
                  {value: 90, info: 'keypad 2'},
                  {value: 91, info: 'keypad 3'},
                  {value: 92, info: 'keypad 4'},
                  {value: 93, info: 'keypad 5'},
                  {value: 94, info: 'keypad 6'},
                  {value: 95, info: 'keypad 7'},
                  {value: 96, info: 'keypad 8'},
                  {value: 97, info: 'keypad 9'},
                  {value: 98, info: 'keypad 0'}
                ]
              ];
            }
          }
        }
      }
      return options;

    };

    /* src\app\settings\local\actions\MidiRelative.svelte generated by Svelte v3.35.0 */
    const file$12 = "src\\app\\settings\\local\\actions\\MidiRelative.svelte";

    function get_each_context$s(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[15] = list;
    	child_ctx[1] = i;
    	return child_ctx;
    }

    // (149:6) {#if action.name == 'MIDI Dynamic'}
    function create_if_block$q(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*validator*/ ctx[2][/*actionKey*/ ctx[14]] == "invalid :(") return create_if_block_1$g;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(149:6) {#if action.name == 'MIDI Dynamic'}",
    		ctx
    	});

    	return block;
    }

    // (152:8) {:else}
    function create_else_block$a(ctx) {
    	let t_value = (/*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    	? /*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    	: "") + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 4 && t_value !== (t_value = (/*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    			? /*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    			: "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(152:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (150:8) {#if validator[actionKey] == 'invalid :('}
    function create_if_block_1$g(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$12, 150, 12, 4614);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(150:8) {#if validator[actionKey] == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    // (144:0) {#each actionKeys as actionKey, index}
    function create_each_block$s(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*inputLabels*/ ctx[5][/*index*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let dropdowninput;
    	let updating_dropDownValue;
    	let t2;
    	let div1;
    	let t3;
    	let current;

    	function dropdowninput_dropDownValue_binding(value) {
    		/*dropdowninput_dropDownValue_binding*/ ctx[9](value, /*actionKey*/ ctx[14]);
    	}

    	let dropdowninput_props = {
    		optionList: /*optionList*/ ctx[4][/*index*/ ctx[1]]
    	};

    	if (/*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]] !== void 0) {
    		dropdowninput_props.dropDownValue = /*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]];
    	}

    	dropdowninput = new DropDownInput({
    			props: dropdowninput_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput, "dropDownValue", dropdowninput_dropDownValue_binding));
    	dropdowninput.$on("change", /*change_handler*/ ctx[10]);
    	let if_block = /*action*/ ctx[0].name == "MIDI Dynamic" && create_if_block$q(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			create_component(dropdowninput.$$.fragment);
    			t2 = space$1();
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t3 = space$1();
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$12, 145, 4, 4231);
    			attr_dev(div1, "class", "text-white pl-2 text-xs font-light tracking-wide flex-grow-0");
    			add_location(div1, file$12, 147, 4, 4430);
    			attr_dev(div2, "class", "" + (null_to_empty("w-1/" + /*actionKeys*/ ctx[3].length + " dropDownInput") + " svelte-af81tj"));
    			add_location(div2, file$12, 144, 2, 4168);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			mount_component(dropdowninput, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div2, t3);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dropdowninput_changes = {};

    			if (!updating_dropDownValue && dirty & /*action, actionKeys*/ 9) {
    				updating_dropDownValue = true;
    				dropdowninput_changes.dropDownValue = /*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]];
    				add_flush_callback(() => updating_dropDownValue = false);
    			}

    			dropdowninput.$set(dropdowninput_changes);

    			if (/*action*/ ctx[0].name == "MIDI Dynamic") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$q(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdowninput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdowninput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(dropdowninput);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$s.name,
    		type: "each",
    		source: "(144:0) {#each actionKeys as actionKey, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1c(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*actionKeys*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$s(get_each_context$s(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*actionKeys, validator, action, optionList, sendData, inputLabels*/ 125) {
    				each_value = /*actionKeys*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$s(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$s(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MidiRelative", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let actionKeys = ["COMMANDCHANNEL", "PARAM1", "PARAM2"];
    	let optionList = buildOptionList(elementInfo, eventInfo, action, "");
    	let inputLabels = ["Command", "Param 1", "Param 2"];

    	function validate_midirelative(PARAMETERS) {
    		for (const KEY in PARAMETERS) {
    			let defined = "";
    			let humanReadable = "";

    			if (PARAMETERS.hasOwnProperty(KEY)) {
    				const VALUE = PARAMETERS[KEY];

    				if (KEY == "COMMANDCHANNEL") {
    					if (parseInt(VALUE) >= 128 && parseInt(VALUE) <= 255) {

    						//let hexstring = '0x' + (+VALUE).toString(16).padStart(2, '0');      
    						defined = check_for_matching_value(optionList, VALUE, 0); /*hexstring*/
    					} else if (VALUE.startsWith("0x") && VALUE.length > 3) {
    						defined = check_for_matching_value(optionList, VALUE, 0);
    					} else {
    						defined = "invalid :(";
    					} //appears to be a wildcard,
    				} else if (KEY == "PARAM1") {
    					if (VALUE == "P0" || VALUE == "P1" || VALUE == "B0" || VALUE == "B1" || VALUE == "E0" || VALUE == "E1") {
    						defined = check_for_matching_value(optionList, VALUE, 1);
    					} else if (+VALUE >= 0 && +VALUE <= 127 && VALUE !== "") ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				} else if (KEY == "PARAM2") {
    					if (VALUE == "P2" || VALUE == "B2" || VALUE == "B3" || VALUE == "B4" || VALUE == "E2" || VALUE == "E3" || VALUE == "E4" || VALUE == "E5" || VALUE == "E6" || VALUE == "E7") {
    						defined = check_for_matching_value(optionList, VALUE, 2);
    					} else if (VALUE >= 0 && VALUE <= 127 && VALUE !== "") ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				}

    				if (defined) humanReadable = defined; else humanReadable = VALUE;
    				$$invalidate(2, validator[KEY] = humanReadable, validator);
    			}
    		}
    	}

    	function sendData() {
    		const COMMAND = parseInt(action.parameters.COMMANDCHANNEL).toString(16)[0];
    		validate_midirelative(action.parameters);

    		const parameters = [
    			{ "CABLECOMMAND": `${"0" + COMMAND}` },
    			{ "COMMANDCHANNEL": `${COMMAND + "0"}` },
    			{
    				"PARAM1": parameter_parser$1(action.parameters.PARAM1)
    			},
    			{
    				"PARAM2": parameter_parser$1(action.parameters.PARAM2)
    			}
    		];

    		let valid = true;

    		for (const key in validator) {
    			if (validator[key] == "invalid :(" || validator[key] == undefined) {
    				valid = false;
    			}
    		}

    		if (valid) {
    			dispatch("send", {
    				action: { value: action.value, parameters },
    				index
    			});
    		}
    	}

    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});

    		validate_midirelative(action.parameters);
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MidiRelative> was created with unknown prop '${key}'`);
    	});

    	function dropdowninput_dropDownValue_binding(value, actionKey) {
    		if ($$self.$$.not_equal(action.parameters[actionKey], value)) {
    			action.parameters[actionKey] = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler = () => {
    		sendData();
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		dispatch,
    		actionListChange,
    		DropDownInput,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		actionKeys,
    		optionList,
    		inputLabels,
    		validate_midirelative,
    		sendData,
    		orderChangeTrigger
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) $$invalidate(2, validator = $$props.validator);
    		if ("actionKeys" in $$props) $$invalidate(3, actionKeys = $$props.actionKeys);
    		if ("optionList" in $$props) $$invalidate(4, optionList = $$props.optionList);
    		if ("inputLabels" in $$props) $$invalidate(5, inputLabels = $$props.inputLabels);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		index,
    		validator,
    		actionKeys,
    		optionList,
    		inputLabels,
    		sendData,
    		eventInfo,
    		elementInfo,
    		dropdowninput_dropDownValue_binding,
    		change_handler
    	];
    }

    class MidiRelative extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, {
    			action: 0,
    			index: 1,
    			eventInfo: 7,
    			elementInfo: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MidiRelative",
    			options,
    			id: create_fragment$1c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console.warn("<MidiRelative> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[1] === undefined && !("index" in props)) {
    			console.warn("<MidiRelative> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[7] === undefined && !("eventInfo" in props)) {
    			console.warn("<MidiRelative> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[8] === undefined && !("elementInfo" in props)) {
    			console.warn("<MidiRelative> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<MidiRelative>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<MidiRelative>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<MidiRelative>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<MidiRelative>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<MidiRelative>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<MidiRelative>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<MidiRelative>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<MidiRelative>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\MidiAbsolute.svelte generated by Svelte v3.35.0 */

    const { console: console_1$l } = globals;
    const file$11 = "src\\app\\settings\\local\\actions\\MidiAbsolute.svelte";

    function get_each_context$r(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[15] = list;
    	child_ctx[1] = i;
    	return child_ctx;
    }

    // (162:6) {#if action.name == 'MIDI Static'}
    function create_if_block$p(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*validator*/ ctx[2][/*actionKey*/ ctx[14]] == "invalid :(") return create_if_block_1$f;
    		return create_else_block$9;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(162:6) {#if action.name == 'MIDI Static'}",
    		ctx
    	});

    	return block;
    }

    // (165:8) {:else}
    function create_else_block$9(ctx) {
    	let t_value = (/*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    	? /*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    	: "") + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 4 && t_value !== (t_value = (/*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    			? /*validator*/ ctx[2][/*actionKey*/ ctx[14]]
    			: "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(165:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (163:8) {#if validator[actionKey] == 'invalid :('}
    function create_if_block_1$f(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$11, 163, 10, 5331);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(163:8) {#if validator[actionKey] == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    // (157:0) {#each actionKeys as actionKey, index}
    function create_each_block$r(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*inputLabels*/ ctx[5][/*index*/ ctx[1]] + "";
    	let t0;
    	let t1;
    	let dropdowninput;
    	let updating_dropDownValue;
    	let t2;
    	let div1;
    	let t3;
    	let current;

    	function dropdowninput_dropDownValue_binding(value) {
    		/*dropdowninput_dropDownValue_binding*/ ctx[9](value, /*actionKey*/ ctx[14]);
    	}

    	let dropdowninput_props = {
    		optionList: /*optionList*/ ctx[4][/*index*/ ctx[1]]
    	};

    	if (/*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]] !== void 0) {
    		dropdowninput_props.dropDownValue = /*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]];
    	}

    	dropdowninput = new DropDownInput({
    			props: dropdowninput_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput, "dropDownValue", dropdowninput_dropDownValue_binding));
    	dropdowninput.$on("change", /*change_handler*/ ctx[10]);
    	let if_block = /*action*/ ctx[0].name == "MIDI Static" && create_if_block$p(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			create_component(dropdowninput.$$.fragment);
    			t2 = space$1();
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t3 = space$1();
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$11, 158, 4, 4962);
    			attr_dev(div1, "class", "text-white pl-2 text-xs tracking-wide flex-grow-0");
    			add_location(div1, file$11, 160, 4, 5161);
    			attr_dev(div2, "class", "" + (null_to_empty("w-1/" + /*actionKeys*/ ctx[3].length + " dropDownInput") + " svelte-af81tj"));
    			add_location(div2, file$11, 157, 2, 4899);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			mount_component(dropdowninput, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div2, t3);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dropdowninput_changes = {};

    			if (!updating_dropDownValue && dirty & /*action, actionKeys*/ 9) {
    				updating_dropDownValue = true;
    				dropdowninput_changes.dropDownValue = /*action*/ ctx[0].parameters[/*actionKey*/ ctx[14]];
    				add_flush_callback(() => updating_dropDownValue = false);
    			}

    			dropdowninput.$set(dropdowninput_changes);

    			if (/*action*/ ctx[0].name == "MIDI Static") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$p(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdowninput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdowninput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(dropdowninput);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$r.name,
    		type: "each",
    		source: "(157:0) {#each actionKeys as actionKey, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1b(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*actionKeys*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$r(get_each_context$r(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*actionKeys, validator, action, optionList, sendData, inputLabels*/ 125) {
    				each_value = /*actionKeys*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$r(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$r(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MidiAbsolute", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let actionKeys = ["CABLECOMMAND", "COMMANDCHANNEL", "PARAM1", "PARAM2"];
    	let optionList = buildOptionList(elementInfo, eventInfo, action);
    	let inputLabels = ["Channel", "Command", "Param 1", "Param 2"];

    	function validate_midiabsolute(PARAMETERS) {
    		for (const KEY in PARAMETERS) {
    			let defined = "";
    			let humanReadable = "";

    			if (PARAMETERS.hasOwnProperty(KEY)) {
    				const VALUE = PARAMETERS[KEY];

    				if (KEY == "CABLECOMMAND") {
    					if (parseInt(VALUE) >= 0 && parseInt(VALUE) <= 16) ; else {
    						defined = "invalid :(";
    					} //appears to be a wildcard
    				} else if (KEY == "COMMANDCHANNEL") {
    					console.log(VALUE, "COMMANDCHANNEL");

    					if (parseInt(VALUE) >= 128 && parseInt(VALUE) <= 255) {

    						//let hexstring = '0x' + (+VALUE).toString(16).padStart(2, '0');      
    						defined = check_for_matching_value(optionList, VALUE, 1); /**hexstring*/
    					} else if (VALUE.toString().startsWith("0x") && VALUE.length > 3) {
    						defined = check_for_matching_value(optionList, VALUE, 1);
    					} else {
    						defined = "invalid :(";
    					} //appears to be a wildcard
    				} else if (KEY == "PARAM1") {
    					if (VALUE == "P0" || VALUE == "P1" || VALUE == "B0" || VALUE == "B1" || VALUE == "E0" || VALUE == "E1") {
    						defined = check_for_matching_value(optionList, VALUE, 2);
    					} else if (+VALUE >= 0 && +VALUE <= 127 && VALUE !== "") ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				} else if (KEY == "PARAM2") {
    					if (VALUE == "P2" || VALUE == "B2" || VALUE == "B3" || VALUE == "B4" || VALUE == "E2" || VALUE == "E3" || VALUE == "E4" || VALUE == "E5" || VALUE == "E6" || VALUE == "E7") {
    						defined = check_for_matching_value(optionList, VALUE, 3);
    					} else if (VALUE >= 0 && VALUE <= 127 && VALUE !== "") ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				}

    				if (defined) humanReadable = defined; else humanReadable = VALUE;
    				$$invalidate(2, validator[KEY] = humanReadable, validator);
    			}
    		}
    	}

    	function sendData() {
    		validate_midiabsolute(action.parameters);
    		const CHANNEL = parseInt(action.parameters.CABLECOMMAND - 1).toString(16).padStart(2, "0")[1]; // -1 on channel, beacuse it works 0..15
    		const COMMAND = parseInt(action.parameters.COMMANDCHANNEL).toString(16)[0];

    		const parameters = [
    			{ "CABLECOMMAND": `${"0" + COMMAND}` },
    			{ "COMMANDCHANNEL": `${COMMAND + CHANNEL}` },
    			{
    				"PARAM1": parameter_parser$1(action.parameters.PARAM1)
    			},
    			{
    				"PARAM1": parameter_parser$1(action.parameters.PARAM2)
    			}
    		];

    		console.log(parameters);
    		let valid = true;

    		for (const key in validator) {
    			if (validator[key] == "invalid :(" || validator[key] == undefined) {
    				valid = false;
    			}
    		}

    		if (valid) {
    			dispatch("send", {
    				action: { value: action.value, parameters },
    				index
    			});
    		}
    	}

    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});

    		const cablecommand = action.parameters.COMMANDCHANNEL % 16;
    		const commandchannel = action.parameters.CABLECOMMAND % 16 * 16;
    		$$invalidate(0, action.parameters.COMMANDCHANNEL = commandchannel, action);
    		$$invalidate(0, action.parameters.CABLECOMMAND = cablecommand + 1, action);
    		validate_midiabsolute(action.parameters);
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$l.warn(`<MidiAbsolute> was created with unknown prop '${key}'`);
    	});

    	function dropdowninput_dropDownValue_binding(value, actionKey) {
    		if ($$self.$$.not_equal(action.parameters[actionKey], value)) {
    			action.parameters[actionKey] = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler = () => {
    		sendData();
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		beforeUpdate,
    		afterUpdate,
    		createEventDispatcher,
    		dispatch,
    		DropDownInput,
    		GRID_PROTOCOL,
    		actionListChange,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		actionKeys,
    		optionList,
    		inputLabels,
    		validate_midiabsolute,
    		sendData,
    		orderChangeTrigger
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) $$invalidate(2, validator = $$props.validator);
    		if ("actionKeys" in $$props) $$invalidate(3, actionKeys = $$props.actionKeys);
    		if ("optionList" in $$props) $$invalidate(4, optionList = $$props.optionList);
    		if ("inputLabels" in $$props) $$invalidate(5, inputLabels = $$props.inputLabels);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		index,
    		validator,
    		actionKeys,
    		optionList,
    		inputLabels,
    		sendData,
    		eventInfo,
    		elementInfo,
    		dropdowninput_dropDownValue_binding,
    		change_handler
    	];
    }

    class MidiAbsolute extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, {
    			action: 0,
    			index: 1,
    			eventInfo: 7,
    			elementInfo: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MidiAbsolute",
    			options,
    			id: create_fragment$1b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console_1$l.warn("<MidiAbsolute> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[1] === undefined && !("index" in props)) {
    			console_1$l.warn("<MidiAbsolute> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[7] === undefined && !("eventInfo" in props)) {
    			console_1$l.warn("<MidiAbsolute> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[8] === undefined && !("elementInfo" in props)) {
    			console_1$l.warn("<MidiAbsolute> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<MidiAbsolute>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<MidiAbsolute>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<MidiAbsolute>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<MidiAbsolute>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<MidiAbsolute>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<MidiAbsolute>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<MidiAbsolute>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<MidiAbsolute>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\SetLedColor.svelte generated by Svelte v3.35.0 */

    const { console: console_1$k } = globals;
    const file$10 = "src\\app\\settings\\local\\actions\\SetLedColor.svelte";

    // (171:4) {#if startColor}
    function create_if_block$o(ctx) {
    	let colorpicker;
    	let current;

    	colorpicker = new ColorPicker({
    			props: {
    				startColor: /*startColor*/ ctx[1],
    				showAlpha: false,
    				alpha: /*alpha*/ ctx[3]
    			},
    			$$inline: true
    		});

    	colorpicker.$on("colorChange", /*colorCallback*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(colorpicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(colorpicker, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const colorpicker_changes = {};
    			if (dirty & /*startColor*/ 2) colorpicker_changes.startColor = /*startColor*/ ctx[1];
    			colorpicker.$set(colorpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(colorpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(colorpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(colorpicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(171:4) {#if startColor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1a(ctx) {
    	let div14;
    	let div12;
    	let div4;
    	let div1;
    	let div0;
    	let t1;
    	let dropdowninput0;
    	let updating_dropDownValue;
    	let t2;
    	let div3;
    	let div2;
    	let t4;
    	let dropdowninput1;
    	let updating_dropDownValue_1;
    	let t5;
    	let div11;
    	let div6;
    	let div5;
    	let t7;
    	let dropdowninput2;
    	let updating_dropDownValue_2;
    	let t8;
    	let div8;
    	let div7;
    	let t10;
    	let dropdowninput3;
    	let updating_dropDownValue_3;
    	let t11;
    	let div10;
    	let div9;
    	let t13;
    	let dropdowninput4;
    	let updating_dropDownValue_4;
    	let t14;
    	let div13;
    	let current;

    	function dropdowninput0_dropDownValue_binding(value) {
    		/*dropdowninput0_dropDownValue_binding*/ ctx[9](value);
    	}

    	let dropdowninput0_props = { optionList: /*optionList*/ ctx[4][0] };

    	if (/*action*/ ctx[0].parameters.NUM !== void 0) {
    		dropdowninput0_props.dropDownValue = /*action*/ ctx[0].parameters.NUM;
    	}

    	dropdowninput0 = new DropDownInput({
    			props: dropdowninput0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput0, "dropDownValue", dropdowninput0_dropDownValue_binding));
    	dropdowninput0.$on("change", /*change_handler*/ ctx[10]);

    	function dropdowninput1_dropDownValue_binding(value) {
    		/*dropdowninput1_dropDownValue_binding*/ ctx[11](value);
    	}

    	let dropdowninput1_props = { optionList: /*optionList*/ ctx[4][1] };

    	if (/*action*/ ctx[0].parameters.LAY !== void 0) {
    		dropdowninput1_props.dropDownValue = /*action*/ ctx[0].parameters.LAY;
    	}

    	dropdowninput1 = new DropDownInput({
    			props: dropdowninput1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput1, "dropDownValue", dropdowninput1_dropDownValue_binding));
    	dropdowninput1.$on("change", /*change_handler_1*/ ctx[12]);

    	function dropdowninput2_dropDownValue_binding(value) {
    		/*dropdowninput2_dropDownValue_binding*/ ctx[13](value);
    	}

    	let dropdowninput2_props = { optionList: /*optionList*/ ctx[4][2] };

    	if (/*action*/ ctx[0].parameters.RED !== void 0) {
    		dropdowninput2_props.dropDownValue = /*action*/ ctx[0].parameters.RED;
    	}

    	dropdowninput2 = new DropDownInput({
    			props: dropdowninput2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput2, "dropDownValue", dropdowninput2_dropDownValue_binding));
    	dropdowninput2.$on("change", /*change_handler_2*/ ctx[14]);

    	function dropdowninput3_dropDownValue_binding(value) {
    		/*dropdowninput3_dropDownValue_binding*/ ctx[15](value);
    	}

    	let dropdowninput3_props = { optionList: /*optionList*/ ctx[4][3] };

    	if (/*action*/ ctx[0].parameters.GRE !== void 0) {
    		dropdowninput3_props.dropDownValue = /*action*/ ctx[0].parameters.GRE;
    	}

    	dropdowninput3 = new DropDownInput({
    			props: dropdowninput3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput3, "dropDownValue", dropdowninput3_dropDownValue_binding));
    	dropdowninput3.$on("change", /*change_handler_3*/ ctx[16]);

    	function dropdowninput4_dropDownValue_binding(value) {
    		/*dropdowninput4_dropDownValue_binding*/ ctx[17](value);
    	}

    	let dropdowninput4_props = { optionList: /*optionList*/ ctx[4][4] };

    	if (/*action*/ ctx[0].parameters.BLU !== void 0) {
    		dropdowninput4_props.dropDownValue = /*action*/ ctx[0].parameters.BLU;
    	}

    	dropdowninput4 = new DropDownInput({
    			props: dropdowninput4_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput4, "dropDownValue", dropdowninput4_dropDownValue_binding));
    	dropdowninput4.$on("change", /*change_handler_4*/ ctx[18]);
    	let if_block = /*startColor*/ ctx[1] && create_if_block$o(ctx);

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div12 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Element";
    			t1 = space$1();
    			create_component(dropdowninput0.$$.fragment);
    			t2 = space$1();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Layer";
    			t4 = space$1();
    			create_component(dropdowninput1.$$.fragment);
    			t5 = space$1();
    			div11 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div5.textContent = "Red";
    			t7 = space$1();
    			create_component(dropdowninput2.$$.fragment);
    			t8 = space$1();
    			div8 = element("div");
    			div7 = element("div");
    			div7.textContent = "Green";
    			t10 = space$1();
    			create_component(dropdowninput3.$$.fragment);
    			t11 = space$1();
    			div10 = element("div");
    			div9 = element("div");
    			div9.textContent = "Blue";
    			t13 = space$1();
    			create_component(dropdowninput4.$$.fragment);
    			t14 = space$1();
    			div13 = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$10, 139, 8, 3776);
    			attr_dev(div1, "class", "w-full xl:pr-1");
    			add_location(div1, file$10, 138, 6, 3738);
    			attr_dev(div2, "class", "text-gray-700 text-xs");
    			add_location(div2, file$10, 143, 8, 4009);
    			attr_dev(div3, "class", "w-full xl:px-1");
    			add_location(div3, file$10, 142, 6, 3971);
    			attr_dev(div4, "class", "flex w-5/12 flex-col pr-1 xl:pr-0 xl:flex-row");
    			add_location(div4, file$10, 137, 4, 3671);
    			attr_dev(div5, "class", "text-gray-700 text-xs");
    			add_location(div5, file$10, 149, 8, 4301);
    			attr_dev(div6, "class", "w-full px-1");
    			add_location(div6, file$10, 148, 6, 4266);
    			attr_dev(div7, "class", "text-gray-700 text-xs");
    			add_location(div7, file$10, 153, 8, 4527);
    			attr_dev(div8, "class", "w-full px-1");
    			add_location(div8, file$10, 152, 6, 4492);
    			attr_dev(div9, "class", "text-gray-700 text-xs");
    			add_location(div9, file$10, 157, 8, 4755);
    			attr_dev(div10, "class", "w-full px-1");
    			add_location(div10, file$10, 156, 6, 4720);
    			attr_dev(div11, "class", "flex w-full flex-col xl:flex-row");
    			add_location(div11, file$10, 147, 4, 4212);
    			attr_dev(div12, "class", "flex w-full text-white");
    			add_location(div12, file$10, 136, 2, 3629);
    			attr_dev(div13, "class", "mt-2 pr-1 xl:pr-2 w-full");
    			add_location(div13, file$10, 169, 2, 5279);
    			attr_dev(div14, "class", "flex flex-col w-full pr-1 xl:pr-0");
    			add_location(div14, file$10, 135, 0, 3578);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div12);
    			append_dev(div12, div4);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			mount_component(dropdowninput0, div1, null);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			mount_component(dropdowninput1, div3, null);
    			append_dev(div12, t5);
    			append_dev(div12, div11);
    			append_dev(div11, div6);
    			append_dev(div6, div5);
    			append_dev(div6, t7);
    			mount_component(dropdowninput2, div6, null);
    			append_dev(div11, t8);
    			append_dev(div11, div8);
    			append_dev(div8, div7);
    			append_dev(div8, t10);
    			mount_component(dropdowninput3, div8, null);
    			append_dev(div11, t11);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div10, t13);
    			mount_component(dropdowninput4, div10, null);
    			append_dev(div14, t14);
    			append_dev(div14, div13);
    			if (if_block) if_block.m(div13, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const dropdowninput0_changes = {};

    			if (!updating_dropDownValue && dirty & /*action*/ 1) {
    				updating_dropDownValue = true;
    				dropdowninput0_changes.dropDownValue = /*action*/ ctx[0].parameters.NUM;
    				add_flush_callback(() => updating_dropDownValue = false);
    			}

    			dropdowninput0.$set(dropdowninput0_changes);
    			const dropdowninput1_changes = {};

    			if (!updating_dropDownValue_1 && dirty & /*action*/ 1) {
    				updating_dropDownValue_1 = true;
    				dropdowninput1_changes.dropDownValue = /*action*/ ctx[0].parameters.LAY;
    				add_flush_callback(() => updating_dropDownValue_1 = false);
    			}

    			dropdowninput1.$set(dropdowninput1_changes);
    			const dropdowninput2_changes = {};

    			if (!updating_dropDownValue_2 && dirty & /*action*/ 1) {
    				updating_dropDownValue_2 = true;
    				dropdowninput2_changes.dropDownValue = /*action*/ ctx[0].parameters.RED;
    				add_flush_callback(() => updating_dropDownValue_2 = false);
    			}

    			dropdowninput2.$set(dropdowninput2_changes);
    			const dropdowninput3_changes = {};

    			if (!updating_dropDownValue_3 && dirty & /*action*/ 1) {
    				updating_dropDownValue_3 = true;
    				dropdowninput3_changes.dropDownValue = /*action*/ ctx[0].parameters.GRE;
    				add_flush_callback(() => updating_dropDownValue_3 = false);
    			}

    			dropdowninput3.$set(dropdowninput3_changes);
    			const dropdowninput4_changes = {};

    			if (!updating_dropDownValue_4 && dirty & /*action*/ 1) {
    				updating_dropDownValue_4 = true;
    				dropdowninput4_changes.dropDownValue = /*action*/ ctx[0].parameters.BLU;
    				add_flush_callback(() => updating_dropDownValue_4 = false);
    			}

    			dropdowninput4.$set(dropdowninput4_changes);

    			if (/*startColor*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*startColor*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$o(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div13, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdowninput0.$$.fragment, local);
    			transition_in(dropdowninput1.$$.fragment, local);
    			transition_in(dropdowninput2.$$.fragment, local);
    			transition_in(dropdowninput3.$$.fragment, local);
    			transition_in(dropdowninput4.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdowninput0.$$.fragment, local);
    			transition_out(dropdowninput1.$$.fragment, local);
    			transition_out(dropdowninput2.$$.fragment, local);
    			transition_out(dropdowninput3.$$.fragment, local);
    			transition_out(dropdowninput4.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			destroy_component(dropdowninput0);
    			destroy_component(dropdowninput1);
    			destroy_component(dropdowninput2);
    			destroy_component(dropdowninput3);
    			destroy_component(dropdowninput4);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function setLedColorValidator(parameters) {
    	const num = parameters.NUM;
    	const lay = parameters.LAY;
    	const red = parameters.RED;
    	const gre = parameters.GRE;
    	const blu = parameters.BLU;
    	let valid = true;
    	if (!(num == "P0" || num == "P1" || num == "E0" || num == "E1" || num == "B0" || num == "B1" || 0 < num && num < 16)) valid = false;
    	if (!(lay == 1 || lay == 2)) valid = false;
    	if (!(0 <= red && red <= 255 || red == "Z1")) valid = false;
    	if (!(0 <= gre && gre <= 255 || gre == "Z2")) valid = false;
    	if (!(0 <= blu && blu <= 255 || blu == "Z3")) valid = false;
    	return valid;
    }

    function instance$1a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SetLedColor", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let orderChangeTrigger = null;

    	onMount(() => {
    		$$invalidate(1, startColor = `rgb(${action.parameters.RED}, ${action.parameters.GRE}, ${action.parameters.BLU})`);
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			//console.log( action.name, 'order change subscription', index);
    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	function sendData() {
    		let param_0;
    		let num = action.parameters.NUM;

    		if (num != "P0" && num != "P1" && num != "E0" && num != "E1" && num != "B0" && num != "B1") {
    			param_0 = Number(num);
    		} else {
    			param_0 = num;
    		}

    		let colorMod = {};

    		if (action.parameters.RED == "Z1") {
    			colorMod.RED = "Z1";
    		} else {
    			colorMod.RED = Math.floor(action.parameters.RED);
    		}

    		if (action.parameters.GRE == "Z2") {
    			colorMod.GRE = "Z2";
    		} else {
    			colorMod.GRE = Math.floor(action.parameters.GRE);
    		}

    		if (action.parameters.BLU == "Z3") {
    			colorMod.BLU = "Z3";
    		} else {
    			colorMod.BLU = Math.floor(action.parameters.BLU);
    		}

    		const parameters = [
    			{ "NUM": param_0 },
    			{ "LAY": `${"0" + action.parameters.LAY}` },
    			{ "RED": colorMod.RED },
    			{ "GRE": colorMod.GRE },
    			{ "BLU": colorMod.BLU }
    		]; //{ 'BLU': Math.floor(action.parameters.BLU * action.parameters.ALPHA) }

    		let valid = setLedColorValidator(action.parameters);
    		console.log("set led color...", valid, parameters);

    		if (valid) {
    			dispatch("send", {
    				action: { value: action.value, parameters },
    				index
    			});
    		}
    	}

    	let layers = action.parameters[1] || [];
    	let startColor;
    	let alpha = 1;
    	let optionList = buildOptionList(elementInfo, eventInfo, action);

    	// init string '' generated by elementsettings.svelte from NaN to 0;
    	function colorCallback(rgba) {
    		$$invalidate(0, action.parameters.RED = Math.floor(rgba.detail.r), action);
    		$$invalidate(0, action.parameters.GRE = Math.floor(rgba.detail.g), action);
    		$$invalidate(0, action.parameters.BLU = Math.floor(rgba.detail.b), action);
    		$$invalidate(0, action.parameters.ALPHA = rgba.detail.a, action);
    		sendData();
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$k.warn(`<SetLedColor> was created with unknown prop '${key}'`);
    	});

    	function dropdowninput0_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.NUM, value)) {
    			action.parameters.NUM = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler = () => {
    		sendData();
    	};

    	function dropdowninput1_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.LAY, value)) {
    			action.parameters.LAY = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_1 = () => {
    		sendData();
    	};

    	function dropdowninput2_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.RED, value)) {
    			action.parameters.RED = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_2 = () => {
    		sendData();
    	};

    	function dropdowninput3_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.GRE, value)) {
    			action.parameters.GRE = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_3 = () => {
    		sendData();
    	};

    	function dropdowninput4_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.BLU, value)) {
    			action.parameters.BLU = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_4 = () => {
    		sendData();
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(6, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		afterUpdate,
    		dispatch,
    		GRID_PROTOCOL,
    		actionListChange,
    		ColorPicker,
    		DropDownInput,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		orderChangeTrigger,
    		sendData,
    		layers,
    		startColor,
    		alpha,
    		optionList,
    		colorCallback,
    		setLedColorValidator
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(6, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(7, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(8, elementInfo = $$props.elementInfo);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    		if ("layers" in $$props) layers = $$props.layers;
    		if ("startColor" in $$props) $$invalidate(1, startColor = $$props.startColor);
    		if ("alpha" in $$props) $$invalidate(3, alpha = $$props.alpha);
    		if ("optionList" in $$props) $$invalidate(4, optionList = $$props.optionList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		startColor,
    		sendData,
    		alpha,
    		optionList,
    		colorCallback,
    		index,
    		eventInfo,
    		elementInfo,
    		dropdowninput0_dropDownValue_binding,
    		change_handler,
    		dropdowninput1_dropDownValue_binding,
    		change_handler_1,
    		dropdowninput2_dropDownValue_binding,
    		change_handler_2,
    		dropdowninput3_dropDownValue_binding,
    		change_handler_3,
    		dropdowninput4_dropDownValue_binding,
    		change_handler_4
    	];
    }

    class SetLedColor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, {
    			action: 0,
    			index: 6,
    			eventInfo: 7,
    			elementInfo: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SetLedColor",
    			options,
    			id: create_fragment$1a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console_1$k.warn("<SetLedColor> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[6] === undefined && !("index" in props)) {
    			console_1$k.warn("<SetLedColor> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[7] === undefined && !("eventInfo" in props)) {
    			console_1$k.warn("<SetLedColor> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[8] === undefined && !("elementInfo" in props)) {
    			console_1$k.warn("<SetLedColor> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<SetLedColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<SetLedColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<SetLedColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<SetLedColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<SetLedColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<SetLedColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<SetLedColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<SetLedColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\SetLedPhase.svelte generated by Svelte v3.35.0 */
    const file$$ = "src\\app\\settings\\local\\actions\\SetLedPhase.svelte";

    // (142:8) {:else}
    function create_else_block_2$1(ctx) {
    	let t_value = (/*validator*/ ctx[1].NUM ? /*validator*/ ctx[1].NUM : "") + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 2 && t_value !== (t_value = (/*validator*/ ctx[1].NUM ? /*validator*/ ctx[1].NUM : "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(142:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (140:8) {#if validator.NUM == 'invalid :('}
    function create_if_block_2$b(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$$, 140, 10, 4073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(140:8) {#if validator.NUM == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    // (155:10) {:else}
    function create_else_block_1$2(ctx) {
    	let t_value = (/*validator*/ ctx[1].LAY ? /*validator*/ ctx[1].LAY : "") + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 2 && t_value !== (t_value = (/*validator*/ ctx[1].LAY ? /*validator*/ ctx[1].LAY : "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(155:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (153:10) {#if validator.LAY == 'invalid :('}
    function create_if_block_1$e(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$$, 153, 12, 4603);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(153:10) {#if validator.LAY == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    // (169:10) {:else}
    function create_else_block$8(ctx) {
    	let t_value = (/*validator*/ ctx[1].PHA ? /*validator*/ ctx[1].PHA : "") + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 2 && t_value !== (t_value = (/*validator*/ ctx[1].PHA ? /*validator*/ ctx[1].PHA : "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(169:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (167:10) {#if validator.PHA == 'invalid :('}
    function create_if_block$n(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$$, 167, 12, 5163);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(167:10) {#if validator.PHA == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$19(ctx) {
    	let div12;
    	let div11;
    	let div2;
    	let div0;
    	let t1;
    	let dropdowninput0;
    	let updating_dropDownValue;
    	let t2;
    	let div1;
    	let t3;
    	let div6;
    	let div5;
    	let div3;
    	let t5;
    	let dropdowninput1;
    	let updating_dropDownValue_1;
    	let t6;
    	let div4;
    	let t7;
    	let div10;
    	let div9;
    	let div7;
    	let t9;
    	let dropdowninput2;
    	let updating_dropDownValue_2;
    	let t10;
    	let div8;
    	let current;

    	function dropdowninput0_dropDownValue_binding(value) {
    		/*dropdowninput0_dropDownValue_binding*/ ctx[7](value);
    	}

    	let dropdowninput0_props = { optionList: /*optionList*/ ctx[2][0] };

    	if (/*action*/ ctx[0].parameters.NUM !== void 0) {
    		dropdowninput0_props.dropDownValue = /*action*/ ctx[0].parameters.NUM;
    	}

    	dropdowninput0 = new DropDownInput({
    			props: dropdowninput0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput0, "dropDownValue", dropdowninput0_dropDownValue_binding));
    	dropdowninput0.$on("change", /*change_handler*/ ctx[8]);

    	function select_block_type(ctx, dirty) {
    		if (/*validator*/ ctx[1].NUM == "invalid :(") return create_if_block_2$b;
    		return create_else_block_2$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	function dropdowninput1_dropDownValue_binding(value) {
    		/*dropdowninput1_dropDownValue_binding*/ ctx[9](value);
    	}

    	let dropdowninput1_props = { optionList: /*optionList*/ ctx[2][1] };

    	if (/*action*/ ctx[0].parameters.LAY !== void 0) {
    		dropdowninput1_props.dropDownValue = /*action*/ ctx[0].parameters.LAY;
    	}

    	dropdowninput1 = new DropDownInput({
    			props: dropdowninput1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput1, "dropDownValue", dropdowninput1_dropDownValue_binding));
    	dropdowninput1.$on("change", /*change_handler_1*/ ctx[10]);

    	function select_block_type_1(ctx, dirty) {
    		if (/*validator*/ ctx[1].LAY == "invalid :(") return create_if_block_1$e;
    		return create_else_block_1$2;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function dropdowninput2_dropDownValue_binding(value) {
    		/*dropdowninput2_dropDownValue_binding*/ ctx[11](value);
    	}

    	let dropdowninput2_props = { optionList: /*optionList*/ ctx[2][2] };

    	if (/*action*/ ctx[0].parameters.PHA !== void 0) {
    		dropdowninput2_props.dropDownValue = /*action*/ ctx[0].parameters.PHA;
    	}

    	dropdowninput2 = new DropDownInput({
    			props: dropdowninput2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput2, "dropDownValue", dropdowninput2_dropDownValue_binding));
    	dropdowninput2.$on("change", /*change_handler_2*/ ctx[12]);

    	function select_block_type_2(ctx, dirty) {
    		if (/*validator*/ ctx[1].PHA == "invalid :(") return create_if_block$n;
    		return create_else_block$8;
    	}

    	let current_block_type_2 = select_block_type_2(ctx);
    	let if_block2 = current_block_type_2(ctx);

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div11 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Element";
    			t1 = space$1();
    			create_component(dropdowninput0.$$.fragment);
    			t2 = space$1();
    			div1 = element("div");
    			if_block0.c();
    			t3 = space$1();
    			div6 = element("div");
    			div5 = element("div");
    			div3 = element("div");
    			div3.textContent = "Layer";
    			t5 = space$1();
    			create_component(dropdowninput1.$$.fragment);
    			t6 = space$1();
    			div4 = element("div");
    			if_block1.c();
    			t7 = space$1();
    			div10 = element("div");
    			div9 = element("div");
    			div7 = element("div");
    			div7.textContent = "Intensity";
    			t9 = space$1();
    			create_component(dropdowninput2.$$.fragment);
    			t10 = space$1();
    			div8 = element("div");
    			if_block2.c();
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$$, 136, 6, 3773);
    			attr_dev(div1, "class", "text-white text-xs tracking-wide pl-2 flex-grow-0");
    			add_location(div1, file$$, 138, 6, 3952);
    			attr_dev(div2, "class", "w-1/3 pr-1");
    			add_location(div2, file$$, 135, 4, 3741);
    			attr_dev(div3, "class", "text-gray-700 text-xs");
    			add_location(div3, file$$, 149, 8, 4297);
    			attr_dev(div4, "class", "text-white text-xs tracking-wide pl-2 flex-grow-0");
    			add_location(div4, file$$, 151, 8, 4478);
    			attr_dev(div5, "class", "px-1");
    			add_location(div5, file$$, 148, 6, 4269);
    			attr_dev(div6, "class", " w-1/3");
    			add_location(div6, file$$, 147, 4, 4241);
    			attr_dev(div7, "class", "text-gray-700 text-xs");
    			add_location(div7, file$$, 163, 8, 4853);
    			attr_dev(div8, "class", "text-white pl-2 text-xs tracking-wide flex-grow-0");
    			add_location(div8, file$$, 165, 8, 5038);
    			attr_dev(div9, "class", "px-1");
    			add_location(div9, file$$, 162, 6, 4825);
    			attr_dev(div10, "class", "flex w-1/3");
    			add_location(div10, file$$, 161, 4, 4793);
    			attr_dev(div11, "class", "flex w-full text-white");
    			add_location(div11, file$$, 134, 2, 3699);
    			attr_dev(div12, "class", "flex flex-col w-full pr-1 ");
    			add_location(div12, file$$, 133, 0, 3655);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div11);
    			append_dev(div11, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			mount_component(dropdowninput0, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			if_block0.m(div1, null);
    			append_dev(div11, t3);
    			append_dev(div11, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div5, t5);
    			mount_component(dropdowninput1, div5, null);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			if_block1.m(div4, null);
    			append_dev(div11, t7);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			append_dev(div9, div7);
    			append_dev(div9, t9);
    			mount_component(dropdowninput2, div9, null);
    			append_dev(div9, t10);
    			append_dev(div9, div8);
    			if_block2.m(div8, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const dropdowninput0_changes = {};

    			if (!updating_dropDownValue && dirty & /*action*/ 1) {
    				updating_dropDownValue = true;
    				dropdowninput0_changes.dropDownValue = /*action*/ ctx[0].parameters.NUM;
    				add_flush_callback(() => updating_dropDownValue = false);
    			}

    			dropdowninput0.$set(dropdowninput0_changes);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			}

    			const dropdowninput1_changes = {};

    			if (!updating_dropDownValue_1 && dirty & /*action*/ 1) {
    				updating_dropDownValue_1 = true;
    				dropdowninput1_changes.dropDownValue = /*action*/ ctx[0].parameters.LAY;
    				add_flush_callback(() => updating_dropDownValue_1 = false);
    			}

    			dropdowninput1.$set(dropdowninput1_changes);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div4, null);
    				}
    			}

    			const dropdowninput2_changes = {};

    			if (!updating_dropDownValue_2 && dirty & /*action*/ 1) {
    				updating_dropDownValue_2 = true;
    				dropdowninput2_changes.dropDownValue = /*action*/ ctx[0].parameters.PHA;
    				add_flush_callback(() => updating_dropDownValue_2 = false);
    			}

    			dropdowninput2.$set(dropdowninput2_changes);

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div8, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdowninput0.$$.fragment, local);
    			transition_in(dropdowninput1.$$.fragment, local);
    			transition_in(dropdowninput2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdowninput0.$$.fragment, local);
    			transition_out(dropdowninput1.$$.fragment, local);
    			transition_out(dropdowninput2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    			destroy_component(dropdowninput0);
    			if_block0.d();
    			destroy_component(dropdowninput1);
    			if_block1.d();
    			destroy_component(dropdowninput2);
    			if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$19.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$19($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SetLedPhase", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let optionList = buildOptionList(elementInfo, eventInfo, action);
    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			//console.log( action.name, 'order change subscription', index);
    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});

    		validate_setledphase(action.parameters);
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	function sendData() {
    		validate_setledphase(action.parameters);
    		let param_0;
    		let param_2;

    		if (action.parameters.NUM != "A0" && action.parameters.NUM != "A1") {
    			param_0 = action.parameters.NUM;
    		} else {
    			param_0 = action.parameters.NUM;
    		}

    		if (action.parameters.PHA != "A3" && action.parameters.PHA != "A7") {
    			param_2 = action.parameters.PHA;
    		} else {
    			param_2 = action.parameters.PHA;
    		}

    		const parameters = [
    			{ "NUM": parameter_parser$1(param_0) },
    			{ "LAY": `${"0" + action.parameters.LAY}` },
    			{ "PHA": parameter_parser$1(param_2) }
    		];

    		let valid = true;

    		for (const key in validator) {
    			if (validator[key] == "invalid :(" || validator[key] == undefined) {
    				valid = false;
    			}
    		}

    		if (valid) {
    			dispatch("send", {
    				action: { value: action.value, parameters },
    				index
    			});
    		}
    	}

    	function validate_setledphase(PARAMETERS) {
    		for (const KEY in PARAMETERS) {
    			let defined = "";
    			let humanReadable = "";

    			if (PARAMETERS.hasOwnProperty(KEY)) {
    				const VALUE = PARAMETERS[KEY];

    				if (KEY == "NUM") {
    					if (VALUE == "B0" || VALUE == "B1" || VALUE == "E0" || VALUE == "E1" || VALUE == "P0" || VALUE == "P1") {
    						defined = check_for_matching_value(optionList, VALUE, 0);
    					} else if (+VALUE >= 0 && +VALUE <= 15) ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				} else if (KEY == "LAY") {
    					if (VALUE == 1 || VALUE == 2) {
    						defined = check_for_matching_value(optionList, VALUE, 1);
    					} else {
    						defined = "invalid :(";
    					}
    				} else if (KEY == "PHA") {
    					if (VALUE == "P2" || VALUE == "B2" || VALUE == "B3" || VALUE == "B4" || VALUE == "E2" || VALUE == "E3" || VALUE == "E4" || VALUE == "E5" || VALUE == "E6" || VALUE == "E7") {
    						defined = check_for_matching_value(optionList, VALUE, 2);
    					} else if (parseInt(VALUE) >= 0 && parseInt(VALUE) <= 255) ; else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				}

    				if (defined) humanReadable = defined; else humanReadable = VALUE;
    				$$invalidate(1, validator[KEY] = humanReadable, validator);
    			}
    		}
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SetLedPhase> was created with unknown prop '${key}'`);
    	});

    	function dropdowninput0_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.NUM, value)) {
    			action.parameters.NUM = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler = () => {
    		sendData();
    	};

    	function dropdowninput1_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.LAY, value)) {
    			action.parameters.LAY = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_1 = () => {
    		sendData();
    	};

    	function dropdowninput2_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.PHA, value)) {
    			action.parameters.PHA = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_2 = () => {
    		sendData();
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(4, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(5, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(6, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		afterUpdate,
    		dispatch,
    		actionListChange,
    		DropDownInput,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		optionList,
    		orderChangeTrigger,
    		sendData,
    		validate_setledphase
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(4, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(5, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(6, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) $$invalidate(1, validator = $$props.validator);
    		if ("optionList" in $$props) $$invalidate(2, optionList = $$props.optionList);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		validator,
    		optionList,
    		sendData,
    		index,
    		eventInfo,
    		elementInfo,
    		dropdowninput0_dropDownValue_binding,
    		change_handler,
    		dropdowninput1_dropDownValue_binding,
    		change_handler_1,
    		dropdowninput2_dropDownValue_binding,
    		change_handler_2
    	];
    }

    class SetLedPhase extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$19, create_fragment$19, safe_not_equal, {
    			action: 0,
    			index: 4,
    			eventInfo: 5,
    			elementInfo: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SetLedPhase",
    			options,
    			id: create_fragment$19.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console.warn("<SetLedPhase> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[4] === undefined && !("index" in props)) {
    			console.warn("<SetLedPhase> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[5] === undefined && !("eventInfo" in props)) {
    			console.warn("<SetLedPhase> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[6] === undefined && !("elementInfo" in props)) {
    			console.warn("<SetLedPhase> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<SetLedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<SetLedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<SetLedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<SetLedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<SetLedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<SetLedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<SetLedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<SetLedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\RawAction.svelte generated by Svelte v3.35.0 */

    const { console: console_1$j } = globals;
    const file$_ = "src\\app\\settings\\local\\actions\\RawAction.svelte";

    function create_fragment$18(ctx) {
    	let div1;
    	let div0;
    	let t1;
    	let textarea;
    	let t2;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Raw action input for debug purposes";
    			t1 = space$1();
    			textarea = element("textarea");
    			t2 = space$1();
    			button = element("button");
    			button.textContent = "Send";
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$_, 64, 2, 1489);
    			attr_dev(textarea, "class", "w-full font-mono secondary text-white border-none p-1 pl-2 rounded-none focus:outline-none");
    			add_location(textarea, file$_, 65, 2, 1569);
    			attr_dev(button, "class", "focus:outline-none cursor-pointer mr-1 text-white border-none border-primary bg-indigo-500 hover:bg-indigo-600 px-2 py-1");
    			add_location(button, file$_, 66, 2, 1724);
    			attr_dev(div1, "class", "w-full  dropDownInput svelte-af81tj");
    			add_location(div1, file$_, 63, 0, 1450);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*action*/ ctx[0].parameters);
    			append_dev(div1, t2);
    			append_dev(div1, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[3]),
    					listen_dev(button, "click", /*sendData*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*action*/ 1) {
    				set_input_value(textarea, /*action*/ ctx[0].parameters);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$18.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$18($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("RawAction", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;

    	function sendData() {
    		// this is validated by hitting the send button. no extra validation happens, experimental function.
    		let _PARAMETERS = action.parameters.split("\n");

    		_PARAMETERS = _PARAMETERS.map(param => {
    			return param = Array.from(param).map(p => {
    				return p.charCodeAt(0);
    			});
    		});

    		let serialized = [];
    		console.log(_PARAMETERS);

    		_PARAMETERS.forEach(param => {
    			serialized.push(...GRID_PROTOCOL.configure_raw(param));
    		});

    		dispatch("send", {
    			action: {
    				value: action.value,
    				parameters: serialized
    			},
    			index
    		});
    	}

    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	const writable_props = ["action", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$j.warn(`<RawAction> was created with unknown prop '${key}'`);
    	});

    	function textarea_input_handler() {
    		action.parameters = this.value;
    		$$invalidate(0, action);
    	}

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		dispatch,
    		GRID_PROTOCOL,
    		actionListChange,
    		action,
    		index,
    		sendData,
    		orderChangeTrigger
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [action, sendData, index, textarea_input_handler];
    }

    class RawAction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$18, create_fragment$18, safe_not_equal, { action: 0, index: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RawAction",
    			options,
    			id: create_fragment$18.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console_1$j.warn("<RawAction> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[2] === undefined && !("index" in props)) {
    			console_1$j.warn("<RawAction> was created without expected prop 'index'");
    		}
    	}

    	get action() {
    		throw new Error("<RawAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<RawAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<RawAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<RawAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\ui\components\Radio.svelte generated by Svelte v3.35.0 */
    const file$Z = "src\\app\\settings\\ui\\components\\Radio.svelte";

    function get_each_context$q(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (18:2) {#each pairs as pair,i}
    function create_each_block$q(ctx) {
    	let div;
    	let t0_value = /*pair*/ ctx[5].key + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[3](/*pair*/ ctx[5]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			attr_dev(div, "class", "px-2 py-1 w-full transition-all ease-in-out duration-500 text-center rounded-lg rounded-r-none svelte-1u1pczw");
    			toggle_class(div, "tab", /*radioValue*/ ctx[0] == /*pair*/ ctx[5].value);
    			toggle_class(div, "rounded-r-none", /*i*/ ctx[7] == 0);
    			toggle_class(div, "rounded-l-none", /*i*/ ctx[7] == 1);
    			add_location(div, file$Z, 18, 4, 416);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*pairs*/ 2 && t0_value !== (t0_value = /*pair*/ ctx[5].key + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*radioValue, pairs*/ 3) {
    				toggle_class(div, "tab", /*radioValue*/ ctx[0] == /*pair*/ ctx[5].value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$q.name,
    		type: "each",
    		source: "(18:2) {#each pairs as pair,i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$17(ctx) {
    	let div;
    	let each_value = /*pairs*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$q(get_each_context$q(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex border-collapse text-sm cursor-pointer text-gray-700 border-secondary border-2 rounded-lg");
    			add_location(div, file$Z, 16, 0, 275);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*radioValue, pairs, handleChange*/ 7) {
    				each_value = /*pairs*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$q(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$q(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$17.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$17($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Radio", slots, []);
    	const dispatch = createEventDispatcher();
    	let { radioValue = "" } = $$props;
    	let { pairs = [] } = $$props;

    	function handleChange(arg) {
    		$$invalidate(0, radioValue = arg);
    		dispatch("change", {});
    	}

    	const writable_props = ["radioValue", "pairs"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Radio> was created with unknown prop '${key}'`);
    	});

    	const click_handler = pair => {
    		handleChange(pair.value);
    	};

    	$$self.$$set = $$props => {
    		if ("radioValue" in $$props) $$invalidate(0, radioValue = $$props.radioValue);
    		if ("pairs" in $$props) $$invalidate(1, pairs = $$props.pairs);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		radioValue,
    		pairs,
    		handleChange
    	});

    	$$self.$inject_state = $$props => {
    		if ("radioValue" in $$props) $$invalidate(0, radioValue = $$props.radioValue);
    		if ("pairs" in $$props) $$invalidate(1, pairs = $$props.pairs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [radioValue, pairs, handleChange, click_handler];
    }

    class Radio extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$17, create_fragment$17, safe_not_equal, { radioValue: 0, pairs: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Radio",
    			options,
    			id: create_fragment$17.name
    		});
    	}

    	get radioValue() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radioValue(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pairs() {
    		throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pairs(value) {
    		throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\KeyBoard.svelte generated by Svelte v3.35.0 */

    const { console: console_1$i } = globals;
    const file$Y = "src\\app\\settings\\local\\actions\\KeyBoard.svelte";

    // (146:6) {:else}
    function create_else_block$7(ctx) {
    	let t_value = (/*validator*/ ctx[1]["KEYCODE"]
    	? /*validator*/ ctx[1]["KEYCODE"]
    	: "") + "";

    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*validator*/ 2 && t_value !== (t_value = (/*validator*/ ctx[1]["KEYCODE"]
    			? /*validator*/ ctx[1]["KEYCODE"]
    			: "") + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(146:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (144:6) {#if validator['KEYCODE'] == 'invalid :('}
    function create_if_block$m(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Invalid parameter!";
    			attr_dev(span, "class", "text-important");
    			add_location(span, file$Y, 144, 8, 3802);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(144:6) {#if validator['KEYCODE'] == 'invalid :('}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$16(ctx) {
    	let div1;
    	let div0;
    	let t1;
    	let radio0;
    	let updating_radioValue;
    	let t2;
    	let div6;
    	let div2;
    	let t4;
    	let div5;
    	let div3;
    	let dropdowninput;
    	let updating_dropDownValue;
    	let t5;
    	let div4;
    	let t6;
    	let div8;
    	let div7;
    	let t8;
    	let radio1;
    	let updating_radioValue_1;
    	let current;

    	function radio0_radioValue_binding(value) {
    		/*radio0_radioValue_binding*/ ctx[7](value);
    	}

    	let radio0_props = {
    		pairs: [{ key: "Modifier", value: 1 }, { key: "Key", value: 0 }]
    	};

    	if (/*action*/ ctx[0].parameters.KEYISMODIFIER !== void 0) {
    		radio0_props.radioValue = /*action*/ ctx[0].parameters.KEYISMODIFIER;
    	}

    	radio0 = new Radio({ props: radio0_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio0, "radioValue", radio0_radioValue_binding));
    	radio0.$on("change", /*change_handler*/ ctx[8]);

    	function dropdowninput_dropDownValue_binding(value) {
    		/*dropdowninput_dropDownValue_binding*/ ctx[9](value);
    	}

    	let dropdowninput_props = { optionList: /*optionList*/ ctx[2][0] };

    	if (/*action*/ ctx[0].parameters.KEYCODE !== void 0) {
    		dropdowninput_props.dropDownValue = /*action*/ ctx[0].parameters.KEYCODE;
    	}

    	dropdowninput = new DropDownInput({
    			props: dropdowninput_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(dropdowninput, "dropDownValue", dropdowninput_dropDownValue_binding));
    	dropdowninput.$on("change", /*change_handler_1*/ ctx[10]);

    	function select_block_type(ctx, dirty) {
    		if (/*validator*/ ctx[1]["KEYCODE"] == "invalid :(") return create_if_block$m;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	function radio1_radioValue_binding(value) {
    		/*radio1_radioValue_binding*/ ctx[11](value);
    	}

    	let radio1_props = {
    		pairs: [{ key: "Press", value: 1 }, { key: "Release", value: 0 }]
    	};

    	if (/*action*/ ctx[0].parameters.KEYSTATE !== void 0) {
    		radio1_props.radioValue = /*action*/ ctx[0].parameters.KEYSTATE;
    	}

    	radio1 = new Radio({ props: radio1_props, $$inline: true });
    	binding_callbacks.push(() => bind(radio1, "radioValue", radio1_radioValue_binding));
    	radio1.$on("change", /*change_handler_2*/ ctx[12]);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Key Type";
    			t1 = space$1();
    			create_component(radio0.$$.fragment);
    			t2 = space$1();
    			div6 = element("div");
    			div2 = element("div");
    			div2.textContent = "Key Code";
    			t4 = space$1();
    			div5 = element("div");
    			div3 = element("div");
    			create_component(dropdowninput.$$.fragment);
    			t5 = space$1();
    			div4 = element("div");
    			if_block.c();
    			t6 = space$1();
    			div8 = element("div");
    			div7 = element("div");
    			div7.textContent = "State";
    			t8 = space$1();
    			create_component(radio1.$$.fragment);
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$Y, 132, 2, 3158);
    			attr_dev(div1, "class", "w-4/12 ui-field  svelte-8a332h");
    			add_location(div1, file$Y, 131, 0, 3124);
    			attr_dev(div2, "class", "text-gray-700 text-xs");
    			add_location(div2, file$Y, 137, 2, 3403);
    			attr_dev(div3, "class", "w-1/2 flex relative");
    			add_location(div3, file$Y, 139, 4, 3505);
    			attr_dev(div4, "class", "w-1/2 text-white pl-2 text-xs tracking-wide ");
    			add_location(div4, file$Y, 142, 4, 3683);
    			attr_dev(div5, "class", "w-full flex items-center pr-2");
    			add_location(div5, file$Y, 138, 2, 3456);
    			attr_dev(div6, "class", "w-4/12 ui-field svelte-8a332h");
    			add_location(div6, file$Y, 136, 0, 3370);
    			attr_dev(div7, "class", "text-gray-700 text-xs");
    			add_location(div7, file$Y, 153, 0, 4009);
    			attr_dev(div8, "class", "w-4/12 ui-field svelte-8a332h");
    			add_location(div8, file$Y, 152, 0, 3978);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			mount_component(radio0, div1, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div2);
    			append_dev(div6, t4);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			mount_component(dropdowninput, div3, null);
    			append_dev(div5, t5);
    			append_dev(div5, div4);
    			if_block.m(div4, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div7);
    			append_dev(div8, t8);
    			mount_component(radio1, div8, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const radio0_changes = {};

    			if (!updating_radioValue && dirty & /*action*/ 1) {
    				updating_radioValue = true;
    				radio0_changes.radioValue = /*action*/ ctx[0].parameters.KEYISMODIFIER;
    				add_flush_callback(() => updating_radioValue = false);
    			}

    			radio0.$set(radio0_changes);
    			const dropdowninput_changes = {};
    			if (dirty & /*optionList*/ 4) dropdowninput_changes.optionList = /*optionList*/ ctx[2][0];

    			if (!updating_dropDownValue && dirty & /*action*/ 1) {
    				updating_dropDownValue = true;
    				dropdowninput_changes.dropDownValue = /*action*/ ctx[0].parameters.KEYCODE;
    				add_flush_callback(() => updating_dropDownValue = false);
    			}

    			dropdowninput.$set(dropdowninput_changes);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div4, null);
    				}
    			}

    			const radio1_changes = {};

    			if (!updating_radioValue_1 && dirty & /*action*/ 1) {
    				updating_radioValue_1 = true;
    				radio1_changes.radioValue = /*action*/ ctx[0].parameters.KEYSTATE;
    				add_flush_callback(() => updating_radioValue_1 = false);
    			}

    			radio1.$set(radio1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radio0.$$.fragment, local);
    			transition_in(dropdowninput.$$.fragment, local);
    			transition_in(radio1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radio0.$$.fragment, local);
    			transition_out(dropdowninput.$$.fragment, local);
    			transition_out(radio1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(radio0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div6);
    			destroy_component(dropdowninput);
    			if_block.d();
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div8);
    			destroy_component(radio1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$16.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$16($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("KeyBoard", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let optionList = buildOptionList(elementInfo, eventInfo, action, action.parameters.KEYISMODIFIER);

    	function validate_hidkeyboard(PARAMETERS) {
    		for (const KEY in PARAMETERS) {
    			let defined = "";
    			let humanReadable = "";

    			if (PARAMETERS.hasOwnProperty(KEY)) {
    				const VALUE = PARAMETERS[KEY];

    				if (KEY == "KEYCODE") {
    					if (parseInt(VALUE) >= 0 && parseInt(VALUE) <= 255) {
    						console.log(optionList, VALUE, 0);
    						defined = check_for_matching_value(optionList, VALUE, 0);
    					} else {
    						// wildcard
    						defined = "invalid :(";
    					}
    				} else {
    					console.log("ELSE", parseInt(VALUE));

    					if (parseInt(VALUE) == 0 || parseInt(VALUE) == 1) {
    						defined = "valid!";
    					} else {
    						defined = "invalid :(";
    					}
    				}

    				if (defined) humanReadable = defined; else humanReadable = VALUE;
    				$$invalidate(1, validator[KEY] = humanReadable, validator);
    			}
    		}
    	}

    	function sendData() {
    		validate_hidkeyboard(action.parameters);

    		const parameters = [
    			{
    				"KEYISMODIFIER": parameter_parser$1(action.parameters.KEYISMODIFIER)
    			},
    			{
    				"KEYCODE": parameter_parser$1(action.parameters.KEYCODE)
    			},
    			{
    				"KEYSTATE": parameter_parser$1(action.parameters.KEYSTATE)
    			}
    		];

    		let valid = true;
    		console.log("sendData", validator);

    		for (const key in validator) {
    			if (validator[key] == "invalid :(" || validator[key] == undefined) {
    				valid = false;
    			}
    		}

    		if (valid) {
    			dispatch("send", {
    				action: { value: action.value, parameters },
    				index
    			});
    		}
    	}

    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});

    		validate_hidkeyboard(action.parameters);
    	});

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$i.warn(`<KeyBoard> was created with unknown prop '${key}'`);
    	});

    	function radio0_radioValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.KEYISMODIFIER, value)) {
    			action.parameters.KEYISMODIFIER = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler = () => {
    		sendData();
    	};

    	function dropdowninput_dropDownValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.KEYCODE, value)) {
    			action.parameters.KEYCODE = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_1 = () => {
    		sendData();
    	};

    	function radio1_radioValue_binding(value) {
    		if ($$self.$$.not_equal(action.parameters.KEYSTATE, value)) {
    			action.parameters.KEYSTATE = value;
    			$$invalidate(0, action);
    		}
    	}

    	const change_handler_2 = () => {
    		sendData();
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(4, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(5, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(6, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		dispatch,
    		actionListChange,
    		DropDownInput,
    		Radio,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		optionList,
    		validate_hidkeyboard,
    		sendData,
    		orderChangeTrigger
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(4, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(5, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(6, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) $$invalidate(1, validator = $$props.validator);
    		if ("optionList" in $$props) $$invalidate(2, optionList = $$props.optionList);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*elementInfo, eventInfo, action*/ 97) {
    			{
    				$$invalidate(2, optionList = buildOptionList(elementInfo, eventInfo, action, action.parameters.KEYISMODIFIER));
    			}
    		}
    	};

    	return [
    		action,
    		validator,
    		optionList,
    		sendData,
    		index,
    		eventInfo,
    		elementInfo,
    		radio0_radioValue_binding,
    		change_handler,
    		dropdowninput_dropDownValue_binding,
    		change_handler_1,
    		radio1_radioValue_binding,
    		change_handler_2
    	];
    }

    class KeyBoard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$16, create_fragment$16, safe_not_equal, {
    			action: 0,
    			index: 4,
    			eventInfo: 5,
    			elementInfo: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "KeyBoard",
    			options,
    			id: create_fragment$16.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console_1$i.warn("<KeyBoard> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[4] === undefined && !("index" in props)) {
    			console_1$i.warn("<KeyBoard> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[5] === undefined && !("eventInfo" in props)) {
    			console_1$i.warn("<KeyBoard> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[6] === undefined && !("elementInfo" in props)) {
    			console_1$i.warn("<KeyBoard> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<KeyBoard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<KeyBoard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<KeyBoard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<KeyBoard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<KeyBoard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<KeyBoard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<KeyBoard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<KeyBoard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var map = [
    	{
    		value: "0x01",
    		info: "ctrl",
    		js_value: 17,
    		is_modifier: true
    	},
    	{
    		value: "0x02",
    		info: "shift",
    		js_value: 16,
    		is_modifier: true
    	},
    	{
    		value: "0x04",
    		info: "alt",
    		js_value: 18,
    		is_modifier: true
    	},
    	{
    		value: "0x08",
    		info: "left window",
    		js_value: 91,
    		is_modifier: true
    	},
    	{
    		value: "0x80",
    		info: "right window",
    		js_value: 92,
    		is_modifier: true
    	},
    	{
    		value: 30,
    		info: 1,
    		js_value: 49,
    		is_modifier: false
    	},
    	{
    		value: 31,
    		info: 2,
    		js_value: 50,
    		is_modifier: false
    	},
    	{
    		value: 32,
    		info: 3,
    		js_value: 51,
    		is_modifier: false
    	},
    	{
    		value: 33,
    		info: 4,
    		js_value: 52,
    		is_modifier: false
    	},
    	{
    		value: 34,
    		info: 5,
    		js_value: 53,
    		is_modifier: false
    	},
    	{
    		value: 35,
    		info: 6,
    		js_value: 54,
    		is_modifier: false
    	},
    	{
    		value: 36,
    		info: 7,
    		js_value: 55,
    		is_modifier: false
    	},
    	{
    		value: 37,
    		info: 8,
    		js_value: 56,
    		is_modifier: false
    	},
    	{
    		value: 38,
    		info: 9,
    		js_value: 57,
    		is_modifier: false
    	},
    	{
    		value: 39,
    		info: 0,
    		js_value: 48,
    		is_modifier: false
    	},
    	{
    		value: "0x04",
    		info: "A",
    		js_value: 65,
    		is_modifier: false
    	},
    	{
    		value: "0x05",
    		info: "B",
    		js_value: 66,
    		is_modifier: false
    	},
    	{
    		value: "0x06",
    		info: "C",
    		js_value: 67,
    		is_modifier: false
    	},
    	{
    		value: "0x07",
    		info: "D",
    		js_value: 68,
    		is_modifier: false
    	},
    	{
    		value: "0x08",
    		info: "E",
    		js_value: 69,
    		is_modifier: false
    	},
    	{
    		value: "0x09",
    		info: "F",
    		js_value: 70,
    		is_modifier: false
    	},
    	{
    		value: "0x0A",
    		info: "G",
    		js_value: 71,
    		is_modifier: false
    	},
    	{
    		value: "0x0B",
    		info: "H",
    		js_value: 72,
    		is_modifier: false
    	},
    	{
    		value: "0x0C",
    		info: "I",
    		js_value: 73,
    		is_modifier: false
    	},
    	{
    		value: "0x0D",
    		info: "J",
    		js_value: 74,
    		is_modifier: false
    	},
    	{
    		value: "0x0E",
    		info: "K",
    		js_value: 75,
    		is_modifier: false
    	},
    	{
    		value: "0x0F",
    		info: "L",
    		js_value: 76,
    		is_modifier: false
    	},
    	{
    		value: "0x10",
    		info: "M",
    		js_value: 77,
    		is_modifier: false
    	},
    	{
    		value: "0x11",
    		info: "N",
    		js_value: 78,
    		is_modifier: false
    	},
    	{
    		value: "0x12",
    		info: "O",
    		js_value: 79,
    		is_modifier: false
    	},
    	{
    		value: "0x13",
    		info: "P",
    		js_value: 80,
    		is_modifier: false
    	},
    	{
    		value: "0x14",
    		info: "Q",
    		js_value: 81,
    		is_modifier: false
    	},
    	{
    		value: "0x15",
    		info: "R",
    		js_value: 82,
    		is_modifier: false
    	},
    	{
    		value: "0x16",
    		info: "S",
    		js_value: 83,
    		is_modifier: false
    	},
    	{
    		value: "0x17",
    		info: "T",
    		js_value: 84,
    		is_modifier: false
    	},
    	{
    		value: "0x18",
    		info: "U",
    		js_value: 85,
    		is_modifier: false
    	},
    	{
    		value: "0x19",
    		info: "V",
    		js_value: 86,
    		is_modifier: false
    	},
    	{
    		value: "0x1A",
    		info: "W",
    		js_value: 87,
    		is_modifier: false
    	},
    	{
    		value: "0x1B",
    		info: "X",
    		js_value: 88,
    		is_modifier: false
    	},
    	{
    		value: "0x1C",
    		info: "Y",
    		js_value: 89,
    		is_modifier: false
    	},
    	{
    		value: "0x1D",
    		info: "Z",
    		js_value: 90,
    		is_modifier: false
    	},
    	{
    		value: 40,
    		info: "enter",
    		js_value: 13,
    		is_modifier: false
    	},
    	{
    		value: 41,
    		info: "escape",
    		js_value: 27,
    		is_modifier: false
    	},
    	{
    		value: 43,
    		info: "tab",
    		js_value: 9,
    		is_modifier: false
    	},
    	{
    		value: 44,
    		info: "space",
    		js_value: 32,
    		is_modifier: false
    	},
    	{
    		value: 45,
    		info: "dash",
    		js_value: 189,
    		is_modifier: false
    	},
    	{
    		value: 47,
    		info: "{",
    		js_value: 219,
    		is_modifier: false
    	},
    	{
    		value: 48,
    		info: "}",
    		js_value: 221,
    		is_modifier: false
    	},
    	{
    		value: 54,
    		info: ",",
    		js_value: 188,
    		is_modifier: false
    	},
    	{
    		value: 55,
    		info: ".",
    		js_value: 190,
    		is_modifier: false
    	},
    	{
    		value: 56,
    		info: "/",
    		js_value: 191,
    		is_modifier: false
    	},
    	{
    		value: 57,
    		info: "caps lock",
    		js_value: 20,
    		is_modifier: false
    	},
    	{
    		value: 58,
    		info: "F1",
    		js_value: 112,
    		is_modifier: false
    	},
    	{
    		value: 59,
    		info: "F2",
    		js_value: 113,
    		is_modifier: false
    	},
    	{
    		value: 60,
    		info: "F3",
    		js_value: 114,
    		is_modifier: false
    	},
    	{
    		value: 61,
    		info: "F4",
    		js_value: 115,
    		is_modifier: false
    	},
    	{
    		value: 62,
    		info: "F5",
    		js_value: 116,
    		is_modifier: false
    	},
    	{
    		value: 63,
    		info: "F6",
    		js_value: 117,
    		is_modifier: false
    	},
    	{
    		value: 64,
    		info: "F7",
    		js_value: 118,
    		is_modifier: false
    	},
    	{
    		value: 65,
    		info: "F8",
    		js_value: 119,
    		is_modifier: false
    	},
    	{
    		value: 66,
    		info: "F9",
    		js_value: 120,
    		is_modifier: false
    	},
    	{
    		value: 67,
    		info: "F10",
    		js_value: 121,
    		is_modifier: false
    	},
    	{
    		value: 68,
    		info: "F11",
    		js_value: 122,
    		is_modifier: false
    	},
    	{
    		value: 69,
    		info: "F12",
    		js_value: 123,
    		is_modifier: false
    	},
    	{
    		value: 71,
    		info: "scroll lock",
    		js_value: 145,
    		is_modifier: false
    	},
    	{
    		value: 73,
    		info: "insert",
    		js_value: 45,
    		is_modifier: false
    	},
    	{
    		value: 74,
    		info: "home",
    		js_value: 36,
    		is_modifier: false
    	},
    	{
    		value: 75,
    		info: "page up",
    		js_value: 33,
    		is_modifier: false
    	},
    	{
    		value: 76,
    		info: "delete",
    		js_value: 46,
    		is_modifier: false
    	},
    	{
    		value: 77,
    		info: "end",
    		js_value: 35,
    		is_modifier: false
    	},
    	{
    		value: 78,
    		info: "page down",
    		js_value: 34,
    		is_modifier: false
    	},
    	{
    		value: 79,
    		info: "right arrow",
    		js_value: 39,
    		is_modifier: false
    	},
    	{
    		value: 80,
    		info: "left arrow",
    		js_value: 37,
    		is_modifier: false
    	},
    	{
    		value: 81,
    		info: "down arrow",
    		js_value: 40,
    		is_modifier: false
    	},
    	{
    		value: 82,
    		info: "up arrow",
    		js_value: 38,
    		is_modifier: false
    	},
    	{
    		value: 84,
    		info: "divide",
    		js_value: 111,
    		is_modifier: false
    	},
    	{
    		value: 85,
    		info: "multiply",
    		js_value: 106,
    		is_modifier: false
    	},
    	{
    		value: 86,
    		info: "subtract",
    		js_value: 109,
    		is_modifier: false
    	},
    	{
    		value: 87,
    		info: "add",
    		js_value: 107,
    		is_modifier: false
    	},
    	{
    		value: 89,
    		info: "numpad_1",
    		js_value: 97,
    		is_modifier: false
    	},
    	{
    		value: 90,
    		info: "numpad_2",
    		js_value: 98,
    		is_modifier: false
    	},
    	{
    		value: 91,
    		info: "numpad_3",
    		js_value: 99,
    		is_modifier: false
    	},
    	{
    		value: 92,
    		info: "numpad_4",
    		js_value: 100,
    		is_modifier: false
    	},
    	{
    		value: 93,
    		info: "numpad_5",
    		js_value: 101,
    		is_modifier: false
    	},
    	{
    		value: 94,
    		info: "numpad_6",
    		js_value: 102,
    		is_modifier: false
    	},
    	{
    		value: 95,
    		info: "numpad_7",
    		js_value: 103,
    		is_modifier: false
    	},
    	{
    		value: 96,
    		info: "numpad_8",
    		js_value: 104,
    		is_modifier: false
    	},
    	{
    		value: 97,
    		info: "numpad_9",
    		js_value: 105,
    		is_modifier: false
    	},
    	{
    		value: 98,
    		info: "numpad_0",
    		js_value: 96,
    		is_modifier: false
    	}
    ];

    var keyMap = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': map
    });

    /* src\app\settings\local\actions\KeyMacro.svelte generated by Svelte v3.35.0 */

    const { console: console_1$h } = globals;
    const file$X = "src\\app\\settings\\local\\actions\\KeyMacro.svelte";

    function get_each_context$p(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (309:8) {#each keys as key, i (i)}
    function create_each_block$p(key_1, ctx) {
    	let div;
    	let raw_value = /*key*/ ctx[23] + "";
    	let div_data_index_value;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "data-index", div_data_index_value = /*i*/ ctx[25]);
    			attr_dev(div, "class", "svelte-1xs9d27");
    			toggle_class(div, "blink", /*caretPos*/ ctx[2] + /*caretPos*/ ctx[2] - 1 == /*i*/ ctx[25]);
    			add_location(div, file$X, 309, 10, 8719);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*keys*/ 2 && raw_value !== (raw_value = /*key*/ ctx[23] + "")) div.innerHTML = raw_value;
    			if (dirty & /*keys*/ 2 && div_data_index_value !== (div_data_index_value = /*i*/ ctx[25])) {
    				attr_dev(div, "data-index", div_data_index_value);
    			}

    			if (dirty & /*caretPos, keys*/ 6) {
    				toggle_class(div, "blink", /*caretPos*/ ctx[2] + /*caretPos*/ ctx[2] - 1 == /*i*/ ctx[25]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$p.name,
    		type: "each",
    		source: "(309:8) {#each keys as key, i (i)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$15(ctx) {
    	let div4;
    	let div3;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t2;
    	let button0;
    	let t4;
    	let button1;
    	let mounted;
    	let dispose;
    	let each_value = /*keys*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*i*/ ctx[25];
    	validate_each_keys(ctx, each_value, get_each_context$p, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$p(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$p(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Key Type";
    			t1 = space$1();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space$1();
    			button0 = element("button");
    			button0.textContent = "caret";
    			t4 = space$1();
    			button1 = element("button");
    			button1.textContent = "Clear";
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$X, 299, 6, 8284);
    			attr_dev(div1, "id", "idk");
    			attr_dev(div1, "class", "editableDiv w-full secondary text-white p-2 pl-2 flex flex-row rounded-none focus:outline-none svelte-1xs9d27");
    			attr_dev(div1, "contenteditable", "true");
    			add_location(div1, file$X, 300, 6, 8341);
    			attr_dev(div2, "class", "w-full pr-2");
    			add_location(div2, file$X, 298, 4, 8251);
    			add_location(button0, file$X, 313, 4, 8846);
    			attr_dev(button1, "class", "bg-secondary hover:bg-highlight-400 text-white px-2 py-1 cursor-pointer border-none rounded focus:outline-none mr-2");
    			add_location(button1, file$X, 314, 4, 8896);
    			attr_dev(div3, "class", "w-full flex flex-row items-end");
    			add_location(div3, file$X, 297, 2, 8201);
    			attr_dev(div4, "class", "flex w-full flex-col");
    			add_location(div4, file$X, 296, 0, 8163);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			/*div1_binding*/ ctx[10](div1);
    			append_dev(div3, t2);
    			append_dev(div3, button0);
    			append_dev(div3, t4);
    			append_dev(div3, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "keydown", prevent_default(/*identifyKey*/ ctx[3]), false, true, false),
    					listen_dev(div1, "keyup", prevent_default(/*identifyKey*/ ctx[3]), false, true, false),
    					listen_dev(div1, "click", /*setCaret*/ ctx[4], false, false, false),
    					listen_dev(button0, "click", caretToEnd$1, false, false, false),
    					listen_dev(button1, "click", /*clearMacro*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*keys, caretPos*/ 6) {
    				each_value = /*keys*/ ctx[1];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$p, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block$p, null, get_each_context$p);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*div1_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$15.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sendData$1() {
    	
    } /**    dispatch('send', { 
      action: {
        value: action.value, 
        parameters: parameters
      }, 
      index: index 
    });
    */

    function putKeyInArray$1() {
    	
    }

    function cutQuickDownUp$1(args) {
    	// identify if the following element is a pair key, set type and cut point accordingly
    	let cuts = [];

    	args.forEach((arg, i) => {
    		//console.log(arg);
    		if (args[i + 1]) {
    			if (arg.info == args[i + 1].info && arg.type == "keydown" && args[i + 1].type == "keyup") {
    				arg.type = "keydownup";
    				cuts.push(i + 1);
    			}
    		}
    	});

    	// make the cuts, remove double elements from keydown-keyup pairs (remove the second, first contains 'keydownup' type for color)
    	cuts.forEach(cut => {
    		args.splice(cut, 1);
    	});

    	console.log(cuts, args);
    	return args;
    }

    function colorize$1(args) {
    	let svg = `
              <svg viewBox="0 0 95 95" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M48.5 0L8 32.5L8 52.5L48.5 20L48.5 0Z" fill="#C4C4C4"/>
                <path d="M48 0L88.5 32.5L88.5 52.5L48 20L48 0Z" fill="#C4C4C4"/>
                <rect x="40" y="14" width="16" height="81" fill="#C4C4C4"/>
              </svg>
              `;

    	// down = red
    	// up = yellow
    	// down-up = green
    	let coloredKeys = [];

    	args.forEach((arg, i) => {
    		if (arg.type == "keydownup") {
    			coloredKeys.push(`<div class="text-green-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-green-500 rounded-md">${arg.info}</div>`);
    		} else if (arg.type == "keydown") {
    			coloredKeys.push(`<div class="text-red-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-red-500 rounded-md">${arg.info} <span style="transform:rotate(180deg)" class="h-4 w-4 ml-1">${svg}</span></div>` + "  ");
    		} else if (arg.type == "keyup") {
    			coloredKeys.push(`<div class="text-yellow-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-yellow-500  rounded-md">${arg.info} <span class="h-4 w-4 ml-1">${svg}</span></div>` + "  ");
    		}

    		coloredKeys.push(`<div data-caret="${i}" class="p-1 h-6 hover:bg-highlight"></div>`);
    	});

    	return coloredKeys;
    }

    function caretToEnd$1(el) {
    	el.focus();

    	if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
    		var range = document.createRange();
    		range.selectNodeContents(el);
    		range.collapse(false);
    		var sel = window.getSelection();
    		sel.removeAllRanges();
    		sel.addRange(range);
    	} else if (typeof document.body.createTextRange != "undefined") {
    		var textRange = document.body.createTextRange();
    		textRange.moveToElementText(el);
    		textRange.collapse(false);
    		textRange.select();
    	}
    } /**
    let div = macroInputField;
    const range = document.createRange();
    const sel = window.getSelection();
    range.selectNodeContents(div);
    range.collapse(false);
    console.log(sel)
    sel.removeAllRanges();
    sel.addRange(range);
    div.focus();
    range.detach(); // optimization

    div.scrollTop = div.scrollHeight;
    */

    function instance$15($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("KeyMacro", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let macroInputField;
    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});
    	}); //loadMacros();

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			manageMacro();
    		}
    	});

    	let keys = "";
    	let parameters = [];
    	let keydownBuffer = [];
    	let caretKeyBuffer = [];
    	let keyBuffer = [];
    	let keyMerge = [];
    	let normalKeys = [];
    	let caretArray = [];

    	function identifyKey(e) {
    		/**
    if(!e.repeat && e.type == 'keydown'){
      if(keydownBuffer.length > 0){
        caretPos += 1;
      }
    }
    */
    		// filter same keypress type
    		if (!e.repeat) {
    			if (e.keyCode == 8 && e.type == "keydown") {
    				keys.splice(-2, 2);
    				keyBuffer.splice(-2, 2);
    			} else {
    				if (caretPos) {
    					let key = map.find(key => key.js_value == e.keyCode);
    					const f_key = [...caretKeyBuffer].reverse().find(key => key.js_value == e.keyCode);

    					if (!f_key) {
    						caretKeyBuffer.push({ ...key, type: e.type });
    					} else if (f_key.type !== e.type) {
    						caretKeyBuffer.push({ ...key, type: e.type });
    					}

    					caretKeyBuffer = cutQuickDownUp$1(caretKeyBuffer);
    				} else {
    					let key = map.find(key => key.js_value == e.keyCode);
    					const f_key = [...keyBuffer].reverse().find(key => key.js_value == e.keyCode);

    					if (!f_key) {
    						keyBuffer.push({ ...key, type: e.type });
    					} else if (f_key.type !== e.type) {
    						keyBuffer.push({ ...key, type: e.type });
    					}

    					keyBuffer = cutQuickDownUp$1(keyBuffer);
    				}

    				// deep copy to create the needed keys from caret and standard array
    				let tempKeyBuffer = Array.from(keyBuffer);

    				tempKeyBuffer.splice(caretPos, 0, ...caretKeyBuffer);
    				$$invalidate(1, keys = colorize$1(tempKeyBuffer));
    			}
    		}
    	} /**
    if(!e.repeat && e.type == 'keyup'){
      if(keydownBuffer.length > 1){
        caretPos += 1;
      }
    }
    */ //manageMacro();

    	let caretPos = 0;

    	function setCaret(e) {
    		if (e.target.getAttribute("data-caret") !== null) {
    			keyBuffer.splice(caretPos, 0, ...caretKeyBuffer);
    			caretKeyBuffer = [];
    			$$invalidate(2, caretPos = +e.target.getAttribute("data-caret") + 1);
    		} else {
    			$$invalidate(2, caretPos = undefined);
    		}
    	}

    	function clearMacro() {
    		keyBuffer = [];
    		caretKeyBuffer = [];
    		$$invalidate(2, caretPos = undefined);
    		$$invalidate(1, keys = "");
    		manageMacro();
    	}

    	function loadMacros() {
    		// parseInt('0xff')
    		macro = [];

    		$$invalidate(1, keys = "");

    		for (const objKey in action.parameters) {
    			if (objKey.startsWith("KEYCODE")) {
    				let found = map.find(key => parseInt(key.value) == action.parameters[objKey] && key.is_modifier == action.parameters["KEYISMODIFIER" + objKey.slice(-1)]);

    				if (found) {
    					macro.push(found);
    				}
    			}
    		}

    		macro.forEach(key => $$invalidate(1, keys += key.info + "  "));
    	}

    	function manageMacro() {
    		parameters = [];

    		for (let i = 0; i < 6; i++) {
    			const key = keyBuffer[i];
    			const keyIsModifier = "KEYISMODIFIER" + i;
    			const keyCode = "KEYCODE" + i;
    			let obj = {};

    			if (key) {
    				let modifier = 0;
    				key.is_modifier ? modifier = 1 : modifier = 0;
    				obj[keyIsModifier] = parameter_parser$1(modifier);
    				obj[keyCode] = parameter_parser$1(key.value);
    				parameters.push(obj);
    			} else {
    				obj[keyIsModifier] = parameter_parser$1(0);
    				obj[keyCode] = parameter_parser$1(255);
    				parameters.push(obj);
    			}
    		}
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$h.warn(`<KeyMacro> was created with unknown prop '${key}'`);
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			macroInputField = $$value;
    			$$invalidate(0, macroInputField);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(6, action = $$props.action);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(8, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(9, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		slide,
    		flip,
    		dispatch,
    		actionListChange,
    		DropDownInput,
    		Toggle,
    		Radio,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		keyMap,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		macroInputField,
    		sendData: sendData$1,
    		orderChangeTrigger,
    		keys,
    		parameters,
    		keydownBuffer,
    		caretKeyBuffer,
    		keyBuffer,
    		keyMerge,
    		normalKeys,
    		caretArray,
    		putKeyInArray: putKeyInArray$1,
    		identifyKey,
    		cutQuickDownUp: cutQuickDownUp$1,
    		colorize: colorize$1,
    		caretPos,
    		setCaret,
    		caretToEnd: caretToEnd$1,
    		clearMacro,
    		loadMacros,
    		manageMacro
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(6, action = $$props.action);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(8, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(9, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) validator = $$props.validator;
    		if ("macroInputField" in $$props) $$invalidate(0, macroInputField = $$props.macroInputField);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    		if ("keys" in $$props) $$invalidate(1, keys = $$props.keys);
    		if ("parameters" in $$props) parameters = $$props.parameters;
    		if ("keydownBuffer" in $$props) keydownBuffer = $$props.keydownBuffer;
    		if ("caretKeyBuffer" in $$props) caretKeyBuffer = $$props.caretKeyBuffer;
    		if ("keyBuffer" in $$props) keyBuffer = $$props.keyBuffer;
    		if ("keyMerge" in $$props) keyMerge = $$props.keyMerge;
    		if ("normalKeys" in $$props) normalKeys = $$props.normalKeys;
    		if ("caretArray" in $$props) caretArray = $$props.caretArray;
    		if ("caretPos" in $$props) $$invalidate(2, caretPos = $$props.caretPos);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		macroInputField,
    		keys,
    		caretPos,
    		identifyKey,
    		setCaret,
    		clearMacro,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		div1_binding
    	];
    }

    class KeyMacro extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$15, create_fragment$15, safe_not_equal, {
    			action: 6,
    			index: 7,
    			eventInfo: 8,
    			elementInfo: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "KeyMacro",
    			options,
    			id: create_fragment$15.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[6] === undefined && !("action" in props)) {
    			console_1$h.warn("<KeyMacro> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[7] === undefined && !("index" in props)) {
    			console_1$h.warn("<KeyMacro> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[8] === undefined && !("eventInfo" in props)) {
    			console_1$h.warn("<KeyMacro> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[9] === undefined && !("elementInfo" in props)) {
    			console_1$h.warn("<KeyMacro> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<KeyMacro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<KeyMacro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<KeyMacro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<KeyMacro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<KeyMacro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<KeyMacro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<KeyMacro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<KeyMacro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\ActionWrapper.svelte generated by Svelte v3.35.0 */
    const file$W = "src\\app\\settings\\local\\ActionWrapper.svelte";

    function create_fragment$14(ctx) {
    	let main;
    	let div3;
    	let switch_instance;
    	let updating_action;
    	let t0;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let svg;
    	let path;
    	let current;
    	let mounted;
    	let dispose;

    	function switch_instance_action_binding(value) {
    		/*switch_instance_action_binding*/ ctx[7](value);
    	}

    	var switch_value = /*components*/ ctx[4][/*action*/ ctx[0].value];

    	function switch_props(ctx) {
    		let switch_instance_props = {
    			index: /*index*/ ctx[1],
    			eventInfo: /*eventInfo*/ ctx[2],
    			elementInfo: /*elementInfo*/ ctx[3]
    		};

    		if (/*action*/ ctx[0] !== void 0) {
    			switch_instance_props.action = /*action*/ ctx[0];
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		binding_callbacks.push(() => bind(switch_instance, "action", switch_instance_action_binding));
    		switch_instance.$on("send", /*sendData*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			main = element("main");
    			div3 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t0 = space$1();
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Remove";
    			t2 = space$1();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(div0, "class", "invisible text-xs");
    			add_location(div0, file$W, 53, 6, 1441);
    			attr_dev(path, "d", "M13 1.00001L1.01053 13M12.9895 13L1 1");
    			attr_dev(path, "stroke", "#BBBBBB");
    			attr_dev(path, "stroke-width", "2");
    			add_location(path, file$W, 56, 10, 1685);
    			attr_dev(svg, "viewBox", "0 0 14 14");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$W, 55, 8, 1601);
    			attr_dev(div1, "class", "block p-2 w-8 h-8  bg-secondary hover:bg-black cursor-pointer");
    			add_location(div1, file$W, 54, 6, 1492);
    			add_location(div2, file$W, 52, 4, 1428);
    			attr_dev(div3, "class", "w-full flex p-0 mx-2");
    			add_location(div3, file$W, 48, 2, 1248);
    			attr_dev(main, "class", "flex flex-col w-full");
    			add_location(main, file$W, 46, 0, 1204);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div3);

    			if (switch_instance) {
    				mount_component(switch_instance, div3, null);
    			}

    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*handleRemove*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const switch_instance_changes = {};
    			if (dirty & /*index*/ 2) switch_instance_changes.index = /*index*/ ctx[1];
    			if (dirty & /*eventInfo*/ 4) switch_instance_changes.eventInfo = /*eventInfo*/ ctx[2];
    			if (dirty & /*elementInfo*/ 8) switch_instance_changes.elementInfo = /*elementInfo*/ ctx[3];

    			if (!updating_action && dirty & /*action*/ 1) {
    				updating_action = true;
    				switch_instance_changes.action = /*action*/ ctx[0];
    				add_flush_callback(() => updating_action = false);
    			}

    			if (switch_value !== (switch_value = /*components*/ ctx[4][/*action*/ ctx[0].value])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					binding_callbacks.push(() => bind(switch_instance, "action", switch_instance_action_binding));
    					switch_instance.$on("send", /*sendData*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div3, t0);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$14.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$14($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ActionWrapper", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;

    	const components = {
    		"MIDIRELATIVE": MidiRelative,
    		"MIDIABSOLUTE": MidiAbsolute,
    		"LEDCOLOR": SetLedColor,
    		"LEDPHASE": SetLedPhase,
    		"RAW": RawAction,
    		"HIDKEYBOARD": KeyBoard,
    		"HIDKEYMACRO": KeyMacro
    	};

    	function handleRemove() {
    		dispatch("remove", { action, index });
    	}

    	function sendData(e) {
    		dispatch("change", {
    			action: e.detail.action, // important! action parameters are converted at action level to grid protocol readable format
    			index
    		});
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ActionWrapper> was created with unknown prop '${key}'`);
    	});

    	function switch_instance_action_binding(value) {
    		action = value;
    		$$invalidate(0, action);
    	}

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(2, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(3, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		MidiRelative,
    		MidiAbsolute,
    		SetLedColor,
    		SetLedPhase,
    		RawAction,
    		KeyBoard,
    		KeyMacro,
    		dispatch,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		components,
    		handleRemove,
    		sendData
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(2, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(3, elementInfo = $$props.elementInfo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		components,
    		handleRemove,
    		sendData,
    		switch_instance_action_binding
    	];
    }

    class ActionWrapper extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$14, create_fragment$14, safe_not_equal, {
    			action: 0,
    			index: 1,
    			eventInfo: 2,
    			elementInfo: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ActionWrapper",
    			options,
    			id: create_fragment$14.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[0] === undefined && !("action" in props)) {
    			console.warn("<ActionWrapper> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[1] === undefined && !("index" in props)) {
    			console.warn("<ActionWrapper> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[2] === undefined && !("eventInfo" in props)) {
    			console.warn("<ActionWrapper> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[3] === undefined && !("elementInfo" in props)) {
    			console.warn("<ActionWrapper> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<ActionWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<ActionWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ActionWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ActionWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<ActionWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<ActionWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<ActionWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<ActionWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\ActionCommands.svelte generated by Svelte v3.35.0 */
    const file$V = "src\\app\\settings\\local\\ActionCommands.svelte";

    function create_fragment$13(ctx) {
    	let div;
    	let button0;
    	let svg0;
    	let path0;
    	let t0;
    	let button1;
    	let svg1;
    	let g;
    	let path1;
    	let path2;
    	let path3;
    	let t1;
    	let button2;
    	let svg2;
    	let path4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space$1();
    			button1 = element("button");
    			svg1 = svg_element("svg");
    			g = svg_element("g");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			t1 = space$1();
    			button2 = element("button");
    			svg2 = svg_element("svg");
    			path4 = svg_element("path");
    			attr_dev(path0, "d", "m271 512h-191c-44.113281 0-80-35.886719-80-80v-271c0-44.113281 35.886719-80 80-80h191c44.113281 0 80 35.886719 80 80v271c0 44.113281-35.886719 80-80 80zm-191-391c-22.054688 0-40 17.945312-40 40v271c0 22.054688 17.945312 40 40 40h191c22.054688 0 40-17.945312 40-40v-271c0-22.054688-17.945312-40-40-40zm351 261v-302c0-44.113281-35.886719-80-80-80h-222c-11.046875 0-20 8.953125-20 20s8.953125 20 20 20h222c22.054688 0 40 17.945312 40 40v302c0 11.046875 8.953125 20 20 20s20-8.953125 20-20zm0 0");
    			add_location(path0, file$V, 15, 6, 471);
    			attr_dev(svg0, "class", "fill-current");
    			attr_dev(svg0, "viewBox", "-40 0 512 512");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$V, 14, 4, 378);
    			attr_dev(button0, "class", "h-8 w-8 m-1 p-1 focus:outline-none border-none hover:bg-highlight rounded text-gray-700 hover:text-white");
    			add_location(button0, file$V, 13, 2, 216);
    			attr_dev(path1, "d", "M481,371c11.046,0,20-8.954,20-20v-92c0-33.084-26.916-60-60-60h-39v-79c0-44.112-35.888-80-80-80h-47.533\r\n          c-7.739-23.749-29.864-40-55.16-40h-25.614c-25.296,0-47.421,16.251-55.16,40H91c-44.112,0-80,35.888-80,80v312\r\n          c0,44.112,35.888,80,80,80h88c11.046,0,20-8.954,20-20c0-11.046-8.954-20-20-20H91c-22.056,0-40-17.944-40-40V120\r\n          c0-22.056,17.944-40,40-40h2v59c0,11.046,8.954,20,20,20h189c11.046,0,20-8.954,20-20V80c22.056,0,40,17.944,40,40v79h-65.007\r\n          C263.914,199,237,225.913,237,258.993v193.015c0,33.08,26.916,59.993,60.01,59.993L441,511.926c33.084,0,60-26.913,60-59.992\r\n          c0-11.046-8.954-20-20-20c-11.046,0-20,8.954-20,20c0,11.024-8.972,19.992-20.01,19.992L297,472c-11.028,0-20-8.969-20-19.993\r\n          V258.993c0-11.024,8.969-19.993,19.993-19.993H441c11.028,0,20,8.972,20,20v92C461,362.046,469.955,371,481,371z M282,119H133V80\r\n          h21c9.177,0,17.177-6.246,19.403-15.149l2.798-11.194C178.211,45.616,185.404,40,193.693,40h25.614\r\n          c8.289,0,15.481,5.616,17.492,13.657l2.798,11.194C241.823,73.754,249.823,80,259,80h23V119z");
    			add_location(path1, file$V, 23, 8, 1441);
    			attr_dev(path2, "d", "M401,279h-64c-11.046,0-20,8.954-20,20c0,11.046,8.954,20,20,20h64c11.046,0,20-8.954,20-20\r\n          C421,287.954,412.047,279,401,279z");
    			add_location(path2, file$V, 32, 8, 2547);
    			attr_dev(path3, "d", "M401,349h-64c-11.046,0-20,8.954-20,20c0,11.046,8.954,20,20,20h64c11.046,0,20-8.954,20-20\r\n          C421,357.954,412.047,349,401,349z");
    			add_location(path3, file$V, 34, 8, 2702);
    			add_location(g, file$V, 22, 6, 1428);
    			attr_dev(svg1, "class", "fill-current");
    			attr_dev(svg1, "version", "1.1");
    			attr_dev(svg1, "id", "Capa_1");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg1, "x", "0px");
    			attr_dev(svg1, "y", "0px");
    			attr_dev(svg1, "viewBox", "0 0 512.001 512.001");
    			set_style(svg1, "enable-background", "new 0 0 512.001 512.001");
    			attr_dev(svg1, "xml:space", "preserve");
    			add_location(svg1, file$V, 20, 4, 1167);
    			attr_dev(button1, "class", "h-8 w-8 m-1 p-1 focus:outline-none border-none hover:bg-highlight rounded text-gray-700 hover:text-white");
    			add_location(button1, file$V, 19, 2, 1004);
    			attr_dev(path4, "d", "M307.475,141.686c-6.893-4.598-16.207-2.736-20.802,4.157l-0.446,0.669c-5.426-74.107-67.45-132.745-142.918-132.745\r\n        C64.288,13.768,0,78.056,0,157.077s64.288,143.309,143.309,143.309c11.046,0,20-8.954,20-20s-8.954-20-20-20\r\n        C86.344,260.385,40,214.041,40,157.077S86.344,53.768,143.309,53.768c52.798,0,96.465,39.815,102.571,90.996\r\n        c-4.813-5.991-13.486-7.422-20-3.078c-6.893,4.596-8.754,13.91-4.158,20.802l29.702,44.541c3.505,5.256,9.208,8.394,15.255,8.394\r\n        c6.047,0,11.749-3.139,15.252-8.394l29.702-44.541C316.228,155.595,314.367,146.282,307.475,141.686z");
    			add_location(path4, file$V, 43, 6, 3317);
    			attr_dev(svg2, "class", "fill-current");
    			attr_dev(svg2, "version", "1.1");
    			attr_dev(svg2, "id", "Capa_1");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg2, "x", "0px");
    			attr_dev(svg2, "y", "0px");
    			attr_dev(svg2, "viewBox", "0 0 314.154 314.154");
    			set_style(svg2, "enable-background", "new 0 0 314.154 314.154");
    			attr_dev(svg2, "xml:space", "preserve");
    			add_location(svg2, file$V, 41, 4, 3054);
    			attr_dev(button2, "class", "h-8 w-8 m-1 p-1 focus:outline-none border-none hover:bg-highlight rounded text-gray-700 hover:text-white");
    			add_location(button2, file$V, 40, 2, 2890);
    			attr_dev(div, "class", "flex mt-2 xl:mt-0");
    			add_location(div, file$V, 12, 0, 181);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div, t0);
    			append_dev(div, button1);
    			append_dev(button1, svg1);
    			append_dev(svg1, g);
    			append_dev(g, path1);
    			append_dev(g, path2);
    			append_dev(g, path3);
    			append_dev(div, t1);
    			append_dev(div, button2);
    			append_dev(button2, svg2);
    			append_dev(svg2, path4);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[1], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[2], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$13.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$13($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ActionCommands", slots, []);
    	const dispatch = createEventDispatcher();

    	function dispatcher(value) {
    		dispatch(value);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ActionCommands> was created with unknown prop '${key}'`);
    	});

    	const click_handler = e => dispatcher("copy");
    	const click_handler_1 = e => dispatcher("paste");
    	const click_handler_2 = e => dispatcher("recall");

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		dispatcher
    	});

    	return [dispatcher, click_handler, click_handler_1, click_handler_2];
    }

    class ActionCommands extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$13, create_fragment$13, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ActionCommands",
    			options,
    			id: create_fragment$13.name
    		});
    	}
    }

    /* src\app\core\grid-modules\overlays\OverlayToggle.svelte generated by Svelte v3.35.0 */

    const { console: console_1$g } = globals;
    const file$U = "src\\app\\core\\grid-modules\\overlays\\OverlayToggle.svelte";

    function create_fragment$12(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "👁️";
    			attr_dev(div, "class", "ml-2 rounded-full w-6 hover:bg-highlight cursor-pointer text-center");
    			toggle_class(div, "bg-highlight-400", /*activated*/ ctx[0]);
    			add_location(div, file$U, 21, 0, 360);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*toggleOverlay*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*activated*/ 1) {
    				toggle_class(div, "bg-highlight-400", /*activated*/ ctx[0]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("OverlayToggle", slots, []);
    	let { type } = $$props;
    	let activated = false;

    	function toggleOverlay() {
    		$$invalidate(0, activated = !activated);

    		appSettings.update(settings => {
    			settings.overlays[type] = activated;
    			console.log(settings);
    			return settings;
    		});
    	}

    	const writable_props = ["type"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$g.warn(`<OverlayToggle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("type" in $$props) $$invalidate(2, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		appSettings,
    		type,
    		activated,
    		toggleOverlay
    	});

    	$$self.$inject_state = $$props => {
    		if ("type" in $$props) $$invalidate(2, type = $$props.type);
    		if ("activated" in $$props) $$invalidate(0, activated = $$props.activated);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [activated, toggleOverlay, type];
    }

    class OverlayToggle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$12, create_fragment$12, safe_not_equal, { type: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "OverlayToggle",
    			options,
    			id: create_fragment$12.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[2] === undefined && !("type" in props)) {
    			console_1$g.warn("<OverlayToggle> was created without expected prop 'type'");
    		}
    	}

    	get type() {
    		throw new Error("<OverlayToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<OverlayToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\LocalSettings.svelte generated by Svelte v3.35.0 */

    const { console: console_1$f } = globals;
    const file$T = "src\\app\\settings\\local\\LocalSettings.svelte";

    function get_each_context$o(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	return child_ctx;
    }

    // (319:4) {#if moduleId != '' && $localInputStore.elementNumber != undefined}
    function create_if_block_8$1(ctx) {
    	let div0;
    	let t0;

    	let t1_value = (/*moduleId*/ ctx[3] == ""
    	? "-"
    	: /*moduleId*/ ctx[3].substr(0, 4)) + "";

    	let t1;
    	let t2;
    	let div1;

    	let t3_value = (/*$localInputStore*/ ctx[10].elementNumber == undefined
    	? "-"
    	: /*$localInputStore*/ ctx[10].elementNumber) + "";

    	let t3;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text("Module: ");
    			t1 = text(t1_value);
    			t2 = space$1();
    			div1 = element("div");
    			t3 = text(t3_value);
    			attr_dev(div0, "class", "text-orange-500 py-1 svelte-1y5pc05");
    			add_location(div0, file$T, 319, 6, 10206);
    			attr_dev(div1, "class", "text-orange-500 text-4xl absolute right-0 svelte-1y5pc05");
    			add_location(div1, file$T, 320, 6, 10307);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*moduleId*/ 8 && t1_value !== (t1_value = (/*moduleId*/ ctx[3] == ""
    			? "-"
    			: /*moduleId*/ ctx[3].substr(0, 4)) + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*$localInputStore*/ 1024 && t3_value !== (t3_value = (/*$localInputStore*/ ctx[10].elementNumber == undefined
    			? "-"
    			: /*$localInputStore*/ ctx[10].elementNumber) + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(319:4) {#if moduleId != '' && $localInputStore.elementNumber != undefined}",
    		ctx
    	});

    	return block;
    }

    // (421:2) {:else}
    function create_else_block$6(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let if_block0 = /*$appSettings*/ ctx[11].layoutMode && create_if_block_7$1(ctx);
    	let if_block1 = /*$runtime*/ ctx[8].length == 0 && create_if_block_6$1(ctx);
    	let if_block2 = /*$runtime*/ ctx[8].length > 0 && !/*$appSettings*/ ctx[11].layoutMode && create_if_block_2$a(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			if (if_block0) if_block0.c();
    			t0 = space$1();
    			if (if_block1) if_block1.c();
    			t1 = space$1();
    			if (if_block2) if_block2.c();
    			attr_dev(span, "class", "px-1 svelte-1y5pc05");
    			add_location(span, file$T, 422, 4, 13694);
    			attr_dev(div, "class", "px-2 my-4 w-full text-white svelte-1y5pc05");
    			add_location(div, file$T, 421, 2, 13647);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			if (if_block0) if_block0.m(span, null);
    			append_dev(span, t0);
    			if (if_block1) if_block1.m(span, null);
    			append_dev(span, t1);
    			if (if_block2) if_block2.m(span, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*$appSettings*/ ctx[11].layoutMode) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					if_block0.m(span, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$runtime*/ ctx[8].length == 0) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_6$1(ctx);
    					if_block1.c();
    					if_block1.m(span, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*$runtime*/ ctx[8].length > 0 && !/*$appSettings*/ ctx[11].layoutMode) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$a(ctx);
    					if_block2.c();
    					if_block2.m(span, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(421:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (324:2) {#if inputStore.elementNumber !== -1 && inputStore.bankActive !== -1}
    function create_if_block_1$d(ctx) {
    	let div8;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div7;
    	let div2;
    	let t4;
    	let div5;
    	let div4;
    	let div3;
    	let select;
    	let t5;
    	let button;
    	let t6;
    	let button_disabled_value;
    	let t7;
    	let actioncommands;
    	let t8;
    	let div6;
    	let actionlist;
    	let t9;
    	let hr;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*events*/ ctx[6];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$a(get_each_context_1$a(ctx, each_value_1, i));
    	}

    	let each_value = /*arrayOfSelectableActions*/ ctx[12];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$o(get_each_context$o(ctx, each_value, i));
    	}

    	actioncommands = new ActionCommands({ $$inline: true });
    	actioncommands.$on("copy", /*copyActions*/ ctx[17]);
    	actioncommands.$on("paste", /*pasteActions*/ ctx[18]);
    	actioncommands.$on("recall", /*recallActions*/ ctx[19]);

    	actionlist = new ActionList({
    			props: {
    				actions: /*actions*/ ctx[2],
    				$$slots: {
    					default: [
    						create_default_slot$4,
    						({ action, index }) => ({ 31: action, 32: index }),
    						({ action, index }) => [0, (action ? 1 : 0) | (index ? 2 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			div0 = element("div");
    			div0.textContent = "Events";
    			t1 = space$1();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space$1();
    			div7 = element("div");
    			div2 = element("div");
    			div2.textContent = "Actions";
    			t4 = space$1();
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space$1();
    			button = element("button");
    			t6 = text("Add Action");
    			t7 = space$1();
    			create_component(actioncommands.$$.fragment);
    			t8 = space$1();
    			div6 = element("div");
    			create_component(actionlist.$$.fragment);
    			t9 = space$1();
    			hr = element("hr");
    			attr_dev(div0, "class", "text-gray-700 py-1 mx-2 svelte-1y5pc05");
    			add_location(div0, file$T, 342, 4, 11080);
    			attr_dev(div1, "class", "flex mx-1 secondary  rounded-lg shadow overflow-x-auto svelte-1y5pc05");
    			toggle_class(div1, "tour", /*$tour*/ ctx[9].selectedName == "Events");
    			add_location(div1, file$T, 346, 4, 11151);
    			attr_dev(div2, "class", "text-gray-700 py-1 svelte-1y5pc05");
    			add_location(div2, file$T, 361, 6, 11712);
    			attr_dev(select, "class", "secondary flex-grow text-white p-1 mr-2 rounded-none focus:outline-none svelte-1y5pc05");
    			if (/*selectedAction*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[21].call(select));
    			toggle_class(select, "tour", /*$tour*/ ctx[9].selectedName == "Actions");
    			add_location(select, file$T, 370, 14, 11962);
    			button.disabled = button_disabled_value = /*selectedAction*/ ctx[1] === undefined;
    			attr_dev(button, "class", "bg-highlight w-32 font-medium text-white py-1 px-2 rounded-none border border-highlight hover:bg-highlight-400 focus:outline-none svelte-1y5pc05");
    			toggle_class(button, "disabled", /*selectedAction*/ ctx[1] === undefined);
    			add_location(button, file$T, 375, 14, 12344);
    			attr_dev(div3, "class", "flex w-full xl:w-2/3 svelte-1y5pc05");
    			add_location(div3, file$T, 369, 12, 11903);
    			attr_dev(div4, "class", "flex flex-col xl:flex-row w-full justify-between svelte-1y5pc05");
    			add_location(div4, file$T, 367, 10, 11824);
    			attr_dev(div5, "class", "flex w-full svelte-1y5pc05");
    			add_location(div5, file$T, 365, 6, 11785);
    			set_style(div6, "max-height", "400px");
    			attr_dev(div6, "class", "mt-4 pr-2 border-secondary overflow-y-scroll overflow-x-hidden svelte-1y5pc05");
    			add_location(div6, file$T, 398, 6, 13050);
    			attr_dev(div7, "class", "mx-2 my-4 svelte-1y5pc05");
    			add_location(div7, file$T, 359, 4, 11679);
    			attr_dev(div8, "class", "flex flex-col svelte-1y5pc05");
    			add_location(div8, file$T, 341, 2, 11047);
    			attr_dev(hr, "class", "text-secondary h-1 border-none rounded bg-secondary m-2 svelte-1y5pc05");
    			add_location(hr, file$T, 418, 2, 13561);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div0);
    			append_dev(div8, t1);
    			append_dev(div8, div1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append_dev(div8, t2);
    			append_dev(div8, div7);
    			append_dev(div7, div2);
    			append_dev(div7, t4);
    			append_dev(div7, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*selectedAction*/ ctx[1]);
    			append_dev(div3, t5);
    			append_dev(div3, button);
    			append_dev(button, t6);
    			append_dev(div4, t7);
    			mount_component(actioncommands, div4, null);
    			append_dev(div7, t8);
    			append_dev(div7, div6);
    			mount_component(actionlist, div6, null);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, hr, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[21]),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedEvent, events, handleSelectEvent*/ 32960) {
    				each_value_1 = /*events*/ ctx[6];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$a(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$a(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*$tour*/ 512) {
    				toggle_class(div1, "tour", /*$tour*/ ctx[9].selectedName == "Events");
    			}

    			if (dirty[0] & /*arrayOfSelectableActions*/ 4096) {
    				each_value = /*arrayOfSelectableActions*/ ctx[12];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$o(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$o(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*selectedAction, arrayOfSelectableActions*/ 4098) {
    				select_option(select, /*selectedAction*/ ctx[1]);
    			}

    			if (dirty[0] & /*$tour*/ 512) {
    				toggle_class(select, "tour", /*$tour*/ ctx[9].selectedName == "Actions");
    			}

    			if (!current || dirty[0] & /*selectedAction, arrayOfSelectableActions*/ 4098 && button_disabled_value !== (button_disabled_value = /*selectedAction*/ ctx[1] === undefined)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty[0] & /*selectedAction*/ 2) {
    				toggle_class(button, "disabled", /*selectedAction*/ ctx[1] === undefined);
    			}

    			const actionlist_changes = {};
    			if (dirty[0] & /*actions*/ 4) actionlist_changes.actions = /*actions*/ ctx[2];

    			if (dirty[0] & /*eventInfo, elementInfo*/ 48 | dirty[1] & /*$$scope, action, index*/ 131) {
    				actionlist_changes.$$scope = { dirty, ctx };
    			}

    			actionlist.$set(actionlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(actioncommands.$$.fragment, local);
    			transition_in(actionlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(actioncommands.$$.fragment, local);
    			transition_out(actionlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			destroy_component(actioncommands);
    			destroy_component(actionlist);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(hr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(324:2) {#if inputStore.elementNumber !== -1 && inputStore.bankActive !== -1}",
    		ctx
    	});

    	return block;
    }

    // (424:6) {#if $appSettings.layoutMode}
    function create_if_block_7$1(ctx) {
    	let p;
    	let span0;
    	let t1;
    	let span1;
    	let t2;
    	let i;
    	let t4;

    	const block = {
    		c: function create() {
    			p = element("p");
    			span0 = element("span");
    			span0.textContent = "⚠️";
    			t1 = space$1();
    			span1 = element("span");
    			t2 = text("Please close the ");
    			i = element("i");
    			i.textContent = "Virtual Modules";
    			t4 = text(" panel to select control elements.");
    			attr_dev(span0, "class", "flicker svelte-1y5pc05");
    			add_location(span0, file$T, 425, 10, 13776);
    			attr_dev(i, "class", "pr-1 svelte-1y5pc05");
    			add_location(i, file$T, 426, 33, 13843);
    			attr_dev(span1, "class", "svelte-1y5pc05");
    			add_location(span1, file$T, 426, 10, 13820);
    			attr_dev(p, "class", "svelte-1y5pc05");
    			add_location(p, file$T, 424, 8, 13760);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, span0);
    			append_dev(p, t1);
    			append_dev(p, span1);
    			append_dev(span1, t2);
    			append_dev(span1, i);
    			append_dev(span1, t4);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(424:6) {#if $appSettings.layoutMode}",
    		ctx
    	});

    	return block;
    }

    // (430:6) {#if $runtime.length == 0}
    function create_if_block_6$1(ctx) {
    	let p;
    	let span0;
    	let t1;
    	let span1;
    	let t2;
    	let i;
    	let t4;

    	const block = {
    		c: function create() {
    			p = element("p");
    			span0 = element("span");
    			span0.textContent = "⚠️";
    			t1 = space$1();
    			span1 = element("span");
    			t2 = text("Add a module to access ");
    			i = element("i");
    			i.textContent = "Local Settings";
    			t4 = text("!");
    			attr_dev(span0, "class", "flicker svelte-1y5pc05");
    			add_location(span0, file$T, 431, 10, 14006);
    			attr_dev(i, "class", "pr-1 svelte-1y5pc05");
    			add_location(i, file$T, 432, 39, 14078);
    			attr_dev(span1, "class", "svelte-1y5pc05");
    			add_location(span1, file$T, 432, 10, 14049);
    			attr_dev(p, "class", "svelte-1y5pc05");
    			add_location(p, file$T, 430, 8, 13990);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, span0);
    			append_dev(p, t1);
    			append_dev(p, span1);
    			append_dev(span1, t2);
    			append_dev(span1, i);
    			append_dev(span1, t4);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(430:6) {#if $runtime.length == 0}",
    		ctx
    	});

    	return block;
    }

    // (436:6) {#if $runtime.length > 0 && !$appSettings.layoutMode}
    function create_if_block_2$a(ctx) {
    	let p;
    	let span;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let if_block0 = /*inputStore*/ ctx[0].elementNumber == -1 && create_if_block_5$3(ctx);
    	let if_block1 = /*inputStore*/ ctx[0].bankActive == -1 && /*inputStore*/ ctx[0].elementNumber == -1 && create_if_block_4$4(ctx);
    	let if_block2 = /*inputStore*/ ctx[0].bankActive == -1 && create_if_block_3$5(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			span = element("span");
    			span.textContent = "⚠️";
    			t1 = text(" \r\n          Select a \r\n          ");
    			if (if_block0) if_block0.c();
    			t2 = space$1();
    			if (if_block1) if_block1.c();
    			t3 = space$1();
    			if (if_block2) if_block2.c();
    			t4 = text(" \r\n          to start configuration!");
    			attr_dev(span, "class", "flicker svelte-1y5pc05");
    			add_location(span, file$T, 437, 10, 14235);
    			attr_dev(p, "class", "svelte-1y5pc05");
    			add_location(p, file$T, 436, 8, 14220);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, span);
    			append_dev(p, t1);
    			if (if_block0) if_block0.m(p, null);
    			append_dev(p, t2);
    			if (if_block1) if_block1.m(p, null);
    			append_dev(p, t3);
    			if (if_block2) if_block2.m(p, null);
    			append_dev(p, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (/*inputStore*/ ctx[0].elementNumber == -1) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_5$3(ctx);
    					if_block0.c();
    					if_block0.m(p, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*inputStore*/ ctx[0].bankActive == -1 && /*inputStore*/ ctx[0].elementNumber == -1) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_4$4(ctx);
    					if_block1.c();
    					if_block1.m(p, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*inputStore*/ ctx[0].bankActive == -1) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block_3$5(ctx);
    					if_block2.c();
    					if_block2.m(p, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(436:6) {#if $runtime.length > 0 && !$appSettings.layoutMode}",
    		ctx
    	});

    	return block;
    }

    // (440:10) {#if inputStore.elementNumber == -1}
    function create_if_block_5$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("control element");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(440:10) {#if inputStore.elementNumber == -1}",
    		ctx
    	});

    	return block;
    }

    // (441:10) {#if inputStore.bankActive == -1 && inputStore.elementNumber == -1}
    function create_if_block_4$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("and");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(441:10) {#if inputStore.bankActive == -1 && inputStore.elementNumber == -1}",
    		ctx
    	});

    	return block;
    }

    // (442:10) {#if inputStore.bankActive == -1}
    function create_if_block_3$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("bank");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(442:10) {#if inputStore.bankActive == -1}",
    		ctx
    	});

    	return block;
    }

    // (348:6) {#each events as event}
    function create_each_block_1$a(ctx) {
    	let button;
    	let t0_value = /*event*/ ctx[35].desc + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[20](/*event*/ ctx[35]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space$1();
    			attr_dev(button, "class", "m-2 p-1 text-white flex-grow outline-none border-0 rounded hover:bg-highlight-400  focus:outline-none svelte-1y5pc05");
    			toggle_class(button, "shadow-md", /*selectedEvent*/ ctx[7] === /*event*/ ctx[35]);
    			toggle_class(button, "bg-highlight", /*selectedEvent*/ ctx[7] === /*event*/ ctx[35]);
    			add_location(button, file$T, 348, 8, 11304);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*events*/ 64 && t0_value !== (t0_value = /*event*/ ctx[35].desc + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*selectedEvent, events*/ 192) {
    				toggle_class(button, "shadow-md", /*selectedEvent*/ ctx[7] === /*event*/ ctx[35]);
    			}

    			if (dirty[0] & /*selectedEvent, events*/ 192) {
    				toggle_class(button, "bg-highlight", /*selectedEvent*/ ctx[7] === /*event*/ ctx[35]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$a.name,
    		type: "each",
    		source: "(348:6) {#each events as event}",
    		ctx
    	});

    	return block;
    }

    // (372:16) {#each arrayOfSelectableActions as action}
    function create_each_block$o(ctx) {
    	let option;
    	let t_value = /*action*/ ctx[31].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*action*/ ctx[31];
    			option.value = option.__value;
    			attr_dev(option, "class", "secondary  text-white svelte-1y5pc05");
    			add_location(option, file$T, 372, 18, 12203);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$o.name,
    		type: "each",
    		source: "(372:16) {#each arrayOfSelectableActions as action}",
    		ctx
    	});

    	return block;
    }

    // (400:8) <ActionList            {actions}             let:action             let:index            >
    function create_default_slot$4(ctx) {
    	let actionwrapper;
    	let current;

    	actionwrapper = new ActionWrapper({
    			props: {
    				action: /*action*/ ctx[31],
    				index: /*index*/ ctx[32],
    				eventInfo: /*eventInfo*/ ctx[4],
    				elementInfo: /*elementInfo*/ ctx[5]
    			},
    			$$inline: true
    		});

    	actionwrapper.$on("remove", /*handleRemoveAction*/ ctx[14]);
    	actionwrapper.$on("change", /*handleOnActionChange*/ ctx[16]);

    	const block = {
    		c: function create() {
    			create_component(actionwrapper.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(actionwrapper, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const actionwrapper_changes = {};
    			if (dirty[1] & /*action*/ 1) actionwrapper_changes.action = /*action*/ ctx[31];
    			if (dirty[1] & /*index*/ 2) actionwrapper_changes.index = /*index*/ ctx[32];
    			if (dirty[0] & /*eventInfo*/ 16) actionwrapper_changes.eventInfo = /*eventInfo*/ ctx[4];
    			if (dirty[0] & /*elementInfo*/ 32) actionwrapper_changes.elementInfo = /*elementInfo*/ ctx[5];
    			actionwrapper.$set(actionwrapper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(actionwrapper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(actionwrapper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(actionwrapper, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(400:8) <ActionList            {actions}             let:action             let:index            >",
    		ctx
    	});

    	return block;
    }

    // (450:2) {#if inputStore.elementNumber !== -1}
    function create_if_block$l(ctx) {
    	let commands_1;
    	let current;
    	commands_1 = new Commands({ props: { MODE: "LOCAL" }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(commands_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(commands_1, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(commands_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(commands_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(commands_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(450:2) {#if inputStore.elementNumber !== -1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$11(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t1;
    	let t2;
    	let current_block_type_index;
    	let if_block1;
    	let t3;
    	let current;
    	let if_block0 = /*moduleId*/ ctx[3] != "" && /*$localInputStore*/ ctx[10].elementNumber != undefined && create_if_block_8$1(ctx);
    	const if_block_creators = [create_if_block_1$d, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*inputStore*/ ctx[0].elementNumber !== -1 && /*inputStore*/ ctx[0].bankActive !== -1) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block2 = /*inputStore*/ ctx[0].elementNumber !== -1 && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Local Settings";
    			t1 = space$1();
    			if (if_block0) if_block0.c();
    			t2 = space$1();
    			if_block1.c();
    			t3 = space$1();
    			if (if_block2) if_block2.c();
    			attr_dev(div0, "class", "text-xl svelte-1y5pc05");
    			add_location(div0, file$T, 317, 4, 10084);
    			attr_dev(div1, "class", "flex flex-col relative justify-between font-bold text-white m-2 svelte-1y5pc05");
    			add_location(div1, file$T, 316, 2, 10001);
    			attr_dev(div2, "class", "inline-block primary rounded-lg p-3 z-30 w-full svelte-1y5pc05");
    			toggle_class(div2, "tour", /*$tour*/ ctx[9].selectedName == "LocalSettings");
    			add_location(div2, file$T, 315, 0, 9885);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div2, t2);
    			if_blocks[current_block_type_index].m(div2, null);
    			append_dev(div2, t3);
    			if (if_block2) if_block2.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*moduleId*/ ctx[3] != "" && /*$localInputStore*/ ctx[10].elementNumber != undefined) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_8$1(ctx);
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div2, t3);
    			}

    			if (/*inputStore*/ ctx[0].elementNumber !== -1) {
    				if (if_block2) {
    					if (dirty[0] & /*inputStore*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$l(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div2, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*$tour*/ 512) {
    				toggle_class(div2, "tour", /*$tour*/ ctx[9].selectedName == "LocalSettings");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function checkIfSelectedEventIsCorrect(settings, events) {
    	let event = events.find(e => e.value == settings.eventType);

    	if (!event) {
    		event = events[1];
    	}

    	return event;
    }

    function initActionParameters(action) {
    	//let action = {name: actionValue}
    	let parameters = [];

    	return { ...action, parameters };
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let $runtime;
    	let $tour;
    	let $localInputStore;
    	let $appSettings;
    	validate_store(runtime$1, "runtime");
    	component_subscribe($$self, runtime$1, $$value => $$invalidate(8, $runtime = $$value));
    	validate_store(tour, "tour");
    	component_subscribe($$self, tour, $$value => $$invalidate(9, $tour = $$value));
    	validate_store(localInputStore, "localInputStore");
    	component_subscribe($$self, localInputStore, $$value => $$invalidate(10, $localInputStore = $$value));
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(11, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("LocalSettings", slots, []);
    	let inputStore = { bankActive: -1, elementNumber: -1 };

    	let arrayOfSelectableActions = [
    		{
    			id: 0,
    			name: "MIDI Dynamic",
    			value: "MIDIRELATIVE"
    		},
    		{
    			id: 1,
    			name: "MIDI Static",
    			value: "MIDIABSOLUTE"
    		},
    		{
    			id: 2,
    			name: "LED Color",
    			value: "LEDCOLOR"
    		},
    		{
    			id: 3,
    			name: "LED Phase",
    			value: "LEDPHASE"
    		},
    		//{ id: 4, name: 'Keyboard - Atomic', value: 'HIDKEYBOARD' },
    		{
    			id: 5,
    			name: "Keyboard - Macro",
    			value: "HIDKEYMACRO"
    		},
    		{ id: 6, name: "RAW", value: "RAW" }
    	];

    	let selectedAction = arrayOfSelectableActions[0];
    	let actions = [];
    	let temp_actions = [];
    	let element_color;
    	let moduleId = "";
    	let moduleInfo;
    	let eventInfo;
    	let elementInfo;
    	let events = [];
    	let selectedEvent = "";
    	let controlElementName = "";

    	// copy-c and copy-v
    	let copiedActions;

    	// ElementSettings store subscription
    	// main
    	let RUNTIME;

    	//runtime.subscribe(changes => {RUNTIME = changes; console.log(RUNTIME)})
    	function renderLocalConfiguration() {
    		$runtime.forEach(controller => {
    			if (controller.dx == inputStore.dx && controller.dy == inputStore.dy && inputStore.elementNumber !== -1 && inputStore.bankActive !== -1) {
    				moduleInfo = controller;
    				$$invalidate(3, moduleId = controller.id);

    				$$invalidate(6, events = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.map(cntrl => {
    					return cntrl.event;
    				}));

    				$$invalidate(7, selectedEvent = checkIfSelectedEventIsCorrect(inputStore, events));

    				// currently selected control element on bank x, with activated event y
    				let elementEvent = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.find(cntrl => cntrl.event == selectedEvent);

    				$$invalidate(4, eventInfo = elementEvent.event);
    				$$invalidate(5, elementInfo = controller.banks[inputStore.bankActive][inputStore.elementNumber].controlElementType);

    				if ((elementEvent.cfgStatus == "expected" || elementEvent.cfgStatus == "fetched") && !controller.virtual) {
    					const fetch = runtime$1.fetchLocalConfig(controller, inputStore);
    					serialComm$1.write(fetch);
    					elementEvent.cfgStatus = "fetched";
    				}

    				$$invalidate(2, actions = runtime$1.configsToActions(elementEvent.config));
    				controlElementName = controller.banks[inputStore.bankActive][inputStore.elementNumber].controlElementName || "";
    			}
    		});
    	}

    	function manageActions(action) {
    		$$invalidate(2, actions = [...actions, initActionParameters(action)]);
    		return action;
    	}

    	function handleRemoveAction(e) {
    		e.detail.action;
    		const index = e.detail.index;

    		runtime$1.update(store => {
    			store.map(controller => {
    				if (controller.dx == inputStore.dx && controller.dy == inputStore.dy && inputStore.elementNumber !== -1) {
    					let elementEvent = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.find(cntrl => cntrl.event == selectedEvent);
    					elementEvent.config.splice(index, 1);
    					$$invalidate(2, actions = runtime$1.configsToActions(elementEvent.config)); // update this list too. does kill smooth animations
    					commands.validity("LOCALSTORE", true);
    					elementEvent.cfgStatus = "changed";
    				} //sendChangesToGrid(elementEvent.config)

    				return controller;
    			});

    			return store;
    		});
    	}

    	function handleSelectEvent(event) {
    		localInputStore.update(values => {
    			values.eventType = event.value;
    			return values;
    		});
    	}

    	function handleOnActionChange(e) {
    		const action = e.detail.action;
    		const index = e.detail.index;

    		// update runtime based on editor from configuration
    		runtime$1.update(store => {
    			store.map(controller => {
    				if (controller.dx == inputStore.dx && controller.dy == inputStore.dy && inputStore.elementNumber !== -1) {
    					let elementEvent = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.find(cntrl => cntrl.event == selectedEvent);

    					temp_actions[index] = {
    						name: action.value,
    						parameters: action.parameters
    					};

    					elementEvent.config[index] = runtime$1.actionToConfig(temp_actions[index]);
    					commands.validity("LOCALSTORE", true);
    					elementEvent.cfgStatus = "changed";
    				} // comment this out to avoid reactive changes!
    				//sendChangesToGrid(elementEvent.config);

    				return controller;
    			});

    			return store;
    		});
    	}

    	function handleControlElementNaming(name) {
    		// PROBABLY RUNS TOO MANY TIMES, TRY ONBLUR AND OTHER DEBOUNCING METHODS
    		runtime$1.update(store => {
    			store.map(controller => {
    				if (controller.dx == inputStore.dx && controller.dy == inputStore.dy) {
    					controller.banks[inputStore.bankActive][inputStore.elementNumber].controlElementName = name;
    				}

    				return controller;
    			});

    			return store;
    		});
    	}

    	function copyActions() {
    		$runtime.forEach(controller => {
    			if (controller.dx == inputStore.dx && controller.dy == inputStore.dy) {
    				let elementEvent = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.find(cntrl => cntrl.event == selectedEvent);
    				copiedActions = elementEvent.config;
    			}
    		});
    	}

    	function pasteActions() {
    		runtime$1.update(store => {
    			store.map(controller => {
    				if (controller.dx == inputStore.dx && controller.dy == inputStore.dy) {
    					let elementEvent = controller.banks[inputStore.bankActive][inputStore.elementNumber].events.find(cntrl => cntrl.event == selectedEvent);
    					const newConfig = JSON.parse(JSON.stringify(copiedActions)); // deep copy of object.
    					elementEvent.config = newConfig;
    					elementEvent.cfgStatus = "changed";
    				} //sendChangesToGrid(elementEvent.config)

    				return controller;
    			});

    			return store;
    		});

    		renderLocalConfiguration();
    	}

    	function recallActions() {
    		const command = GRID_PROTOCOL.encode(
    			moduleInfo,
    			"CONFIGDEFAULT",
    			"EXECUTE",
    			[
    				{
    					BANKNUMBER: parameter_parser$1(inputStore.bankActive)
    				},
    				{
    					ELEMENTNUMBER: parameter_parser$1(inputStore.elementNumber)
    				},
    				{
    					EVENTTYPE: parameter_parser$1(inputStore.eventType)
    				}
    			],
    			""
    		);

    		serialComm$1.write(command);
    		renderLocalConfiguration();
    	}

    	onMount(() => {
    		// Render local input settings if BANK or SELECTED CONTROL ELEMENT changes
    		derivedInputStore.subscribe(store => {
    			$$invalidate(0, inputStore = store);

    			//console.log('derivedInputStore', store);
    			renderLocalConfiguration();
    		});
    	}); // Update runtime based on received config from Grid.
    	// This is called, when config is fetched, interaction happened with a control element where no cfg found.
    	// Render only if config is successfully read back!
    	//cfgReport ? renderLocalConfiguration() : null;

    	//manageActions({ id: 0, name: 'MIDI Dynamic', value: 'MIDIRELATIVE' })
    	profileStore.subscribe(store => {
    		if (store !== undefined && store !== "") {
    			// load only banks!
    			runtime$1.update(runtime => {
    				runtime.forEach((controller, i) => {
    					if (store[i] !== undefined) {
    						if (controller.dx == store[i].dx && controller.dy == store[i].dy) {
    							console.log(controller, i, store[i].banks, store);
    							controller.banks = store[i].banks;

    							controller.banks.forEach(bank => {
    								bank.forEach(controlElement => {
    									controlElement.events.forEach(event => {
    										event.cfgStatus = "changed";
    									});
    								});
    							});
    						}
    					}
    				});

    				return runtime;
    			});

    			commands.validity("LOCALSTORE", true);
    			renderLocalConfiguration();
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$f.warn(`<LocalSettings> was created with unknown prop '${key}'`);
    	});

    	const click_handler = event => {
    		handleSelectEvent(event);
    	};

    	function select_change_handler() {
    		selectedAction = select_value(this);
    		$$invalidate(1, selectedAction);
    		$$invalidate(12, arrayOfSelectableActions);
    	}

    	const click_handler_1 = () => {
    		$$invalidate(1, selectedAction = manageActions(selectedAction));
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		onMount,
    		onDestroy,
    		runtime: runtime$1,
    		tour,
    		localInputStore,
    		derivedInputStore,
    		localConfigReportStore,
    		profileStore,
    		ActionList,
    		ActionWrapper,
    		ActionCommands,
    		OverlayToggle,
    		GRID_PROTOCOL,
    		serialComm: serialComm$1,
    		commands,
    		Commands,
    		appSettings,
    		parameter_parser: parameter_parser$1,
    		inputStore,
    		arrayOfSelectableActions,
    		selectedAction,
    		actions,
    		temp_actions,
    		element_color,
    		moduleId,
    		moduleInfo,
    		eventInfo,
    		elementInfo,
    		events,
    		selectedEvent,
    		controlElementName,
    		copiedActions,
    		RUNTIME,
    		renderLocalConfiguration,
    		checkIfSelectedEventIsCorrect,
    		manageActions,
    		initActionParameters,
    		handleRemoveAction,
    		handleSelectEvent,
    		handleOnActionChange,
    		handleControlElementNaming,
    		copyActions,
    		pasteActions,
    		recallActions,
    		$runtime,
    		$tour,
    		$localInputStore,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("inputStore" in $$props) $$invalidate(0, inputStore = $$props.inputStore);
    		if ("arrayOfSelectableActions" in $$props) $$invalidate(12, arrayOfSelectableActions = $$props.arrayOfSelectableActions);
    		if ("selectedAction" in $$props) $$invalidate(1, selectedAction = $$props.selectedAction);
    		if ("actions" in $$props) $$invalidate(2, actions = $$props.actions);
    		if ("temp_actions" in $$props) temp_actions = $$props.temp_actions;
    		if ("element_color" in $$props) element_color = $$props.element_color;
    		if ("moduleId" in $$props) $$invalidate(3, moduleId = $$props.moduleId);
    		if ("moduleInfo" in $$props) moduleInfo = $$props.moduleInfo;
    		if ("eventInfo" in $$props) $$invalidate(4, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(5, elementInfo = $$props.elementInfo);
    		if ("events" in $$props) $$invalidate(6, events = $$props.events);
    		if ("selectedEvent" in $$props) $$invalidate(7, selectedEvent = $$props.selectedEvent);
    		if ("controlElementName" in $$props) controlElementName = $$props.controlElementName;
    		if ("copiedActions" in $$props) copiedActions = $$props.copiedActions;
    		if ("RUNTIME" in $$props) RUNTIME = $$props.RUNTIME;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		inputStore,
    		selectedAction,
    		actions,
    		moduleId,
    		eventInfo,
    		elementInfo,
    		events,
    		selectedEvent,
    		$runtime,
    		$tour,
    		$localInputStore,
    		$appSettings,
    		arrayOfSelectableActions,
    		manageActions,
    		handleRemoveAction,
    		handleSelectEvent,
    		handleOnActionChange,
    		copyActions,
    		pasteActions,
    		recallActions,
    		click_handler,
    		select_change_handler,
    		click_handler_1
    	];
    }

    class LocalSettings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$11, create_fragment$11, safe_not_equal, {}, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LocalSettings",
    			options,
    			id: create_fragment$11.name
    		});
    	}
    }

    /* src\app\profiles\Profiles.svelte generated by Svelte v3.35.0 */

    const { console: console_1$e } = globals;
    const file$S = "src\\app\\profiles\\Profiles.svelte";

    function get_each_context$n(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	child_ctx[19] = i;
    	return child_ctx;
    }

    // (188:20) {#each PROFILES as profile, i}
    function create_each_block$n(ctx) {
    	let li;
    	let t_value = /*profile*/ ctx[17].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[8](/*i*/ ctx[19]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "p-1 my-1 cursor-pointer hover:bg-highlight-400");
    			toggle_class(li, "bg-highlight", /*selected*/ ctx[0] === /*i*/ ctx[19]);
    			add_location(li, file$S, 188, 22, 5947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*PROFILES*/ 4 && t_value !== (t_value = /*profile*/ ctx[17].name + "")) set_data_dev(t, t_value);

    			if (dirty & /*selected*/ 1) {
    				toggle_class(li, "bg-highlight", /*selected*/ ctx[0] === /*i*/ ctx[19]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$n.name,
    		type: "each",
    		source: "(188:20) {#each PROFILES as profile, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$10(ctx) {
    	let div10;
    	let div0;
    	let t1;
    	let div9;
    	let div1;
    	let input;
    	let t2;
    	let button0;
    	let div1_intro;
    	let t4;
    	let div8;
    	let div5;
    	let div4;
    	let div2;
    	let t6;
    	let div3;
    	let t7;
    	let t8;
    	let button1;
    	let t10;
    	let div7;
    	let div6;
    	let ul;
    	let t11;
    	let button2;
    	let div8_intro;
    	let mounted;
    	let dispose;
    	let each_value = /*PROFILES*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$n(get_each_context$n(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div0 = element("div");
    			div0.textContent = "Profiles";
    			t1 = space$1();
    			div9 = element("div");
    			div1 = element("div");
    			input = element("input");
    			t2 = space$1();
    			button0 = element("button");
    			button0.textContent = "Save";
    			t4 = space$1();
    			div8 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div2 = element("div");
    			div2.textContent = "Browse Profiles";
    			t6 = space$1();
    			div3 = element("div");
    			t7 = text(/*PROFILE_PATH*/ ctx[1]);
    			t8 = space$1();
    			button1 = element("button");
    			button1.textContent = "Select Folder";
    			t10 = space$1();
    			div7 = element("div");
    			div6 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space$1();
    			button2 = element("button");
    			button2.textContent = "Load Profile";
    			attr_dev(div0, "class", "text-white");
    			add_location(div0, file$S, 162, 6, 4456);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Name this profile");
    			attr_dev(input, "class", "w-full secondary text-white p-1 pl-2 mr-2 rounded-none focus:outline-none");
    			add_location(input, file$S, 166, 14, 4675);
    			attr_dev(button0, "class", "px-2 py-1 my-2 mr-2 w-20 bg-highlight hover:bg-highlight-400 border-none rounded-none focus:outline-none");
    			add_location(button0, file$S, 171, 14, 4920);
    			attr_dev(div1, "class", "primary rounded-lg py-2 flex justify-between items-center");
    			add_location(div1, file$S, 165, 12, 4566);
    			attr_dev(div2, "class", "");
    			add_location(div2, file$S, 177, 18, 5375);
    			attr_dev(div3, "class", "text-gray-700 pr-4 pt-1 text-xs");
    			add_location(div3, file$S, 178, 18, 5430);
    			attr_dev(div4, "class", "flex flex-col");
    			add_location(div4, file$S, 176, 16, 5328);
    			attr_dev(button1, "class", "px-2 py-1 border border-highlight hover:border-highlight-400 rounded-none focus:outline-none");
    			add_location(button1, file$S, 180, 16, 5537);
    			attr_dev(div5, "class", "flex justify-between border-b-2 border-gray-700 pb-2 items-center");
    			add_location(div5, file$S, 175, 14, 5231);
    			attr_dev(ul, "class", "w-full");
    			add_location(ul, file$S, 186, 18, 5852);
    			attr_dev(div6, "id", "zero-level");
    			attr_dev(div6, "class", "flex flex-grow mr-2 p-2");
    			add_location(div6, file$S, 185, 16, 5779);
    			attr_dev(div7, "class", "flex w-full");
    			add_location(div7, file$S, 183, 14, 5733);
    			attr_dev(button2, "class", "ml-2 px-2 py-1 hover:bg-highlight-500 border-highlight rounded-none focus:outline-none");
    			toggle_class(button2, "bg-highlight-400", /*selected*/ ctx[0] !== undefined);
    			add_location(button2, file$S, 196, 14, 6235);
    			attr_dev(div8, "id", "browse-profiles");
    			attr_dev(div8, "class", "py-2 text-sm border border-primary rounded-lg");
    			add_location(div8, file$S, 174, 12, 5113);
    			attr_dev(div9, "class", "flex flex-col text-white text-sm");
    			add_location(div9, file$S, 163, 8, 4504);
    			attr_dev(div10, "class", "w-full p-2 m-2 flex flex-col justify-start items-start");
    			add_location(div10, file$S, 160, 2, 4377);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div0);
    			append_dev(div10, t1);
    			append_dev(div10, div9);
    			append_dev(div9, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*profileName*/ ctx[3]);
    			append_dev(div1, t2);
    			append_dev(div1, button0);
    			append_dev(div9, t4);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div2);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, t7);
    			append_dev(div5, t8);
    			append_dev(div5, button1);
    			append_dev(div8, t10);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			append_dev(div6, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div8, t11);
    			append_dev(div8, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[7]),
    					listen_dev(button0, "click", /*saveProfile*/ ctx[5], false, false, false),
    					listen_dev(button1, "click", /*openDirectory*/ ctx[4], false, false, false),
    					listen_dev(button2, "click", /*loadProfile*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*profileName*/ 8 && input.value !== /*profileName*/ ctx[3]) {
    				set_input_value(input, /*profileName*/ ctx[3]);
    			}

    			if (dirty & /*PROFILE_PATH*/ 2) set_data_dev(t7, /*PROFILE_PATH*/ ctx[1]);

    			if (dirty & /*selected, PROFILES*/ 5) {
    				each_value = /*PROFILES*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$n(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$n(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*selected, undefined*/ 1) {
    				toggle_class(button2, "bg-highlight-400", /*selected*/ ctx[0] !== undefined);
    			}
    		},
    		i: function intro(local) {
    			if (!div1_intro) {
    				add_render_callback(() => {
    					div1_intro = create_in_transition(div1, fade, { delay: 250 });
    					div1_intro.start();
    				});
    			}

    			if (!div8_intro) {
    				add_render_callback(() => {
    					div8_intro = create_in_transition(div8, fade, { delay: 500 });
    					div8_intro.start();
    				});
    			}
    		},
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function width(node, { duration = 250, delay = 0 }) {
    	const w = +getComputedStyle(node)["width"].match(/(\d+)px/)[1];
    	console.log(w);

    	return {
    		duration,
    		delay,
    		css: t => {
    			console.log(t * w);
    			return `width: ${t * w}px`;
    		}
    	};
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Profiles", slots, []);
    	const electron = require("electron");
    	const path = require("path");
    	const fs = require("fs");
    	const { ipcRenderer } = require("electron");

    	// Importing dialog module using remote 
    	const dialog = electron.remote.dialog;

    	let selected;
    	let PROFILE_PATH = "";
    	let PROFILES = [];
    	let profileName = "";

    	function openDirectory() {
    		dialog.showOpenDialog({ properties: ["openDirectory"] }).then(dir => {
    			if (!dir.canceled) {
    				$$invalidate(1, PROFILE_PATH = dir.filePaths.toString());
    				ipcRenderer.send("setStoreValue-message", { profiles_folder: PROFILE_PATH });
    				loadFilesFromDirectory(PROFILE_PATH);
    			}
    		}).catch(err => {
    			console.log(err);
    		});
    	}

    	function loadFilesFromDirectory(path) {
    		$$invalidate(2, PROFILES = []);

    		fs.readdir(path, (err, files) => {
    			files.forEach(file => {
    				fs.readFile(`${path + "/" + file}`, "utf-8", function (err, data) {
    					if (err) throw err;
    					let obj = JSON.parse(data);
    					$$invalidate(2, PROFILES = [...PROFILES, obj]);
    				});
    			});
    		});
    	}

    	function saveProfile() {
    		const configs = get_store_value(runtime$1);
    		const profile = { name: profileName, data: configs };

    		// Resolves to a Promise<Object> 
    		dialog.showSaveDialog({
    			title: "Select the File Path to save",
    			defaultPath: path.join(__dirname, `../assets/${profileName}.json`),
    			// defaultPath: path.join(__dirname, '../assets/'), 
    			buttonLabel: "Save",
    			// Restricting the user to only JSON Files. 
    			filters: [{ name: "JSON Files", extensions: ["json"] }],
    			properties: []
    		}).then(file => {
    			// Stating whether dialog operation was cancelled or not. 
    			if (!file.canceled) {
    				const path = file.filePath.toString();

    				// Creating and Writing to the sample.txt file 
    				fs.writeFile(path, JSON.stringify(profile, null, 4), function (err) {
    					if (err) throw err;
    					console.log("Saved!");
    				});
    			}

    			loadFilesFromDirectory(PROFILE_PATH);
    		}).catch(err => {
    			console.log(err);
    		});
    	}

    	function openProfile() {
    		// Resolves to a Promise<Object> 
    		dialog.showOpenDialog({
    			title: "Open Grid configuration file...",
    			defaultPath: path.join(__dirname, "../assets/sample.txt"),
    			// defaultPath: path.join(__dirname, '../assets/'), 
    			buttonLabel: "Open",
    			// Restricting the user to only Text Files. 
    			filters: [
    				{
    					name: "Text Files",
    					extensions: ["txt", "docx"]
    				}
    			],
    			properties: ["openFile"]
    		}).then(file => {
    			// Stating whether dialog operation was cancelled or not. 
    			if (!file.canceled) {
    				const path = file.filePaths[0].toString();

    				// Creating and Writing to the sample.txt file 
    				fs.readFile(path, "utf-8", function (err, data) {
    					if (err) throw err;
    					console.log("Data read: ", data);
    				});
    			}
    		}).catch(err => {
    			console.log(err);
    		});
    	}

    	function loadProfile() {
    		console.log(selected);

    		if (selected !== undefined) {
    			const profile = PROFILES[selected].data;
    			profileStore.set(profile);
    		}
    	}

    	let toggle = false;

    	onMount(async () => {
    		$$invalidate(1, PROFILE_PATH = await ipcRenderer.invoke("getStoreValue", "profiles_folder"));
    		if (PROFILE_PATH) loadFilesFromDirectory(PROFILE_PATH);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$e.warn(`<Profiles> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		profileName = this.value;
    		$$invalidate(3, profileName);
    	}

    	const click_handler = i => {
    		$$invalidate(0, selected = i);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		get: get_store_value,
    		fade,
    		electron,
    		path,
    		fs,
    		ipcRenderer,
    		dialog,
    		commands,
    		runtime: runtime$1,
    		profileStore,
    		selected,
    		PROFILE_PATH,
    		PROFILES,
    		profileName,
    		openDirectory,
    		loadFilesFromDirectory,
    		saveProfile,
    		openProfile,
    		loadProfile,
    		toggle,
    		width
    	});

    	$$self.$inject_state = $$props => {
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("PROFILE_PATH" in $$props) $$invalidate(1, PROFILE_PATH = $$props.PROFILE_PATH);
    		if ("PROFILES" in $$props) $$invalidate(2, PROFILES = $$props.PROFILES);
    		if ("profileName" in $$props) $$invalidate(3, profileName = $$props.profileName);
    		if ("toggle" in $$props) toggle = $$props.toggle;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selected,
    		PROFILE_PATH,
    		PROFILES,
    		profileName,
    		openDirectory,
    		saveProfile,
    		loadProfile,
    		input_input_handler,
    		click_handler
    	];
    }

    class Profiles extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$10, create_fragment$10, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profiles",
    			options,
    			id: create_fragment$10.name
    		});
    	}
    }

    var default_sort = function (item, needle) { return item - needle; };
    function binarySearch(array, search, fn) {
        if (fn === void 0) { fn = default_sort; }
        var low = 0;
        var high = array.length - 1;
        var sort = fn.length === 1
            ? function (item, needle) { return fn(item) - search; }
            : fn;
        while (low <= high) {
            var i = (high + low) >> 1;
            var d = sort(array[i], search);
            if (d < 0) {
                low = i + 1;
            }
            else if (d > 0) {
                high = i - 1;
            }
            else {
                return i;
            }
        }
        return -low - 1;
    }

    function pickRandom(array) {
        var i = ~~(Math.random() * array.length);
        return array[i];
    }

    // http://bost.ocks.org/mike/shuffle/
    function shuffle(array) {
        var m = array.length;
        // While there remain elements to shuffle…
        while (m > 0) {
            // Pick a remaining element…
            var i = Math.floor(Math.random() * m--);
            // And swap it with the current element.
            var t = array[m];
            array[m] = array[i];
            array[i] = t;
        }
        return array;
    }

    function queue(max) {
        if (max === void 0) { max = 4; }
        var items = []; // TODO
        var pending = 0;
        var closed = false;
        var fulfil_closed;
        function dequeue() {
            if (pending === 0 && items.length === 0) {
                if (fulfil_closed)
                    fulfil_closed();
            }
            if (pending >= max)
                return;
            if (items.length === 0)
                return;
            pending += 1;
            var _a = items.shift(), fn = _a.fn, fulfil = _a.fulfil, reject = _a.reject;
            var promise = fn();
            try {
                promise.then(fulfil, reject).then(function () {
                    pending -= 1;
                    dequeue();
                });
            }
            catch (err) {
                reject(err);
                pending -= 1;
                dequeue();
            }
            dequeue();
        }
        return {
            add: function (fn) {
                if (closed) {
                    throw new Error("Cannot add to a closed queue");
                }
                return new Promise(function (fulfil, reject) {
                    items.push({ fn: fn, fulfil: fulfil, reject: reject });
                    dequeue();
                });
            },
            close: function () {
                closed = true;
                return new Promise(function (fulfil, reject) {
                    if (pending === 0) {
                        fulfil();
                    }
                    else {
                        fulfil_closed = fulfil;
                    }
                });
            }
        };
    }

    function createSprite(width, height, fn) {
        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        var ctx = canvas.getContext('2d');
        fn(ctx, canvas);
        return canvas;
    }

    function clamp(num, min, max) {
        return num < min ? min : num > max ? max : num;
    }

    function random(a, b) {
        if (b === undefined)
            return Math.random() * a;
        return a + Math.random() * (b - a);
    }

    function linear(domain, range) {
        var d0 = domain[0];
        var r0 = range[0];
        var m = (range[1] - r0) / (domain[1] - d0);
        return Object.assign(function (num) {
            return r0 + (num - d0) * m;
        }, {
            inverse: function () { return linear(range, domain); }
        });
    }

    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
    function commas(num) {
        var parts = String(num).split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return parts.join('.');
    }

    var yootils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        binarySearch: binarySearch,
        pickRandom: pickRandom,
        shuffle: shuffle,
        queue: queue,
        createSprite: createSprite,
        clamp: clamp,
        random: random,
        linearScale: linear,
        commas: commas
    });

    /* node_modules\@sveltejs\pancake\components\Chart.svelte generated by Svelte v3.35.0 */
    const file$R = "node_modules\\@sveltejs\\pancake\\components\\Chart.svelte";

    function create_fragment$$(ctx) {
    	let div;
    	let div_resize_listener;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "pancake-chart svelte-tbtd9j");
    			add_render_callback(() => /*div_elementresize_handler*/ ctx[17].call(div));
    			toggle_class(div, "clip", /*clip*/ ctx[0]);
    			add_location(div, file$R, 78, 0, 1618);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[16](div);
    			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[17].bind(div));
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "mousemove", /*handle_mousemove*/ ctx[6], false, false, false),
    					listen_dev(div, "mouseleave", /*handle_mouseleave*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 16384) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[14], dirty, null, null);
    				}
    			}

    			if (dirty & /*clip*/ 1) {
    				toggle_class(div, "clip", /*clip*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[16](null);
    			div_resize_listener();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const key = {};

    function getChartContext() {
    	return getContext(key);
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let $x_scale_inverse;
    	let $y_scale_inverse;
    	let $width;
    	let $height;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Chart", slots, ['default']);
    	let { x1 = 0 } = $$props;
    	let { y1 = 0 } = $$props;
    	let { x2 = 1 } = $$props;
    	let { y2 = 1 } = $$props;
    	let { clip = false } = $$props;
    	let chart;
    	const _x1 = writable();
    	const _y1 = writable();
    	const _x2 = writable();
    	const _y2 = writable();
    	const width = writable();
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(2, $width = value));
    	const height = writable();
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(3, $height = value));
    	const pointer = writable(null);

    	const handle_mousemove = e => {
    		const bcr = chart.getBoundingClientRect();
    		const left = e.clientX - bcr.left;
    		const top = e.clientY - bcr.top;
    		const x = $x_scale_inverse(100 * left / (bcr.right - bcr.left));
    		const y = $y_scale_inverse(100 * top / (bcr.bottom - bcr.top));
    		pointer.set({ x, y, left, top });
    	};

    	const handle_mouseleave = () => {
    		pointer.set(null);
    	};

    	const x_scale = derived([_x1, _x2], ([$x1, $x2]) => {
    		return linear([$x1, $x2], [0, 100]);
    	});

    	const y_scale = derived([_y1, _y2], ([$y1, $y2]) => {
    		return linear([$y1, $y2], [100, 0]);
    	});

    	const x_scale_inverse = derived(x_scale, $x_scale => $x_scale.inverse());
    	validate_store(x_scale_inverse, "x_scale_inverse");
    	component_subscribe($$self, x_scale_inverse, value => $$invalidate(18, $x_scale_inverse = value));
    	const y_scale_inverse = derived(y_scale, $y_scale => $y_scale.inverse());
    	validate_store(y_scale_inverse, "y_scale_inverse");
    	component_subscribe($$self, y_scale_inverse, value => $$invalidate(19, $y_scale_inverse = value));

    	setContext(key, {
    		x1: _x1,
    		y1: _y1,
    		x2: _x2,
    		y2: _y2,
    		x_scale,
    		y_scale,
    		x_scale_inverse,
    		y_scale_inverse,
    		pointer,
    		width,
    		height
    	});

    	const writable_props = ["x1", "y1", "x2", "y2", "clip"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chart> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			chart = $$value;
    			$$invalidate(1, chart);
    		});
    	}

    	function div_elementresize_handler() {
    		$width = this.clientWidth;
    		width.set($width);
    		$height = this.clientHeight;
    		height.set($height);
    	}

    	$$self.$$set = $$props => {
    		if ("x1" in $$props) $$invalidate(10, x1 = $$props.x1);
    		if ("y1" in $$props) $$invalidate(11, y1 = $$props.y1);
    		if ("x2" in $$props) $$invalidate(12, x2 = $$props.x2);
    		if ("y2" in $$props) $$invalidate(13, y2 = $$props.y2);
    		if ("clip" in $$props) $$invalidate(0, clip = $$props.clip);
    		if ("$$scope" in $$props) $$invalidate(14, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		key,
    		getChartContext,
    		setContext,
    		onDestroy,
    		writable,
    		derived,
    		yootils,
    		x1,
    		y1,
    		x2,
    		y2,
    		clip,
    		chart,
    		_x1,
    		_y1,
    		_x2,
    		_y2,
    		width,
    		height,
    		pointer,
    		handle_mousemove,
    		handle_mouseleave,
    		x_scale,
    		y_scale,
    		x_scale_inverse,
    		y_scale_inverse,
    		$x_scale_inverse,
    		$y_scale_inverse,
    		$width,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ("x1" in $$props) $$invalidate(10, x1 = $$props.x1);
    		if ("y1" in $$props) $$invalidate(11, y1 = $$props.y1);
    		if ("x2" in $$props) $$invalidate(12, x2 = $$props.x2);
    		if ("y2" in $$props) $$invalidate(13, y2 = $$props.y2);
    		if ("clip" in $$props) $$invalidate(0, clip = $$props.clip);
    		if ("chart" in $$props) $$invalidate(1, chart = $$props.chart);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*x1*/ 1024) {
    			_x1.set(x1);
    		}

    		if ($$self.$$.dirty & /*y1*/ 2048) {
    			_y1.set(y1);
    		}

    		if ($$self.$$.dirty & /*x2*/ 4096) {
    			_x2.set(x2);
    		}

    		if ($$self.$$.dirty & /*y2*/ 8192) {
    			_y2.set(y2);
    		}
    	};

    	return [
    		clip,
    		chart,
    		$width,
    		$height,
    		width,
    		height,
    		handle_mousemove,
    		handle_mouseleave,
    		x_scale_inverse,
    		y_scale_inverse,
    		x1,
    		y1,
    		x2,
    		y2,
    		$$scope,
    		slots,
    		div_binding,
    		div_elementresize_handler
    	];
    }

    class Chart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$$, create_fragment$$, safe_not_equal, { x1: 10, y1: 11, x2: 12, y2: 13, clip: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chart",
    			options,
    			id: create_fragment$$.name
    		});
    	}

    	get x1() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x1(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y1() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y1(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x2() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x2(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y2() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y2(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clip() {
    		throw new Error("<Chart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clip(value) {
    		throw new Error("<Chart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // adapted from https://github.com/d3/d3-array/blob/master/src/ticks.js
    // MIT License https://github.com/d3/d3-array/blob/master/LICENSE
    const e10 = Math.sqrt(50);
    const e5 = Math.sqrt(10);
    const e2 = Math.sqrt(2);

    function get_ticks(start, stop, count = 5) {
    	var reverse;
    	var i = -1;
    	var n;
    	var ticks;
    	var step;

    	if (start === stop && count > 0) return [start];

    	if (reverse = stop < start) {
    		[start, stop] = [stop, start];
    	}

    	if ((step = increment(start, stop, count)) === 0 || !isFinite(step)) {
    		return [];
    	}

    	if (step > 0) {
    		start = Math.ceil(start / step);
    		stop = Math.floor(stop / step);
    		ticks = new Array((n = Math.ceil(stop - start + 1)));
    		while (++i < n) ticks[i] = (start + i) * step;
    	} else {
    		start = Math.floor(start * step);
    		stop = Math.ceil(stop * step);
    		ticks = new Array((n = Math.ceil(start - stop + 1)));
    		while (++i < n) ticks[i] = (start - i) / step;
    	}

    	if (reverse) ticks.reverse();

    	return ticks;
    }

    function increment(start, stop, count) {
    	const step = (stop - start) / Math.max(0, count);
    	const power = Math.floor(Math.log(step) / Math.LN10);
    	const error = step / Math.pow(10, power);

    	return power >= 0
    		? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) *
    				Math.pow(10, power)
    		: -Math.pow(10, -power) /
    				(error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    /* node_modules\@sveltejs\pancake\components\Grid.svelte generated by Svelte v3.35.0 */

    const { console: console_1$d } = globals;
    const file$Q = "node_modules\\@sveltejs\\pancake\\components\\Grid.svelte";

    function get_each_context$m(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[25] = i;
    	return child_ctx;
    }

    const get_default_slot_changes$8 = dirty => ({
    	value: dirty & /*_ticks*/ 1,
    	last: dirty & /*_ticks*/ 1
    });

    const get_default_slot_context$8 = ctx => ({
    	value: /*tick*/ ctx[23],
    	first: /*i*/ ctx[25] === 0,
    	last: /*i*/ ctx[25] === /*_ticks*/ ctx[0].length - 1
    });

    // (31:1) {#each _ticks as tick, i}
    function create_each_block$m(ctx) {
    	let div;
    	let t;
    	let div_style_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], get_default_slot_context$8);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space$1();
    			attr_dev(div, "class", "pancake-grid-item svelte-d6zbr4");
    			attr_dev(div, "style", div_style_value = /*style*/ ctx[1](/*tick*/ ctx[23], /*i*/ ctx[25]));
    			add_location(div, file$Q, 31, 2, 876);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, _ticks*/ 524289) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, get_default_slot_changes$8, get_default_slot_context$8);
    				}
    			}

    			if (!current || dirty & /*style, _ticks*/ 3 && div_style_value !== (div_style_value = /*style*/ ctx[1](/*tick*/ ctx[23], /*i*/ ctx[25]))) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$m.name,
    		type: "each",
    		source: "(31:1) {#each _ticks as tick, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$_(ctx) {
    	let div;
    	let current;
    	let each_value = /*_ticks*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$m(get_each_context$m(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "pancake-grid");
    			add_location(div, file$Q, 29, 0, 820);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*style, _ticks, $$scope*/ 524291) {
    				each_value = /*_ticks*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$m(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$m(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let orientation;
    	let _ticks;
    	let style;
    	let $y1;
    	let $y2;
    	let $x1;
    	let $x2;
    	let $y_scale;
    	let $x_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Grid", slots, ['default']);
    	let { count = undefined } = $$props;
    	let { ticks = undefined } = $$props;
    	let { horizontal = false } = $$props;
    	let { vertical = false } = $$props;
    	const { x1, y1, x2, y2, x_scale, y_scale } = getChartContext();
    	validate_store(x1, "x1");
    	component_subscribe($$self, x1, value => $$invalidate(15, $x1 = value));
    	validate_store(y1, "y1");
    	component_subscribe($$self, y1, value => $$invalidate(13, $y1 = value));
    	validate_store(x2, "x2");
    	component_subscribe($$self, x2, value => $$invalidate(16, $x2 = value));
    	validate_store(y2, "y2");
    	component_subscribe($$self, y2, value => $$invalidate(14, $y2 = value));
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(18, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(17, $y_scale = value));
    	const VERTICAL = {};
    	const HORIZONTAL = {};
    	const writable_props = ["count", "ticks", "horizontal", "vertical"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$d.warn(`<Grid> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("count" in $$props) $$invalidate(8, count = $$props.count);
    		if ("ticks" in $$props) $$invalidate(9, ticks = $$props.ticks);
    		if ("horizontal" in $$props) $$invalidate(10, horizontal = $$props.horizontal);
    		if ("vertical" in $$props) $$invalidate(11, vertical = $$props.vertical);
    		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		get_ticks,
    		count,
    		ticks,
    		horizontal,
    		vertical,
    		x1,
    		y1,
    		x2,
    		y2,
    		x_scale,
    		y_scale,
    		VERTICAL,
    		HORIZONTAL,
    		orientation,
    		_ticks,
    		$y1,
    		$y2,
    		$x1,
    		$x2,
    		style,
    		$y_scale,
    		$x_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("count" in $$props) $$invalidate(8, count = $$props.count);
    		if ("ticks" in $$props) $$invalidate(9, ticks = $$props.ticks);
    		if ("horizontal" in $$props) $$invalidate(10, horizontal = $$props.horizontal);
    		if ("vertical" in $$props) $$invalidate(11, vertical = $$props.vertical);
    		if ("orientation" in $$props) $$invalidate(12, orientation = $$props.orientation);
    		if ("_ticks" in $$props) $$invalidate(0, _ticks = $$props._ticks);
    		if ("style" in $$props) $$invalidate(1, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*vertical*/ 2048) {
    			$$invalidate(12, orientation = vertical ? VERTICAL : HORIZONTAL);
    		}

    		if ($$self.$$.dirty & /*horizontal, vertical*/ 3072) {
    			if (horizontal && vertical) {
    				console.error(`<Grid> must specify either 'horizontal' or 'vertical' orientation`);
    			}
    		}

    		if ($$self.$$.dirty & /*ticks, orientation, $y1, $y2, count, $x1, $x2*/ 127744) {
    			$$invalidate(0, _ticks = ticks || (orientation === HORIZONTAL
    			? get_ticks($y1, $y2, count)
    			: get_ticks($x1, $x2, count)));
    		}

    		if ($$self.$$.dirty & /*orientation, $y_scale, $x_scale*/ 397312) {
    			$$invalidate(1, style = orientation === HORIZONTAL
    			? (n, i) => `width: 100%; height: 0; top: ${$y_scale(n, i)}%`
    			: (n, i) => `width: 0; height: 100%; left: ${$x_scale(n, i)}%`);
    		}
    	};

    	return [
    		_ticks,
    		style,
    		x1,
    		y1,
    		x2,
    		y2,
    		x_scale,
    		y_scale,
    		count,
    		ticks,
    		horizontal,
    		vertical,
    		orientation,
    		$y1,
    		$y2,
    		$x1,
    		$x2,
    		$y_scale,
    		$x_scale,
    		$$scope,
    		slots
    	];
    }

    class Grid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$_, create_fragment$_, safe_not_equal, {
    			count: 8,
    			ticks: 9,
    			horizontal: 10,
    			vertical: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Grid",
    			options,
    			id: create_fragment$_.name
    		});
    	}

    	get count() {
    		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set count(value) {
    		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ticks() {
    		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ticks(value) {
    		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get horizontal() {
    		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set horizontal(value) {
    		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vertical() {
    		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vertical(value) {
    		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\Point.svelte generated by Svelte v3.35.0 */
    const file$P = "node_modules\\@sveltejs\\pancake\\components\\Point.svelte";

    function create_fragment$Z(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "pancake-point svelte-hj15wb");
    			set_style(div, "left", /*$x_scale*/ ctx[2](/*x*/ ctx[0]) + "%");
    			set_style(div, "top", /*$y_scale*/ ctx[3](/*y*/ ctx[1]) + "%");
    			add_location(div, file$P, 9, 0, 152);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 64) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*$x_scale, x*/ 5) {
    				set_style(div, "left", /*$x_scale*/ ctx[2](/*x*/ ctx[0]) + "%");
    			}

    			if (!current || dirty & /*$y_scale, y*/ 10) {
    				set_style(div, "top", /*$y_scale*/ ctx[3](/*y*/ ctx[1]) + "%");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Point", slots, ['default']);
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(2, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(3, $y_scale = value));
    	let { x } = $$props;
    	let { y } = $$props;
    	const writable_props = ["x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Point> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		x_scale,
    		y_scale,
    		x,
    		y,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [x, y, $x_scale, $y_scale, x_scale, y_scale, $$scope, slots];
    }

    class Point extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { x: 0, y: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Point",
    			options,
    			id: create_fragment$Z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*x*/ ctx[0] === undefined && !("x" in props)) {
    			console.warn("<Point> was created without expected prop 'x'");
    		}

    		if (/*y*/ ctx[1] === undefined && !("y" in props)) {
    			console.warn("<Point> was created without expected prop 'y'");
    		}
    	}

    	get x() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\Box.svelte generated by Svelte v3.35.0 */
    const file$O = "node_modules\\@sveltejs\\pancake\\components\\Box.svelte";

    function create_fragment$Y(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "pancake-box svelte-cxkx8b");
    			attr_dev(div, "style", /*style*/ ctx[0]);
    			add_location(div, file$O, 29, 0, 697);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
    				}
    			}

    			if (!current || dirty & /*style*/ 1) {
    				attr_dev(div, "style", /*style*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Box", slots, ['default']);
    	let { x1 = 0 } = $$props;
    	let { x2 = 1 } = $$props;
    	let { y1 = 0 } = $$props;
    	let { y2 = 1 } = $$props;
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(7, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(8, $y_scale = value));
    	let style;
    	
    	const writable_props = ["x1", "x2", "y1", "y2"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Box> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("x1" in $$props) $$invalidate(3, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(4, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(5, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(6, y2 = $$props.y2);
    		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		get_ticks,
    		x1,
    		x2,
    		y1,
    		y2,
    		x_scale,
    		y_scale,
    		style,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("x1" in $$props) $$invalidate(3, x1 = $$props.x1);
    		if ("x2" in $$props) $$invalidate(4, x2 = $$props.x2);
    		if ("y1" in $$props) $$invalidate(5, y1 = $$props.y1);
    		if ("y2" in $$props) $$invalidate(6, y2 = $$props.y2);
    		if ("style" in $$props) $$invalidate(0, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$x_scale, x1, x2, $y_scale, y1, y2*/ 504) {
    			{
    				const _x1 = $x_scale(x1);
    				const _x2 = $x_scale(x2);
    				const _y1 = $y_scale(y1);
    				const _y2 = $y_scale(y2);
    				const left = Math.min(_x1, _x2);
    				const right = Math.max(_x1, _x2);
    				const top = Math.min(_y1, _y2);
    				const bottom = Math.max(_y1, _y2);
    				const height = bottom - top;
    				$$invalidate(0, style = `left: ${left}%; bottom: ${100 - bottom}%; width: ${right - left}%; height: ${height}%;`);
    			}
    		}
    	};

    	return [style, x_scale, y_scale, x1, x2, y1, y2, $x_scale, $y_scale, $$scope, slots];
    }

    class Box extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { x1: 3, x2: 4, y1: 5, y2: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Box",
    			options,
    			id: create_fragment$Y.name
    		});
    	}

    	get x1() {
    		throw new Error("<Box>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x1(value) {
    		throw new Error("<Box>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x2() {
    		throw new Error("<Box>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x2(value) {
    		throw new Error("<Box>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y1() {
    		throw new Error("<Box>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y1(value) {
    		throw new Error("<Box>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y2() {
    		throw new Error("<Box>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y2(value) {
    		throw new Error("<Box>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const default_x = d => d.x;
    const default_y = d => d.y;

    /* node_modules\@sveltejs\pancake\components\Bars.svelte generated by Svelte v3.35.0 */

    function get_each_context$l(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    const get_default_slot_changes$7 = dirty => ({
    	value: dirty & /*data*/ 1,
    	last: dirty & /*data*/ 1
    });

    const get_default_slot_context$7 = ctx => ({
    	value: /*d*/ ctx[6],
    	first: /*i*/ ctx[8] === 0,
    	last: /*i*/ ctx[8] === /*data*/ ctx[0].length - 1
    });

    // (12:1) <Box y1="{y(d, i) - height/2}" y2="{y(d, i) + height/2}" x1={0} x2="{x(d, i)}">
    function create_default_slot$3(ctx) {
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], get_default_slot_context$7);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    			t = space$1();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, data*/ 33) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_default_slot_changes$7, get_default_slot_context$7);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(12:1) <Box y1=\\\"{y(d, i) - height/2}\\\" y2=\\\"{y(d, i) + height/2}\\\" x1={0} x2=\\\"{x(d, i)}\\\">",
    		ctx
    	});

    	return block;
    }

    // (11:0) {#each data as d, i}
    function create_each_block$l(ctx) {
    	let box;
    	let current;

    	box = new Box({
    			props: {
    				y1: /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]) - /*height*/ ctx[1] / 2,
    				y2: /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]) + /*height*/ ctx[1] / 2,
    				x1: 0,
    				x2: /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]),
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(box.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(box, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const box_changes = {};
    			if (dirty & /*y, data, height*/ 11) box_changes.y1 = /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]) - /*height*/ ctx[1] / 2;
    			if (dirty & /*y, data, height*/ 11) box_changes.y2 = /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]) + /*height*/ ctx[1] / 2;
    			if (dirty & /*x, data*/ 5) box_changes.x2 = /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]);

    			if (dirty & /*$$scope, data*/ 33) {
    				box_changes.$$scope = { dirty, ctx };
    			}

    			box.$set(box_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(box.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(box.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(box, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$l.name,
    		type: "each",
    		source: "(11:0) {#each data as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$X(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$l(get_each_context$l(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*y, data, height, x, $$scope*/ 47) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$l(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$l(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Bars", slots, ['default']);
    	let { data } = $$props;
    	let { height = 1 } = $$props;
    	let { x = d => d.x } = $$props;
    	let { y = d => d.y } = $$props;
    	const writable_props = ["data", "height", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Bars> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("height" in $$props) $$invalidate(1, height = $$props.height);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Box,
    		default_x,
    		default_y,
    		data,
    		height,
    		x,
    		y
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("height" in $$props) $$invalidate(1, height = $$props.height);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data, height, x, y, slots, $$scope];
    }

    class Bars extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$X, create_fragment$X, safe_not_equal, { data: 0, height: 1, x: 2, y: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bars",
    			options,
    			id: create_fragment$X.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
    			console.warn("<Bars> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<Bars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Bars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Bars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Bars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Bars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Bars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Bars>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Bars>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\Columns.svelte generated by Svelte v3.35.0 */

    function get_each_context$k(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    const get_default_slot_changes$6 = dirty => ({
    	value: dirty & /*data*/ 1,
    	last: dirty & /*data*/ 1
    });

    const get_default_slot_context$6 = ctx => ({
    	value: /*d*/ ctx[6],
    	first: /*i*/ ctx[8] === 0,
    	last: /*i*/ ctx[8] === /*data*/ ctx[0].length - 1
    });

    // (12:1) <Box x1="{x(d, i) - width/2}" x2="{x(d, i) + width/2}" y1={0} y2="{y(d, i)}">
    function create_default_slot$2(ctx) {
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], get_default_slot_context$6);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    			t = space$1();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, data*/ 33) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_default_slot_changes$6, get_default_slot_context$6);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(12:1) <Box x1=\\\"{x(d, i) - width/2}\\\" x2=\\\"{x(d, i) + width/2}\\\" y1={0} y2=\\\"{y(d, i)}\\\">",
    		ctx
    	});

    	return block;
    }

    // (11:0) {#each data as d, i}
    function create_each_block$k(ctx) {
    	let box;
    	let current;

    	box = new Box({
    			props: {
    				x1: /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]) - /*width*/ ctx[1] / 2,
    				x2: /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]) + /*width*/ ctx[1] / 2,
    				y1: 0,
    				y2: /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]),
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(box.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(box, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const box_changes = {};
    			if (dirty & /*x, data, width*/ 7) box_changes.x1 = /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]) - /*width*/ ctx[1] / 2;
    			if (dirty & /*x, data, width*/ 7) box_changes.x2 = /*x*/ ctx[2](/*d*/ ctx[6], /*i*/ ctx[8]) + /*width*/ ctx[1] / 2;
    			if (dirty & /*y, data*/ 9) box_changes.y2 = /*y*/ ctx[3](/*d*/ ctx[6], /*i*/ ctx[8]);

    			if (dirty & /*$$scope, data*/ 33) {
    				box_changes.$$scope = { dirty, ctx };
    			}

    			box.$set(box_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(box.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(box.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(box, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$k.name,
    		type: "each",
    		source: "(11:0) {#each data as d, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$W(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$k(get_each_context$k(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*x, data, width, y, $$scope*/ 47) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$k(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$k(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Columns", slots, ['default']);
    	let { data } = $$props;
    	let { width = 1 } = $$props;
    	let { x = d => d.x } = $$props;
    	let { y = d => d.y } = $$props;
    	const writable_props = ["data", "width", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Columns> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("width" in $$props) $$invalidate(1, width = $$props.width);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Box,
    		default_x,
    		default_y,
    		data,
    		width,
    		x,
    		y
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("width" in $$props) $$invalidate(1, width = $$props.width);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data, width, x, y, slots, $$scope];
    }

    class Columns extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$W, safe_not_equal, { data: 0, width: 1, x: 2, y: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Columns",
    			options,
    			id: create_fragment$W.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
    			console.warn("<Columns> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<Columns>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Columns>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Columns>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Columns>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Columns>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Columns>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Columns>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Columns>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\Svg.svelte generated by Svelte v3.35.0 */

    const file$N = "node_modules\\@sveltejs\\pancake\\components\\Svg.svelte";

    function create_fragment$V(ctx) {
    	let svg;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (default_slot) default_slot.c();
    			attr_dev(svg, "viewBox", "0 0 100 100");
    			attr_dev(svg, "preserveAspectRatio", "none");
    			attr_dev(svg, "class", "svelte-v56ugx");
    			toggle_class(svg, "clip", /*clip*/ ctx[0]);
    			add_location(svg, file$N, 4, 0, 46);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);

    			if (default_slot) {
    				default_slot.m(svg, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
    				}
    			}

    			if (dirty & /*clip*/ 1) {
    				toggle_class(svg, "clip", /*clip*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Svg", slots, ['default']);
    	let { clip = false } = $$props;
    	const writable_props = ["clip"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Svg> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("clip" in $$props) $$invalidate(0, clip = $$props.clip);
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ clip });

    	$$self.$inject_state = $$props => {
    		if ("clip" in $$props) $$invalidate(0, clip = $$props.clip);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [clip, $$scope, slots];
    }

    class Svg extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$V, create_fragment$V, safe_not_equal, { clip: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Svg",
    			options,
    			id: create_fragment$V.name
    		});
    	}

    	get clip() {
    		throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clip(value) {
    		throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\SvgPolygon.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes$5 = dirty => ({ d: dirty & /*d*/ 1 });
    const get_default_slot_context$5 = ctx => ({ d: /*d*/ ctx[0] });

    function create_fragment$U(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$5);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, d*/ 257) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$5, get_default_slot_context$5);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let d;
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SvgPolygon", slots, ['default']);
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(6, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(7, $y_scale = value));
    	let { data } = $$props;
    	let { x = default_x } = $$props;
    	let { y = default_y } = $$props;
    	const writable_props = ["data", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvgPolygon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		default_x,
    		default_y,
    		x_scale,
    		y_scale,
    		data,
    		x,
    		y,
    		d,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("d" in $$props) $$invalidate(0, d = $$props.d);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data, $x_scale, x, $y_scale, y*/ 248) {
    			$$invalidate(0, d = `M${data.map((d, i) => `${$x_scale(x(d, i))},${$y_scale(y(d, i))}`).join("L")}`);
    		}
    	};

    	return [d, x_scale, y_scale, data, x, y, $x_scale, $y_scale, $$scope, slots];
    }

    class SvgPolygon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$U, safe_not_equal, { data: 3, x: 4, y: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgPolygon",
    			options,
    			id: create_fragment$U.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
    			console.warn("<SvgPolygon> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<SvgPolygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<SvgPolygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<SvgPolygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<SvgPolygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<SvgPolygon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<SvgPolygon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\SvgArea.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes$4 = dirty => ({ d: dirty & /*d*/ 128 });
    const get_default_slot_context$4 = ctx => ({ d: /*d*/ ctx[7] });

    // (17:0) <SvgPolygon data={points} let:d>
    function create_default_slot$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context$4);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, d*/ 192) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_default_slot_changes$4, get_default_slot_context$4);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(17:0) <SvgPolygon data={points} let:d>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$T(ctx) {
    	let svgpolygon;
    	let current;

    	svgpolygon = new SvgPolygon({
    			props: {
    				data: /*points*/ ctx[0],
    				$$slots: {
    					default: [create_default_slot$1, ({ d }) => ({ 7: d }), ({ d }) => d ? 128 : 0]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(svgpolygon.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(svgpolygon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const svgpolygon_changes = {};
    			if (dirty & /*points*/ 1) svgpolygon_changes.data = /*points*/ ctx[0];

    			if (dirty & /*$$scope, d*/ 192) {
    				svgpolygon_changes.$$scope = { dirty, ctx };
    			}

    			svgpolygon.$set(svgpolygon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgpolygon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgpolygon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(svgpolygon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let points;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SvgArea", slots, ['default']);
    	let { data } = $$props;
    	let { floor = 0 } = $$props;
    	let { x = default_x } = $$props;
    	let { y = default_y } = $$props;
    	const writable_props = ["data", "floor", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvgArea> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(1, data = $$props.data);
    		if ("floor" in $$props) $$invalidate(2, floor = $$props.floor);
    		if ("x" in $$props) $$invalidate(3, x = $$props.x);
    		if ("y" in $$props) $$invalidate(4, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		SvgPolygon,
    		default_x,
    		default_y,
    		data,
    		floor,
    		x,
    		y,
    		points
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(1, data = $$props.data);
    		if ("floor" in $$props) $$invalidate(2, floor = $$props.floor);
    		if ("x" in $$props) $$invalidate(3, x = $$props.x);
    		if ("y" in $$props) $$invalidate(4, y = $$props.y);
    		if ("points" in $$props) $$invalidate(0, points = $$props.points);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*x, data, floor, y*/ 30) {
    			$$invalidate(0, points = [
    				{ x: x(data[0], 0), y: floor },
    				...data.map((d, i) => ({ x: x(d, i), y: y(d, i) })),
    				{
    					x: x(data[data.length - 1], data.length - 1),
    					y: floor
    				}
    			]);
    		}
    	};

    	return [points, data, floor, x, y, slots, $$scope];
    }

    class SvgArea extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$T, create_fragment$T, safe_not_equal, { data: 1, floor: 2, x: 3, y: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgArea",
    			options,
    			id: create_fragment$T.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[1] === undefined && !("data" in props)) {
    			console.warn("<SvgArea> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<SvgArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<SvgArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get floor() {
    		throw new Error("<SvgArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set floor(value) {
    		throw new Error("<SvgArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<SvgArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<SvgArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<SvgArea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<SvgArea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\SvgLine.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes$3 = dirty => ({ d: dirty & /*d*/ 1 });
    const get_default_slot_context$3 = ctx => ({ d: /*d*/ ctx[0] });

    function create_fragment$S(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$3);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, d*/ 257) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$3, get_default_slot_context$3);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let d;
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SvgLine", slots, ['default']);
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(6, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(7, $y_scale = value));
    	let { data } = $$props;
    	let { x = default_x } = $$props;
    	let { y = default_y } = $$props;
    	const writable_props = ["data", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvgLine> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		default_x,
    		default_y,
    		x_scale,
    		y_scale,
    		data,
    		x,
    		y,
    		d,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("d" in $$props) $$invalidate(0, d = $$props.d);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data, $x_scale, x, $y_scale, y*/ 248) {
    			$$invalidate(0, d = "M" + data.map((d, i) => `${$x_scale(x(d, i))},${$y_scale(y(d, i))}`).join("L"));
    		}
    	};

    	return [d, x_scale, y_scale, data, x, y, $x_scale, $y_scale, $$scope, slots];
    }

    class SvgLine extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, { data: 3, x: 4, y: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgLine",
    			options,
    			id: create_fragment$S.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
    			console.warn("<SvgLine> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<SvgLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<SvgLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<SvgLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<SvgLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<SvgLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<SvgLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\SvgScatterplot.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes$2 = dirty => ({ d: dirty & /*d*/ 1 });
    const get_default_slot_context$2 = ctx => ({ d: /*d*/ ctx[0] });

    function create_fragment$R(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$2);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, d*/ 257) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$2, get_default_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let d;
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SvgScatterplot", slots, ['default']);
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(6, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(7, $y_scale = value));
    	let { data } = $$props;
    	let { x = default_x } = $$props;
    	let { y = default_y } = $$props;
    	const writable_props = ["data", "x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvgScatterplot> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		default_x,
    		default_y,
    		x_scale,
    		y_scale,
    		data,
    		x,
    		y,
    		d,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(3, data = $$props.data);
    		if ("x" in $$props) $$invalidate(4, x = $$props.x);
    		if ("y" in $$props) $$invalidate(5, y = $$props.y);
    		if ("d" in $$props) $$invalidate(0, d = $$props.d);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data, $x_scale, x, $y_scale, y*/ 248) {
    			$$invalidate(0, d = data.map((d, i) => {
    				const _x = $x_scale(x(d, i));
    				const _y = $y_scale(y(d, i));
    				return `M${_x} ${_y} A0 0 0 0 1 ${_x + 0.0001} ${_y + 0.0001}`;
    			}).join(" "));
    		}
    	};

    	return [d, x_scale, y_scale, data, x, y, $x_scale, $y_scale, $$scope, slots];
    }

    class SvgScatterplot extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$R, safe_not_equal, { data: 3, x: 4, y: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgScatterplot",
    			options,
    			id: create_fragment$R.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
    			console.warn("<SvgScatterplot> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<SvgScatterplot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<SvgScatterplot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<SvgScatterplot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<SvgScatterplot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<SvgScatterplot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<SvgScatterplot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@sveltejs\pancake\components\SvgPoint.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes$1 = dirty => ({ d: dirty & /*d*/ 1 });
    const get_default_slot_context$1 = ctx => ({ d: /*d*/ ctx[0] });

    function create_fragment$Q(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, d*/ 129) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let $x_scale;
    	let $y_scale;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SvgPoint", slots, ['default']);
    	const { x_scale, y_scale } = getChartContext();
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(5, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(6, $y_scale = value));
    	let { x } = $$props;
    	let { y } = $$props;
    	let d;
    	const writable_props = ["x", "y"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvgPoint> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("x" in $$props) $$invalidate(3, x = $$props.x);
    		if ("y" in $$props) $$invalidate(4, y = $$props.y);
    		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		getChartContext,
    		x_scale,
    		y_scale,
    		x,
    		y,
    		d,
    		$x_scale,
    		$y_scale
    	});

    	$$self.$inject_state = $$props => {
    		if ("x" in $$props) $$invalidate(3, x = $$props.x);
    		if ("y" in $$props) $$invalidate(4, y = $$props.y);
    		if ("d" in $$props) $$invalidate(0, d = $$props.d);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$x_scale, x, $y_scale, y*/ 120) {
    			{
    				const _x = $x_scale(x);
    				const _y = $y_scale(y);
    				$$invalidate(0, d = `M${_x} ${_y} A0 0 0 0 1 ${_x + 0.0001} ${_y + 0.0001}`);
    			}
    		}
    	};

    	return [d, x_scale, y_scale, x, y, $x_scale, $y_scale, $$scope, slots];
    }

    class SvgPoint extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { x: 3, y: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgPoint",
    			options,
    			id: create_fragment$Q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*x*/ ctx[3] === undefined && !("x" in props)) {
    			console.warn("<SvgPoint> was created without expected prop 'x'");
    		}

    		if (/*y*/ ctx[4] === undefined && !("y" in props)) {
    			console.warn("<SvgPoint> was created without expected prop 'y'");
    		}
    	}

    	get x() {
    		throw new Error("<SvgPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<SvgPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<SvgPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<SvgPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    class Node {
    	constructor(x0, y0, x1, y1) {
    		this.x0 = x0;
    		this.y0 = y0;
    		this.x1 = x1;
    		this.y1 = y1;
    		this.xm = (x0 + x1) / 2;
    		this.ym = (y0 + y1) / 2;

    		this.empty = true;
    		this.leaf = null;
    		this.children = null;
    	}

    	add(p) {
    		const { x0, y0, x1, y1, xm, ym, leaf } = this;

    		if (this.empty) {
    			this.leaf = p;
    			this.empty = false;
    			return;
    		}

    		if (leaf) {
    			// need to subdivide
    			this.children = {
    				nw: new Node(x0, y0, xm, ym),
    				ne: new Node(xm, y0, x1, ym),
    				sw: new Node(x0, ym, xm, y1),
    				se: new Node(xm, ym, x1, y1)
    			};

    			this.leaf = null;
    			this.add(leaf);
    		}

    		const child = p.x < xm
    			? p.y < ym ? this.children.nw : this.children.sw
    			: p.y < ym ? this.children.ne : this.children.se;

    		child.add(p);
    	}
    }

    function build_tree(data, x, y, x_scale, y_scale) {
    	const points = data.map((d, i) => ({
    		d,
    		x: x_scale(x(d, i)),
    		y: y_scale(y(d, i))
    	}));

    	let x0 = Infinity;
    	let y0 = Infinity;
    	let x1 = -Infinity;
    	let y1 = -Infinity;

    	for (let i = 0; i < points.length; i += 1) {
    		const p = points[i];

    		if (p.x < x0) x0 = p.x;
    		if (p.y < y0) y0 = p.y;
    		if (p.x > x1) x1 = p.x;
    		if (p.y > y1) y1 = p.y;
    	}

    	const root = new Node(x0, y0, x1, y1);

    	for (let i = 0; i < points.length; i += 1) {
    		const p = points[i];
    		if (isNaN(p.x) || isNaN(p.y)) continue;

    		root.add(p);
    	}

    	return root;
    }

    class Quadtree {
    	constructor(data) {
    		this.data = data;
    		this.x = null;
    		this.y = null;
    		this.x_scale = null;
    		this.y_scale = null;
    	}

    	update(x, y, x_scale, y_scale) {
    		this.root = null;
    		this.x = x;
    		this.y = y;
    		this.x_scale = x_scale;
    		this.y_scale = y_scale;
    	}

    	find(left, top, width, height, radius) {
    		if (!this.root) this.root = build_tree(this.data, this.x, this.y, this.x_scale, this.y_scale);

    		const queue = [this.root];

    		let node;
    		let closest;
    		let min_d_squared = Infinity;

    		const x_to_px = x => x * width / 100;
    		const y_to_px = y => y * height / 100;

    		while (node = queue.shift()) {
    			if (node.empty) continue;

    			const left0 = x_to_px(node.x0);
    			const left1 = x_to_px(node.x1);
    			const top0 = y_to_px(node.y0);
    			const top1 = y_to_px(node.y1);

    			const out_of_bounds = (
    				left < (Math.min(left0, left1) - radius) ||
    				left > (Math.max(left0, left1) + radius) ||
    				top < (Math.min(top0, top1) - radius) ||
    				top > (Math.max(top0, top1) + radius)
    			);

    			if (out_of_bounds) continue;

    			if (node.leaf) {
    				const dl = x_to_px(node.leaf.x) - left;
    				const dt = y_to_px(node.leaf.y) - top;

    				const d_squared = (dl * dl + dt * dt);

    				if (d_squared < min_d_squared) {
    					closest = node.leaf.d;
    					min_d_squared = d_squared;
    				}
    			} else {
    				queue.push(
    					node.children.nw,
    					node.children.ne,
    					node.children.sw,
    					node.children.se
    				);
    			}
    		}

    		return min_d_squared < (radius * radius)
    			? closest
    			: null;
    	}
    }

    /* node_modules\@sveltejs\pancake\components\Quadtree.svelte generated by Svelte v3.35.0 */
    const get_default_slot_changes = dirty => ({ closest: dirty & /*closest*/ 1 });
    const get_default_slot_context = ctx => ({ closest: /*closest*/ ctx[0] });

    function create_fragment$P(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[19].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, closest*/ 262145) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let quadtree;
    	let $x_scale;
    	let $y_scale;
    	let $pointer;
    	let $width;
    	let $height;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Quadtree", slots, ['default']);
    	let { data } = $$props;
    	let { x = default_x } = $$props;
    	let { y = default_y } = $$props;
    	let { radius = Infinity } = $$props;
    	let { closest = undefined } = $$props;
    	const { pointer, x_scale, y_scale, x_scale_inverse, y_scale_inverse, width, height } = getChartContext();
    	validate_store(pointer, "pointer");
    	component_subscribe($$self, pointer, value => $$invalidate(15, $pointer = value));
    	validate_store(x_scale, "x_scale");
    	component_subscribe($$self, x_scale, value => $$invalidate(13, $x_scale = value));
    	validate_store(y_scale, "y_scale");
    	component_subscribe($$self, y_scale, value => $$invalidate(14, $y_scale = value));
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(16, $width = value));
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(17, $height = value));
    	const dispatch = createEventDispatcher();

    	// track reference changes, to trigger updates sparingly
    	let prev_closest;

    	let next_closest;
    	const writable_props = ["data", "x", "y", "radius", "closest"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Quadtree> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(6, data = $$props.data);
    		if ("x" in $$props) $$invalidate(7, x = $$props.x);
    		if ("y" in $$props) $$invalidate(8, y = $$props.y);
    		if ("radius" in $$props) $$invalidate(9, radius = $$props.radius);
    		if ("closest" in $$props) $$invalidate(0, closest = $$props.closest);
    		if ("$$scope" in $$props) $$invalidate(18, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		getChartContext,
    		Quadtree,
    		default_x,
    		default_y,
    		data,
    		x,
    		y,
    		radius,
    		closest,
    		pointer,
    		x_scale,
    		y_scale,
    		x_scale_inverse,
    		y_scale_inverse,
    		width,
    		height,
    		dispatch,
    		prev_closest,
    		next_closest,
    		quadtree,
    		$x_scale,
    		$y_scale,
    		$pointer,
    		$width,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(6, data = $$props.data);
    		if ("x" in $$props) $$invalidate(7, x = $$props.x);
    		if ("y" in $$props) $$invalidate(8, y = $$props.y);
    		if ("radius" in $$props) $$invalidate(9, radius = $$props.radius);
    		if ("closest" in $$props) $$invalidate(0, closest = $$props.closest);
    		if ("prev_closest" in $$props) $$invalidate(10, prev_closest = $$props.prev_closest);
    		if ("next_closest" in $$props) $$invalidate(11, next_closest = $$props.next_closest);
    		if ("quadtree" in $$props) $$invalidate(12, quadtree = $$props.quadtree);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data*/ 64) {
    			$$invalidate(12, quadtree = new Quadtree(data));
    		}

    		if ($$self.$$.dirty & /*quadtree, x, y, $x_scale, $y_scale*/ 29056) {
    			quadtree.update(x, y, $x_scale, $y_scale);
    		}

    		if ($$self.$$.dirty & /*$pointer, quadtree, $width, $height, radius*/ 233984) {
    			$$invalidate(11, next_closest = $pointer !== null
    			? quadtree.find($pointer.left, $pointer.top, $width, $height, radius)
    			: null);
    		}

    		if ($$self.$$.dirty & /*next_closest, prev_closest*/ 3072) {
    			if (next_closest !== prev_closest) {
    				$$invalidate(0, closest = $$invalidate(10, prev_closest = next_closest));
    			}
    		}
    	};

    	return [
    		closest,
    		pointer,
    		x_scale,
    		y_scale,
    		width,
    		height,
    		data,
    		x,
    		y,
    		radius,
    		prev_closest,
    		next_closest,
    		quadtree,
    		$x_scale,
    		$y_scale,
    		$pointer,
    		$width,
    		$height,
    		$$scope,
    		slots
    	];
    }

    class Quadtree_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {
    			data: 6,
    			x: 7,
    			y: 8,
    			radius: 9,
    			closest: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Quadtree_1",
    			options,
    			id: create_fragment$P.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[6] === undefined && !("data" in props)) {
    			console.warn("<Quadtree> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<Quadtree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Quadtree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Quadtree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Quadtree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Quadtree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Quadtree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get radius() {
    		throw new Error("<Quadtree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set radius(value) {
    		throw new Error("<Quadtree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closest() {
    		throw new Error("<Quadtree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closest(value) {
    		throw new Error("<Quadtree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function stacks (data, keys, i = (d, i) => i) {
    	if (typeof i === 'string') {
    		const key = i;
    		i = d => d[key];
    	}

    	const stacks = data.map(d => {
    		const stack = keys.map(key => ({
    			key,
    			value: d[key],
    			i: i(d),
    			start: null,
    			end: null
    		}));

    		let acc = 0;

    		stack.forEach(d => {
    			d.start = acc;
    			d.end = acc += d.value;
    		});

    		return stack;
    	});

    	return keys.map(key => ({
    		key,
    		values: stacks.map(s => {
    			return s.find(d => d.key === key);
    		})
    	}));
    }

    var Pancake = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Chart: Chart,
        Grid: Grid,
        Point: Point,
        Box: Box,
        Bars: Bars,
        Columns: Columns,
        Svg: Svg,
        SvgArea: SvgArea,
        SvgPolygon: SvgPolygon,
        SvgLine: SvgLine,
        SvgScatterplot: SvgScatterplot,
        SvgPoint: SvgPoint,
        Quadtree: Quadtree_1,
        stacks: stacks
    });

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function tick_spring(ctx, last_value, current_value, target_value) {
        if (typeof current_value === 'number' || is_date(current_value)) {
            // @ts-ignore
            const delta = target_value - current_value;
            // @ts-ignore
            const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
            const spring = ctx.opts.stiffness * delta;
            const damper = ctx.opts.damping * velocity;
            const acceleration = (spring - damper) * ctx.inv_mass;
            const d = (velocity + acceleration) * ctx.dt;
            if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
                return target_value; // settled
            }
            else {
                ctx.settled = false; // signal loop to keep ticking
                // @ts-ignore
                return is_date(current_value) ?
                    new Date(current_value.getTime() + d) : current_value + d;
            }
        }
        else if (Array.isArray(current_value)) {
            // @ts-ignore
            return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
        }
        else if (typeof current_value === 'object') {
            const next_value = {};
            for (const k in current_value) {
                // @ts-ignore
                next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
            }
            // @ts-ignore
            return next_value;
        }
        else {
            throw new Error(`Cannot spring ${typeof current_value} values`);
        }
    }
    function spring(value, opts = {}) {
        const store = writable(value);
        const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
        let last_time;
        let task;
        let current_token;
        let last_value = value;
        let target_value = value;
        let inv_mass = 1;
        let inv_mass_recovery_rate = 0;
        let cancel_task = false;
        function set(new_value, opts = {}) {
            target_value = new_value;
            const token = current_token = {};
            if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
                cancel_task = true; // cancel any running animation
                last_time = now();
                last_value = new_value;
                store.set(value = target_value);
                return Promise.resolve();
            }
            else if (opts.soft) {
                const rate = opts.soft === true ? .5 : +opts.soft;
                inv_mass_recovery_rate = 1 / (rate * 60);
                inv_mass = 0; // infinite mass, unaffected by spring forces
            }
            if (!task) {
                last_time = now();
                cancel_task = false;
                task = loop(now => {
                    if (cancel_task) {
                        cancel_task = false;
                        task = null;
                        return false;
                    }
                    inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                    const ctx = {
                        inv_mass,
                        opts: spring,
                        settled: true,
                        dt: (now - last_time) * 60 / 1000
                    };
                    const next_value = tick_spring(ctx, last_value, value, target_value);
                    last_time = now;
                    last_value = value;
                    store.set(value = next_value);
                    if (ctx.settled) {
                        task = null;
                    }
                    return !ctx.settled;
                });
            }
            return new Promise(fulfil => {
                task.promise.then(() => {
                    if (token === current_token)
                        fulfil();
                });
            });
        }
        const spring = {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe,
            stiffness,
            damping,
            precision
        };
        return spring;
    }

    /* src\app\shared\debug\Debug.svelte generated by Svelte v3.35.0 */
    const file$M = "src\\app\\shared\\debug\\Debug.svelte";

    function get_each_context$j(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (73:4) {#each [...input].reverse() as entry}
    function create_each_block$j(ctx) {
    	let div;
    	let t_value = /*entry*/ ctx[12].data + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "svelte-c2brht");
    			toggle_class(div, "serialOut", /*entry*/ ctx[12].type == "output");
    			add_location(div, file$M, 73, 5, 2177);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*input*/ 1 && t_value !== (t_value = /*entry*/ ctx[12].data + "")) set_data_dev(t, t_value);

    			if (dirty & /*input*/ 1) {
    				toggle_class(div, "serialOut", /*entry*/ ctx[12].type == "output");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$j.name,
    		type: "each",
    		source: "(73:4) {#each [...input].reverse() as entry}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$O(ctx) {
    	let div13;
    	let div10;
    	let div1;
    	let div0;
    	let t1;
    	let input0;
    	let t2;
    	let div3;
    	let div2;
    	let t4;
    	let input1;
    	let t5;
    	let div5;
    	let div4;
    	let t7;
    	let input2;
    	let t8;
    	let div7;
    	let div6;
    	let t10;
    	let input3;
    	let t11;
    	let div9;
    	let div8;
    	let t13;
    	let input4;
    	let t14;
    	let button0;
    	let t16;
    	let div12;
    	let button1;
    	let t18;
    	let div11;
    	let mounted;
    	let dispose;
    	let each_value = [.../*input*/ ctx[0]].reverse();
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$j(get_each_context$j(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "dx";
    			t1 = space$1();
    			input0 = element("input");
    			t2 = space$1();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "dy";
    			t4 = space$1();
    			input1 = element("input");
    			t5 = space$1();
    			div5 = element("div");
    			div4 = element("div");
    			div4.textContent = "age";
    			t7 = space$1();
    			input2 = element("input");
    			t8 = space$1();
    			div7 = element("div");
    			div6 = element("div");
    			div6.textContent = "rot";
    			t10 = space$1();
    			input3 = element("input");
    			t11 = space$1();
    			div9 = element("div");
    			div8 = element("div");
    			div8.textContent = "command";
    			t13 = space$1();
    			input4 = element("input");
    			t14 = space$1();
    			button0 = element("button");
    			button0.textContent = "write";
    			t16 = space$1();
    			div12 = element("div");
    			button1 = element("button");
    			button1.textContent = "clear";
    			t18 = space$1();
    			div11 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(div0, file$M, 40, 5, 951);
    			attr_dev(input0, "class", "w-full xl:w-10 p-1 text-black focus:outline-none");
    			add_location(input0, file$M, 41, 5, 971);
    			attr_dev(div1, "class", "mr-1");
    			add_location(div1, file$M, 39, 4, 926);
    			add_location(div2, file$M, 44, 5, 1098);
    			attr_dev(input1, "class", "w-full xl:w-10 p-1 text-black focus:outline-none");
    			add_location(input1, file$M, 45, 5, 1118);
    			attr_dev(div3, "class", "mx-1");
    			add_location(div3, file$M, 43, 4, 1073);
    			add_location(div4, file$M, 48, 5, 1246);
    			attr_dev(input2, "class", "w-full xl:w-10 p-1 text-black focus:outline-none");
    			add_location(input2, file$M, 49, 5, 1267);
    			attr_dev(div5, "class", "mx-1");
    			add_location(div5, file$M, 47, 4, 1221);
    			add_location(div6, file$M, 52, 5, 1395);
    			attr_dev(input3, "class", "w-full xl:w-10 p-1 text-black focus:outline-none");
    			add_location(input3, file$M, 53, 5, 1416);
    			attr_dev(div7, "class", "mx-1");
    			add_location(div7, file$M, 51, 4, 1370);
    			add_location(div8, file$M, 56, 5, 1544);
    			attr_dev(input4, "class", "w-full xl:w-24 p-1 text-black focus:outline-none");
    			add_location(input4, file$M, 57, 5, 1569);
    			attr_dev(div9, "class", "mx-1");
    			add_location(div9, file$M, 55, 4, 1519);
    			attr_dev(button0, "class", "p-1 px-2 mt-4 mx-1 xl:mt-0 bg-blue-600 border-none rounded focus:outline-none");
    			add_location(button0, file$M, 60, 4, 1677);
    			attr_dev(div10, "class", "flex flex-col xl:flex-row text-white xl:items-end p-2");
    			add_location(div10, file$M, 37, 3, 851);
    			attr_dev(button1, "class", "p-1 px-2 m-2 w-32 text-white rounded bg-highlight focus:outline-none border-none");
    			add_location(button1, file$M, 68, 3, 1870);
    			attr_dev(div11, "id", "data");
    			set_style(div11, "height", "300px");
    			attr_dev(div11, "class", "overflow-auto select-text flex-grow rounded font-mono bg-white m-2 p-2");
    			add_location(div11, file$M, 70, 3, 2005);
    			attr_dev(div12, "class", "flex flex-col h-full");
    			add_location(div12, file$M, 67, 2, 1831);
    			attr_dev(div13, "class", "flex m-2 p-2 h-full flex-col");
    			add_location(div13, file$M, 35, 1, 774);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div10);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*brc*/ ctx[1][0]);
    			append_dev(div10, t2);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			append_dev(div3, input1);
    			set_input_value(input1, /*brc*/ ctx[1][1]);
    			append_dev(div10, t5);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			append_dev(div5, input2);
    			set_input_value(input2, /*brc*/ ctx[1][2]);
    			append_dev(div10, t8);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div7, t10);
    			append_dev(div7, input3);
    			set_input_value(input3, /*brc*/ ctx[1][3]);
    			append_dev(div10, t11);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t13);
    			append_dev(div9, input4);
    			set_input_value(input4, /*command*/ ctx[2]);
    			append_dev(div10, t14);
    			append_dev(div10, button0);
    			append_dev(div13, t16);
    			append_dev(div13, div12);
    			append_dev(div12, button1);
    			append_dev(div12, t18);
    			append_dev(div12, div11);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div11, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[5]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[6]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[7]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[8]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[9]),
    					listen_dev(button0, "click", /*debug*/ ctx[3], false, false, false),
    					listen_dev(button1, "click", /*clear*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*brc*/ 2 && input0.value !== /*brc*/ ctx[1][0]) {
    				set_input_value(input0, /*brc*/ ctx[1][0]);
    			}

    			if (dirty & /*brc*/ 2 && input1.value !== /*brc*/ ctx[1][1]) {
    				set_input_value(input1, /*brc*/ ctx[1][1]);
    			}

    			if (dirty & /*brc*/ 2 && input2.value !== /*brc*/ ctx[1][2]) {
    				set_input_value(input2, /*brc*/ ctx[1][2]);
    			}

    			if (dirty & /*brc*/ 2 && input3.value !== /*brc*/ ctx[1][3]) {
    				set_input_value(input3, /*brc*/ ctx[1][3]);
    			}

    			if (dirty & /*command*/ 4 && input4.value !== /*command*/ ctx[2]) {
    				set_input_value(input4, /*command*/ ctx[2]);
    			}

    			if (dirty & /*input*/ 1) {
    				each_value = [.../*input*/ ctx[0]].reverse();
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$j(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$j(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div11, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Debug", slots, []);
    	let input = [];
    	let counter = 0;
    	let elem;

    	serialCommDebug.subscribe(store => {
    		$$invalidate(0, input = store);
    	});

    	let brc = [];
    	let command;

    	function debug() {
    		let data = GRID_PROTOCOL.encode_debugger(brc, command);
    		serialComm$1.write(data);
    	}

    	function clear() {
    		serialCommDebug.set([]);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Debug> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		brc[0] = this.value;
    		$$invalidate(1, brc);
    	}

    	function input1_input_handler() {
    		brc[1] = this.value;
    		$$invalidate(1, brc);
    	}

    	function input2_input_handler() {
    		brc[2] = this.value;
    		$$invalidate(1, brc);
    	}

    	function input3_input_handler() {
    		brc[3] = this.value;
    		$$invalidate(1, brc);
    	}

    	function input4_input_handler() {
    		command = this.value;
    		$$invalidate(2, command);
    	}

    	$$self.$capture_state = () => ({
    		Pancake,
    		spring,
    		onMount,
    		serialComm: serialComm$1,
    		serialCommDebug,
    		GRID_PROTOCOL,
    		localInputStore,
    		appSettings,
    		input,
    		counter,
    		elem,
    		brc,
    		command,
    		debug,
    		clear
    	});

    	$$self.$inject_state = $$props => {
    		if ("input" in $$props) $$invalidate(0, input = $$props.input);
    		if ("counter" in $$props) counter = $$props.counter;
    		if ("elem" in $$props) elem = $$props.elem;
    		if ("brc" in $$props) $$invalidate(1, brc = $$props.brc);
    		if ("command" in $$props) $$invalidate(2, command = $$props.command);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		input,
    		brc,
    		command,
    		debug,
    		clear,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler
    	];
    }

    class Debug$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Debug",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    const shell = require('electron').shell;

    function openInBrowser(url){
      shell.openExternal(url);
    }

    /* src\app\shared\updater\Updater.svelte generated by Svelte v3.35.0 */

    const { console: console_1$c } = globals;
    const file$L = "src\\app\\shared\\updater\\Updater.svelte";

    // (43:0) {#if updateNotification}
    function create_if_block$k(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let button;
    	let mounted;
    	let dispose;
    	let if_block0 = /*updateNotification*/ ctx[0] && /*updateError*/ ctx[3] == "" && !/*updateReady*/ ctx[1] && create_if_block_3$4(ctx);
    	let if_block1 = /*updateReady*/ ctx[1] && create_if_block_2$9(ctx);
    	let if_block2 = /*updateError*/ ctx[3] !== "" && create_if_block_1$c(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space$1();
    			if (if_block1) if_block1.c();
    			t1 = space$1();
    			if (if_block2) if_block2.c();
    			t2 = space$1();
    			button = element("button");
    			button.textContent = "Close";
    			attr_dev(button, "id", "close-button");
    			attr_dev(button, "class", "cursor-pointer relative px-2 py-1 mt-2 border-highlight rounded hover:bg-highlight-400 focus:outline-none");
    			add_location(button, file$L, 73, 8, 2791);
    			attr_dev(div0, "id", "notification");
    			set_style(div0, "width", "300px");
    			attr_dev(div0, "class", "p-4 rounded-lg svelte-11fgic9");
    			add_location(div0, file$L, 44, 6, 1229);
    			set_style(div1, "z-index", "9999");
    			attr_dev(div1, "class", "bg-primary fixed text-white shadow rounded-lg left-1 bottom-1");
    			add_location(div1, file$L, 43, 4, 1124);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);
    			append_dev(div0, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*updateNotification*/ ctx[0] && /*updateError*/ ctx[3] == "" && !/*updateReady*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$4(ctx);
    					if_block0.c();
    					if_block0.m(div0, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*updateReady*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$9(ctx);
    					if_block1.c();
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*updateError*/ ctx[3] !== "") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_1$c(ctx);
    					if_block2.c();
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(43:0) {#if updateNotification}",
    		ctx
    	});

    	return block;
    }

    // (47:8) {#if updateNotification && updateError == "" && !updateReady}
    function create_if_block_3$4(ctx) {
    	let p0;
    	let t1;
    	let p1;
    	let t2;
    	let t3;
    	let if_block1_anchor;
    	let if_block0 = /*updateProgress*/ ctx[2] !== 0 && /*updateProgress*/ ctx[2] !== undefined && create_if_block_5$2(ctx);
    	let if_block1 = /*updateProgress*/ ctx[2] !== 0 && /*updateProgress*/ ctx[2] !== undefined && create_if_block_4$3(ctx);

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "✨New update is available!";
    			t1 = space$1();
    			p1 = element("p");
    			t2 = text("Downloading in the background ");
    			if (if_block0) if_block0.c();
    			t3 = space$1();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$1();
    			attr_dev(p0, "class", "text-xl pb-2");
    			add_location(p0, file$L, 47, 10, 1392);
    			attr_dev(p1, "class", "py-2 loading svelte-11fgic9");
    			add_location(p1, file$L, 48, 10, 1458);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t2);
    			if (if_block0) if_block0.m(p1, null);
    			insert_dev(target, t3, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*updateProgress*/ ctx[2] !== 0 && /*updateProgress*/ ctx[2] !== undefined) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5$2(ctx);
    					if_block0.c();
    					if_block0.m(p1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*updateProgress*/ ctx[2] !== 0 && /*updateProgress*/ ctx[2] !== undefined) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4$3(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t3);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(47:8) {#if updateNotification && updateError == \\\"\\\" && !updateReady}",
    		ctx
    	});

    	return block;
    }

    // (49:64) {#if updateProgress !== 0 && updateProgress !== undefined}
    function create_if_block_5$2(ctx) {
    	let t_value = /*updateProgress*/ ctx[2] + "%" + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*updateProgress*/ 4 && t_value !== (t_value = /*updateProgress*/ ctx[2] + "%" + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(49:64) {#if updateProgress !== 0 && updateProgress !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (50:10) {#if updateProgress !== 0 && updateProgress !== undefined}
    function create_if_block_4$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			set_style(div, "width", /*updateProgress*/ ctx[2] + "%");
    			attr_dev(div, "class", "rounded my-2 h-1 flex bg-highlight");
    			add_location(div, file$L, 49, 68, 1671);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*updateProgress*/ 4) {
    				set_style(div, "width", /*updateProgress*/ ctx[2] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(50:10) {#if updateProgress !== 0 && updateProgress !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (53:8) {#if updateReady}
    function create_if_block_2$9(ctx) {
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let p2;
    	let t5;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "🥂Update Downloaded!";
    			t1 = space$1();
    			p1 = element("p");
    			p1.textContent = "It will be installed on restart.";
    			t3 = space$1();
    			p2 = element("p");
    			p2.textContent = "Restart now?";
    			t5 = space$1();
    			button = element("button");
    			button.textContent = "Restart";
    			attr_dev(p0, "class", "text-xl pb-2");
    			add_location(p0, file$L, 53, 10, 1843);
    			attr_dev(p1, "class", "py-2");
    			add_location(p1, file$L, 54, 10, 1903);
    			attr_dev(p2, "class", "py-2");
    			add_location(p2, file$L, 55, 10, 1967);
    			attr_dev(button, "class", "cursor-pointer relative px-2 py-1 mt-2 mr-2 border-highlight bg-highlight rounded hover:bg-highlight-400 focus:outline-none");
    			attr_dev(button, "id", "restart-button");
    			add_location(button, file$L, 56, 10, 2011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*restartApp*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(53:8) {#if updateReady}",
    		ctx
    	});

    	return block;
    }

    // (64:8) {#if updateError !== ""}
    function create_if_block_1$c(ctx) {
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "💥Error during self-update!";
    			t1 = space$1();
    			p1 = element("p");
    			p1.textContent = "Please update manually.";
    			t3 = space$1();
    			button = element("button");
    			button.textContent = "Latest Release";
    			attr_dev(p0, "class", "text-xl pb-2");
    			add_location(p0, file$L, 64, 10, 2326);
    			attr_dev(p1, "class", "py-2");
    			add_location(p1, file$L, 65, 10, 2393);
    			attr_dev(button, "class", "cursor-pointer relative px-2 py-1 mt-2 mr-2 border-highlight bg-highlight rounded hover:bg-highlight-400 focus:outline-none");
    			add_location(button, file$L, 66, 10, 2448);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(64:8) {#if updateError !== \\\"\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$N(ctx) {
    	let if_block_anchor;
    	let if_block = /*updateNotification*/ ctx[0] && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*updateNotification*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$k(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Updater", slots, []);
    	const { ipcRenderer, app } = require("electron");
    	const { getGlobal } = require("electron").remote;

    	// self update
    	let updateNotification = false;

    	let updateReady = false;
    	let updateProgress = 0;
    	let updateError = "";

    	function restartApp() {
    		ipcRenderer.send("restart_app");
    	}

    	ipcRenderer.on("update_available", () => {
    		ipcRenderer.removeAllListeners("update_available");
    		console.log("update available");
    		$$invalidate(0, updateNotification = true);
    	});

    	ipcRenderer.on("update_downloaded", () => {
    		ipcRenderer.removeAllListeners("update_downloaded");
    		console.log("update downloaded");
    		$$invalidate(1, updateReady = true);
    	});

    	ipcRenderer.on("update_progress", (event, arg) => {
    		$$invalidate(2, updateProgress = Math.floor(arg.percent));
    		console.log("update progress...", event, arg);
    	});

    	ipcRenderer.on("update_error", (event, arg) => {
    		$$invalidate(3, updateError = arg);
    		console.log("update error...", updateError);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$c.warn(`<Updater> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		openInBrowser("https://github.com/intechstudio/grid-editor/releases/latest");
    	};

    	const click_handler_1 = () => {
    		$$invalidate(0, updateNotification = false);
    	};

    	$$self.$capture_state = () => ({
    		ipcRenderer,
    		app,
    		getGlobal,
    		openInBrowser,
    		updateNotification,
    		updateReady,
    		updateProgress,
    		updateError,
    		restartApp
    	});

    	$$self.$inject_state = $$props => {
    		if ("updateNotification" in $$props) $$invalidate(0, updateNotification = $$props.updateNotification);
    		if ("updateReady" in $$props) $$invalidate(1, updateReady = $$props.updateReady);
    		if ("updateProgress" in $$props) $$invalidate(2, updateProgress = $$props.updateProgress);
    		if ("updateError" in $$props) $$invalidate(3, updateError = $$props.updateError);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		updateNotification,
    		updateReady,
    		updateProgress,
    		updateError,
    		restartApp,
    		click_handler,
    		click_handler_1
    	];
    }

    class Updater extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Updater",
    			options,
    			id: create_fragment$N.name
    		});
    	}
    }

    /* src\app\shared\helpers\Tour.svelte generated by Svelte v3.35.0 */
    const file$K = "src\\app\\shared\\helpers\\Tour.svelte";

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[9] = i;
    	return child_ctx;
    }

    // (112:0) {#if tourEnabled}
    function create_if_block$j(ctx) {
    	let div2;
    	let div1;
    	let button0;
    	let svg;
    	let path;
    	let t0;
    	let t1;
    	let div0;
    	let button1;
    	let t3;
    	let div2_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*tourJson*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$i(get_each_context$i(ctx, each_value, i));
    	}

    	let if_block = /*selected*/ ctx[0] !== /*tourJson*/ ctx[2].length - 1 && create_if_block_1$b(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			button0 = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space$1();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space$1();
    			div0 = element("div");
    			button1 = element("button");
    			button1.textContent = "Previous";
    			t3 = space$1();
    			if (if_block) if_block.c();
    			attr_dev(path, "d", "m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0");
    			add_location(path, file$K, 117, 97, 4375);
    			set_style(svg, "fill", "white");
    			attr_dev(svg, "viewBox", "0 0 329.26933 329");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$K, 117, 8, 4286);
    			attr_dev(button0, "class", "absolute top-1 focus:outline-none bg-none border-none right-1 w-4 h-4");
    			add_location(button0, file$K, 116, 6, 4153);
    			attr_dev(button1, "class", "hover:bg-secondary text-white px-2 py-1 rounded focus:outline-none border-secondary");
    			add_location(button1, file$K, 126, 8, 5366);
    			set_style(div0, "z-index", "9000");
    			attr_dev(div0, "class", "pt-2 relative flex w-full justify-between");
    			add_location(div0, file$K, 125, 6, 5280);
    			set_style(div1, "z-index", "9000");
    			set_style(div1, "width", "600px");
    			attr_dev(div1, "class", "relative inline-block bg-black rounded-lg p-4");
    			add_location(div1, file$K, 115, 4, 4053);
    			attr_dev(div2, "id", "tour-container");
    			attr_dev(div2, "class", "absolute w-full bottom-1 flex justify-center text-white");
    			add_location(div2, file$K, 113, 2, 3936);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, button1);
    			append_dev(div0, t3);
    			if (if_block) if_block.m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(button1, "click", /*decrementSelected*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tourJson, selected*/ 5) {
    				each_value = /*tourJson*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$i(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$i(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t1);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*selected*/ ctx[0] !== /*tourJson*/ ctx[2].length - 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$b(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, true);
    				div2_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, false);
    			div2_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    			if (detaching && div2_transition) div2_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(112:0) {#if tourEnabled}",
    		ctx
    	});

    	return block;
    }

    // (121:8) {#if index == selected}
    function create_if_block_2$8(ctx) {
    	let h1;
    	let t0_value = /*tour*/ ctx[7].title + "";
    	let t0;
    	let t1;
    	let p;
    	let raw_value = /*tour*/ ctx[7].text + "";

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space$1();
    			p = element("p");
    			attr_dev(h1, "class", "text-xl font-bold");
    			add_location(h1, file$K, 121, 10, 5146);
    			attr_dev(p, "class", "py-2");
    			add_location(p, file$K, 122, 10, 5205);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			p.innerHTML = raw_value;
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(121:8) {#if index == selected}",
    		ctx
    	});

    	return block;
    }

    // (120:6) {#each tourJson as tour, index}
    function create_each_block$i(ctx) {
    	let if_block_anchor;
    	let if_block = /*index*/ ctx[9] == /*selected*/ ctx[0] && create_if_block_2$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*index*/ ctx[9] == /*selected*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$8(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(120:6) {#each tourJson as tour, index}",
    		ctx
    	});

    	return block;
    }

    // (128:8) {#if selected !== tourJson.length-1}
    function create_if_block_1$b(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Next";
    			attr_dev(button, "class", "bg-highlight-400 hover:bg-highlight px-2 py-1 rounded focus:outline-none border-none font-semibold");
    			add_location(button, file$K, 127, 44, 5558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*incrementSelected*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(128:8) {#if selected !== tourJson.length-1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$M(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*tourEnabled*/ ctx[1] && create_if_block$j(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*tourEnabled*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*tourEnabled*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$j(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let $tour;
    	validate_store(tour, "tour");
    	component_subscribe($$self, tour, $$value => $$invalidate(6, $tour = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tour", slots, []);
    	let selected = 0;
    	let tourEnabled = undefined;

    	const tourJson = [
    		{
    			title: "Welcome!",
    			section: "",
    			text: "This demo application serves the purpose to give a look and feel about Grid and Grid Editor features."
    		},
    		{
    			title: "Add a module!",
    			section: "DragModule",
    			text: `
        <p>Before you can use global and local settings in Grid Editor, a module has to be added.</p>
        <p class="pt-2">1. Open the <i class="pr-1 text-important">Virtual Modules</i> panel.</p>
        <p class="py-1">2. Drag a module and drop it into the highlighted area.</p>
      `
    		},
    		{
    			title: "Local Settings",
    			section: "LocalSettings",
    			text: `
        <p>Here you can adjust and configure functions assigned to a module on a per-element basis.</p>
        <p class="pt-2">1. Close the <i class="pr-1 text-red-500">Virtual Modules</i> panel.</p>
        <p class="pt-1">2. Click on any of the control elements.</p>
        <p class="py-1">3. <i class="pr-1 text-important">Local Settings</i> panel is now populated with settings.</p>
        <p class="">
          A <b>Control Element</b> refers to a specific potentiometer, button, encoder or fader on your Grid module. 
          Each <b>Control Element</b> has a number assigned to it and you can also see the currently selected <b>Control Element</b> highlighted in the layout.
        </p>
      `
    		},
    		{
    			title: "Events",
    			section: "Events",
    			text: `
        <p>
          Events describe every physical interaction that a given Control Element can recognize.
          For example pressing down (DOWN) or releasing a button (UP) are two different inputs.
        </p>
      `
    		},
    		{
    			title: "Actions",
    			section: "Actions",
    			text: `
        <p>Actions describe functions that you can assign to inputs on a per-Element, per-Event basis.</p>
        <p class="pt-1">Click on the select menu to see possible actions for the element you selected.</p>
      `
    		},
    		{
    			title: "Global Settings",
    			section: "GlobalSettings",
    			text: `
        <p>
          Global Settings panel reflects changes made on all the connected control modules as a control surface. 
          As of today, Bank settings are the global settings.
        </p>
        <p class="pt-1">
          The term Bank, refers to an independently customisable mode of a given Grid module. 
          At default you have four (4) Banks available to you on each Grid module. 
          Banks store their settings independently from each other, so you can configure multiple different setups and switch between them on the fly.  
        </p>
      `
    		},
    		{
    			title: "Plans for the future...",
    			section: "end",
    			text: `
        <p>
         Grid Editor is a cross platform software for Mac OS, Windows and Linux, which can be downloaded from our GitHub page. 
         As Chrome does support experimentally serial devices, this browser version of the Editor may be a full featured application in the future.
         For now, it's a demo to give you a bit of insight what can be achieved here.
        </p>
        <p class="pt-1">
          Thank you for giving a spin at Grid Editor demo!
        </p>
      `
    		}
    	];

    	function incrementSelected() {
    		if (selected < tourJson.length - 1) {
    			$$invalidate(0, selected = selected + 1);
    			set_store_value(tour, $tour.selectedName = tourJson[selected].section, $tour);
    		}
    	}

    	function decrementSelected() {
    		if (selected !== 0) {
    			$$invalidate(0, selected = selected - 1);
    			set_store_value(tour, $tour.selectedName = tourJson[selected].section, $tour);
    		}
    	}

    	onMount(() => {
    		$$invalidate(1, tourEnabled = true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tour> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$$invalidate(1, tourEnabled = false);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		fade,
    		tour,
    		selected,
    		tourEnabled,
    		tourJson,
    		incrementSelected,
    		decrementSelected,
    		$tour
    	});

    	$$self.$inject_state = $$props => {
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("tourEnabled" in $$props) $$invalidate(1, tourEnabled = $$props.tourEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selected,
    		tourEnabled,
    		tourJson,
    		incrementSelected,
    		decrementSelected,
    		click_handler
    	];
    }

    class Tour extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tour",
    			options,
    			id: create_fragment$M.name
    		});
    	}
    }

    /* src\app\shared\firmware-check\FirmwareCheck.svelte generated by Svelte v3.35.0 */
    const file$J = "src\\app\\shared\\firmware-check\\FirmwareCheck.svelte";

    // (38:0) {#if fwMismatch}
    function create_if_block$i(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span2;
    	let t2;
    	let span1;
    	let t3;
    	let t4;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Oops, firmware mismatch is detected!";
    			t1 = space$1();
    			span2 = element("span");
    			t2 = text("Once you updated the firmware hit ");
    			span1 = element("span");
    			t3 = text(" to reload app!");
    			t4 = space$1();
    			button = element("button");
    			button.textContent = "Update";
    			attr_dev(span0, "class", "mx-2");
    			add_location(span0, file$J, 39, 4, 902);
    			attr_dev(span1, "class", "font-mono text-sm mx-2 bg-white text-gray-700 px-2 py-1 rounded");
    			add_location(span1, file$J, 40, 57, 1023);
    			attr_dev(span2, "class", "mx-2");
    			add_location(span2, file$J, 40, 4, 970);
    			attr_dev(button, "class", "bg-red-700 ml-2 font-medium text-white py-1 px-2 border-none hover:bg-red-800 focus:outline-none rounded");
    			add_location(button, file$J, 41, 4, 1148);
    			attr_dev(div, "class", "w-full bg-red-500 text-white justify-center flex items-center text-center p-4");
    			add_location(div, file$J, 38, 2, 804);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(div, t1);
    			append_dev(div, span2);
    			append_dev(span2, t2);
    			append_dev(span2, span1);
    			span1.innerHTML = /*text*/ ctx[1];
    			append_dev(span2, t3);
    			append_dev(div, t4);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 2) span1.innerHTML = /*text*/ ctx[1];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(38:0) {#if fwMismatch}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$L(ctx) {
    	let if_block_anchor;
    	let if_block = /*fwMismatch*/ ctx[0] && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*fwMismatch*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$i(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FirmwareCheck", slots, []);
    	let fwMismatch = false;
    	let fwVersion;

    	runtime$1.subscribe(store => {
    		store.forEach(gridController => {
    			if (JSON.stringify(gridController.fwVersion) !== JSON.stringify(fwVersion)) {
    				$$invalidate(0, fwMismatch = true);
    			}
    		});
    	});

    	appSettings.subscribe(store => {
    		fwVersion = store.version;
    	});

    	let text = "";

    	onMount(() => {
    		if (process.platform == "darwin") {
    			$$invalidate(1, text = "Command + Shift + R");
    		} else {
    			$$invalidate(1, text = "Ctrl + Shift + R");
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FirmwareCheck> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		openInBrowser("https://github.com/IntechStudioDev/grid-fw/releases/latest");
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		appSettings,
    		runtime: runtime$1,
    		openInBrowser,
    		fwMismatch,
    		fwVersion,
    		text
    	});

    	$$self.$inject_state = $$props => {
    		if ("fwMismatch" in $$props) $$invalidate(0, fwMismatch = $$props.fwMismatch);
    		if ("fwVersion" in $$props) fwVersion = $$props.fwVersion;
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [fwMismatch, text, click_handler];
    }

    class FirmwareCheck extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FirmwareCheck",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    function select(node, [moduleId, selectedDisplay]){

      appSettings.subscribe((store)=> {
        if(store.selectedDisplay == 'settings'){
          node.addEventListener('mousedown', handleMousedown);
        } else {
          node.removeEventListener('mousedown', handleMousedown);
        }
      });

      function handleMousedown(e) {
        //e.preventDefault();
        
        if(e.target.ownerSVGElement){
          
          const controlNumber = e.target.ownerSVGElement.dataset.controlNumber;


          if(controlNumber !== undefined){
            
            const dx = moduleId.split(';')[0].split(':').pop();
            const dy = moduleId.split(';')[1].split(':').pop();

            localInputStore.update((store)=>{
              store.id = moduleId,
              store.dx = +dx,
              store.dy = +dy;
              store.elementNumber = +controlNumber;
              return store;
            });
      
            node.dispatchEvent(new CustomEvent('selected-element', {
              detail: { controlNumber:  [e.target.parentElement.dataset.controlNumber]}
            }));
      
          }
        }
        
      }
      
    	return {
    		destroy() {
    			node.removeEventListener('mousedown', handleMousedown);
    		}
      }
    }

    function grab(node){
      
      let x;
      let y;

      function handleMousedown(event) {
    		x = event.clientX;
    		y = event.clientY;

    		node.dispatchEvent(new CustomEvent('grabstart', {
    			detail: { x, y }
    		}));

    		window.addEventListener('mousemove', handleMousemove);
    		window.addEventListener('mouseup', handleMouseup);
    	}

    	function handleMousemove(event) {
    		const dx = event.clientX - x;
    		const dy = event.clientY - y;
    		x = event.clientX;
    		y = event.clientY;

    		node.dispatchEvent(new CustomEvent('grabmove', {
    			detail: { x, y, dx, dy }
    		}));
    	}

    	function handleMouseup(event) {
    		x = event.clientX;
    		y = event.clientY;

    		node.dispatchEvent(new CustomEvent('grabend', {
    			detail: { x, y }
    		}));

    		window.removeEventListener('mousemove', handleMousemove);
    		window.removeEventListener('mouseup', handleMouseup);
    	}

    	node.addEventListener('mousedown', handleMousedown);

    	return {
    		destroy() {
    			node.removeEventListener('mousedown', handleMousedown);
    		}
    	};

    }

    /* src\app\core\grid-modules\elements\Potentiometer.svelte generated by Svelte v3.35.0 */
    const file$I = "src\\app\\core\\grid-modules\\elements\\Potentiometer.svelte";

    function create_fragment$K(ctx) {
    	let svg;
    	let path0;
    	let g;
    	let path1;
    	let path2;
    	let filter;
    	let feGaussianBlur;
    	let feOffset;
    	let feComponentTransfer;
    	let feFuncA;
    	let feMerge;
    	let feMergeNode0;
    	let feMergeNode1;
    	let svg_width_value;
    	let svg_height_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			g = svg_element("g");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			filter = svg_element("filter");
    			feGaussianBlur = svg_element("feGaussianBlur");
    			feOffset = svg_element("feOffset");
    			feComponentTransfer = svg_element("feComponentTransfer");
    			feFuncA = svg_element("feFuncA");
    			feMerge = svg_element("feMerge");
    			feMergeNode0 = svg_element("feMergeNode");
    			feMergeNode1 = svg_element("feMergeNode");
    			attr_dev(path0, "d", "M29.5 15C29.5 23.0082 23.0081 29.5 15 29.5C6.99187 29.5 0.5 23.0082 0.5 15C0.5 6.9919 6.99187 0.500031 15 0.500031C23.0081 0.500031 29.5 6.9919 29.5 15Z");
    			attr_dev(path0, "fill", "#323232");
    			attr_dev(path0, "stroke", "#2B2B2B");
    			add_location(path0, file$I, 54, 4, 1219);
    			attr_dev(path1, "d", "M27 15C27 21.6274 21.6274 27 15 27C8.37258 27 3 21.6274 3 15C3 8.37258 8.37258 3 15 3C21.6274 3 27 8.37258 27 15Z");
    			attr_dev(path1, "fill", "#373737");
    			add_location(path1, file$I, 56, 6, 1506);
    			attr_dev(path2, "d", "M4.84618 15H12.1863");
    			attr_dev(path2, "stroke", "white");
    			attr_dev(path2, "stroke-width", "2");
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			add_location(path2, file$I, 57, 6, 1655);
    			set_style(g, "transform", "rotate(" + (-50 + /*rotation*/ ctx[2]) + "deg)");
    			set_style(g, "transform-origin", "center");
    			add_location(g, file$I, 55, 4, 1422);
    			attr_dev(feGaussianBlur, "in", "SourceAlpha");
    			attr_dev(feGaussianBlur, "stdDeviation", "3");
    			add_location(feGaussianBlur, file$I, 60, 6, 1837);
    			attr_dev(feOffset, "dx", "2");
    			attr_dev(feOffset, "dy", "4");
    			attr_dev(feOffset, "result", "offsetblur");
    			add_location(feOffset, file$I, 61, 6, 1938);
    			attr_dev(feFuncA, "type", "linear");
    			attr_dev(feFuncA, "slope", "0.5");
    			add_location(feFuncA, file$I, 63, 8, 2050);
    			add_location(feComponentTransfer, file$I, 62, 6, 2019);
    			add_location(feMergeNode0, file$I, 66, 8, 2188);
    			attr_dev(feMergeNode1, "in", "SourceGraphic");
    			add_location(feMergeNode1, file$I, 67, 8, 2260);
    			add_location(feMerge, file$I, 65, 6, 2168);
    			attr_dev(filter, "id", "dropshadow");
    			attr_dev(filter, "y", "-40%");
    			attr_dev(filter, "height", "200%");
    			add_location(filter, file$I, 59, 4, 1782);
    			set_style(svg, "filter", "url(#dropshadow)");
    			attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[0] * knobSize + "px");
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[0] * knobSize + "px");
    			attr_dev(svg, "viewBox", "0 0 30 30");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$I, 42, 0, 878);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, g);
    			append_dev(g, path1);
    			append_dev(g, path2);
    			append_dev(svg, filter);
    			append_dev(filter, feGaussianBlur);
    			append_dev(filter, feOffset);
    			append_dev(filter, feComponentTransfer);
    			append_dev(feComponentTransfer, feFuncA);
    			append_dev(filter, feMerge);
    			append_dev(feMerge, feMergeNode0);
    			append_dev(feMerge, feMergeNode1);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(grab.call(null, svg)),
    					listen_dev(svg, "grabstart", /*handleGrabStart*/ ctx[3], false, false, false),
    					listen_dev(svg, "grabmove", /*handleGrabMove*/ ctx[4], false, false, false),
    					listen_dev(svg, "grabend", /*handleGrabEnd*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*rotation*/ 4) {
    				set_style(g, "transform", "rotate(" + (-50 + /*rotation*/ ctx[2]) + "deg)");
    			}

    			if (dirty & /*elementNumber*/ 2) {
    				attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1 && svg_width_value !== (svg_width_value = /*size*/ ctx[0] * knobSize + "px")) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 1 && svg_height_value !== (svg_height_value = /*size*/ ctx[0] * knobSize + "px")) {
    				attr_dev(svg, "height", svg_height_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const knobSize = 13;

    function instance$K($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Potentiometer", slots, []);
    	const dispatch = createEventDispatcher();
    	let { size = 1 } = $$props;
    	let { elementNumber } = $$props;
    	let { eventInput } = $$props;
    	let startValue = 0;
    	let rotation = 0;
    	let initRotation = 0;
    	const midiToDeg = 280 / 127;

    	function handleGrabStart(event) {
    		startValue = event.detail.y;
    	}

    	function handleGrabMove(event) {
    		let value = startValue + (initRotation / midiToDeg - event.detail.y);

    		if (0 <= value && value <= 127) {
    			$$invalidate(2, rotation = Math.round(value * midiToDeg));
    			dispatch("user-interaction", value);
    		}
    	}

    	function handleGrabEnd(event) {
    		initRotation = rotation;
    	}

    	const writable_props = ["size", "elementNumber", "eventInput"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Potentiometer> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    		if ("eventInput" in $$props) $$invalidate(6, eventInput = $$props.eventInput);
    	};

    	$$self.$capture_state = () => ({
    		grab,
    		createEventDispatcher,
    		dispatch,
    		size,
    		elementNumber,
    		eventInput,
    		knobSize,
    		startValue,
    		rotation,
    		initRotation,
    		midiToDeg,
    		handleGrabStart,
    		handleGrabMove,
    		handleGrabEnd
    	});

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    		if ("eventInput" in $$props) $$invalidate(6, eventInput = $$props.eventInput);
    		if ("startValue" in $$props) startValue = $$props.startValue;
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("initRotation" in $$props) initRotation = $$props.initRotation;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*eventInput*/ 64) {
    			if (eventInput) {
    				$$invalidate(2, rotation = Math.round(eventInput * midiToDeg));
    			}
    		}
    	};

    	return [
    		size,
    		elementNumber,
    		rotation,
    		handleGrabStart,
    		handleGrabMove,
    		handleGrabEnd,
    		eventInput
    	];
    }

    class Potentiometer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, { size: 0, elementNumber: 1, eventInput: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Potentiometer",
    			options,
    			id: create_fragment$K.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*elementNumber*/ ctx[1] === undefined && !("elementNumber" in props)) {
    			console.warn("<Potentiometer> was created without expected prop 'elementNumber'");
    		}

    		if (/*eventInput*/ ctx[6] === undefined && !("eventInput" in props)) {
    			console.warn("<Potentiometer> was created without expected prop 'eventInput'");
    		}
    	}

    	get size() {
    		throw new Error("<Potentiometer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Potentiometer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementNumber() {
    		throw new Error("<Potentiometer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementNumber(value) {
    		throw new Error("<Potentiometer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInput() {
    		throw new Error("<Potentiometer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInput(value) {
    		throw new Error("<Potentiometer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\elements\Led.svelte generated by Svelte v3.35.0 */

    const file$H = "src\\app\\core\\grid-modules\\elements\\Led.svelte";

    function create_fragment$J(ctx) {
    	let svg;
    	let circle0;
    	let circle0_fill_value;
    	let g;
    	let circle1;
    	let circle2;
    	let circle2_fill_value;
    	let defs;
    	let filter;
    	let feFlood;
    	let feBlend;
    	let feGaussianBlur;
    	let filter_width_value;
    	let filter_height_value;
    	let svg_width_value;
    	let svg_height_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle0 = svg_element("circle");
    			g = svg_element("g");
    			circle1 = svg_element("circle");
    			circle2 = svg_element("circle");
    			defs = svg_element("defs");
    			filter = svg_element("filter");
    			feFlood = svg_element("feFlood");
    			feBlend = svg_element("feBlend");
    			feGaussianBlur = svg_element("feGaussianBlur");
    			attr_dev(circle0, "cx", "7");
    			attr_dev(circle0, "cy", "7");
    			attr_dev(circle0, "r", "5");
    			attr_dev(circle0, "fill", circle0_fill_value = "rgba(" + /*rgb*/ ctx[2][0] + "," + /*rgb*/ ctx[2][1] + "," + /*rgb*/ ctx[2][2] + ", " + /*alpha*/ ctx[1] + ")");
    			add_location(circle0, file$H, 26, 2, 526);
    			attr_dev(circle1, "cx", "7");
    			attr_dev(circle1, "cy", "7");
    			attr_dev(circle1, "r", "4.5");
    			attr_dev(circle1, "stroke", "white");
    			add_location(circle1, file$H, 28, 4, 642);
    			attr_dev(g, "filter", "url(#filter0_f)");
    			add_location(g, file$H, 27, 2, 608);
    			attr_dev(circle2, "cx", "7");
    			attr_dev(circle2, "cy", "7");
    			attr_dev(circle2, "r", "4.5");
    			attr_dev(circle2, "fill", circle2_fill_value = "rgba(" + /*rgb*/ ctx[2][0] + "," + /*rgb*/ ctx[2][1] + "," + /*rgb*/ ctx[2][2] + ", " + /*alpha*/ ctx[1] + ")");
    			add_location(circle2, file$H, 30, 2, 700);
    			attr_dev(feFlood, "flood-opacity", "0");
    			attr_dev(feFlood, "result", "BackgroundImageFix");
    			add_location(feFlood, file$H, 33, 6, 960);
    			attr_dev(feBlend, "mode", "normal");
    			attr_dev(feBlend, "in", "SourceGraphic");
    			attr_dev(feBlend, "in2", "BackgroundImageFix");
    			attr_dev(feBlend, "result", "shape");
    			add_location(feBlend, file$H, 34, 6, 1024);
    			attr_dev(feGaussianBlur, "stdDeviation", "1");
    			attr_dev(feGaussianBlur, "result", "effect1_foregroundBlur");
    			add_location(feGaussianBlur, file$H, 35, 6, 1115);
    			attr_dev(filter, "id", "filter0_f");
    			attr_dev(filter, "x", "10%");
    			attr_dev(filter, "y", "10%");
    			attr_dev(filter, "width", filter_width_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px");
    			attr_dev(filter, "height", filter_height_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px");
    			attr_dev(filter, "filterUnits", "userSpaceOnUse");
    			attr_dev(filter, "color-interpolation-filters", "sRGB");
    			add_location(filter, file$H, 32, 4, 796);
    			add_location(defs, file$H, 31, 2, 784);
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px");
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px");
    			attr_dev(svg, "viewBox", "0 0 14 14");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$H, 25, 0, 396);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle0);
    			append_dev(svg, g);
    			append_dev(g, circle1);
    			append_dev(svg, circle2);
    			append_dev(svg, defs);
    			append_dev(defs, filter);
    			append_dev(filter, feFlood);
    			append_dev(filter, feBlend);
    			append_dev(filter, feGaussianBlur);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*rgb, alpha*/ 6 && circle0_fill_value !== (circle0_fill_value = "rgba(" + /*rgb*/ ctx[2][0] + "," + /*rgb*/ ctx[2][1] + "," + /*rgb*/ ctx[2][2] + ", " + /*alpha*/ ctx[1] + ")")) {
    				attr_dev(circle0, "fill", circle0_fill_value);
    			}

    			if (dirty & /*rgb, alpha*/ 6 && circle2_fill_value !== (circle2_fill_value = "rgba(" + /*rgb*/ ctx[2][0] + "," + /*rgb*/ ctx[2][1] + "," + /*rgb*/ ctx[2][2] + ", " + /*alpha*/ ctx[1] + ")")) {
    				attr_dev(circle2, "fill", circle2_fill_value);
    			}

    			if (dirty & /*size*/ 1 && filter_width_value !== (filter_width_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px")) {
    				attr_dev(filter, "width", filter_width_value);
    			}

    			if (dirty & /*size*/ 1 && filter_height_value !== (filter_height_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px")) {
    				attr_dev(filter, "height", filter_height_value);
    			}

    			if (dirty & /*size*/ 1 && svg_width_value !== (svg_width_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px")) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 1 && svg_height_value !== (svg_height_value = /*size*/ ctx[0] * /*ledSize*/ ctx[3] + "px")) {
    				attr_dev(svg, "height", svg_height_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Led", slots, []);
    	let { size = 1 } = $$props;
    	let { eventInput = 0 } = $$props;
    	let { userInput } = $$props;
    	let { color = [255, 255, 0] } = $$props;
    	let ledSize = 6;
    	let alpha;
    	let rgb;
    	const writable_props = ["size", "eventInput", "userInput", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Led> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("eventInput" in $$props) $$invalidate(4, eventInput = $$props.eventInput);
    		if ("userInput" in $$props) $$invalidate(5, userInput = $$props.userInput);
    		if ("color" in $$props) $$invalidate(6, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		size,
    		eventInput,
    		userInput,
    		color,
    		ledSize,
    		alpha,
    		rgb
    	});

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("eventInput" in $$props) $$invalidate(4, eventInput = $$props.eventInput);
    		if ("userInput" in $$props) $$invalidate(5, userInput = $$props.userInput);
    		if ("color" in $$props) $$invalidate(6, color = $$props.color);
    		if ("ledSize" in $$props) $$invalidate(3, ledSize = $$props.ledSize);
    		if ("alpha" in $$props) $$invalidate(1, alpha = $$props.alpha);
    		if ("rgb" in $$props) $$invalidate(2, rgb = $$props.rgb);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color*/ 64) {
    			{
    				color
    				? $$invalidate(2, rgb = color)
    				: $$invalidate(2, rgb = [255, 255, 0]);
    			}
    		}

    		if ($$self.$$.dirty & /*userInput*/ 32) {
    			if (userInput !== undefined) {
    				$$invalidate(1, alpha = userInput / 127);
    			}
    		}

    		if ($$self.$$.dirty & /*eventInput*/ 16) {
    			if (eventInput !== undefined) {
    				$$invalidate(1, alpha = eventInput / 127);
    			}
    		}
    	};

    	return [size, alpha, rgb, ledSize, eventInput, userInput, color];
    }

    class Led extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$J, create_fragment$J, safe_not_equal, {
    			size: 0,
    			eventInput: 4,
    			userInput: 5,
    			color: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Led",
    			options,
    			id: create_fragment$J.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userInput*/ ctx[5] === undefined && !("userInput" in props)) {
    			console.warn("<Led> was created without expected prop 'userInput'");
    		}
    	}

    	get size() {
    		throw new Error("<Led>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Led>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInput() {
    		throw new Error("<Led>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInput(value) {
    		throw new Error("<Led>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userInput() {
    		throw new Error("<Led>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userInput(value) {
    		throw new Error("<Led>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Led>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Led>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\modules\PO16.svelte generated by Svelte v3.35.0 */
    const file$G = "src\\app\\core\\grid-modules\\modules\\PO16.svelte";

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (64:8) {#each control_block(4) as element}
    function create_each_block_1$9(ctx) {
    	let div;
    	let led;
    	let t;
    	let potentiometer;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[10](/*block*/ ctx[14] * 4 + /*element*/ ctx[17], /*selectedElement*/ ctx[1].elementNumber),
    				userInput: /*valueChange*/ ctx[5][/*block*/ ctx[14] * 4 + /*element*/ ctx[17]],
    				size: /*$appSettings*/ ctx[8].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	function user_interaction_handler(...args) {
    		return /*user_interaction_handler*/ ctx[13](/*block*/ ctx[14], /*element*/ ctx[17], ...args);
    	}

    	potentiometer = new Potentiometer({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[10](/*block*/ ctx[14] * 4 + /*element*/ ctx[17], /*selectedElement*/ ctx[1].elementNumber),
    				elementNumber: /*block*/ ctx[14] * 4 + /*element*/ ctx[17],
    				size: /*$appSettings*/ ctx[8].size
    			},
    			$$inline: true
    		});

    	potentiometer.$on("user-interaction", user_interaction_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t = space$1();
    			create_component(potentiometer.$$.fragment);
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[6] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[7] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[14] * 4 + /*element*/ ctx[17]);
    			add_location(div, file$G, 64, 10, 1776);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t);
    			mount_component(potentiometer, div, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[10](/*block*/ ctx[14] * 4 + /*element*/ ctx[17], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*valueChange*/ 32) led_changes.userInput = /*valueChange*/ ctx[5][/*block*/ ctx[14] * 4 + /*element*/ ctx[17]];
    			if (dirty & /*$appSettings*/ 256) led_changes.size = /*$appSettings*/ ctx[8].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const potentiometer_changes = {};
    			if (dirty & /*selectedElement*/ 2) potentiometer_changes.eventInput = /*handleEventParamChange*/ ctx[10](/*block*/ ctx[14] * 4 + /*element*/ ctx[17], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*$appSettings*/ 256) potentiometer_changes.size = /*$appSettings*/ ctx[8].size;
    			potentiometer.$set(potentiometer_changes);

    			if (dirty & /*dx, selectedElement, dy, control_block*/ 706) {
    				toggle_class(div, "active-element", /*dx*/ ctx[6] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[7] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[14] * 4 + /*element*/ ctx[17]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(potentiometer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(potentiometer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(potentiometer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$9.name,
    		type: "each",
    		source: "(64:8) {#each control_block(4) as element}",
    		ctx
    	});

    	return block;
    }

    // (62:4) {#each control_block(4) as block }
    function create_each_block$h(ctx) {
    	let div;
    	let t;
    	let current;
    	let each_value_1 = /*control_block*/ ctx[9](4);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$9(get_each_context_1$9(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "control-row");
    			set_style(div, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			set_style(div, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			set_style(div, "--control-row-mb", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			add_location(div, file$G, 62, 6, 1525);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dx, selectedElement, dy, control_block, handleEventParamChange, $appSettings, valueChange, color*/ 2034) {
    				each_value_1 = /*control_block*/ ctx[9](4);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$9(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$9(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, t);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div, "--control-row-mb", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(62:4) {#each control_block(4) as block }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let select_action;
    	let div1_draggable_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
    	let each_value = /*control_block*/ ctx[9](4);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t = space$1();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "module-dimensions ");
    			set_style(div0, "--module-size", /*moduleWidth*/ ctx[3] + "px");
    			toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[8].layoutMode);
    			add_location(div0, file$G, 54, 2, 1300);
    			attr_dev(div1, "id", /*id*/ ctx[0]);
    			attr_dev(div1, "draggable", div1_draggable_value = /*$appSettings*/ ctx[8].layoutMode);
    			set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[2] + "deg") + ")");
    			add_location(div1, file$G, 50, 0, 1182);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div1, t);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(select_action = select.call(null, div0, [/*id*/ ctx[0]]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2048) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
    				}
    			}

    			if (dirty & /*$appSettings, control_block, dx, selectedElement, dy, handleEventParamChange, valueChange, color*/ 2034) {
    				each_value = /*control_block*/ ctx[9](4);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*moduleWidth*/ 8) {
    				set_style(div0, "--module-size", /*moduleWidth*/ ctx[3] + "px");
    			}

    			if (select_action && is_function(select_action.update) && dirty & /*id*/ 1) select_action.update.call(null, [/*id*/ ctx[0]]);

    			if (dirty & /*$appSettings*/ 256) {
    				toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[8].layoutMode);
    			}

    			if (!current || dirty & /*id*/ 1) {
    				attr_dev(div1, "id", /*id*/ ctx[0]);
    			}

    			if (!current || dirty & /*$appSettings*/ 256 && div1_draggable_value !== (div1_draggable_value = /*$appSettings*/ ctx[8].layoutMode)) {
    				attr_dev(div1, "draggable", div1_draggable_value);
    			}

    			if (!current || dirty & /*rotation*/ 4) {
    				set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[2] + "deg") + ")");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(8, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PO16", slots, ['default']);
    	let { id = "PO16" } = $$props;
    	let { selectedElement = {} } = $$props;
    	let { rotation = 0 } = $$props;
    	let { moduleWidth } = $$props;
    	let { color } = $$props;
    	let valueChange = [];
    	let dx, dy;

    	const control_block = number => {
    		let array = [];

    		for (let i = 0; i < number; i++) {
    			array.push(i);
    		}

    		return array;
    	};

    	function handleEventParamChange(static_elementNumber, input_elementNumber) {
    		if (static_elementNumber == input_elementNumber) {
    			if (dx == selectedElement.dx && dy == selectedElement.dy) {
    				return selectedElement.eventParam;
    			}
    		}
    	}

    	onMount(() => {
    		if (id !== undefined && id.length > 4) {
    			$$invalidate(6, dx = +id.split(";")[0].split(":").pop());
    			$$invalidate(7, dy = +id.split(";")[1].split(":").pop());
    		}
    	});

    	const writable_props = ["id", "selectedElement", "rotation", "moduleWidth", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PO16> was created with unknown prop '${key}'`);
    	});

    	const user_interaction_handler = (block, element, e) => {
    		$$invalidate(5, valueChange[block * 4 + element] = e.detail, valueChange);
    	};

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("moduleWidth" in $$props) $$invalidate(3, moduleWidth = $$props.moduleWidth);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("$$scope" in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localInputStore,
    		appSettings,
    		select,
    		Potentiometer,
    		Led,
    		id,
    		selectedElement,
    		rotation,
    		moduleWidth,
    		color,
    		valueChange,
    		dx,
    		dy,
    		control_block,
    		handleEventParamChange,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("moduleWidth" in $$props) $$invalidate(3, moduleWidth = $$props.moduleWidth);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("valueChange" in $$props) $$invalidate(5, valueChange = $$props.valueChange);
    		if ("dx" in $$props) $$invalidate(6, dx = $$props.dx);
    		if ("dy" in $$props) $$invalidate(7, dy = $$props.dy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		id,
    		selectedElement,
    		rotation,
    		moduleWidth,
    		color,
    		valueChange,
    		dx,
    		dy,
    		$appSettings,
    		control_block,
    		handleEventParamChange,
    		$$scope,
    		slots,
    		user_interaction_handler
    	];
    }

    class PO16 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
    			id: 0,
    			selectedElement: 1,
    			rotation: 2,
    			moduleWidth: 3,
    			color: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PO16",
    			options,
    			id: create_fragment$I.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*moduleWidth*/ ctx[3] === undefined && !("moduleWidth" in props)) {
    			console.warn("<PO16> was created without expected prop 'moduleWidth'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console.warn("<PO16> was created without expected prop 'color'");
    		}
    	}

    	get id() {
    		throw new Error("<PO16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<PO16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedElement() {
    		throw new Error("<PO16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedElement(value) {
    		throw new Error("<PO16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<PO16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<PO16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get moduleWidth() {
    		throw new Error("<PO16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<PO16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<PO16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<PO16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\elements\Fader.svelte generated by Svelte v3.35.0 */
    const file$F = "src\\app\\core\\grid-modules\\elements\\Fader.svelte";

    function create_fragment$H(ctx) {
    	let svg;
    	let g4;
    	let g0;
    	let rect0;
    	let g3;
    	let g1;
    	let rect1;
    	let g2;
    	let rect2;
    	let path;
    	let defs;
    	let filter0;
    	let feFlood0;
    	let feBlend0;
    	let feColorMatrix0;
    	let feOffset0;
    	let feGaussianBlur0;
    	let feComposite0;
    	let feColorMatrix1;
    	let feBlend1;
    	let filter1;
    	let feFlood1;
    	let feBlend2;
    	let feColorMatrix2;
    	let feOffset1;
    	let feGaussianBlur1;
    	let feComposite1;
    	let feColorMatrix3;
    	let feBlend3;
    	let filter2;
    	let feFlood2;
    	let feBlend4;
    	let feColorMatrix4;
    	let feOffset2;
    	let feGaussianBlur2;
    	let feComposite2;
    	let feColorMatrix5;
    	let feBlend5;
    	let linearGradient;
    	let stop0;
    	let stop1;
    	let svg_width_value;
    	let svg_height_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			g4 = svg_element("g");
    			g0 = svg_element("g");
    			rect0 = svg_element("rect");
    			g3 = svg_element("g");
    			g1 = svg_element("g");
    			rect1 = svg_element("rect");
    			g2 = svg_element("g");
    			rect2 = svg_element("rect");
    			path = svg_element("path");
    			defs = svg_element("defs");
    			filter0 = svg_element("filter");
    			feFlood0 = svg_element("feFlood");
    			feBlend0 = svg_element("feBlend");
    			feColorMatrix0 = svg_element("feColorMatrix");
    			feOffset0 = svg_element("feOffset");
    			feGaussianBlur0 = svg_element("feGaussianBlur");
    			feComposite0 = svg_element("feComposite");
    			feColorMatrix1 = svg_element("feColorMatrix");
    			feBlend1 = svg_element("feBlend");
    			filter1 = svg_element("filter");
    			feFlood1 = svg_element("feFlood");
    			feBlend2 = svg_element("feBlend");
    			feColorMatrix2 = svg_element("feColorMatrix");
    			feOffset1 = svg_element("feOffset");
    			feGaussianBlur1 = svg_element("feGaussianBlur");
    			feComposite1 = svg_element("feComposite");
    			feColorMatrix3 = svg_element("feColorMatrix");
    			feBlend3 = svg_element("feBlend");
    			filter2 = svg_element("filter");
    			feFlood2 = svg_element("feFlood");
    			feBlend4 = svg_element("feBlend");
    			feColorMatrix4 = svg_element("feColorMatrix");
    			feOffset2 = svg_element("feOffset");
    			feGaussianBlur2 = svg_element("feGaussianBlur");
    			feComposite2 = svg_element("feComposite");
    			feColorMatrix5 = svg_element("feColorMatrix");
    			feBlend5 = svg_element("feBlend");
    			linearGradient = svg_element("linearGradient");
    			stop0 = svg_element("stop");
    			stop1 = svg_element("stop");
    			attr_dev(rect0, "x", "9");
    			attr_dev(rect0, "width", "6");
    			attr_dev(rect0, "height", "60");
    			attr_dev(rect0, "rx", "3");
    			attr_dev(rect0, "fill", "white");
    			add_location(rect0, file$F, 107, 6, 2532);
    			attr_dev(g0, "id", "fader-path");
    			attr_dev(g0, "filter", "url(#filter0_i)");
    			add_location(g0, file$F, 106, 4, 2480);
    			attr_dev(rect1, "y", "22");
    			attr_dev(rect1, "width", "24");
    			attr_dev(rect1, "height", "16");
    			attr_dev(rect1, "rx", "1");
    			attr_dev(rect1, "fill", "#323232");
    			add_location(rect1, file$F, 113, 8, 2755);
    			attr_dev(g1, "id", "bottom");
    			attr_dev(g1, "filter", "url(#filter1_i)");
    			add_location(g1, file$F, 112, 6, 2705);
    			attr_dev(rect2, "x", "1.5");
    			attr_dev(rect2, "y", "26");
    			attr_dev(rect2, "width", "21");
    			attr_dev(rect2, "height", "8");
    			attr_dev(rect2, "rx", "0.5");
    			attr_dev(rect2, "fill", "url(#paint0_linear)");
    			add_location(rect2, file$F, 116, 8, 2881);
    			attr_dev(g2, "id", "top");
    			attr_dev(g2, "filter", "url(#filter2_i)");
    			add_location(g2, file$F, 115, 6, 2834);
    			attr_dev(path, "id", "line");
    			attr_dev(path, "d", "M3 29C2.44772 29 2 29.4477 2 30C2 30.5523 2.44772 31 3 31L3 29ZM21 31C21.5523 31 22 30.5523 22 30C22 29.4477 21.5523 29 21 29L21 31ZM3 31L21 31L21 29L3 29L3 31Z");
    			attr_dev(path, "fill", "white");
    			add_location(path, file$F, 118, 8, 2983);
    			attr_dev(g3, "class", "fader-transform svelte-uxkiuq");
    			set_style(g3, "--translate-move", "translateY(" + /*move*/ ctx[2] + "px)");
    			add_location(g3, file$F, 109, 4, 2603);
    			attr_dev(g4, "id", "fader");
    			add_location(g4, file$F, 105, 2, 2460);
    			attr_dev(feFlood0, "flood-opacity", "0");
    			attr_dev(feFlood0, "result", "BackgroundImageFix");
    			add_location(feFlood0, file$F, 123, 6, 3346);
    			attr_dev(feBlend0, "mode", "normal");
    			attr_dev(feBlend0, "in", "SourceGraphic");
    			attr_dev(feBlend0, "in2", "BackgroundImageFix");
    			attr_dev(feBlend0, "result", "shape");
    			add_location(feBlend0, file$F, 124, 6, 3410);
    			attr_dev(feColorMatrix0, "in", "SourceAlpha");
    			attr_dev(feColorMatrix0, "type", "matrix");
    			attr_dev(feColorMatrix0, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0");
    			attr_dev(feColorMatrix0, "result", "hardAlpha");
    			add_location(feColorMatrix0, file$F, 125, 6, 3501);
    			attr_dev(feOffset0, "dx", "2");
    			attr_dev(feOffset0, "dy", "-4");
    			add_location(feOffset0, file$F, 126, 6, 3626);
    			attr_dev(feGaussianBlur0, "stdDeviation", "2");
    			add_location(feGaussianBlur0, file$F, 127, 6, 3660);
    			attr_dev(feComposite0, "in2", "hardAlpha");
    			attr_dev(feComposite0, "operator", "arithmetic");
    			attr_dev(feComposite0, "k2", "-1");
    			attr_dev(feComposite0, "k3", "1");
    			add_location(feComposite0, file$F, 128, 6, 3702);
    			attr_dev(feColorMatrix1, "type", "matrix");
    			attr_dev(feColorMatrix1, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0");
    			add_location(feColorMatrix1, file$F, 129, 6, 3777);
    			attr_dev(feBlend1, "mode", "normal");
    			attr_dev(feBlend1, "in2", "shape");
    			attr_dev(feBlend1, "result", "effect1_innerShadow");
    			add_location(feBlend1, file$F, 130, 6, 3867);
    			attr_dev(filter0, "id", "filter0_i");
    			attr_dev(filter0, "x", "9");
    			attr_dev(filter0, "y", "-4");
    			attr_dev(filter0, "width", "8");
    			attr_dev(filter0, "height", "64");
    			attr_dev(filter0, "filterUnits", "userSpaceOnUse");
    			attr_dev(filter0, "color-interpolation-filters", "sRGB");
    			add_location(filter0, file$F, 122, 4, 3216);
    			attr_dev(feFlood1, "flood-opacity", "0");
    			attr_dev(feFlood1, "result", "BackgroundImageFix");
    			add_location(feFlood1, file$F, 133, 6, 4084);
    			attr_dev(feBlend2, "mode", "normal");
    			attr_dev(feBlend2, "in", "SourceGraphic");
    			attr_dev(feBlend2, "in2", "BackgroundImageFix");
    			attr_dev(feBlend2, "result", "shape");
    			add_location(feBlend2, file$F, 134, 6, 4148);
    			attr_dev(feColorMatrix2, "in", "SourceAlpha");
    			attr_dev(feColorMatrix2, "type", "matrix");
    			attr_dev(feColorMatrix2, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0");
    			attr_dev(feColorMatrix2, "result", "hardAlpha");
    			add_location(feColorMatrix2, file$F, 135, 6, 4239);
    			attr_dev(feOffset1, "dy", "-2");
    			add_location(feOffset1, file$F, 136, 6, 4364);
    			attr_dev(feGaussianBlur1, "stdDeviation", "2");
    			add_location(feGaussianBlur1, file$F, 137, 6, 4391);
    			attr_dev(feComposite1, "in2", "hardAlpha");
    			attr_dev(feComposite1, "operator", "arithmetic");
    			attr_dev(feComposite1, "k2", "-1");
    			attr_dev(feComposite1, "k3", "1");
    			add_location(feComposite1, file$F, 138, 6, 4433);
    			attr_dev(feColorMatrix3, "type", "matrix");
    			attr_dev(feColorMatrix3, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0");
    			add_location(feColorMatrix3, file$F, 139, 6, 4508);
    			attr_dev(feBlend3, "mode", "normal");
    			attr_dev(feBlend3, "in2", "shape");
    			attr_dev(feBlend3, "result", "effect1_innerShadow");
    			add_location(feBlend3, file$F, 140, 6, 4597);
    			attr_dev(filter1, "id", "filter1_i");
    			attr_dev(filter1, "x", "0");
    			attr_dev(filter1, "y", "20");
    			attr_dev(filter1, "width", "24");
    			attr_dev(filter1, "height", "18");
    			attr_dev(filter1, "filterUnits", "userSpaceOnUse");
    			attr_dev(filter1, "color-interpolation-filters", "sRGB");
    			add_location(filter1, file$F, 132, 4, 3953);
    			attr_dev(feFlood2, "flood-opacity", "0");
    			attr_dev(feFlood2, "result", "BackgroundImageFix");
    			add_location(feFlood2, file$F, 143, 6, 4816);
    			attr_dev(feBlend4, "mode", "normal");
    			attr_dev(feBlend4, "in", "SourceGraphic");
    			attr_dev(feBlend4, "in2", "BackgroundImageFix");
    			attr_dev(feBlend4, "result", "shape");
    			add_location(feBlend4, file$F, 144, 6, 4880);
    			attr_dev(feColorMatrix4, "in", "SourceAlpha");
    			attr_dev(feColorMatrix4, "type", "matrix");
    			attr_dev(feColorMatrix4, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0");
    			attr_dev(feColorMatrix4, "result", "hardAlpha");
    			add_location(feColorMatrix4, file$F, 145, 6, 4971);
    			attr_dev(feOffset2, "dy", "-2");
    			add_location(feOffset2, file$F, 146, 6, 5096);
    			attr_dev(feGaussianBlur2, "stdDeviation", "2");
    			add_location(feGaussianBlur2, file$F, 147, 6, 5123);
    			attr_dev(feComposite2, "in2", "hardAlpha");
    			attr_dev(feComposite2, "operator", "arithmetic");
    			attr_dev(feComposite2, "k2", "-1");
    			attr_dev(feComposite2, "k3", "1");
    			add_location(feComposite2, file$F, 148, 6, 5165);
    			attr_dev(feColorMatrix5, "type", "matrix");
    			attr_dev(feColorMatrix5, "values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0");
    			add_location(feColorMatrix5, file$F, 149, 6, 5240);
    			attr_dev(feBlend5, "mode", "normal");
    			attr_dev(feBlend5, "in2", "shape");
    			attr_dev(feBlend5, "result", "effect1_innerShadow");
    			add_location(feBlend5, file$F, 150, 6, 5330);
    			attr_dev(filter2, "id", "filter2_i");
    			attr_dev(filter2, "x", "1.5");
    			attr_dev(filter2, "y", "24");
    			attr_dev(filter2, "width", "21");
    			attr_dev(filter2, "height", "10");
    			attr_dev(filter2, "filterUnits", "userSpaceOnUse");
    			attr_dev(filter2, "color-interpolation-filters", "sRGB");
    			add_location(filter2, file$F, 142, 4, 4683);
    			attr_dev(stop0, "stop-color", "#373737");
    			add_location(stop0, file$F, 153, 6, 5522);
    			attr_dev(stop1, "offset", "1");
    			attr_dev(stop1, "stop-color", "#373737");
    			attr_dev(stop1, "stop-opacity", "0");
    			add_location(stop1, file$F, 154, 6, 5558);
    			attr_dev(linearGradient, "id", "paint0_linear");
    			attr_dev(linearGradient, "x1", "12");
    			attr_dev(linearGradient, "y1", "26");
    			attr_dev(linearGradient, "x2", "12");
    			attr_dev(linearGradient, "y2", "34");
    			attr_dev(linearGradient, "gradientUnits", "userSpaceOnUse");
    			add_location(linearGradient, file$F, 152, 4, 5416);
    			add_location(defs, file$F, 121, 2, 3204);
    			attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[0]);
    			attr_dev(svg, "id", "fader-cap");
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[1] * faderWidth + "px");
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[1] * faderHeight + "px");
    			attr_dev(svg, "viewBox", "0 0 24 60");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			set_style(svg, "overflow", "visible");
    			add_location(svg, file$F, 92, 0, 2077);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, g4);
    			append_dev(g4, g0);
    			append_dev(g0, rect0);
    			append_dev(g4, g3);
    			append_dev(g3, g1);
    			append_dev(g1, rect1);
    			append_dev(g3, g2);
    			append_dev(g2, rect2);
    			append_dev(g3, path);
    			append_dev(svg, defs);
    			append_dev(defs, filter0);
    			append_dev(filter0, feFlood0);
    			append_dev(filter0, feBlend0);
    			append_dev(filter0, feColorMatrix0);
    			append_dev(filter0, feOffset0);
    			append_dev(filter0, feGaussianBlur0);
    			append_dev(filter0, feComposite0);
    			append_dev(filter0, feColorMatrix1);
    			append_dev(filter0, feBlend1);
    			append_dev(defs, filter1);
    			append_dev(filter1, feFlood1);
    			append_dev(filter1, feBlend2);
    			append_dev(filter1, feColorMatrix2);
    			append_dev(filter1, feOffset1);
    			append_dev(filter1, feGaussianBlur1);
    			append_dev(filter1, feComposite1);
    			append_dev(filter1, feColorMatrix3);
    			append_dev(filter1, feBlend3);
    			append_dev(defs, filter2);
    			append_dev(filter2, feFlood2);
    			append_dev(filter2, feBlend4);
    			append_dev(filter2, feColorMatrix4);
    			append_dev(filter2, feOffset2);
    			append_dev(filter2, feGaussianBlur2);
    			append_dev(filter2, feComposite2);
    			append_dev(filter2, feColorMatrix5);
    			append_dev(filter2, feBlend5);
    			append_dev(defs, linearGradient);
    			append_dev(linearGradient, stop0);
    			append_dev(linearGradient, stop1);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(grab.call(null, svg)),
    					listen_dev(svg, "grabstart", /*handleGrabStart*/ ctx[3], false, false, false),
    					listen_dev(svg, "grabmove", /*handleGrabMove*/ ctx[4], false, false, false),
    					listen_dev(svg, "grabend", /*handleGrabEnd*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*move*/ 4) {
    				set_style(g3, "--translate-move", "translateY(" + /*move*/ ctx[2] + "px)");
    			}

    			if (dirty & /*elementNumber*/ 1) {
    				attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 2 && svg_width_value !== (svg_width_value = /*size*/ ctx[1] * faderWidth + "px")) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 2 && svg_height_value !== (svg_height_value = /*size*/ ctx[1] * faderHeight + "px")) {
    				attr_dev(svg, "height", svg_height_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const faderWidth = 16;
    const faderHeight = 37;

    function getMousePosition(evt) {
    	var BCR = evt.srcElement.getBoundingClientRect();

    	return {
    		x: evt.detail.x - BCR.x,
    		y: evt.detail.y - BCR.y
    	};
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let range;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Fader", slots, []);
    	const dispatch = createEventDispatcher();
    	let { elementNumber } = $$props;
    	let { size = 1 } = $$props;
    	let { rotation = 0 } = $$props;
    	let { eventInput } = $$props;
    	let move = 0;
    	let startValue = 0;
    	let initMove = 0;
    	let startSVG;
    	let endSVG = 0;
    	let svgMove;

    	const rotMode = rotation => {
    		rotation == undefined ? rotation = 0 : null;
    		let rot;

    		rotation == 90 || rotation == 270
    		? rot = "X"
    		: rot = "Y";

    		return rot;
    	};

    	const inverse = () => {
    		let _inverse = -1;

    		rotation == 90 || rotation == 180
    		? _inverse = 1
    		: _inverse = -1;

    		return _inverse;
    	};

    	function handleGrabStart(event) {
    		var coord = getMousePosition(event);
    		const rot = rotMode(rotation).toLowerCase();
    		startValue = coord[rot];
    	}

    	// with all these functions, this could be much more performant.
    	function handleGrabMove(event) {
    		var coord = getMousePosition(event);
    		const rot = rotMode(rotation).toLowerCase();
    		let value = (startValue - (initMove + coord[rot])) * inverse();

    		if (-22 <= value && value <= 22) {
    			$$invalidate(2, move = value);
    			dispatch("user-interaction", move);
    		}
    	}

    	function handleGrabEnd(event) {
    		initMove = move;
    	}

    	const writable_props = ["elementNumber", "size", "rotation", "eventInput"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Fader> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("elementNumber" in $$props) $$invalidate(0, elementNumber = $$props.elementNumber);
    		if ("size" in $$props) $$invalidate(1, size = $$props.size);
    		if ("rotation" in $$props) $$invalidate(6, rotation = $$props.rotation);
    		if ("eventInput" in $$props) $$invalidate(7, eventInput = $$props.eventInput);
    	};

    	$$self.$capture_state = () => ({
    		grab,
    		createEventDispatcher,
    		dispatch,
    		elementNumber,
    		size,
    		rotation,
    		eventInput,
    		faderWidth,
    		faderHeight,
    		move,
    		startValue,
    		initMove,
    		startSVG,
    		endSVG,
    		svgMove,
    		rotMode,
    		inverse,
    		handleGrabStart,
    		handleGrabMove,
    		handleGrabEnd,
    		getMousePosition,
    		range
    	});

    	$$self.$inject_state = $$props => {
    		if ("elementNumber" in $$props) $$invalidate(0, elementNumber = $$props.elementNumber);
    		if ("size" in $$props) $$invalidate(1, size = $$props.size);
    		if ("rotation" in $$props) $$invalidate(6, rotation = $$props.rotation);
    		if ("eventInput" in $$props) $$invalidate(7, eventInput = $$props.eventInput);
    		if ("move" in $$props) $$invalidate(2, move = $$props.move);
    		if ("startValue" in $$props) startValue = $$props.startValue;
    		if ("initMove" in $$props) initMove = $$props.initMove;
    		if ("startSVG" in $$props) startSVG = $$props.startSVG;
    		if ("endSVG" in $$props) endSVG = $$props.endSVG;
    		if ("svgMove" in $$props) svgMove = $$props.svgMove;
    		if ("range" in $$props) range = $$props.range;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*size*/ 2) {
    			range = faderHeight * size;
    		}

    		if ($$self.$$.dirty & /*eventInput*/ 128) {
    			if (eventInput) {
    				let faderPosition = (Math.round(eventInput / 2.887) - 22) * -1;
    				$$invalidate(2, move = faderPosition);
    			}
    		}
    	};

    	return [
    		elementNumber,
    		size,
    		move,
    		handleGrabStart,
    		handleGrabMove,
    		handleGrabEnd,
    		rotation,
    		eventInput
    	];
    }

    class Fader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
    			elementNumber: 0,
    			size: 1,
    			rotation: 6,
    			eventInput: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Fader",
    			options,
    			id: create_fragment$H.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*elementNumber*/ ctx[0] === undefined && !("elementNumber" in props)) {
    			console.warn("<Fader> was created without expected prop 'elementNumber'");
    		}

    		if (/*eventInput*/ ctx[7] === undefined && !("eventInput" in props)) {
    			console.warn("<Fader> was created without expected prop 'eventInput'");
    		}
    	}

    	get elementNumber() {
    		throw new Error("<Fader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementNumber(value) {
    		throw new Error("<Fader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Fader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Fader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Fader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Fader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInput() {
    		throw new Error("<Fader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInput(value) {
    		throw new Error("<Fader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\elements\Button.svelte generated by Svelte v3.35.0 */

    const file$E = "src\\app\\core\\grid-modules\\elements\\Button.svelte";

    function create_fragment$G(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let svg_width_value;
    	let svg_height_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M29.7059 15C29.7059 23.1218 23.1218 29.7059 15 29.7059C6.87817 29.7059 0.294118 23.1218 0.294118 15C0.294118 6.87817 6.87817 0.294118 15 0.294118C23.1218 0.294118 29.7059 6.87817 29.7059 15Z");
    			attr_dev(path0, "fill", "#E6E6E6");
    			add_location(path0, file$E, 10, 2, 291);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M15 0.588235C7.0406 0.588235 0.588235 7.0406 0.588235 15C0.588235 22.9594 7.0406 29.4118 15 29.4118C22.9594 29.4118 29.4118 22.9594 29.4118 15C29.4118 7.0406 22.9594 0.588235 15 0.588235ZM0 15C0 6.71573 6.71573 0 15 0C23.2843 0 30 6.71573 30 15C30 23.2843 23.2843 30 15 30C6.71573 30 0 23.2843 0 15Z");
    			attr_dev(path1, "fill", "#E6E6E6");
    			add_location(path1, file$E, 11, 2, 512);
    			attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[0] * /*buttonSize*/ ctx[2] + "px");
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[0] * /*buttonSize*/ ctx[2] + "px");
    			attr_dev(svg, "viewBox", "0 0 30 30 ");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$E, 9, 0, 107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*elementNumber*/ 2) {
    				attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1 && svg_width_value !== (svg_width_value = /*size*/ ctx[0] * /*buttonSize*/ ctx[2] + "px")) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 1 && svg_height_value !== (svg_height_value = /*size*/ ctx[0] * /*buttonSize*/ ctx[2] + "px")) {
    				attr_dev(svg, "height", svg_height_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Button", slots, []);
    	let { size = 1 } = $$props;
    	let { elementNumber } = $$props;
    	let buttonSize = 9.5;
    	const writable_props = ["size", "elementNumber"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    	};

    	$$self.$capture_state = () => ({ size, elementNumber, buttonSize });

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    		if ("buttonSize" in $$props) $$invalidate(2, buttonSize = $$props.buttonSize);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, elementNumber, buttonSize];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$G, safe_not_equal, { size: 0, elementNumber: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$G.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*elementNumber*/ ctx[1] === undefined && !("elementNumber" in props)) {
    			console.warn("<Button> was created without expected prop 'elementNumber'");
    		}
    	}

    	get size() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementNumber() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementNumber(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\modules\PBF4.svelte generated by Svelte v3.35.0 */
    const file$D = "src\\app\\core\\grid-modules\\modules\\PBF4.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    // (57:6) {#each [0,1,2,3] as elementNumber}
    function create_each_block_2$4(ctx) {
    	let div;
    	let led;
    	let t0;
    	let potentiometer;
    	let t1;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber),
    				userInput: /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]],
    				size: /*$appSettings*/ ctx[8].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	function user_interaction_handler(...args) {
    		return /*user_interaction_handler*/ ctx[12](/*elementNumber*/ ctx[14], ...args);
    	}

    	potentiometer = new Potentiometer({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber),
    				elementNumber: /*elementNumber*/ ctx[14],
    				size: /*$appSettings*/ ctx[8].size
    			},
    			$$inline: true
    		});

    	potentiometer.$on("user-interaction", user_interaction_handler);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t0 = space$1();
    			create_component(potentiometer.$$.fragment);
    			t1 = space$1();
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			add_location(div, file$D, 57, 8, 1619);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t0);
    			mount_component(potentiometer, div, null);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*valueChange*/ 128) led_changes.userInput = /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]];
    			if (dirty & /*$appSettings*/ 256) led_changes.size = /*$appSettings*/ ctx[8].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const potentiometer_changes = {};
    			if (dirty & /*selectedElement*/ 2) potentiometer_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*$appSettings*/ 256) potentiometer_changes.size = /*$appSettings*/ ctx[8].size;
    			potentiometer.$set(potentiometer_changes);

    			if (dirty & /*dx, selectedElement, dy*/ 98) {
    				toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(potentiometer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(potentiometer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(potentiometer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$4.name,
    		type: "each",
    		source: "(57:6) {#each [0,1,2,3] as elementNumber}",
    		ctx
    	});

    	return block;
    }

    // (76:6) {#each [4,5,6,7] as elementNumber}
    function create_each_block_1$8(ctx) {
    	let div;
    	let led;
    	let t0;
    	let fader;
    	let t1;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber),
    				userInput: /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]],
    				size: /*$appSettings*/ ctx[8].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	function user_interaction_handler_1(...args) {
    		return /*user_interaction_handler_1*/ ctx[13](/*elementNumber*/ ctx[14], ...args);
    	}

    	fader = new Fader({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber),
    				elementNumber: /*elementNumber*/ ctx[14],
    				size: /*$appSettings*/ ctx[8].size,
    				rotation: /*rotation*/ ctx[2]
    			},
    			$$inline: true
    		});

    	fader.$on("user-interaction", user_interaction_handler_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t0 = space$1();
    			create_component(fader.$$.fragment);
    			t1 = space$1();
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			add_location(div, file$D, 76, 8, 2536);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t0);
    			mount_component(fader, div, null);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*valueChange*/ 128) led_changes.userInput = /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]];
    			if (dirty & /*$appSettings*/ 256) led_changes.size = /*$appSettings*/ ctx[8].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const fader_changes = {};
    			if (dirty & /*selectedElement*/ 2) fader_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*$appSettings*/ 256) fader_changes.size = /*$appSettings*/ ctx[8].size;
    			if (dirty & /*rotation*/ 4) fader_changes.rotation = /*rotation*/ ctx[2];
    			fader.$set(fader_changes);

    			if (dirty & /*dx, selectedElement, dy*/ 98) {
    				toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(fader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(fader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(fader);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$8.name,
    		type: "each",
    		source: "(76:6) {#each [4,5,6,7] as elementNumber}",
    		ctx
    	});

    	return block;
    }

    // (96:6) {#each [8,9,10,11] as elementNumber}
    function create_each_block$g(ctx) {
    	let div;
    	let led;
    	let t0;
    	let button;
    	let t1;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber),
    				userInput: /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]],
    				size: /*$appSettings*/ ctx[8].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	button = new Button({
    			props: {
    				elementNumber: /*elementNumber*/ ctx[14],
    				size: /*$appSettings*/ ctx[8].size
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t0 = space$1();
    			create_component(button.$$.fragment);
    			t1 = space$1();
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			add_location(div, file$D, 96, 8, 3569);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t0);
    			mount_component(button, div, null);
    			append_dev(div, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*elementNumber*/ ctx[14], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*valueChange*/ 128) led_changes.userInput = /*valueChange*/ ctx[7][/*elementNumber*/ ctx[14]];
    			if (dirty & /*$appSettings*/ 256) led_changes.size = /*$appSettings*/ ctx[8].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const button_changes = {};
    			if (dirty & /*$appSettings*/ 256) button_changes.size = /*$appSettings*/ ctx[8].size;
    			button.$set(button_changes);

    			if (dirty & /*dx, selectedElement, dy*/ 98) {
    				toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*elementNumber*/ ctx[14]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(96:6) {#each [8,9,10,11] as elementNumber}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let div4;
    	let t0;
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let div2;
    	let select_action;
    	let div4_draggable_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	let each_value_2 = [0, 1, 2, 3];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks_2[i] = create_each_block_2$4(get_each_context_2$4(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks_2[i], 1, 1, () => {
    		each_blocks_2[i] = null;
    	});

    	let each_value_1 = [4, 5, 6, 7];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks_1[i] = create_each_block_1$8(get_each_context_1$8(ctx, each_value_1, i));
    	}

    	const out_1 = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = [8, 9, 10, 11];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 4; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out_2 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space$1();
    			div3 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t1 = space$1();
    			div1 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space$1();
    			div2 = element("div");

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "control-row");
    			set_style(div0, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			set_style(div0, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			add_location(div0, file$D, 55, 4, 1427);
    			attr_dev(div1, "class", "control-row");
    			set_style(div1, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			set_style(div1, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			add_location(div1, file$D, 74, 4, 2345);
    			attr_dev(div2, "class", "control-row");
    			set_style(div2, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			set_style(div2, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			set_style(div2, "--control-row-mb", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			add_location(div2, file$D, 94, 4, 3322);
    			attr_dev(div3, "class", "module-dimensions ");
    			set_style(div3, "--module-size", /*moduleWidth*/ ctx[3] + "px");
    			toggle_class(div3, "disable-pointer-events", /*$appSettings*/ ctx[8].layoutMode);
    			add_location(div3, file$D, 48, 2, 1243);
    			attr_dev(div4, "id", /*id*/ ctx[0]);
    			attr_dev(div4, "draggable", div4_draggable_value = /*$appSettings*/ ctx[8].layoutMode);
    			set_style(div4, "transform", "rotate(" + (/*rotation*/ ctx[2] + "deg") + ")");
    			add_location(div4, file$D, 44, 0, 1125);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);

    			if (default_slot) {
    				default_slot.m(div4, null);
    			}

    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, div0);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_2[i].m(div0, null);
    			}

    			append_dev(div3, t1);
    			append_dev(div3, div1);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append_dev(div3, t2);
    			append_dev(div3, div2);

    			for (let i = 0; i < 4; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(select_action = select.call(null, div3, [/*id*/ ctx[0]]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 1024) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			if (dirty & /*dx, selectedElement, dy, handleEventParamChange, $appSettings, valueChange, color*/ 1010) {
    				each_value_2 = [0, 1, 2, 3];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context_2$4(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    						transition_in(each_blocks_2[i], 1);
    					} else {
    						each_blocks_2[i] = create_each_block_2$4(child_ctx);
    						each_blocks_2[i].c();
    						transition_in(each_blocks_2[i], 1);
    						each_blocks_2[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = 4; i < 4; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div0, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div0, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}

    			if (dirty & /*dx, selectedElement, dy, handleEventParamChange, $appSettings, rotation, valueChange, Math, color*/ 1014) {
    				each_value_1 = [4, 5, 6, 7];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context_1$8(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$8(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = 4; i < 4; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div1, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div1, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}

    			if (dirty & /*dx, selectedElement, dy, $appSettings, handleEventParamChange, valueChange, color*/ 1010) {
    				each_value = [8, 9, 10, 11];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 4; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div2, null);
    					}
    				}

    				group_outros();

    				for (i = 4; i < 4; i += 1) {
    					out_2(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div2, "--control-row-mt", /*$appSettings*/ ctx[8].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div2, "--control-row-mx", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 256) {
    				set_style(div2, "--control-row-mb", /*$appSettings*/ ctx[8].size * 6.835 + "px");
    			}

    			if (!current || dirty & /*moduleWidth*/ 8) {
    				set_style(div3, "--module-size", /*moduleWidth*/ ctx[3] + "px");
    			}

    			if (select_action && is_function(select_action.update) && dirty & /*id*/ 1) select_action.update.call(null, [/*id*/ ctx[0]]);

    			if (dirty & /*$appSettings*/ 256) {
    				toggle_class(div3, "disable-pointer-events", /*$appSettings*/ ctx[8].layoutMode);
    			}

    			if (!current || dirty & /*id*/ 1) {
    				attr_dev(div4, "id", /*id*/ ctx[0]);
    			}

    			if (!current || dirty & /*$appSettings*/ 256 && div4_draggable_value !== (div4_draggable_value = /*$appSettings*/ ctx[8].layoutMode)) {
    				attr_dev(div4, "draggable", div4_draggable_value);
    			}

    			if (!current || dirty & /*rotation*/ 4) {
    				set_style(div4, "transform", "rotate(" + (/*rotation*/ ctx[2] + "deg") + ")");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			for (let i = 0; i < 4; i += 1) {
    				transition_in(each_blocks_2[i]);
    			}

    			for (let i = 0; i < 4; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < 4; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			each_blocks_2 = each_blocks_2.filter(Boolean);

    			for (let i = 0; i < 4; i += 1) {
    				transition_out(each_blocks_2[i]);
    			}

    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < 4; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < 4; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (default_slot) default_slot.d(detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(8, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PBF4", slots, ['default']);
    	let { id = "PBF4" } = $$props;
    	let { selectedElement = {} } = $$props;
    	let { rotation = 0 } = $$props;
    	let { moduleWidth } = $$props;
    	let { color } = $$props;
    	let dx, dy;
    	let valueChange = [];

    	function handleEventParamChange(static_elementNumber, input_elementNumber) {
    		if (static_elementNumber == input_elementNumber) {
    			if (dx == selectedElement.dx && dy == selectedElement.dy) {
    				return selectedElement.eventParam;
    			}
    		}
    	}

    	onMount(() => {
    		if (id !== undefined && id.length > 4) {
    			$$invalidate(5, dx = +id.split(";")[0].split(":").pop());
    			$$invalidate(6, dy = +id.split(";")[1].split(":").pop());
    		}
    	});

    	const writable_props = ["id", "selectedElement", "rotation", "moduleWidth", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PBF4> was created with unknown prop '${key}'`);
    	});

    	const user_interaction_handler = (elementNumber, e) => {
    		$$invalidate(7, valueChange[elementNumber] = e.detail, valueChange);
    	};

    	const user_interaction_handler_1 = (elementNumber, e) => {
    		$$invalidate(7, valueChange[elementNumber] = Math.round((e.detail + 22) * 2.886 - 127) * -1, valueChange);
    	};

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("moduleWidth" in $$props) $$invalidate(3, moduleWidth = $$props.moduleWidth);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localInputStore,
    		appSettings,
    		select,
    		Potentiometer,
    		Led,
    		Fader,
    		Button,
    		id,
    		selectedElement,
    		rotation,
    		moduleWidth,
    		color,
    		dx,
    		dy,
    		valueChange,
    		handleEventParamChange,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("moduleWidth" in $$props) $$invalidate(3, moduleWidth = $$props.moduleWidth);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("dx" in $$props) $$invalidate(5, dx = $$props.dx);
    		if ("dy" in $$props) $$invalidate(6, dy = $$props.dy);
    		if ("valueChange" in $$props) $$invalidate(7, valueChange = $$props.valueChange);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		id,
    		selectedElement,
    		rotation,
    		moduleWidth,
    		color,
    		dx,
    		dy,
    		valueChange,
    		$appSettings,
    		handleEventParamChange,
    		$$scope,
    		slots,
    		user_interaction_handler,
    		user_interaction_handler_1
    	];
    }

    class PBF4 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
    			id: 0,
    			selectedElement: 1,
    			rotation: 2,
    			moduleWidth: 3,
    			color: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PBF4",
    			options,
    			id: create_fragment$F.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*moduleWidth*/ ctx[3] === undefined && !("moduleWidth" in props)) {
    			console.warn("<PBF4> was created without expected prop 'moduleWidth'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console.warn("<PBF4> was created without expected prop 'color'");
    		}
    	}

    	get id() {
    		throw new Error("<PBF4>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<PBF4>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedElement() {
    		throw new Error("<PBF4>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedElement(value) {
    		throw new Error("<PBF4>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<PBF4>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<PBF4>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get moduleWidth() {
    		throw new Error("<PBF4>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<PBF4>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<PBF4>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<PBF4>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\modules\BU16.svelte generated by Svelte v3.35.0 */
    const file$C = "src\\app\\core\\grid-modules\\modules\\BU16.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (62:8) {#each control_block(4) as element}
    function create_each_block_1$7(ctx) {
    	let div;
    	let led;
    	let t;
    	let button;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[10](/*block*/ ctx[13] * 4 + /*element*/ ctx[16], /*selectedElement*/ ctx[1].controlNumber),
    				userInput: /*valueChange*/ ctx[8][/*block*/ ctx[13] * 4 + /*element*/ ctx[16]],
    				size: /*$appSettings*/ ctx[7].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	button = new Button({
    			props: {
    				elementNumber: /*block*/ ctx[13] * 4 + /*element*/ ctx[16],
    				size: /*$appSettings*/ ctx[7].size
    			},
    			$$inline: true
    		});

    	button.$on("click", /*valueChange*/ ctx[8][/*block*/ ctx[13] * 4 + /*element*/ ctx[16]] = !true);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t = space$1();
    			create_component(button.$$.fragment);
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[13] * 4 + /*element*/ ctx[16]);
    			add_location(div, file$C, 62, 10, 1755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t);
    			mount_component(button, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[10](/*block*/ ctx[13] * 4 + /*element*/ ctx[16], /*selectedElement*/ ctx[1].controlNumber);
    			if (dirty & /*$appSettings*/ 128) led_changes.size = /*$appSettings*/ ctx[7].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const button_changes = {};
    			if (dirty & /*$appSettings*/ 128) button_changes.size = /*$appSettings*/ ctx[7].size;
    			button.$set(button_changes);

    			if (dirty & /*dx, selectedElement, dy, control_block*/ 610) {
    				toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[13] * 4 + /*element*/ ctx[16]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$7.name,
    		type: "each",
    		source: "(62:8) {#each control_block(4) as element}",
    		ctx
    	});

    	return block;
    }

    // (60:4) {#each control_block(4) as block }
    function create_each_block$f(ctx) {
    	let div;
    	let t;
    	let current;
    	let each_value_1 = /*control_block*/ ctx[9](4);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$7(get_each_context_1$7(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "control-row");
    			set_style(div, "--control-row-mt", /*$appSettings*/ ctx[7].size * 3.235 + "px");
    			set_style(div, "--control-row-mx", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			set_style(div, "--control-row-mb", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			add_location(div, file$C, 60, 6, 1504);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dx, selectedElement, dy, control_block, $appSettings, valueChange, handleEventParamChange, color*/ 2034) {
    				each_value_1 = /*control_block*/ ctx[9](4);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$7(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, t);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mt", /*$appSettings*/ ctx[7].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mx", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mb", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(60:4) {#each control_block(4) as block }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let select_action;
    	let div1_draggable_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
    	let each_value = /*control_block*/ ctx[9](4);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t = space$1();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "module-dimensions");
    			set_style(div0, "--module-size", /*moduleWidth*/ ctx[0] + "px");
    			toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[7].layoutMode);
    			add_location(div0, file$C, 52, 2, 1280);
    			attr_dev(div1, "id", /*id*/ ctx[2]);
    			attr_dev(div1, "draggable", div1_draggable_value = /*$appSettings*/ ctx[7].layoutMode);
    			set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[3] + "deg") + ")");
    			add_location(div1, file$C, 48, 0, 1161);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div1, t);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(select_action = select.call(null, div0, [/*id*/ ctx[2]]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2048) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
    				}
    			}

    			if (dirty & /*$appSettings, control_block, dx, selectedElement, dy, valueChange, handleEventParamChange, color*/ 2034) {
    				each_value = /*control_block*/ ctx[9](4);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*moduleWidth*/ 1) {
    				set_style(div0, "--module-size", /*moduleWidth*/ ctx[0] + "px");
    			}

    			if (select_action && is_function(select_action.update) && dirty & /*id*/ 4) select_action.update.call(null, [/*id*/ ctx[2]]);

    			if (dirty & /*$appSettings*/ 128) {
    				toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[7].layoutMode);
    			}

    			if (!current || dirty & /*id*/ 4) {
    				attr_dev(div1, "id", /*id*/ ctx[2]);
    			}

    			if (!current || dirty & /*$appSettings*/ 128 && div1_draggable_value !== (div1_draggable_value = /*$appSettings*/ ctx[7].layoutMode)) {
    				attr_dev(div1, "draggable", div1_draggable_value);
    			}

    			if (!current || dirty & /*rotation*/ 8) {
    				set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[3] + "deg") + ")");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(7, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("BU16", slots, ['default']);
    	let { moduleWidth } = $$props;
    	let { selectedElement = {} } = $$props;
    	let { id = "BU16" } = $$props;
    	let { rotation = 0 } = $$props;
    	let { color } = $$props;
    	let valueChange = [];
    	let dx, dy;

    	const control_block = number => {
    		let array = [];

    		for (let i = 0; i < number; i++) {
    			array.push(i);
    		}

    		return array;
    	};

    	function handleEventParamChange(static_elementNumber, input_elementNumber) {
    		if (static_elementNumber == input_elementNumber) {
    			if (dx == selectedElement.dx && dy == selectedElement.dy) {
    				return selectedElement.eventParam;
    			}
    		}
    	}

    	onMount(() => {
    		if (id !== undefined && id.length > 4) {
    			$$invalidate(5, dx = +id.split(";")[0].split(":").pop());
    			$$invalidate(6, dy = +id.split(";")[1].split(":").pop());
    		}
    	});

    	const writable_props = ["moduleWidth", "selectedElement", "id", "rotation", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BU16> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(3, rotation = $$props.rotation);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("$$scope" in $$props) $$invalidate(11, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localInputStore,
    		appSettings,
    		select,
    		Button,
    		Led,
    		moduleWidth,
    		selectedElement,
    		id,
    		rotation,
    		color,
    		valueChange,
    		dx,
    		dy,
    		control_block,
    		handleEventParamChange,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(3, rotation = $$props.rotation);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("valueChange" in $$props) $$invalidate(8, valueChange = $$props.valueChange);
    		if ("dx" in $$props) $$invalidate(5, dx = $$props.dx);
    		if ("dy" in $$props) $$invalidate(6, dy = $$props.dy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		moduleWidth,
    		selectedElement,
    		id,
    		rotation,
    		color,
    		dx,
    		dy,
    		$appSettings,
    		valueChange,
    		control_block,
    		handleEventParamChange,
    		$$scope,
    		slots
    	];
    }

    class BU16 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
    			moduleWidth: 0,
    			selectedElement: 1,
    			id: 2,
    			rotation: 3,
    			color: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BU16",
    			options,
    			id: create_fragment$E.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*moduleWidth*/ ctx[0] === undefined && !("moduleWidth" in props)) {
    			console.warn("<BU16> was created without expected prop 'moduleWidth'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console.warn("<BU16> was created without expected prop 'color'");
    		}
    	}

    	get moduleWidth() {
    		throw new Error("<BU16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<BU16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedElement() {
    		throw new Error("<BU16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedElement(value) {
    		throw new Error("<BU16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<BU16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<BU16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<BU16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<BU16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<BU16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<BU16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\elements\Encoder.svelte generated by Svelte v3.35.0 */

    const file$B = "src\\app\\core\\grid-modules\\elements\\Encoder.svelte";

    function create_fragment$D(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let filter;
    	let feGaussianBlur;
    	let feOffset;
    	let feComponentTransfer;
    	let feFuncA;
    	let feMerge;
    	let feMergeNode0;
    	let feMergeNode1;
    	let svg_width_value;
    	let svg_height_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			filter = svg_element("filter");
    			feGaussianBlur = svg_element("feGaussianBlur");
    			feOffset = svg_element("feOffset");
    			feComponentTransfer = svg_element("feComponentTransfer");
    			feFuncA = svg_element("feFuncA");
    			feMerge = svg_element("feMerge");
    			feMergeNode0 = svg_element("feMergeNode");
    			feMergeNode1 = svg_element("feMergeNode");
    			attr_dev(path0, "d", "M29.5 15C29.5 23.0081 23.0081 29.5 15 29.5C6.99187 29.5 0.5 23.0081 0.5 15C0.5 6.99187 6.99187 0.5 15 0.5C23.0081 0.5 29.5 6.99187 29.5 15Z");
    			attr_dev(path0, "fill", "#323232");
    			attr_dev(path0, "stroke", "#2B2B2B");
    			add_location(path0, file$B, 12, 0, 330);
    			attr_dev(path1, "d", "M15 3L21 4.6077L25.3923 9L27 15L25.3923 21L21 25.3923L15 27L9 25.3923L4.6077 21L3 15L4.6077 9L9 4.6077L15 3Z");
    			attr_dev(path1, "fill", "#373737");
    			add_location(path1, file$B, 13, 0, 515);
    			attr_dev(feGaussianBlur, "in", "SourceAlpha");
    			attr_dev(feGaussianBlur, "stdDeviation", "3");
    			add_location(feGaussianBlur, file$B, 16, 4, 709);
    			attr_dev(feOffset, "dx", "2");
    			attr_dev(feOffset, "dy", "4");
    			attr_dev(feOffset, "result", "offsetblur");
    			add_location(feOffset, file$B, 17, 4, 808);
    			attr_dev(feFuncA, "type", "linear");
    			attr_dev(feFuncA, "slope", "0.5");
    			add_location(feFuncA, file$B, 19, 6, 916);
    			add_location(feComponentTransfer, file$B, 18, 4, 887);
    			add_location(feMergeNode0, file$B, 22, 6, 1048);
    			attr_dev(feMergeNode1, "in", "SourceGraphic");
    			add_location(feMergeNode1, file$B, 23, 6, 1118);
    			add_location(feMerge, file$B, 21, 4, 1030);
    			attr_dev(filter, "id", "dropshadow");
    			attr_dev(filter, "y", "-20%");
    			attr_dev(filter, "height", "500%");
    			add_location(filter, file$B, 15, 2, 656);
    			set_style(svg, "filter", "url(#dropshadow)");
    			attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			attr_dev(svg, "width", svg_width_value = /*size*/ ctx[0] * encoderSize + "px");
    			attr_dev(svg, "height", svg_height_value = /*size*/ ctx[0] * encoderSize + "px");
    			attr_dev(svg, "viewBox", "0 0 30 30");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$B, 8, 0, 107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, filter);
    			append_dev(filter, feGaussianBlur);
    			append_dev(filter, feOffset);
    			append_dev(filter, feComponentTransfer);
    			append_dev(feComponentTransfer, feFuncA);
    			append_dev(filter, feMerge);
    			append_dev(feMerge, feMergeNode0);
    			append_dev(feMerge, feMergeNode1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*elementNumber*/ 2) {
    				attr_dev(svg, "data-control-number", /*elementNumber*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1 && svg_width_value !== (svg_width_value = /*size*/ ctx[0] * encoderSize + "px")) {
    				attr_dev(svg, "width", svg_width_value);
    			}

    			if (dirty & /*size*/ 1 && svg_height_value !== (svg_height_value = /*size*/ ctx[0] * encoderSize + "px")) {
    				attr_dev(svg, "height", svg_height_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const encoderSize = 13;

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Encoder", slots, []);
    	let { size = 1 } = $$props;
    	let { elementNumber } = $$props;
    	const writable_props = ["size", "elementNumber"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Encoder> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    	};

    	$$self.$capture_state = () => ({ size, elementNumber, encoderSize });

    	$$self.$inject_state = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("elementNumber" in $$props) $$invalidate(1, elementNumber = $$props.elementNumber);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, elementNumber];
    }

    class Encoder extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, { size: 0, elementNumber: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Encoder",
    			options,
    			id: create_fragment$D.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*elementNumber*/ ctx[1] === undefined && !("elementNumber" in props)) {
    			console.warn("<Encoder> was created without expected prop 'elementNumber'");
    		}
    	}

    	get size() {
    		throw new Error("<Encoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Encoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementNumber() {
    		throw new Error("<Encoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementNumber(value) {
    		throw new Error("<Encoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\modules\EN16.svelte generated by Svelte v3.35.0 */

    const { console: console_1$b } = globals;
    const file$A = "src\\app\\core\\grid-modules\\modules\\EN16.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    // (63:8) {#each control_block(4) as element}
    function create_each_block_1$6(ctx) {
    	let div;
    	let led;
    	let t;
    	let encoder;
    	let current;

    	led = new Led({
    			props: {
    				eventInput: /*handleEventParamChange*/ ctx[9](/*block*/ ctx[12] * 4 + /*element*/ ctx[15], /*selectedElement*/ ctx[1].elementNumber),
    				userInput: 0,
    				size: /*$appSettings*/ ctx[7].size,
    				color: /*color*/ ctx[4]
    			},
    			$$inline: true
    		});

    	encoder = new Encoder({
    			props: {
    				elementNumber: /*block*/ ctx[12] * 4 + /*element*/ ctx[15],
    				size: /*$appSettings*/ ctx[7].size
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(led.$$.fragment);
    			t = space$1();
    			create_component(encoder.$$.fragment);
    			attr_dev(div, "data-element-number", /*block*/ ctx[12] * 4 + /*element*/ ctx[15]);
    			attr_dev(div, "class", "knob-and-led");
    			toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[12] * 4 + /*element*/ ctx[15]);
    			add_location(div, file$A, 63, 10, 1758);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(led, div, null);
    			append_dev(div, t);
    			mount_component(encoder, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const led_changes = {};
    			if (dirty & /*selectedElement*/ 2) led_changes.eventInput = /*handleEventParamChange*/ ctx[9](/*block*/ ctx[12] * 4 + /*element*/ ctx[15], /*selectedElement*/ ctx[1].elementNumber);
    			if (dirty & /*$appSettings*/ 128) led_changes.size = /*$appSettings*/ ctx[7].size;
    			if (dirty & /*color*/ 16) led_changes.color = /*color*/ ctx[4];
    			led.$set(led_changes);
    			const encoder_changes = {};
    			if (dirty & /*$appSettings*/ 128) encoder_changes.size = /*$appSettings*/ ctx[7].size;
    			encoder.$set(encoder_changes);

    			if (dirty & /*dx, selectedElement, dy, control_block*/ 354) {
    				toggle_class(div, "active-element", /*dx*/ ctx[5] == /*selectedElement*/ ctx[1].dx && /*dy*/ ctx[6] == /*selectedElement*/ ctx[1].dy && /*selectedElement*/ ctx[1].elementNumber == /*block*/ ctx[12] * 4 + /*element*/ ctx[15]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(led.$$.fragment, local);
    			transition_in(encoder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(led.$$.fragment, local);
    			transition_out(encoder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(led);
    			destroy_component(encoder);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$6.name,
    		type: "each",
    		source: "(63:8) {#each control_block(4) as element}",
    		ctx
    	});

    	return block;
    }

    // (61:4) {#each control_block(4) as block }
    function create_each_block$e(ctx) {
    	let div;
    	let t;
    	let current;
    	let each_value_1 = /*control_block*/ ctx[8](4);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$6(get_each_context_1$6(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "control-row");
    			set_style(div, "--control-row-mt", /*$appSettings*/ ctx[7].size * 3.235 + "px");
    			set_style(div, "--control-row-mx", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			set_style(div, "--control-row-mb", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			add_location(div, file$A, 61, 6, 1507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*control_block, dx, selectedElement, dy, $appSettings, handleEventParamChange, color*/ 1010) {
    				each_value_1 = /*control_block*/ ctx[8](4);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$6(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, t);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mt", /*$appSettings*/ ctx[7].size * 3.235 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mx", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			}

    			if (!current || dirty & /*$appSettings*/ 128) {
    				set_style(div, "--control-row-mb", /*$appSettings*/ ctx[7].size * 6.835 + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(61:4) {#each control_block(4) as block }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let select_action;
    	let div1_draggable_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	let each_value = /*control_block*/ ctx[8](4);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t = space$1();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "module-dimensions");
    			set_style(div0, "--module-size", /*moduleWidth*/ ctx[0] + "px");
    			toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[7].layoutMode);
    			add_location(div0, file$A, 53, 2, 1283);
    			attr_dev(div1, "id", /*id*/ ctx[2]);
    			attr_dev(div1, "draggable", div1_draggable_value = /*$appSettings*/ ctx[7].layoutMode);
    			set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[3] + "deg") + ")");
    			add_location(div1, file$A, 49, 0, 1165);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div1, t);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(select_action = select.call(null, div0, [/*id*/ ctx[2]]));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 1024) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
    				}
    			}

    			if (dirty & /*$appSettings, control_block, dx, selectedElement, dy, handleEventParamChange, color*/ 1010) {
    				each_value = /*control_block*/ ctx[8](4);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*moduleWidth*/ 1) {
    				set_style(div0, "--module-size", /*moduleWidth*/ ctx[0] + "px");
    			}

    			if (select_action && is_function(select_action.update) && dirty & /*id*/ 4) select_action.update.call(null, [/*id*/ ctx[2]]);

    			if (dirty & /*$appSettings*/ 128) {
    				toggle_class(div0, "disable-pointer-events", /*$appSettings*/ ctx[7].layoutMode);
    			}

    			if (!current || dirty & /*id*/ 4) {
    				attr_dev(div1, "id", /*id*/ ctx[2]);
    			}

    			if (!current || dirty & /*$appSettings*/ 128 && div1_draggable_value !== (div1_draggable_value = /*$appSettings*/ ctx[7].layoutMode)) {
    				attr_dev(div1, "draggable", div1_draggable_value);
    			}

    			if (!current || dirty & /*rotation*/ 8) {
    				set_style(div1, "transform", "rotate(" + (/*rotation*/ ctx[3] + "deg") + ")");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(7, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("EN16", slots, ['default']);
    	let { moduleWidth } = $$props;
    	let { selectedElement = {} } = $$props;
    	let { id = "EN16" } = $$props;
    	let { rotation = 0 } = $$props;
    	let { color } = $$props;
    	let dx, dy;

    	const control_block = number => {
    		let array = [];

    		for (let i = 0; i < number; i++) {
    			array.push(i);
    		}

    		return array;
    	};

    	function handleEventParamChange(static_elementNumber, input_elementNumber) {
    		if (static_elementNumber == input_elementNumber) {
    			if (dx == selectedElement.dx && dy == selectedElement.dy) {
    				return selectedElement.eventParam;
    			}
    		}
    	}

    	onMount(() => {
    		if (id !== undefined && id.length > 4) {
    			console.log(id);
    			$$invalidate(5, dx = +id.split(";")[0].split(":").pop());
    			$$invalidate(6, dy = +id.split(";")[1].split(":").pop());
    		}
    	});

    	const writable_props = ["moduleWidth", "selectedElement", "id", "rotation", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$b.warn(`<EN16> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(3, rotation = $$props.rotation);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localInputStore,
    		appSettings,
    		select,
    		Encoder,
    		Led,
    		moduleWidth,
    		selectedElement,
    		id,
    		rotation,
    		color,
    		dx,
    		dy,
    		control_block,
    		handleEventParamChange,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("selectedElement" in $$props) $$invalidate(1, selectedElement = $$props.selectedElement);
    		if ("id" in $$props) $$invalidate(2, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(3, rotation = $$props.rotation);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("dx" in $$props) $$invalidate(5, dx = $$props.dx);
    		if ("dy" in $$props) $$invalidate(6, dy = $$props.dy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		moduleWidth,
    		selectedElement,
    		id,
    		rotation,
    		color,
    		dx,
    		dy,
    		$appSettings,
    		control_block,
    		handleEventParamChange,
    		$$scope,
    		slots
    	];
    }

    class EN16 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {
    			moduleWidth: 0,
    			selectedElement: 1,
    			id: 2,
    			rotation: 3,
    			color: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EN16",
    			options,
    			id: create_fragment$C.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*moduleWidth*/ ctx[0] === undefined && !("moduleWidth" in props)) {
    			console_1$b.warn("<EN16> was created without expected prop 'moduleWidth'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console_1$b.warn("<EN16> was created without expected prop 'color'");
    		}
    	}

    	get moduleWidth() {
    		throw new Error("<EN16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<EN16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedElement() {
    		throw new Error("<EN16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedElement(value) {
    		throw new Error("<EN16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<EN16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<EN16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<EN16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<EN16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<EN16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<EN16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\layout\components\DragModule.svelte generated by Svelte v3.35.0 */

    const { console: console_1$a } = globals;
    const file$z = "src\\app\\layout\\components\\DragModule.svelte";

    // (73:4) {#if true}
    function create_if_block$h(ctx) {
    	let div16;
    	let div3;
    	let div2;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let div1;
    	let t2;
    	let div7;
    	let div6;
    	let div4;
    	let img1;
    	let img1_src_value;
    	let t3;
    	let div5;
    	let t5;
    	let div11;
    	let div10;
    	let div8;
    	let img2;
    	let img2_src_value;
    	let t6;
    	let div9;
    	let t8;
    	let div15;
    	let div14;
    	let div12;
    	let img3;
    	let img3_src_value;
    	let t9;
    	let div13;
    	let div16_intro;

    	const block = {
    		c: function create() {
    			div16 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space$1();
    			div1 = element("div");
    			div1.textContent = "PO16";
    			t2 = space$1();
    			div7 = element("div");
    			div6 = element("div");
    			div4 = element("div");
    			img1 = element("img");
    			t3 = space$1();
    			div5 = element("div");
    			div5.textContent = "PBF4";
    			t5 = space$1();
    			div11 = element("div");
    			div10 = element("div");
    			div8 = element("div");
    			img2 = element("img");
    			t6 = space$1();
    			div9 = element("div");
    			div9.textContent = "BU16";
    			t8 = space$1();
    			div15 = element("div");
    			div14 = element("div");
    			div12 = element("div");
    			img3 = element("img");
    			t9 = space$1();
    			div13 = element("div");
    			div13.textContent = "EN16";
    			attr_dev(img0, "class", "h-10 w-10 rounded-full object-cover");
    			if (img0.src !== (img0_src_value = "./assets/imgs/sm_bu16.jpg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "po16");
    			add_location(img0, file$z, 78, 14, 1988);
    			attr_dev(div0, "class", "h-10 w-10 rounded-full");
    			add_location(div0, file$z, 77, 12, 1936);
    			attr_dev(div1, "class", "p-2");
    			add_location(div1, file$z, 80, 12, 2114);
    			attr_dev(div2, "class", "pointer-events-none flex justify-between items-center");
    			add_location(div2, file$z, 76, 10, 1855);
    			attr_dev(div3, "id", "drg-PO16");
    			attr_dev(div3, "class", "cursor-pointer secondary text-white w-full p-2 my-2 hover:bg-purple-600 rounded-lg");
    			attr_dev(div3, "draggable", "true");
    			add_location(div3, file$z, 75, 8, 1716);
    			attr_dev(img1, "class", "h-10 w-10 rounded-full object-cover");
    			if (img1.src !== (img1_src_value = "./assets/imgs/sm_pbf4.jpg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "pbf4");
    			add_location(img1, file$z, 89, 14, 2490);
    			attr_dev(div4, "class", "h-10 w-10 rounded-full ");
    			add_location(div4, file$z, 88, 12, 2437);
    			attr_dev(div5, "class", "p-2");
    			add_location(div5, file$z, 91, 12, 2616);
    			attr_dev(div6, "class", "pointer-events-none flex justify-between items-center");
    			add_location(div6, file$z, 87, 10, 2356);
    			attr_dev(div7, "id", "drg-PBF4");
    			attr_dev(div7, "class", "cursor-pointer secondary text-white p-2 my-2 w-full hover:bg-purple-600 rounded-lg");
    			attr_dev(div7, "draggable", "true");
    			add_location(div7, file$z, 86, 8, 2217);
    			attr_dev(img2, "class", "h-10 w-10 rounded-full object-cover");
    			if (img2.src !== (img2_src_value = "./assets/imgs/sm_bu16.jpg")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "bu16");
    			add_location(img2, file$z, 100, 14, 2993);
    			attr_dev(div8, "class", "h-10 w-10 rounded-full ");
    			add_location(div8, file$z, 99, 12, 2940);
    			attr_dev(div9, "class", "p-2");
    			add_location(div9, file$z, 102, 12, 3119);
    			attr_dev(div10, "class", "pointer-events-none flex justify-between items-center");
    			add_location(div10, file$z, 98, 10, 2859);
    			attr_dev(div11, "id", "drg-BU16");
    			attr_dev(div11, "class", "cursor-pointer secondary text-white p-2 my-2 w-full  hover:bg-purple-600 rounded-lg");
    			attr_dev(div11, "draggable", "true");
    			add_location(div11, file$z, 97, 8, 2719);
    			attr_dev(img3, "class", "h-10 w-10 rounded-full object-cover");
    			if (img3.src !== (img3_src_value = "./assets/imgs/sm_en16.jpg")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "en16");
    			add_location(img3, file$z, 111, 14, 3496);
    			attr_dev(div12, "class", "h-10 w-10 rounded-full ");
    			add_location(div12, file$z, 110, 12, 3443);
    			attr_dev(div13, "class", "p-2");
    			add_location(div13, file$z, 113, 12, 3622);
    			attr_dev(div14, "class", "pointer-events-none flex justify-between items-center");
    			add_location(div14, file$z, 109, 10, 3362);
    			attr_dev(div15, "id", "drg-EN16");
    			attr_dev(div15, "class", "cursor-pointer secondary text-white p-2 my-2  w-full hover:bg-purple-600 rounded-lg");
    			attr_dev(div15, "draggable", "true");
    			add_location(div15, file$z, 108, 8, 3222);
    			attr_dev(div16, "class", "w-full mt-2 flex flex-col flex-wrap rounded-lg");
    			add_location(div16, file$z, 73, 6, 1636);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div16, anchor);
    			append_dev(div16, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, img0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div16, t2);
    			append_dev(div16, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div4);
    			append_dev(div4, img1);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div16, t5);
    			append_dev(div16, div11);
    			append_dev(div11, div10);
    			append_dev(div10, div8);
    			append_dev(div8, img2);
    			append_dev(div10, t6);
    			append_dev(div10, div9);
    			append_dev(div16, t8);
    			append_dev(div16, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div12);
    			append_dev(div12, img3);
    			append_dev(div14, t9);
    			append_dev(div14, div13);
    		},
    		i: function intro(local) {
    			if (!div16_intro) {
    				add_render_callback(() => {
    					div16_intro = create_in_transition(div16, fade, {});
    					div16_intro.start();
    				});
    			}
    		},
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div16);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(73:4) {#if true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let div2;
    	let div0;
    	let po16;
    	let t0;
    	let pbf4;
    	let t1;
    	let bu16;
    	let t2;
    	let en16;
    	let t3;
    	let div1;
    	let t5;
    	let current;
    	po16 = new PO16({ $$inline: true });
    	pbf4 = new PBF4({ $$inline: true });
    	bu16 = new BU16({ $$inline: true });
    	en16 = new EN16({ $$inline: true });
    	let if_block = create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(po16.$$.fragment);
    			t0 = space$1();
    			create_component(pbf4.$$.fragment);
    			t1 = space$1();
    			create_component(bu16.$$.fragment);
    			t2 = space$1();
    			create_component(en16.$$.fragment);
    			t3 = space$1();
    			div1 = element("div");
    			div1.textContent = "Virtual Modules";
    			t5 = space$1();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "absolute invisible");
    			add_location(div0, file$z, 58, 4, 1421);
    			attr_dev(div1, "class", "text-white py-2");
    			add_location(div1, file$z, 70, 4, 1560);
    			attr_dev(div2, "class", "w-full flex flex-col justify-start items-start primary p-4 rounded-lg svelte-d93t42");
    			toggle_class(div2, "tour", /*$tour*/ ctx[1].selectedName == "DragModule");
    			toggle_class(div2, "changeTour", /*$tour*/ ctx[1].selectedName == "LocalSettings" && /*toggle*/ ctx[0]);
    			add_location(div2, file$z, 53, 2, 1194);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(po16, div0, null);
    			append_dev(div0, t0);
    			mount_component(pbf4, div0, null);
    			append_dev(div0, t1);
    			mount_component(bu16, div0, null);
    			append_dev(div0, t2);
    			mount_component(en16, div0, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div2, t5);
    			if (if_block) if_block.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$tour*/ 2) {
    				toggle_class(div2, "tour", /*$tour*/ ctx[1].selectedName == "DragModule");
    			}

    			if (dirty & /*$tour, toggle*/ 3) {
    				toggle_class(div2, "changeTour", /*$tour*/ ctx[1].selectedName == "LocalSettings" && /*toggle*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(po16.$$.fragment, local);
    			transition_in(pbf4.$$.fragment, local);
    			transition_in(bu16.$$.fragment, local);
    			transition_in(en16.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(po16.$$.fragment, local);
    			transition_out(pbf4.$$.fragment, local);
    			transition_out(bu16.$$.fragment, local);
    			transition_out(en16.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(po16);
    			destroy_component(pbf4);
    			destroy_component(bu16);
    			destroy_component(en16);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let $tour;
    	validate_store(tour, "tour");
    	component_subscribe($$self, tour, $$value => $$invalidate(1, $tour = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("DragModule", slots, []);
    	let toggle;

    	function enableLayoutMode() {
    		$$invalidate(0, toggle = !toggle);
    		console.log("enableLayoutMode", toggle);

    		appSettings.update(store => {
    			store.layoutMode = toggle;
    			return store;
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$a.warn(`<DragModule> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		PO16,
    		PBF4,
    		BU16,
    		EN16,
    		fade,
    		appSettings,
    		tour,
    		toggle,
    		enableLayoutMode,
    		$tour
    	});

    	$$self.$inject_state = $$props => {
    		if ("toggle" in $$props) $$invalidate(0, toggle = $$props.toggle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [toggle, $tour];
    }

    class DragModule extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DragModule",
    			options,
    			id: create_fragment$B.name
    		});
    	}
    }

    /* src\app\layout\components\RemoveModule.svelte generated by Svelte v3.35.0 */

    const file$y = "src\\app\\layout\\components\\RemoveModule.svelte";

    function create_fragment$A(ctx) {
    	let div4;
    	let div3;
    	let div0;
    	let t0;
    	let div2;
    	let div1;
    	let t2;
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			t0 = space$1();
    			div2 = element("div");
    			div1 = element("div");
    			div1.textContent = "Remove";
    			t2 = space$1();
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(div0, "id", "bin");
    			attr_dev(div0, "class", "flex absolute h-full w-full");
    			add_location(div0, file$y, 2, 2, 148);
    			attr_dev(div1, "class", "p-2");
    			add_location(div1, file$y, 4, 6, 328);
    			attr_dev(path0, "d", "M1 15V20H21V15");
    			attr_dev(path0, "stroke", "#a0aec0");
    			add_location(path0, file$y, 6, 8, 463);
    			attr_dev(path1, "fill", "#a0aec0");
    			attr_dev(path1, "d", "M10.6464 13.3536C10.8417 13.5488 11.1583 13.5488 11.3536 13.3536L14.5355 10.1716C14.7308 9.97631 14.7308 9.65973 14.5355 9.46447C14.3403 9.2692 14.0237 9.2692 13.8284 9.46447L11 12.2929L8.17157 9.46447C7.97631 9.2692 7.65973 9.2692 7.46447 9.46447C7.2692 9.65973 7.2692 9.97631 7.46447 10.1716L10.6464 13.3536ZM10.5 0V13H11.5V0L10.5 0Z");
    			add_location(path1, file$y, 7, 8, 516);
    			attr_dev(svg, "class", "w-8 h-8");
    			attr_dev(svg, "viewBox", "0 0 22 21");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$y, 5, 6, 365);
    			attr_dev(div2, "class", "flex flex-col justify-center items-center border border-dashed border-gray-800 p-4 h-40 w-40 m-2");
    			add_location(div2, file$y, 3, 4, 210);
    			attr_dev(div3, "class", "m-4 relative z-20 primary text-gray-500 rounded-lg");
    			add_location(div3, file$y, 1, 2, 80);
    			attr_dev(div4, "class", "w-full absolute bottom-0 right-0 flex justify-end items-center");
    			add_location(div4, file$y, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div2, t2);
    			append_dev(div2, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("RemoveModule", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RemoveModule> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class RemoveModule extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RemoveModule",
    			options,
    			id: create_fragment$A.name
    		});
    	}
    }

    /* src\app\shared\main\KeyStatus.svelte generated by Svelte v3.35.0 */
    const file$x = "src\\app\\shared\\main\\KeyStatus.svelte";

    function create_fragment$z(ctx) {
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "Re-Enable Macro";
    			attr_dev(button, "class", "ml-8 text-white px-2 py-1 text-xs border-none rounded focus:outline-none");
    			toggle_class(button, "bg-secondary", /*hidKeyStatus*/ ctx[0] == 1);
    			toggle_class(button, "bg-highlight", /*hidKeyStatus*/ ctx[0] == 0);
    			add_location(button, file$x, 24, 2, 640);
    			attr_dev(div, "class", "flex flex-col text-white ");
    			add_location(div, file$x, 23, 0, 597);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*enableMacro*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*hidKeyStatus*/ 1) {
    				toggle_class(button, "bg-secondary", /*hidKeyStatus*/ ctx[0] == 1);
    			}

    			if (dirty & /*hidKeyStatus*/ 1) {
    				toggle_class(button, "bg-highlight", /*hidKeyStatus*/ ctx[0] == 0);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("KeyStatus", slots, []);
    	let hidKeyStatus = 0;

    	function enableMacro() {
    		const command = GRID_PROTOCOL.encode("", "HIDKEYSTATUS", "EXECUTE", [{ "ISENABLED": 1 }], "");
    		serialComm$1.write(command);
    	}

    	onMount(() => {
    		hidKeyStatusStore.subscribe(values => {
    			$$invalidate(0, hidKeyStatus = values.isEnabled);
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<KeyStatus> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		serialComm: serialComm$1,
    		GRID_PROTOCOL,
    		hidKeyStatusStore,
    		hidKeyStatus,
    		enableMacro
    	});

    	$$self.$inject_state = $$props => {
    		if ("hidKeyStatus" in $$props) $$invalidate(0, hidKeyStatus = $$props.hidKeyStatus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [hidKeyStatus, enableMacro];
    }

    class KeyStatus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "KeyStatus",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    /* src\app\shared\messages\Message.svelte generated by Svelte v3.35.0 */
    const file$w = "src\\app\\shared\\messages\\Message.svelte";

    // (10:2) {#if $messageStore.message}
    function create_if_block$g(ctx) {
    	let div1;
    	let div0;
    	let span0;
    	let t0_value = /*$messageStore*/ ctx[0].message + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*$messageStore*/ ctx[0].value + "";
    	let t2;
    	let div1_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space$1();
    			span1 = element("span");
    			t2 = text(t2_value);
    			add_location(span0, file$w, 12, 8, 339);
    			attr_dev(span1, "class", "text-important italic");
    			add_location(span1, file$w, 13, 8, 386);
    			add_location(div0, file$w, 11, 6, 324);
    			attr_dev(div1, "class", "text-white bg-primary p-4 border rounded-lg border-gray-700");
    			add_location(div1, file$w, 10, 4, 227);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t0);
    			append_dev(div0, t1);
    			append_dev(div0, span1);
    			append_dev(span1, t2);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$messageStore*/ 1) && t0_value !== (t0_value = /*$messageStore*/ ctx[0].message + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$messageStore*/ 1) && t2_value !== (t2_value = /*$messageStore*/ ctx[0].value + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(10:2) {#if $messageStore.message}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let main;
    	let current;
    	let if_block = /*$messageStore*/ ctx[0].message && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block) if_block.c();
    			attr_dev(main, "id", "messages");
    			attr_dev(main, "class", "bottom-1 absolute right-1");
    			add_location(main, file$w, 8, 0, 136);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block) if_block.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$messageStore*/ ctx[0].message) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$messageStore*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(main, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let $messageStore;
    	validate_store(messageStore, "messageStore");
    	component_subscribe($$self, messageStore, $$value => $$invalidate(0, $messageStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Message", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Message> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fade, messageStore, $messageStore });
    	return [$messageStore];
    }

    class Message extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Message",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* src\app\core\grid-modules\overlays\ControlNameOverlay.svelte generated by Svelte v3.35.0 */
    const file$v = "src\\app\\core\\grid-modules\\overlays\\ControlNameOverlay.svelte";

    function get_each_context_2$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (53:33) 
    function create_if_block_3$3(ctx) {
    	let div;
    	let each_value_2 = /*control_block*/ ctx[5](4);
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$3(get_each_context_2$3(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "overlay text-white w-full svelte-1wbyriu");
    			add_location(div, file$v, 53, 2, 2019);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth, control_block, rotation, controlElementSettings, breakpoint*/ 59) {
    				each_value_2 = /*control_block*/ ctx[5](4);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$3(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(53:33) ",
    		ctx
    	});

    	return block;
    }

    // (36:0) {#if overlayDesign == '4x4'}
    function create_if_block$f(ctx) {
    	let div;
    	let each_value = /*control_block*/ ctx[5](4);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "overlay text-white w-full svelte-1wbyriu");
    			add_location(div, file$v, 36, 2, 859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth, control_block, rotation, controlElementSettings, breakpoint*/ 59) {
    				each_value = /*control_block*/ ctx[5](4);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(36:0) {#if overlayDesign == '4x4'}",
    		ctx
    	});

    	return block;
    }

    // (61:121) 
    function create_if_block_5$1(ctx) {
    	let div0;
    	let t0_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(4, 4) + "";
    	let t2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			div1 = element("div");
    			t2 = text(t2_value);
    			attr_dev(div0, "class", "block p-0 m-0 font-mono");
    			add_location(div0, file$v, 61, 14, 2795);
    			attr_dev(div1, "class", "block p-0 m-0 font-mono");
    			add_location(div1, file$v, 62, 14, 2930);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*controlElementSettings*/ 8 && t0_value !== (t0_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*controlElementSettings*/ 8 && t2_value !== (t2_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(4, 4) + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(61:121) ",
    		ctx
    	});

    	return block;
    }

    // (59:12) {#if breakpoint == 'small' || controlElementSettings[element * 4 + block].controlElementName.length <= 4}
    function create_if_block_4$2(ctx) {
    	let div;
    	let t_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "block font-mono");
    			add_location(div, file$v, 59, 14, 2545);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*controlElementSettings*/ 8 && t_value !== (t_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(59:12) {#if breakpoint == 'small' || controlElementSettings[element * 4 + block].controlElementName.length <= 4}",
    		ctx
    	});

    	return block;
    }

    // (57:8) {#each control_block(3) as element }
    function create_each_block_3$1(ctx) {
    	let div;

    	function select_block_type_2(ctx, dirty) {
    		if (/*breakpoint*/ ctx[4] == "small" || /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.length <= 4) return create_if_block_4$2;
    		if (/*breakpoint*/ ctx[4] == "large" && /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.length > 4) return create_if_block_5$1;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "text-xs flex flex-col items-center justify-center");
    			set_style(div, "height", /*moduleWidth*/ ctx[0] / 4 + "px");
    			set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			add_location(div, file$v, 57, 10, 2266);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "height", /*moduleWidth*/ ctx[0] / 4 + "px");
    			}

    			if (dirty & /*rotation*/ 2) {
    				set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(57:8) {#each control_block(3) as element }",
    		ctx
    	});

    	return block;
    }

    // (55:4) {#each control_block(4) as block }
    function create_each_block_2$3(ctx) {
    	let div;
    	let t;
    	let each_value_3 = /*control_block*/ ctx[5](3);
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "text-xs flex flex-col justify-around items-center");
    			set_style(div, "width", /*moduleWidth*/ ctx[0] / 4 + "px");
    			add_location(div, file$v, 55, 6, 2106);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth, rotation, controlElementSettings, control_block, breakpoint*/ 59) {
    				each_value_3 = /*control_block*/ ctx[5](3);
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "width", /*moduleWidth*/ ctx[0] / 4 + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$3.name,
    		type: "each",
    		source: "(55:4) {#each control_block(4) as block }",
    		ctx
    	});

    	return block;
    }

    // (44:121) 
    function create_if_block_2$7(ctx) {
    	let div0;
    	let t0_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(4, 4) + "";
    	let t2;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			div1 = element("div");
    			t2 = text(t2_value);
    			attr_dev(div0, "class", "block p-0 m-0 font-mono");
    			add_location(div0, file$v, 44, 14, 1635);
    			attr_dev(div1, "class", "block p-0 m-0 font-mono");
    			add_location(div1, file$v, 45, 14, 1770);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*controlElementSettings*/ 8 && t0_value !== (t0_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*controlElementSettings*/ 8 && t2_value !== (t2_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(4, 4) + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(44:121) ",
    		ctx
    	});

    	return block;
    }

    // (42:12) {#if breakpoint == 'small' || controlElementSettings[element * 4 + block].controlElementName.length <= 4}
    function create_if_block_1$a(ctx) {
    	let div;
    	let t_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "block font-mono");
    			add_location(div, file$v, 42, 14, 1385);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*controlElementSettings*/ 8 && t_value !== (t_value = /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.substr(0, 4) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(42:12) {#if breakpoint == 'small' || controlElementSettings[element * 4 + block].controlElementName.length <= 4}",
    		ctx
    	});

    	return block;
    }

    // (40:8) {#each control_block(4) as element }
    function create_each_block_1$5(ctx) {
    	let div;

    	function select_block_type_1(ctx, dirty) {
    		if (/*breakpoint*/ ctx[4] == "small" || /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.length <= 4) return create_if_block_1$a;
    		if (/*breakpoint*/ ctx[4] == "large" && /*controlElementSettings*/ ctx[3][/*element*/ ctx[11] * 4 + /*block*/ ctx[8]].controlElementName.length > 4) return create_if_block_2$7;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "text-xs flex flex-col items-center justify-center");
    			set_style(div, "height", /*moduleWidth*/ ctx[0] / 4 + "px");
    			set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			add_location(div, file$v, 40, 10, 1106);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "height", /*moduleWidth*/ ctx[0] / 4 + "px");
    			}

    			if (dirty & /*rotation*/ 2) {
    				set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(40:8) {#each control_block(4) as element }",
    		ctx
    	});

    	return block;
    }

    // (38:4) {#each control_block(4) as block }
    function create_each_block$d(ctx) {
    	let div;
    	let t;
    	let each_value_1 = /*control_block*/ ctx[5](4);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "text-xs flex flex-col justify-around items-center");
    			set_style(div, "width", /*moduleWidth*/ ctx[0] / 4 + "px");
    			add_location(div, file$v, 38, 6, 946);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth, rotation, controlElementSettings, control_block, breakpoint*/ 59) {
    				each_value_1 = /*control_block*/ ctx[5](4);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "width", /*moduleWidth*/ ctx[0] / 4 + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(38:4) {#each control_block(4) as block }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*overlayDesign*/ ctx[2] == "4x4") return create_if_block$f;
    		if (/*overlayDesign*/ ctx[2] == "3x4") return create_if_block_3$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let breakpoint;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ControlNameOverlay", slots, []);
    	let { id } = $$props;
    	let { moduleWidth } = $$props;
    	let { rotation } = $$props;
    	let { bankActive } = $$props;
    	let overlayDesign;
    	let controlElementSettings;

    	const control_block = number => {
    		let array = [];

    		for (let i = 0; i < number; i++) {
    			array.push(i);
    		}

    		return array;
    	};

    	runtime$1.subscribe(runtime => {
    		const settings = runtime.find(controller => controller.id == id);
    		if (settings !== undefined) $$invalidate(3, controlElementSettings = settings.banks[bankActive]);
    	});

    	const writable_props = ["id", "moduleWidth", "rotation", "bankActive"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ControlNameOverlay> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(6, id = $$props.id);
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    		if ("bankActive" in $$props) $$invalidate(7, bankActive = $$props.bankActive);
    	};

    	$$self.$capture_state = () => ({
    		localInputStore,
    		runtime: runtime$1,
    		id,
    		moduleWidth,
    		rotation,
    		bankActive,
    		overlayDesign,
    		controlElementSettings,
    		control_block,
    		breakpoint
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(6, id = $$props.id);
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    		if ("bankActive" in $$props) $$invalidate(7, bankActive = $$props.bankActive);
    		if ("overlayDesign" in $$props) $$invalidate(2, overlayDesign = $$props.overlayDesign);
    		if ("controlElementSettings" in $$props) $$invalidate(3, controlElementSettings = $$props.controlElementSettings);
    		if ("breakpoint" in $$props) $$invalidate(4, breakpoint = $$props.breakpoint);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*moduleWidth*/ 1) {
    			$$invalidate(4, breakpoint = moduleWidth > 200 ? "large" : "small");
    		}

    		if ($$self.$$.dirty & /*id*/ 64) {
    			id.startsWith("PBF4")
    			? $$invalidate(2, overlayDesign = "3x4")
    			: $$invalidate(2, overlayDesign = "4x4");
    		}
    	};

    	return [
    		moduleWidth,
    		rotation,
    		overlayDesign,
    		controlElementSettings,
    		breakpoint,
    		control_block,
    		id,
    		bankActive
    	];
    }

    class ControlNameOverlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {
    			id: 6,
    			moduleWidth: 0,
    			rotation: 1,
    			bankActive: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ControlNameOverlay",
    			options,
    			id: create_fragment$x.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[6] === undefined && !("id" in props)) {
    			console.warn("<ControlNameOverlay> was created without expected prop 'id'");
    		}

    		if (/*moduleWidth*/ ctx[0] === undefined && !("moduleWidth" in props)) {
    			console.warn("<ControlNameOverlay> was created without expected prop 'moduleWidth'");
    		}

    		if (/*rotation*/ ctx[1] === undefined && !("rotation" in props)) {
    			console.warn("<ControlNameOverlay> was created without expected prop 'rotation'");
    		}

    		if (/*bankActive*/ ctx[7] === undefined && !("bankActive" in props)) {
    			console.warn("<ControlNameOverlay> was created without expected prop 'bankActive'");
    		}
    	}

    	get id() {
    		throw new Error("<ControlNameOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ControlNameOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get moduleWidth() {
    		throw new Error("<ControlNameOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<ControlNameOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<ControlNameOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<ControlNameOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bankActive() {
    		throw new Error("<ControlNameOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bankActive(value) {
    		throw new Error("<ControlNameOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\overlays\ProfileLoadOverlay.svelte generated by Svelte v3.35.0 */
    const file$u = "src\\app\\core\\grid-modules\\overlays\\ProfileLoadOverlay.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (30:6) {#each control_block(2) as element }
    function create_each_block_1$4(ctx) {
    	let div;
    	let t_value = /*element*/ ctx[11] * 2 + /*block*/ ctx[8] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "text-xs flex flex-col items-center justify-center border border-gray-700 hover:bg-highlight cursor-pointer w-full");
    			set_style(div, "height", /*moduleWidth*/ ctx[0] / 2 + "px");
    			set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			add_location(div, file$u, 30, 8, 717);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "height", /*moduleWidth*/ ctx[0] / 2 + "px");
    			}

    			if (dirty & /*rotation*/ 2) {
    				set_style(div, "transform", "rotate(" + (-1 * /*rotation*/ ctx[1] + "deg") + ")");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(30:6) {#each control_block(2) as element }",
    		ctx
    	});

    	return block;
    }

    // (28:2) {#each control_block(2) as block }
    function create_each_block$c(ctx) {
    	let div;
    	let t;
    	let each_value_1 = /*control_block*/ ctx[2](2);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$1();
    			attr_dev(div, "class", "text-xs flex flex-col justify-around items-center");
    			set_style(div, "width", /*moduleWidth*/ ctx[0] / 2 + "px");
    			add_location(div, file$u, 28, 4, 561);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*moduleWidth, rotation, control_block*/ 7) {
    				each_value_1 = /*control_block*/ ctx[2](2);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*moduleWidth*/ 1) {
    				set_style(div, "width", /*moduleWidth*/ ctx[0] / 2 + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(28:2) {#each control_block(2) as block }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let div;
    	let each_value = /*control_block*/ ctx[2](2);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "overlay text-white w-full svelte-1wbyriu");
    			add_location(div, file$u, 26, 0, 478);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*moduleWidth, control_block, rotation*/ 7) {
    				each_value = /*control_block*/ ctx[2](2);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let breakpoint;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ProfileLoadOverlay", slots, []);
    	let { id } = $$props;
    	let { moduleWidth } = $$props;
    	let { rotation } = $$props;
    	let { bank } = $$props;
    	let overlayDesign;
    	let controlElementSettings;

    	const control_block = number => {
    		let array = [];

    		for (let i = 0; i < number; i++) {
    			array.push(i);
    		}

    		return array;
    	};

    	const writable_props = ["id", "moduleWidth", "rotation", "bank"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ProfileLoadOverlay> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(3, id = $$props.id);
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    		if ("bank" in $$props) $$invalidate(4, bank = $$props.bank);
    	};

    	$$self.$capture_state = () => ({
    		localInputStore,
    		id,
    		moduleWidth,
    		rotation,
    		bank,
    		overlayDesign,
    		controlElementSettings,
    		control_block,
    		breakpoint
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(3, id = $$props.id);
    		if ("moduleWidth" in $$props) $$invalidate(0, moduleWidth = $$props.moduleWidth);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    		if ("bank" in $$props) $$invalidate(4, bank = $$props.bank);
    		if ("overlayDesign" in $$props) overlayDesign = $$props.overlayDesign;
    		if ("controlElementSettings" in $$props) controlElementSettings = $$props.controlElementSettings;
    		if ("breakpoint" in $$props) breakpoint = $$props.breakpoint;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*moduleWidth*/ 1) {
    			breakpoint = moduleWidth > 200 ? "large" : "small";
    		}
    	};

    	return [moduleWidth, rotation, control_block, id, bank];
    }

    class ProfileLoadOverlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			id: 3,
    			moduleWidth: 0,
    			rotation: 1,
    			bank: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProfileLoadOverlay",
    			options,
    			id: create_fragment$w.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[3] === undefined && !("id" in props)) {
    			console.warn("<ProfileLoadOverlay> was created without expected prop 'id'");
    		}

    		if (/*moduleWidth*/ ctx[0] === undefined && !("moduleWidth" in props)) {
    			console.warn("<ProfileLoadOverlay> was created without expected prop 'moduleWidth'");
    		}

    		if (/*rotation*/ ctx[1] === undefined && !("rotation" in props)) {
    			console.warn("<ProfileLoadOverlay> was created without expected prop 'rotation'");
    		}

    		if (/*bank*/ ctx[4] === undefined && !("bank" in props)) {
    			console.warn("<ProfileLoadOverlay> was created without expected prop 'bank'");
    		}
    	}

    	get id() {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get moduleWidth() {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set moduleWidth(value) {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bank() {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bank(value) {
    		throw new Error("<ProfileLoadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\core\grid-modules\MODULE.svelte generated by Svelte v3.35.0 */

    // (63:0) {#if selected}
    function create_if_block$e(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*selected*/ ctx[4].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				moduleWidth: /*moduleWidth*/ ctx[7],
    				id: /*id*/ ctx[0],
    				rotation: /*rotation*/ ctx[1],
    				color: /*color*/ ctx[5],
    				selectedElement: /*selectedElement*/ ctx[6],
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*moduleWidth*/ 128) switch_instance_changes.moduleWidth = /*moduleWidth*/ ctx[7];
    			if (dirty & /*id*/ 1) switch_instance_changes.id = /*id*/ ctx[0];
    			if (dirty & /*rotation*/ 2) switch_instance_changes.rotation = /*rotation*/ ctx[1];
    			if (dirty & /*color*/ 32) switch_instance_changes.color = /*color*/ ctx[5];
    			if (dirty & /*selectedElement*/ 64) switch_instance_changes.selectedElement = /*selectedElement*/ ctx[6];

    			if (dirty & /*$$scope, id, moduleWidth, bankActive, rotation, $appSettings*/ 2191) {
    				switch_instance_changes.$$scope = { dirty, ctx };
    			}

    			if (switch_value !== (switch_value = /*selected*/ ctx[4].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(63:0) {#if selected}",
    		ctx
    	});

    	return block;
    }

    // (66:4) {#if $appSettings.overlays.controlName}
    function create_if_block_1$9(ctx) {
    	let controlnameoverlay;
    	let current;

    	controlnameoverlay = new ControlNameOverlay({
    			props: {
    				id: /*id*/ ctx[0],
    				moduleWidth: /*moduleWidth*/ ctx[7],
    				bankActive: /*bankActive*/ ctx[2],
    				rotation: /*rotation*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(controlnameoverlay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(controlnameoverlay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const controlnameoverlay_changes = {};
    			if (dirty & /*id*/ 1) controlnameoverlay_changes.id = /*id*/ ctx[0];
    			if (dirty & /*moduleWidth*/ 128) controlnameoverlay_changes.moduleWidth = /*moduleWidth*/ ctx[7];
    			if (dirty & /*bankActive*/ 4) controlnameoverlay_changes.bankActive = /*bankActive*/ ctx[2];
    			if (dirty & /*rotation*/ 2) controlnameoverlay_changes.rotation = /*rotation*/ ctx[1];
    			controlnameoverlay.$set(controlnameoverlay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(controlnameoverlay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(controlnameoverlay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(controlnameoverlay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(66:4) {#if $appSettings.overlays.controlName}",
    		ctx
    	});

    	return block;
    }

    // (64:2) <svelte:component this={selected.component} {moduleWidth} {id} {rotation} {color} {selectedElement}>
    function create_default_slot(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$appSettings*/ ctx[3].overlays.controlName && create_if_block_1$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$appSettings*/ ctx[3].overlays.controlName) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$appSettings*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(64:2) <svelte:component this={selected.component} {moduleWidth} {id} {rotation} {color} {selectedElement}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*selected*/ ctx[4] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*selected*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*selected*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let moduleWidth;
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(3, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MODULE", slots, []);

    	const components = [
    		{ type: "BU16", component: BU16 },
    		{ type: "PO16", component: PO16 },
    		{ type: "PBF4", component: PBF4 },
    		{ type: "EN16", component: EN16 }
    	];

    	let { type } = $$props;
    	let { id } = $$props;
    	let { rotation } = $$props;
    	let selected;
    	let color;
    	let bankColors;
    	let bankActive;
    	let selectedElement;

    	onMount(() => {
    		bankActiveStore.subscribe(store => {
    			$$invalidate(2, bankActive = store.bankActive);
    		});

    		runtime$1.subscribe(store => {
    			if (store.length !== 0) {
    				$$invalidate(9, bankColors = store[0].global.bankColors);
    			}
    		});

    		derivedLocalInputStore.subscribe(store => {
    			$$invalidate(6, selectedElement = store);
    		});
    	});

    	const writable_props = ["type", "id", "rotation"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MODULE> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("type" in $$props) $$invalidate(8, type = $$props.type);
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		BU16,
    		PO16,
    		PBF4,
    		EN16,
    		ControlNameOverlay,
    		ProfileLoadOverlay,
    		appSettings,
    		bankActiveStore,
    		derivedLocalInputStore,
    		bankColorStore,
    		runtime: runtime$1,
    		components,
    		type,
    		id,
    		rotation,
    		selected,
    		color,
    		bankColors,
    		bankActive,
    		selectedElement,
    		moduleWidth,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("type" in $$props) $$invalidate(8, type = $$props.type);
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
    		if ("selected" in $$props) $$invalidate(4, selected = $$props.selected);
    		if ("color" in $$props) $$invalidate(5, color = $$props.color);
    		if ("bankColors" in $$props) $$invalidate(9, bankColors = $$props.bankColors);
    		if ("bankActive" in $$props) $$invalidate(2, bankActive = $$props.bankActive);
    		if ("selectedElement" in $$props) $$invalidate(6, selectedElement = $$props.selectedElement);
    		if ("moduleWidth" in $$props) $$invalidate(7, moduleWidth = $$props.moduleWidth);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$appSettings*/ 8) {
    			$$invalidate(7, moduleWidth = $appSettings.size * 106.6 + 2);
    		}

    		if ($$self.$$.dirty & /*type*/ 256) {
    			$$invalidate(4, selected = components.find(component => component.type === type));
    		}

    		if ($$self.$$.dirty & /*bankColors, bankActive*/ 516) {
    			if (bankColors) {
    				$$invalidate(5, color = bankColors[bankActive]);
    			}
    		}
    	};

    	return [
    		id,
    		rotation,
    		bankActive,
    		$appSettings,
    		selected,
    		color,
    		selectedElement,
    		moduleWidth,
    		type,
    		bankColors
    	];
    }

    class MODULE extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, { type: 8, id: 0, rotation: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MODULE",
    			options,
    			id: create_fragment$v.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[8] === undefined && !("type" in props)) {
    			console.warn("<MODULE> was created without expected prop 'type'");
    		}

    		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
    			console.warn("<MODULE> was created without expected prop 'id'");
    		}

    		if (/*rotation*/ ctx[1] === undefined && !("rotation" in props)) {
    			console.warn("<MODULE> was created without expected prop 'rotation'");
    		}
    	}

    	get type() {
    		throw new Error("<MODULE>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MODULE>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<MODULE>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<MODULE>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<MODULE>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<MODULE>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\settings\local\actions\NewMidi.svelte generated by Svelte v3.35.0 */

    const { console: console_1$9 } = globals;
    const file$t = "src\\app\\settings\\local\\actions\\NewMidi.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[0] = i;
    	return child_ctx;
    }

    // (117:4) {#each actionKeys as actionKey, index}
    function create_each_block$b(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*inputLabels*/ ctx[3][/*index*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let dropdowninput;
    	let t2;
    	let div1;
    	let t4;
    	let current;
    	dropdowninput = new DropDownInput({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			create_component(dropdowninput.$$.fragment);
    			t2 = space$1();
    			div1 = element("div");
    			div1.textContent = "he";
    			t4 = space$1();
    			attr_dev(div0, "class", "text-gray-500 uppercase text-sm leading-normal tracking-wide pb-2 pt-4");
    			add_location(div0, file$t, 118, 8, 3303);
    			attr_dev(div1, "class", "text-gray-500 pl-2 py-2 text-xs tracking-wide flex-grow-0");
    			add_location(div1, file$t, 120, 8, 3449);
    			attr_dev(div2, "class", "" + (null_to_empty("w-1/" + /*actionKeys*/ ctx[2].length + " dropDownInput") + " svelte-f1jfd3"));
    			add_location(div2, file$t, 117, 6, 3236);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			mount_component(dropdowninput, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div2, t4);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropdowninput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropdowninput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(dropdowninput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(117:4) {#each actionKeys as actionKey, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$u(ctx) {
    	let div2;
    	let div0;
    	let tab0;
    	let t1;
    	let tab1;
    	let t3;
    	let div1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*actionKeys*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			tab0 = element("tab");
    			tab0.textContent = "Static";
    			t1 = space$1();
    			tab1 = element("tab");
    			tab1.textContent = "Dynamic";
    			t3 = space$1();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(tab0, "class", "text-white cursor-pointer px-2 py-1 rounded-t-lg svelte-f1jfd3");
    			toggle_class(tab0, "bg-secondary", /*MIDImode*/ ctx[1] == "static");
    			toggle_class(tab0, "alterbg", /*MIDImode*/ ctx[1] != "static");
    			add_location(tab0, file$t, 99, 4, 2645);
    			attr_dev(tab1, "class", "text-white cursor-pointer px-2 py-1 rounded-t-lg svelte-f1jfd3");
    			toggle_class(tab1, "bg-secondary", /*MIDImode*/ ctx[1] == "dynamic");
    			toggle_class(tab1, "alterbg", /*MIDImode*/ ctx[1] != "dynamic");
    			add_location(tab1, file$t, 107, 4, 2890);
    			attr_dev(div0, "class", "flex flex-row");
    			add_location(div0, file$t, 98, 2, 2612);
    			attr_dev(div1, "class", "flex bg-secondary flex-row");
    			add_location(div1, file$t, 115, 2, 3144);
    			attr_dev(div2, "class", "flex flex-col");
    			add_location(div2, file$t, 97, 0, 2581);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, tab0);
    			append_dev(div0, t1);
    			append_dev(div0, tab1);
    			append_dev(div2, t3);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(tab0, "click", /*click_handler*/ ctx[8], false, false, false),
    					listen_dev(tab1, "click", /*click_handler_1*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*MIDImode*/ 2) {
    				toggle_class(tab0, "bg-secondary", /*MIDImode*/ ctx[1] == "static");
    			}

    			if (dirty & /*MIDImode*/ 2) {
    				toggle_class(tab0, "alterbg", /*MIDImode*/ ctx[1] != "static");
    			}

    			if (dirty & /*MIDImode*/ 2) {
    				toggle_class(tab1, "bg-secondary", /*MIDImode*/ ctx[1] == "dynamic");
    			}

    			if (dirty & /*MIDImode*/ 2) {
    				toggle_class(tab1, "alterbg", /*MIDImode*/ ctx[1] != "dynamic");
    			}

    			if (dirty & /*actionKeys, inputLabels*/ 12) {
    				each_value = /*actionKeys*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NewMidi", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let actionKeys = ["CABLECOMMAND", "COMMANDCHANNEL", "PARAM1", "PARAM2"];

    	// let optionList = buildOptionList(elementInfo, eventInfo, action);
    	let inputLabels = ["Channel", "Command", "Param 1", "Param 2"];

    	function sendData() {
    		//validate_midiabsolute(action.parameters)
    		// -1 on channel, beacuse it works 0..15
    		const CHANNEL = parseInt(action.parameters.CABLECOMMAND - 1).toString(16).padStart(2, "0")[1];

    		const COMMAND = parseInt(action.parameters.COMMANDCHANNEL).toString(16)[0];

    		const parameters = [
    			{ "CABLECOMMAND": `${"0" + COMMAND}` },
    			{ "COMMANDCHANNEL": `${COMMAND + CHANNEL}` },
    			{
    				"PARAM1": parameter_parser$1(action.parameters.PARAM1)
    			},
    			{
    				"PARAM1": parameter_parser$1(action.parameters.PARAM2)
    			}
    		];

    		console.log(parameters);

    		for (const key in validator) {
    			if (validator[key] == "invalid :(" || validator[key] == undefined) ;
    		}
    	} /**
    if(valid){
      dispatch('send', { 
        action: {
          value: action.value, 
          parameters: parameters
        }, 
        index: index 
      });
    }
    */

    	let orderChangeTrigger = null;

    	onMount(() => {
    		let c = 0;

    		actionListChange.subscribe(change => {
    			c++;

    			if (change !== null && c == 1) {
    				orderChangeTrigger = true;
    			}

    			c = 0;
    		});
    	}); /**
    const cablecommand = action.parameters.COMMANDCHANNEL % 16;
    const commandchannel = (action.parameters.CABLECOMMAND % 16) * 16;
    action.parameters.COMMANDCHANNEL = commandchannel;
    action.parameters.CABLECOMMAND = cablecommand + 1;
    //validate_midiabsolute(action.parameters)
    */

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			sendData();
    		}
    	});

    	let MIDImode = "static";

    	function setMIDIMode(mode) {
    		$$invalidate(1, MIDImode = mode);
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$9.warn(`<NewMidi> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		setMIDIMode("static");
    	};

    	const click_handler_1 = () => {
    		setMIDIMode("dynamic");
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(5, action = $$props.action);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(6, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(7, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		beforeUpdate,
    		afterUpdate,
    		createEventDispatcher,
    		dispatch,
    		DropDownInput,
    		GRID_PROTOCOL,
    		actionListChange,
    		check_for_matching_value,
    		parameter_parser: parameter_parser$1,
    		buildOptionList,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		actionKeys,
    		inputLabels,
    		sendData,
    		orderChangeTrigger,
    		MIDImode,
    		setMIDIMode
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(5, action = $$props.action);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(6, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(7, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) validator = $$props.validator;
    		if ("actionKeys" in $$props) $$invalidate(2, actionKeys = $$props.actionKeys);
    		if ("inputLabels" in $$props) $$invalidate(3, inputLabels = $$props.inputLabels);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    		if ("MIDImode" in $$props) $$invalidate(1, MIDImode = $$props.MIDImode);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		index,
    		MIDImode,
    		actionKeys,
    		inputLabels,
    		setMIDIMode,
    		action,
    		eventInfo,
    		elementInfo,
    		click_handler,
    		click_handler_1
    	];
    }

    class NewMidi extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {
    			action: 5,
    			index: 0,
    			eventInfo: 6,
    			elementInfo: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewMidi",
    			options,
    			id: create_fragment$u.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[5] === undefined && !("action" in props)) {
    			console_1$9.warn("<NewMidi> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[0] === undefined && !("index" in props)) {
    			console_1$9.warn("<NewMidi> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[6] === undefined && !("eventInfo" in props)) {
    			console_1$9.warn("<NewMidi> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[7] === undefined && !("elementInfo" in props)) {
    			console_1$9.warn("<NewMidi> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<NewMidi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<NewMidi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<NewMidi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<NewMidi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<NewMidi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<NewMidi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<NewMidi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<NewMidi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function testAllIslanding(modulesArray){

      for (var f=0; f<modulesArray.length; f++){
        testModuleIslanding(modulesArray,f);
      }  

      return modulesArray;
    }

    function testModuleIslanding(modulesArray,testModuleIndex){

      modulesArray[testModuleIndex].islanding = 0;

      // Set all module islandSearchStatus to -1

      for(var i=0; i<modulesArray.length; i++){
        modulesArray[i].islandSearchStatus=-1;  //USBMODULE
      }  


      modulesArray[testModuleIndex].islandSearchStatus = -2;

      // Find USB module and mark its neighbours
      for(var i=0; i<modulesArray.length; i++){

        if (modulesArray[i].dx == 0 && modulesArray[i].dy == 0){
          modulesArray[i].islandSearchStatus=0;  //USBMODULE

          markNeighbours(modulesArray, modulesArray[i].dx, modulesArray[i].dy);
                
        }

      }   

      for (var k=0; k<modulesArray.length; k++){ // REPEAT FOR EACH MODULE


        for(var i=0; i<modulesArray.length; i++){

          if (modulesArray[i].islandSearchStatus == 1){
            modulesArray[i].islandSearchStatus = 2;
            markNeighbours(modulesArray, modulesArray[i].dx, modulesArray[i].dy);
          }

        }   

      }

      for(var i=0; i<modulesArray.length; i++){ 

        if (modulesArray[i].islandSearchStatus == -1){
          modulesArray[testModuleIndex].islanding = 1;
        }

      }  
      //console.log("notFoundCount: "+notFoundCount);
    }


    function markNeighbours(modulesArray,x,y){

      for(var i=0; i<modulesArray.length; i++){

        if (modulesArray[i].islandSearchStatus == -1){ // IF NOT PROCESSED YET

          if(modulesArray[i].dx == x && modulesArray[i].dy == y+1){ //bottom neighbor
            if (modulesArray[i].islandSearchStatus == -1){
              modulesArray[i].islandSearchStatus=1; // FOUND
            }
            
          }
          if(modulesArray[i].dx == x && modulesArray[i].dy == y-1){ //top neighbor
            if (modulesArray[i].islandSearchStatus == -1){
              modulesArray[i].islandSearchStatus=1; // FOUND
            }
          }
          if(modulesArray[i].dx == x+1 && modulesArray[i].dy == y){ //left neighbor
            if (modulesArray[i].islandSearchStatus == -1){
              modulesArray[i].islandSearchStatus=1; // FOUND
            }
          }
          if(modulesArray[i].dx == x-1 && modulesArray[i].dy == y){ //right neighbor
            if (modulesArray[i].islandSearchStatus == -1){
              modulesArray[i].islandSearchStatus=1; // FOUND
            }
          }

        }


      
      }
      //console.log(modulesArray);

    }

    var islanding_1 = {
      testAllIslanding
    };

    let current;
    let movedCell;

    const genModulId = (id) => {
      return id + '_' + Math.random().toString(36).substr(2,9);
    };

    function start(e){
      // Save moved cell data for drag end.
      movedCell = e.detail.movedCell || ''; 
      return movedCell;
    }

    function over(e){
      e.preventDefault();
      current = e.detail;
      // Current represents the coords of the cell, where modul can be dropped, highlight goes green.
      return current;
    }

    function invalid$1(e){
      const centerDrag = e.detail.center;
      if(centerDrag){
        movedCell = e.detail.movedCell;
        let centerDragHighlight = true;
        return {movedCell:movedCell,centerDragHighlight: centerDragHighlight};
      }
    }

    function drop(e){

      let id = e.detail.target.id;
      let modul = e.detail.module;

      if(e.detail.target.id !== 'bin'){
        if(modul == 'drg-PO16' || modul ==  'drg-BU16' || modul ==  'drg-PBF4' || modul ==  'drg-EN16'){
          var nodeCopy = document.getElementById(modul.substr(4,)).cloneNode(true);
          nodeCopy.id = modul.substr(4,) + '_' + id.substr(10,);
          //console.log(nodeCopy.id);
          modul = nodeCopy.id; // overwrite modul id if its a copy;
          //e.detail.target.appendChild(nodeCopy);
        }
      } else {
        document.getElementById(modul).remove();
      }

      // We are generating ID on dropping for the new module. This has to be returned, so it can be added to usedcells.
      return {modul: modul, id: id}

      //addToUsedCells(modul, id);
      
    }

    function remove$1(e){
      let modul = e.detail.modul;
      return {modul: modul}
    }

    function end(e){
      current = '';
      // Current is set back to default.
      return {current: current};
    }

    var handledrag_1 = {
      genModulId,
      start,
      over,
      invalid: invalid$1,
      end,
      drop,
      remove: remove$1
    };

    const version = get_store_value(appSettings).version;

    var LAYOUT = {

      addToUsedgrid: function(grid, modul, id, virtual){

        if(id != 'bin'){

          const dx = +id.split(';')[0].split(':').pop();
          const dy = +id.split(';')[1].split(':').pop();

          var header = {
            dx: dx,
            dy: dy,
            rot: 0,
          };

          let flag = true;

          const newModul = modul.substr(0,4);

          var cell = GRID_CONTROLLER.create(header, {vmajor: version.major, vminor: version.minor, vpatch: version.patch}, newModul, virtual);

          if(grid.used.length == 0){
            cell.isConnectedByUsb = true;
            grid.used.push(cell);
          }

          grid.used.map(c => { 
            if(c.id == modul){ 
              c.dx = cell.dx;
              c.dy = cell.dy;
              c.map = cell.map;
              flag = false; 
            } 
            return c;
          });

          if(flag){ 
            grid.used.push(cell); 
          }

          //return grid.used;
        }
      },

      addToRuntime: function(runtime, moduleId, cellId, isVirtual){
        
        if(cellId != 'bin'){

          const dx = +cellId.split(';')[0].split(':').pop();
          const dy = +cellId.split(';')[1].split(':').pop();

          var header = {
            dx: dx,
            dy: dy,
            rot: 0,
          };

          let flag = true;

          const newModul = moduleId.substr(0,4);

          var gridController = GRID_CONTROLLER.create(header, {vmajor: version.major, vminor: version.minor, vpatch: version.patch}, newModul, isVirtual);

          if(runtime.length == 0){
            gridController.isConnectedByUsb = true;
            runtime.push(gridController);
          }

          runtime.map(m => { 
            if(m.id == moduleId){ 
              m.dx = gridController.dx;
              m.dy = gridController.dy;
              m.map = gridController.map;
              flag = false; 
            } 
            return m;
          });

          if(flag){ 
            runtime.push(gridController); 
          }
          
          console.log(runtime);
        }
      },

      createLayoutGrid: function(layout_grid){
        const L = (-1*((layout_grid-1)/2));
        let cellGen = [];
        for (let i = 0; i < layout_grid; i++) {
          for (let j = 0; j < layout_grid; j++) {
            cellGen.push({id: '', canBeUsed: false, fwVersion: version, dx: i+L, dy: j+L});
          }
        }
        return cellGen;
      },

      drawPossiblePlacementOutlines: function(runtime, layout_grid){

        let layoutgrid = this.createLayoutGrid(layout_grid);
        
        let mapCoords = [];

        layoutgrid.forEach(layoutCell => {layoutCell.canBeUsed = false;});

        runtime.forEach(gridController => {
          mapCoords.push({dx: gridController.dx, dy: gridController.dy});
          for (const key in gridController.map) {
            mapCoords.push(gridController.map[key]);
          }
        });

        runtime.forEach(gridController => {
          layoutgrid.forEach(layoutCell => {
            if(layoutCell.dx == gridController.dx && layoutCell.dy == gridController.dy){
              layoutCell.id = gridController.id;
              layoutCell.isConnectedByUsb = gridController.isConnectedByUsb;
              layoutCell.fwVersion = gridController.fwVersion;
              layoutCell.rot = gridController.rot;
            }
          });
        });

        const uniqueMapCoords = mapCoords.filter((cell, index) => {
          const _cell = JSON.stringify(cell);
          return index === mapCoords.findIndex(obj => {
            return JSON.stringify(obj) === _cell;
          });
        });

        layoutgrid.forEach(layoutCell => {
          uniqueMapCoords.forEach(map => {
            if(layoutCell.dx == map.dx && layoutCell.dy == map.dy){
              layoutCell.canBeUsed = true;
            }
          });
        });

        return layoutgrid;
      },

      removeSurroundingPlacementOutlines: function(grid, movedCell){

        let mapCoords = [];

        for (const key in movedCell.map) {
          mapCoords.push(movedCell.map[key]);
        }

        grid.forEach((cell)=>{
          mapCoords.forEach((map)=>{
            if(cell.dx == map.dx && cell.dy == map.dy){
              cell.canBeUsed = false;
            }
          });
        });
        
        return grid;

      },

      removePossiblePlacementOutlines: function(layout){
        let layoutgrid = layout.map(
          (layoutCell) => {
            layoutCell.canBeUsed = false; 
            return layoutCell;
          });
        return layoutgrid;
      },

      setUsbConnectedModule: function(grid, menuOnModuleWithId){

        // reset all.
        grid.used.forEach(gridController => { gridController.isConnectedByUsb = false; });
        grid.layout.forEach(layoutCell => { layoutCell.isConnectedByUsb = false; });

        // set the usb connected module in used grid.
        grid.used.forEach(gridController => {
          if(gridController.id == menuOnModuleWithId){
            gridController.isConnectedByUsb = true;
          }
        });

        // update the layout with the new change on usb connected module.
        grid.layout.forEach(layoutCell => {
          grid.used.forEach(gridController => {
            if(layoutCell.id == gridController.id){
              layoutCell.isConnectedByUsb = gridController.isConnectedByUsb;
            }
          });
        });

        return grid;
      },

      setModuleRotation: function(grid, menuOnModuleWithId, rotation){
        // update rotation in both arrays.

        grid.used.map((used)=>{
          if(used.id == menuOnModuleWithId){
            used.rot = rot;
          }
          return used;
        });

        grid.layout.map((layout)=>{
          if(layout.id == menuOnModuleWithId){
            layout.rot = rot;
          }
          return layout;
        });
        console.log(grid.layout);

        return grid;
      }

    };

    function layoutMenu(node, selectedDisplay) {

      
      function handleMenuOpen(e) {
        const id = e.target.id;

        console.log('context menu', e.target);
        
        // pbf4 + 10 chars long ids.
        if(id.length == 14){
          node.dispatchEvent(new CustomEvent('menu-open', {
            detail: {target: e.target.id}
          }));
          e.preventDefault();
          var contextElement = document.getElementById('context-menu');
          contextElement.style.top = e.clientY + "px";
          contextElement.style.left = e.clientX + "px";
        }
       
      }

      function handleMenuClose(e){
        node.dispatchEvent(new CustomEvent('menu-close', {
          detail: {target: e.target.id}
        }));
      }

      document.addEventListener('contextmenu', handleMenuOpen);
      document.addEventListener('click', handleMenuClose);
      
      return {
        update(selectedDisplay){
          if(selectedDisplay == 'settings'){
            document.removeEventListener('contextmenu', handleMenuOpen);
          document.removeEventListener('click', handleMenuClose);
          } else if(selectedDisplay == 'layout'){
            document.addEventListener('contextmenu', handleMenuOpen);
            document.addEventListener('click', handleMenuClose);
          }
        },
        destroy() {
          document.removeEventListener('contextmenu', handleMenuOpen);
          document.removeEventListener('click', handleMenuClose);
        }
      }
    }

    function dragndrop(node, layoutMode) {

      runtime$1.subscribe(store => store);
      layout.subscribe(store => store);

      //node.addEventListener('dragstart', handleDragStart);
      //node.addEventListener('dragstart',handleDragStart);

      //window.addEventListener('dragstart', handleDragStart);

      return {

        update(layoutMode){
          console.log('layoutMode enabled in action:',layoutMode);
        },

        destroy() {
          //window.removeEventListener('drop', handleDrop);
          //window.removeEventListener('dragend', handleDragEnd);
        }
      }
    }

    /* src\app\shared\main\MinMaxClose.svelte generated by Svelte v3.35.0 */
    const file$s = "src\\app\\shared\\main\\MinMaxClose.svelte";

    function create_fragment$t(ctx) {
    	let div4;
    	let div0;
    	let svg0;
    	let rect;
    	let t0;
    	let div1;
    	let svg1;
    	let path0;
    	let t1;
    	let div2;
    	let svg2;
    	let path1;
    	let path2;
    	let t2;
    	let div3;
    	let svg3;
    	let path3;
    	let path4;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			rect = svg_element("rect");
    			t0 = space$1();
    			div1 = element("div");
    			svg1 = svg_element("svg");
    			path0 = svg_element("path");
    			t1 = space$1();
    			div2 = element("div");
    			svg2 = svg_element("svg");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			t2 = space$1();
    			div3 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			attr_dev(rect, "width", "20");
    			attr_dev(rect, "height", "3");
    			add_location(rect, file$s, 49, 6, 1455);
    			attr_dev(svg0, "class", "w-5 h-5 p-1 fill-current text-gray-500");
    			attr_dev(svg0, "viewBox", "0 0 20 3");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$s, 48, 4, 1328);
    			attr_dev(div0, "id", "minimize-btn");
    			attr_dev(div0, "class", "p-1 mx-1 cursor-pointer not-draggable hover:bg-secondary");
    			add_location(div0, file$s, 47, 2, 1234);
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M0 0H26V26H0V0ZM3 3V23H23V3H3Z");
    			add_location(path0, file$s, 55, 6, 1762);
    			attr_dev(svg1, "class", "w-5 h-5 p-1 fill-current text-gray-500");
    			attr_dev(svg1, "viewBox", "0 0 26 26");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg1, file$s, 54, 4, 1634);
    			attr_dev(div1, "id", "maximize-btn");
    			attr_dev(div1, "class", "p-1 mx-1 cursor-pointer not-draggable hover:bg-secondary");
    			toggle_class(div1, "hidden", /*isMaximized*/ ctx[0]);
    			add_location(div1, file$s, 53, 2, 1513);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M20 5H0V25H20V5ZM2.30769 7.30769V22.6923H17.6923V7.30769H2.30769Z");
    			add_location(path1, file$s, 61, 6, 2127);
    			attr_dev(path2, "d", "M5 5H7.30769V2.30769H22.6923V17.6923H20V20H25V0H5V5Z");
    			add_location(path2, file$s, 62, 6, 2253);
    			attr_dev(svg2, "class", "w-5 h-5 p-1 fill-current text-gray-500");
    			attr_dev(svg2, "viewBox", "0 0 25 25");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg2, file$s, 60, 4, 2000);
    			attr_dev(div2, "id", "restore-down-btn");
    			attr_dev(div2, "class", "p-1 mx-1 cursor-pointer not-draggable hover:bg-secondary");
    			toggle_class(div2, "hidden", !/*isMaximized*/ ctx[0]);
    			add_location(div2, file$s, 59, 2, 1874);
    			attr_dev(path3, "d", "M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z");
    			add_location(path3, file$s, 69, 6, 2567);
    			attr_dev(path4, "d", "M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z");
    			add_location(path4, file$s, 70, 6, 2672);
    			attr_dev(svg3, "class", "w-5 h-5 p-1 fill-current text-gray-500");
    			attr_dev(svg3, "viewBox", "0 0 29 29");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg3, file$s, 68, 4, 2440);
    			attr_dev(div3, "id", "close-btn");
    			attr_dev(div3, "class", "p-1 mx-1 cursor-pointer not-draggable hover:bg-secondary");
    			add_location(div3, file$s, 67, 2, 2349);
    			attr_dev(div4, "class", "flex text-gray-300 not-draggable");
    			add_location(div4, file$s, 45, 0, 1182);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, rect);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			append_dev(div1, svg1);
    			append_dev(svg1, path0);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div2, svg2);
    			append_dev(svg2, path1);
    			append_dev(svg2, path2);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, svg3);
    			append_dev(svg3, path3);
    			append_dev(svg3, path4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*isMaximized*/ 1) {
    				toggle_class(div1, "hidden", /*isMaximized*/ ctx[0]);
    			}

    			if (dirty & /*isMaximized*/ 1) {
    				toggle_class(div2, "hidden", !/*isMaximized*/ ctx[0]);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MinMaxClose", slots, []);
    	const { remote } = require("electron");
    	const BrowserWindow = remote.BrowserWindow;

    	function init() {
    		document.getElementById("minimize-btn").addEventListener("click", function (e) {
    			const window = BrowserWindow.getFocusedWindow();
    			window.minimize();
    		});

    		document.getElementById("maximize-btn").addEventListener("click", function (e) {
    			var window = BrowserWindow.getFocusedWindow();
    			$$invalidate(0, isMaximized = true);
    			window.maximize();
    		});

    		document.getElementById("restore-down-btn").addEventListener("click", function (e) {
    			const window = BrowserWindow.getFocusedWindow();
    			$$invalidate(0, isMaximized = false);
    			window.restore();
    		});

    		document.getElementById("close-btn").addEventListener("click", function (e) {
    			const window = BrowserWindow.getFocusedWindow();
    			window.close();
    		});
    	}

    	
    	let isMaximized;

    	onMount(() => {
    		init();
    		let startingWindow = remote.getCurrentWindow();

    		startingWindow.isMaximized()
    		? $$invalidate(0, isMaximized = true)
    		: false;
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MinMaxClose> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		remote,
    		BrowserWindow,
    		init,
    		isMaximized
    	});

    	$$self.$inject_state = $$props => {
    		if ("isMaximized" in $$props) $$invalidate(0, isMaximized = $$props.isMaximized);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isMaximized];
    }

    class MinMaxClose extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MinMaxClose",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    /* src\app\shared\main\Titlebar.svelte generated by Svelte v3.35.0 */
    const file$r = "src\\app\\shared\\main\\Titlebar.svelte";

    function create_fragment$s(ctx) {
    	let top_bar;
    	let div1;
    	let div0;
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let path3;
    	let path4;
    	let path5;
    	let t;
    	let minmaxclose;
    	let current;
    	minmaxclose = new MinMaxClose({ $$inline: true });

    	const block = {
    		c: function create() {
    			top_bar = element("top-bar");
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			path5 = svg_element("path");
    			t = space$1();
    			create_component(minmaxclose.$$.fragment);
    			attr_dev(path0, "d", "M1.01576 13H7.22576C7.42376 13 7.58576 12.838 7.58576 12.64V11.65C7.58576 11.452 7.42376 11.29 7.22576 11.29H2.54576C2.43776 11.29 2.36576 11.218 2.36576 11.11V7.6C2.36576 7.492 2.43776 7.42 2.54576 7.42H6.99176C7.18976 7.42 7.35176 7.258 7.35176 7.06V6.07C7.35176 5.872 7.18976 5.71 6.99176 5.71H2.54576C2.43776 5.71 2.36576 5.638 2.36576 5.53V2.29C2.36576 2.182 2.43776 2.11 2.54576 2.11H7.18976C7.38776 2.11 7.54976 1.948 7.54976 1.75V0.760002C7.54976 0.562001 7.38776 0.400002 7.18976 0.400002H1.01576C0.817762 0.400002 0.655762 0.562001 0.655762 0.760002V12.64C0.655762 12.838 0.817762 13 1.01576 13Z");
    			add_location(path0, file$r, 34, 8, 908);
    			attr_dev(path1, "d", "M10.5702 13H13.9002C15.5202 13 16.7802 12.19 17.3922 10.93C17.8602 9.958 17.8962 8.374 17.8962 6.7C17.8962 5.026 17.8602 3.442 17.3922 2.47C16.7802 1.21 15.5202 0.400002 13.9002 0.400002H10.5702C10.3722 0.400002 10.2102 0.562001 10.2102 0.760002V12.64C10.2102 12.838 10.3722 13 10.5702 13ZM13.9002 11.29H12.1002C11.9922 11.29 11.9202 11.218 11.9202 11.11V2.29C11.9202 2.182 11.9922 2.11 12.1002 2.11H13.9002C14.6022 2.11 15.3942 2.488 15.7722 3.208C16.1142 3.856 16.1322 5.368 16.1322 6.7C16.1322 8.032 16.1142 9.544 15.7722 10.192C15.3942 10.912 14.6022 11.29 13.9002 11.29Z");
    			add_location(path1, file$r, 35, 8, 1535);
    			attr_dev(path2, "d", "M22.8787 2.146V11.236C22.8787 11.344 22.8067 11.416 22.6987 11.416H20.3587C20.1607 11.416 19.9987 11.578 19.9987 11.776V12.64C19.9987 12.838 20.1607 13 20.3587 13H27.1087C27.3067 13 27.4687 12.838 27.4687 12.64V11.776C27.4687 11.578 27.3067 11.416 27.1087 11.416H24.7687C24.6607 11.416 24.5887 11.344 24.5887 11.236V2.146C24.5887 2.038 24.6607 1.966 24.7687 1.966H26.9287C27.1267 1.966 27.2887 1.804 27.2887 1.606V0.760002C27.2887 0.562001 27.1267 0.400002 26.9287 0.400002H20.5387C20.3407 0.400002 20.1787 0.562001 20.1787 0.760002V1.606C20.1787 1.804 20.3407 1.966 20.5387 1.966H22.6987C22.8067 1.966 22.8787 2.038 22.8787 2.146Z");
    			add_location(path2, file$r, 36, 8, 2133);
    			attr_dev(path3, "d", "M34.6832 2.11H37.7792C37.9772 2.11 38.1392 1.948 38.1392 1.75V0.760002C38.1392 0.562001 37.9772 0.400002 37.7792 0.400002H29.4992C29.3012 0.400002 29.1392 0.562001 29.1392 0.760002V1.75C29.1392 1.948 29.3012 2.11 29.4992 2.11H32.6132C32.7212 2.11 32.7932 2.182 32.7932 2.29V12.64C32.7932 12.838 32.9552 13 33.1532 13H34.1432C34.3412 13 34.5032 12.838 34.5032 12.64V2.29C34.5032 2.182 34.5752 2.11 34.6832 2.11Z");
    			add_location(path3, file$r, 37, 8, 2787);
    			attr_dev(path4, "d", "M43.5357 13.18C45.3357 13.18 46.5597 12.244 47.1357 11.038C47.6757 9.922 47.7117 8.374 47.7117 6.7C47.7117 5.026 47.6757 3.478 47.1357 2.362C46.5597 1.156 45.3357 0.220001 43.5357 0.220001C41.7357 0.220001 40.5117 1.156 39.9357 2.362C39.3957 3.478 39.3597 5.026 39.3597 6.7C39.3597 8.374 39.3957 9.922 39.9357 11.038C40.5117 12.244 41.7357 13.18 43.5357 13.18ZM43.5357 11.47C42.5637 11.47 41.8977 10.984 41.5197 10.264C41.1417 9.544 41.1237 8.032 41.1237 6.7C41.1237 5.368 41.1417 3.856 41.5197 3.136C41.8977 2.416 42.5637 1.93 43.5357 1.93C44.5077 1.93 45.1737 2.416 45.5517 3.136C45.9297 3.856 45.9477 5.368 45.9477 6.7C45.9477 8.032 45.9297 9.544 45.5517 10.264C45.1737 10.984 44.5077 11.47 43.5357 11.47Z");
    			add_location(path4, file$r, 38, 8, 3220);
    			attr_dev(path5, "d", "M50.4262 13H51.4162C51.6142 13 51.7762 12.838 51.7762 12.64V8.14C51.7762 8.032 51.8482 7.96 51.9562 7.96H53.0542C53.2522 7.96 53.3422 8.068 53.3962 8.176L55.5562 12.712C55.6282 12.856 55.7542 13 55.9882 13H57.0862C57.3382 13 57.4462 12.838 57.4462 12.676C57.4462 12.55 57.4102 12.46 57.3742 12.388L55.2862 8.14C55.2322 8.032 55.1962 7.942 55.1962 7.834C55.1962 7.672 55.3402 7.546 55.5742 7.402C56.6542 6.736 57.4462 5.728 57.4462 4.18C57.4462 1.912 55.7542 0.400002 53.6662 0.400002H50.4262C50.2282 0.400002 50.0662 0.562001 50.0662 0.760002V12.64C50.0662 12.838 50.2282 13 50.4262 13ZM53.6662 6.25H51.9562C51.8482 6.25 51.7762 6.178 51.7762 6.07V2.29C51.7762 2.182 51.8482 2.11 51.9562 2.11H53.6662C54.7642 2.11 55.6822 2.866 55.6822 4.18C55.6822 5.494 54.7642 6.25 53.6662 6.25Z");
    			add_location(path5, file$r, 39, 8, 3951);
    			attr_dev(svg, "class", "w-12 fill-current text-gray-500");
    			attr_dev(svg, "viewBox", "0 0 58 14");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$r, 33, 6, 786);
    			attr_dev(div0, "class", "flex items-center pl-2");
    			add_location(div0, file$r, 32, 4, 742);
    			attr_dev(div1, "class", "draggable flex justify-between");
    			add_location(div1, file$r, 31, 2, 692);
    			set_style(top_bar, "background-color", "rgb(25, 26, 32)");
    			set_custom_element_data(top_bar, "class", "text-white static top-0 w-full p-1");
    			add_location(top_bar, file$r, 30, 0, 595);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, top_bar, anchor);
    			append_dev(top_bar, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    			append_dev(svg, path3);
    			append_dev(svg, path4);
    			append_dev(svg, path5);
    			append_dev(div1, t);
    			mount_component(minmaxclose, div1, null);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(minmaxclose.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(minmaxclose.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(top_bar);
    			destroy_component(minmaxclose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Titlebar", slots, []);
    	let { debugMode } = $$props;
    	let tx, rx;

    	onMount(() => {
    		commIndicator.subscribe(values => {
    			tx = values.tx;
    			rx = values.rx;
    		});
    	});

    	const writable_props = ["debugMode"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Titlebar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("debugMode" in $$props) $$invalidate(0, debugMode = $$props.debugMode);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		MinMaxClose,
    		appSettings,
    		commIndicator,
    		messageStore,
    		debugMode,
    		tx,
    		rx
    	});

    	$$self.$inject_state = $$props => {
    		if ("debugMode" in $$props) $$invalidate(0, debugMode = $$props.debugMode);
    		if ("tx" in $$props) tx = $$props.tx;
    		if ("rx" in $$props) rx = $$props.rx;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*debugMode*/ 1) {
    			{
    				appSettings.update(store => {
    					store.debugMode = debugMode;
    					return store;
    				});
    			}
    		}
    	};

    	return [debugMode];
    }

    class Titlebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, { debugMode: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Titlebar",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*debugMode*/ ctx[0] === undefined && !("debugMode" in props)) {
    			console.warn("<Titlebar> was created without expected prop 'debugMode'");
    		}
    	}

    	get debugMode() {
    		throw new Error("<Titlebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set debugMode(value) {
    		throw new Error("<Titlebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\shared\main\PanInfo.svelte generated by Svelte v3.35.0 */

    const file$q = "src\\app\\shared\\main\\PanInfo.svelte";

    // (10:4) {:else}
    function create_else_block$5(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "w-10 h-10 p-2 bg-primary rounded-lg shadow-md");
    			attr_dev(img, "alt", "win-alt-key");
    			if (img.src !== (img_src_value = "./assets/svgs/win-alt.svg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$q, 10, 6, 386);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(10:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (8:4) {#if os == "darwin"}
    function create_if_block$d(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "class", "w-10 h-10 p-2 bg-primary rounded-lg shadow-md");
    			attr_dev(img, "alt", "mac-alt-key");
    			if (img.src !== (img_src_value = "./assets/svgs/mac-alt.svg")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$q, 8, 6, 256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(8:4) {#if os == \\\"darwin\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let t1;
    	let t2;
    	let div1;

    	function select_block_type(ctx, dirty) {
    		if (/*os*/ ctx[0] == "darwin") return create_if_block$d;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Hold";
    			t1 = space$1();
    			if_block.c();
    			t2 = space$1();
    			div1 = element("div");
    			div1.textContent = "to pan the control surface.";
    			attr_dev(div0, "class", "mx-2");
    			add_location(div0, file$q, 6, 4, 194);
    			attr_dev(div1, "class", "mx-2");
    			add_location(div1, file$q, 12, 4, 512);
    			attr_dev(div2, "class", "flex flex-row p-4 m-4 items-center my-2 text-sm z-10 relative");
    			add_location(div2, file$q, 5, 2, 113);
    			attr_dev(div3, "class", "absolute flex flex-col w-full items-center text-white ");
    			add_location(div3, file$q, 4, 0, 41);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			if_block.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, t2);
    				}
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PanInfo", slots, []);
    	let { os } = $$props;
    	const writable_props = ["os"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PanInfo> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("os" in $$props) $$invalidate(0, os = $$props.os);
    	};

    	$$self.$capture_state = () => ({ os });

    	$$self.$inject_state = $$props => {
    		if ("os" in $$props) $$invalidate(0, os = $$props.os);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [os];
    }

    class PanInfo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, { os: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PanInfo",
    			options,
    			id: create_fragment$r.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*os*/ ctx[0] === undefined && !("os" in props)) {
    			console.warn("<PanInfo> was created without expected prop 'os'");
    		}
    	}

    	get os() {
    		throw new Error("<PanInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set os(value) {
    		throw new Error("<PanInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\shared\main\WebsiteNav.svelte generated by Svelte v3.35.0 */

    const file$p = "src\\app\\shared\\main\\WebsiteNav.svelte";

    function create_fragment$q(ctx) {
    	let div1;
    	let nav;
    	let div0;
    	let a;
    	let svg;
    	let path;
    	let t0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			nav = element("nav");
    			div0 = element("div");
    			a = element("a");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space$1();
    			span = element("span");
    			span.textContent = "INTECH STUDIO";
    			set_style(path, "fill", "white");
    			attr_dev(path, "d", "M86.047,93.933L67.5,82.625L48.95,93.933l5.024-21.135L37.488,58.652l21.652-1.753L67.5,36.847l8.357,20.052l21.654,1.753\r\n          L81.025,72.798L86.047,93.933z M67.5,76.768l10.91,6.652l-2.955-12.432l9.697-8.321l-12.736-1.032L67.5,49.842l-4.918,11.794\r\n          l-12.734,1.032l9.697,8.321L56.589,83.42L67.5,76.768z M49.963,6.983L29.955,47H4.5v5h28.545l15.992-31.983l9.02,27.057\r\n          l2.928-7.025L49.963,6.983z M101.955,83l-15.992,31.983L79.395,95.28l-6.568-3.895l12.211,36.632L105.045,88H130.5v-5H101.955z");
    			add_location(path, file$p, 5, 10, 526);
    			attr_dev(svg, "class", "h-8 w-8 mr-2");
    			attr_dev(svg, "viewBox", "0 0 135 135");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$p, 4, 8, 429);
    			attr_dev(span, "class", "font-aldo text-white text-xl tracking-wide subpixel-antialiased");
    			add_location(span, file$p, 9, 8, 1083);
    			attr_dev(a, "href", "https://intech.studio/");
    			attr_dev(a, "class", "flex items-center no-underline hover:no-underline hover:text-teal-300 flex-shrink-0 text-white transition pr-6");
    			add_location(a, file$p, 3, 6, 267);
    			attr_dev(div0, "class", "flex flex-wrap justify-between lg:justify-center w-full");
    			add_location(div0, file$p, 2, 4, 190);
    			attr_dev(nav, "class", "container mx-auto px-4 bg-primary flex items-center justify-between xl:justify-center p-3");
    			add_location(nav, file$p, 1, 2, 81);
    			set_style(div1, "z-index", "9999");
    			attr_dev(div1, "class", "w-full bg-black sticky top-0 h-12 sm:h-14");
    			add_location(div1, file$p, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, nav);
    			append_dev(nav, div0);
    			append_dev(div0, a);
    			append_dev(a, svg);
    			append_dev(svg, path);
    			append_dev(a, t0);
    			append_dev(a, span);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("WebsiteNav", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<WebsiteNav> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class WebsiteNav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WebsiteNav",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* src\app\shared\main\NavTabs.svelte generated by Svelte v3.35.0 */
    const file$o = "src\\app\\shared\\main\\NavTabs.svelte";

    function create_fragment$p(ctx) {
    	let nav_tab;
    	let div4;
    	let div0;
    	let svg0;
    	let circle;
    	let rect;
    	let t0;
    	let div1;
    	let svg1;
    	let path0;
    	let t1;
    	let div2;
    	let svg2;
    	let path1;
    	let path2;
    	let path3;
    	let path4;
    	let path5;
    	let t2;
    	let div3;
    	let svg3;
    	let path6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			nav_tab = element("nav-tab");
    			div4 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			circle = svg_element("circle");
    			rect = svg_element("rect");
    			t0 = space$1();
    			div1 = element("div");
    			svg1 = svg_element("svg");
    			path0 = svg_element("path");
    			t1 = space$1();
    			div2 = element("div");
    			svg2 = svg_element("svg");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			path5 = svg_element("path");
    			t2 = space$1();
    			div3 = element("div");
    			svg3 = svg_element("svg");
    			path6 = svg_element("path");
    			attr_dev(circle, "cx", "12.6772");
    			attr_dev(circle, "cy", "12.6777");
    			attr_dev(circle, "r", "11.5");
    			attr_dev(circle, "stroke-width", "2");
    			add_location(circle, file$o, 47, 8, 2013);
    			attr_dev(rect, "x", "1.17725");
    			attr_dev(rect, "y", "12.1777");
    			attr_dev(rect, "width", "10");
    			attr_dev(rect, "height", "1");
    			attr_dev(rect, "fill", "black");
    			add_location(rect, file$o, 48, 8, 2085);
    			attr_dev(svg0, "class", "stroke-current text-black group-hover:text-white");
    			attr_dev(svg0, "width", "26");
    			attr_dev(svg0, "height", "26");
    			attr_dev(svg0, "viewBox", "0 0 26 26");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			toggle_class(svg0, "text-white", /*selectedTab*/ ctx[0] == "gridConfiguration");
    			add_location(svg0, file$o, 44, 6, 1778);
    			attr_dev(div0, "class", "m-1 my-2 p-1 w-14 h-14 flex justify-center items-center group hover:bg-secondary rounded-lg");
    			toggle_class(div0, "bg-secondary", /*selectedTab*/ ctx[0] == "gridConfiguration");
    			add_location(div0, file$o, 40, 4, 1536);
    			attr_dev(path0, "d", "M1 5.5L1.00028 19C1.0003 20.1046 1.89573 21 3.00028 21H24C25.1046 21 26 20.1046 26 19V7.5C26 6.39543 25.1046 5.5 24 5.5H11.0002M1 5.5V3C1 1.89543 1.89543 1 3 1H9.00019C10.1048 1 11.0002 1.89543 11.0002 3V5.5M1 5.5H11.0002");
    			attr_dev(path0, "stroke-width", "2");
    			add_location(path0, file$o, 59, 8, 2635);
    			attr_dev(svg1, "class", "stroke-current text-black group-hover:text-white");
    			attr_dev(svg1, "width", "27");
    			attr_dev(svg1, "height", "22");
    			attr_dev(svg1, "viewBox", "0 0 27 22");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			toggle_class(svg1, "text-white", /*selectedTab*/ ctx[0] == "profiles");
    			add_location(svg1, file$o, 56, 6, 2409);
    			attr_dev(div1, "class", "m-1 my-2 p-1 w-14 h-14 flex justify-center items-center group hover:bg-secondary rounded-lg");
    			toggle_class(div1, "bg-secondary", /*selectedTab*/ ctx[0] == "profiles");
    			add_location(div1, file$o, 52, 4, 2186);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M28 2H4C2.89543 2 2 2.89543 2 4V21C2 22.1046 2.89543 23 4 23H28C29.1046 23 30 22.1046 30 21V4C30 2.89543 29.1046 2 28 2ZM4 0C1.79086 0 0 1.79086 0 4V21C0 23.2091 1.79086 25 4 25H28C30.2091 25 32 23.2091 32 21V4C32 1.79086 30.2091 0 28 0H4Z");
    			add_location(path1, file$o, 70, 10, 3383);
    			attr_dev(path2, "d", "M6.7666 10.1885L6.81494 10.8384C7.22673 10.3335 7.78353 10.0811 8.48535 10.0811C9.23372 10.0811 9.74756 10.3765 10.0269 10.9673C10.4351 10.3765 11.0169 10.0811 11.7725 10.0811C12.4027 10.0811 12.8717 10.2655 13.1797 10.6343C13.4876 10.9995 13.6416 11.5509 13.6416 12.2886V16H12.084V12.2939C12.084 11.9645 12.0195 11.7246 11.8906 11.5742C11.7617 11.4202 11.5343 11.3433 11.2085 11.3433C10.743 11.3433 10.4207 11.5653 10.2417 12.0093L10.2471 16H8.69482V12.2993C8.69482 11.9627 8.62858 11.7192 8.49609 11.5688C8.36361 11.4185 8.13802 11.3433 7.81934 11.3433C7.37891 11.3433 7.06022 11.5259 6.86328 11.8911V16H5.31104V10.1885H6.7666Z");
    			add_location(path2, file$o, 71, 10, 3687);
    			attr_dev(path3, "d", "M16.4775 16H14.9199V10.1885H16.4775V16ZM14.8286 8.68457C14.8286 8.45182 14.9056 8.26025 15.0596 8.10986C15.2171 7.95947 15.4302 7.88428 15.6987 7.88428C15.9637 7.88428 16.175 7.95947 16.3325 8.10986C16.4901 8.26025 16.5688 8.45182 16.5688 8.68457C16.5688 8.9209 16.4883 9.11426 16.3271 9.26465C16.1696 9.41504 15.9601 9.49023 15.6987 9.49023C15.4373 9.49023 15.2261 9.41504 15.0649 9.26465C14.9074 9.11426 14.8286 8.9209 14.8286 8.68457Z");
    			add_location(path3, file$o, 72, 10, 4341);
    			attr_dev(path4, "d", "M17.5195 13.0513C17.5195 12.1453 17.7218 11.4238 18.1265 10.8867C18.5347 10.3496 19.0915 10.0811 19.7969 10.0811C20.3626 10.0811 20.8299 10.2923 21.1987 10.7148V7.75H22.7563V16H21.3545L21.2793 15.3823C20.8926 15.8657 20.3949 16.1074 19.7861 16.1074C19.1022 16.1074 18.5526 15.8389 18.1372 15.3018C17.7254 14.7611 17.5195 14.0109 17.5195 13.0513ZM19.0718 13.1641C19.0718 13.7083 19.1667 14.1255 19.3564 14.4155C19.5462 14.7056 19.8219 14.8506 20.1836 14.8506C20.6634 14.8506 21.0018 14.6483 21.1987 14.2437V11.9502C21.0054 11.5456 20.6706 11.3433 20.1943 11.3433C19.446 11.3433 19.0718 11.9502 19.0718 13.1641Z");
    			add_location(path4, file$o, 73, 10, 4803);
    			attr_dev(path5, "d", "M25.5977 16H24.04V10.1885H25.5977V16ZM23.9487 8.68457C23.9487 8.45182 24.0257 8.26025 24.1797 8.10986C24.3372 7.95947 24.5503 7.88428 24.8188 7.88428C25.0838 7.88428 25.2951 7.95947 25.4526 8.10986C25.6102 8.26025 25.689 8.45182 25.689 8.68457C25.689 8.9209 25.6084 9.11426 25.4473 9.26465C25.2897 9.41504 25.0802 9.49023 24.8188 9.49023C24.5575 9.49023 24.3462 9.41504 24.1851 9.26465C24.0275 9.11426 23.9487 8.9209 23.9487 8.68457Z");
    			add_location(path5, file$o, 74, 10, 5436);
    			attr_dev(svg2, "class", "fill-current text-black group-hover:text-white");
    			attr_dev(svg2, "width", "32");
    			attr_dev(svg2, "height", "25");
    			attr_dev(svg2, "viewBox", "0 0 32 25");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			toggle_class(svg2, "text-white", /*selectedTab*/ ctx[0] == "midiMonitor");
    			add_location(svg2, file$o, 67, 6, 3150);
    			attr_dev(div2, "class", "m-1 my-2 p-1 w-14 h-14 flex justify-center items-center group hover:bg-secondary rounded-lg");
    			toggle_class(div2, "bg-secondary", /*selectedTab*/ ctx[0] == "midiMonitor");
    			add_location(div2, file$o, 63, 4, 2920);
    			attr_dev(path6, "fill-rule", "evenodd");
    			attr_dev(path6, "clip-rule", "evenodd");
    			attr_dev(path6, "d", "M10.2183 0.254654L13.5394 0.254654V3.74186C14.6186 3.96094 15.6218 4.38934 16.5048 4.98285L19.0189 2.46874L21.3673 4.81712L18.8372 7.34721C19.3982 8.20699 19.8043 9.17715 20.0155 10.218H23.5027V13.5391H20.0155C19.7965 14.6184 19.3681 15.6216 18.7745 16.5046L21.2887 19.0187L18.9403 21.3671L16.4102 18.837C15.5504 19.398 14.5802 19.804 13.5394 20.0153L13.5394 23.5026H10.2183L10.2183 20.0153C9.17739 19.804 8.20724 19.398 7.34746 18.837L4.81735 21.3671L2.46897 19.0187L4.98309 16.5046C4.38958 15.6216 3.96117 14.6184 3.74209 13.5391H0.254883L0.254883 10.218H3.74209C3.95338 9.17715 4.35938 8.20699 4.92042 7.34721L2.39033 4.81712L4.73872 2.46874L7.25284 4.98285C8.13581 4.38934 9.13902 3.96094 10.2183 3.74186V0.254654ZM11.8788 5.78986C11.3031 5.78986 10.7461 5.86975 10.2183 6.01905C9.73878 6.15467 9.28335 6.34754 8.85982 6.58983C7.88231 7.14903 7.07473 7.97142 6.53364 8.96043C6.31769 9.35513 6.1442 9.77638 6.01928 10.218C5.86998 10.7459 5.79009 11.3029 5.79009 11.8786C5.79009 12.4543 5.86998 13.0113 6.01928 13.5391C6.1549 14.0186 6.34778 14.4741 6.59007 14.8976C7.14927 15.8751 7.97167 16.6827 8.96068 17.2238C9.35538 17.4397 9.77662 17.6132 10.2183 17.7381C10.7461 17.8874 11.3031 17.9673 11.8788 17.9673C12.4545 17.9673 13.0115 17.8874 13.5394 17.7381C13.981 17.6132 14.4023 17.4397 14.797 17.2238C15.786 16.6827 16.6084 15.8751 17.1676 14.8976C17.4099 14.4741 17.6027 14.0186 17.7383 13.5391C17.8876 13.0113 17.9675 12.4543 17.9675 11.8786C17.9675 11.3029 17.8876 10.7459 17.7383 10.218C17.6134 9.77638 17.4399 9.35513 17.224 8.96043C16.6829 7.97142 15.8753 7.14903 14.8978 6.58983C14.4743 6.34754 14.0189 6.15467 13.5394 6.01905C13.0115 5.86975 12.4545 5.78986 11.8788 5.78986Z");
    			add_location(path6, file$o, 85, 8, 6368);
    			attr_dev(svg3, "class", "fill-current text-black group-hover:text-white");
    			attr_dev(svg3, "width", "24");
    			attr_dev(svg3, "height", "24");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			toggle_class(svg3, "text-white", /*selectedTab*/ ctx[0] == "preferences");
    			add_location(svg3, file$o, 82, 6, 6141);
    			attr_dev(div3, "class", "m-1 my-2 p-1 w-14 h-14 flex justify-center items-center group hover:bg-secondary rounded-lg");
    			toggle_class(div3, "bg-secondary", /*selectedTab*/ ctx[0] == "preferences");
    			add_location(div3, file$o, 78, 4, 5918);
    			attr_dev(div4, "class", "flex flex-col");
    			add_location(div4, file$o, 26, 2, 570);
    			set_custom_element_data(nav_tab, "class", " flex px-1 flex-col items-center justify-between bg-primary h-full");
    			add_location(nav_tab, file$o, 25, 0, 482);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav_tab, anchor);
    			append_dev(nav_tab, div4);
    			append_dev(div4, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, circle);
    			append_dev(svg0, rect);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			append_dev(div1, svg1);
    			append_dev(svg1, path0);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div2, svg2);
    			append_dev(svg2, path1);
    			append_dev(svg2, path2);
    			append_dev(svg2, path3);
    			append_dev(svg2, path4);
    			append_dev(svg2, path5);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, svg3);
    			append_dev(svg3, path6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[3], false, false, false),
    					listen_dev(div1, "click", /*click_handler_1*/ ctx[4], false, false, false),
    					listen_dev(div2, "click", /*click_handler_2*/ ctx[5], false, false, false),
    					listen_dev(div3, "click", /*click_handler_3*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(svg0, "text-white", /*selectedTab*/ ctx[0] == "gridConfiguration");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(div0, "bg-secondary", /*selectedTab*/ ctx[0] == "gridConfiguration");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(svg1, "text-white", /*selectedTab*/ ctx[0] == "profiles");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(div1, "bg-secondary", /*selectedTab*/ ctx[0] == "profiles");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(svg2, "text-white", /*selectedTab*/ ctx[0] == "midiMonitor");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(div2, "bg-secondary", /*selectedTab*/ ctx[0] == "midiMonitor");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(svg3, "text-white", /*selectedTab*/ ctx[0] == "preferences");
    			}

    			if (dirty & /*selectedTab*/ 1) {
    				toggle_class(div3, "bg-secondary", /*selectedTab*/ ctx[0] == "preferences");
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav_tab);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NavTabs", slots, []);
    	let selectedTab = "gridConfiguration";

    	function changeTab(tab) {
    		$$invalidate(0, selectedTab = tab);

    		appSettings.update(store => {
    			store.activePanel = tab;
    			return store;
    		});
    	}

    	
    	let openPref = false;

    	function openPreferences() {
    		openPref = !openPref;

    		appSettings.update(store => {
    			store.preferences = openPref;
    			return store;
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NavTabs> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		changeTab("gridConfiguration");
    	};

    	const click_handler_1 = () => {
    		changeTab("profiles");
    	};

    	const click_handler_2 = () => {
    		changeTab("midiMonitor");
    	};

    	const click_handler_3 = () => {
    		openPreferences();
    	};

    	$$self.$capture_state = () => ({
    		appSettings,
    		selectedTab,
    		changeTab,
    		openPref,
    		openPreferences
    	});

    	$$self.$inject_state = $$props => {
    		if ("selectedTab" in $$props) $$invalidate(0, selectedTab = $$props.selectedTab);
    		if ("openPref" in $$props) openPref = $$props.openPref;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedTab,
    		changeTab,
    		openPreferences,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class NavTabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavTabs",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src\app\runtime\RuntimeSync.svelte generated by Svelte v3.35.0 */

    function create_fragment$o(ctx) {
    	const block = {
    		c: noop$3,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$3,
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: noop$3
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("RuntimeSync", slots, []);

    	localConfigReportStore.subscribe(store => {
    		runtime$1.update(runtime => {
    			runtime.forEach(controller => {
    				if (controller.dx == store.brc.DX && controller.dy == store.brc.DY) {
    					let events = controller.banks[store.frame.BANKNUMBER][store.frame.ELEMENTNUMBER].events.find(cntrl => cntrl.event.value == store.frame.EVENTTYPE);

    					// Upon connecting modules, messages on config are sent back to editor at instant.
    					// To avoid unnecessary message flow, filter configs sent back with the cfgstatus flag.
    					if (events) {
    						// here this should be figured out... what to do on profile load or other...
    						if (events.cfgStatus == "fetched") {
    							if (store.cfgs.length > 0) {
    								events.config = store.cfgs;
    							} else if (store.cfgs.length == 0) {
    								events.config = [];
    							}

    							events.cfgStatus = "received";
    						}
    					}
    				}
    			});

    			return runtime;
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RuntimeSync> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ localConfigReportStore, runtime: runtime$1 });
    	return [];
    }

    class RuntimeSync extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RuntimeSync",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    function createRuntimeStore(){
      const store = writable([]);

      return {
        ...store,
      }
    }

    const runtime = createRuntimeStore();

    const selectedControlElement = writable('encoder');

    const appMultiSelect = writable({multiselect: false, selection: []});

    const appActionClipboard = writable();


    function createAppActionManagement(){
      const store = writable();

      function genUniqueIds(actions){

        let _temp_actions = [];
        actions.forEach((a,i) => {
          let _a = Object.assign({}, a); // need to mutate, else it wont be changed.
          _a.id = i;
          console.log(_a.id);
          _temp_actions.push(_a);
        });
        console.log(_temp_actions);
        return _temp_actions;
      }
      
      return {
        ...store,
        copy: () => {

          const actions = get_store_value(runtime);
          const selection = get_store_value(appMultiSelect).selection;

          console.log(selection);

          let clipboard = [];
          selection.forEach((elem,index) => {
            if(elem){
              clipboard.push(actions[index]);
            }
          });

          appActionClipboard.set(clipboard);
          console.log(clipboard);
        },

        paste: (index) => {

          const clipboard = get_store_value(appActionClipboard);
          let actions = get_store_value(runtime);
          actions.splice(index, 0, ...clipboard);      
          actions = genUniqueIds(actions);
          runtime.set(actions);
        },

        remove: (array) => {
          let actions = get_store_value(runtime);
          array.forEach(elem => {
            actions = actions.filter(a => a.id !== Number(elem));
          });
          actions = genUniqueIds(actions);
          runtime.set(actions);
        }
      }
    }

    const localDefinitions = derived(runtime, $runtime => {
      let locals = [];
      $runtime.forEach(a => {
        if(a.code == 'locals'){
          // THIS IS A DUPLICATE, USED IN LOCALS TOO!
          let arr = [];
          const text = a.script.split('local');
          text.forEach(element => {
            if(element !== ''){
              const _split = element.split('=');
              arr.push({value: element, info: _split[0].trim()});
            }
          });
          locals.push(...arr);
        }
      });
      return locals;
    });



    const appActionManagement$1 = createAppActionManagement();

    /// The default maximum length of a `TreeBuffer` node.
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    const CachedNode = new WeakMap();
    /// Each [node type](#tree.NodeType) can have metadata associated with
    /// it in props. Instances of this class represent prop names.
    class NodeProp {
        /// Create a new node prop type. You can optionally pass a
        /// `deserialize` function.
        constructor({ deserialize } = {}) {
            this.id = nextPropID++;
            this.deserialize = deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// Create a string-valued node prop whose deserialize function is
        /// the identity function.
        static string() { return new NodeProp({ deserialize: str => str }); }
        /// Create a number-valued node prop whose deserialize function is
        /// just `Number`.
        static number() { return new NodeProp({ deserialize: Number }); }
        /// Creates a boolean-valued node prop whose deserialize function
        /// returns true for any input.
        static flag() { return new NodeProp({ deserialize: () => true }); }
        /// Store a value for this prop in the given object. This can be
        /// useful when building up a prop object to pass to the
        /// [`NodeType`](#tree.NodeType) constructor. Returns its first
        /// argument.
        set(propObj, value) {
            propObj[this.id] = value;
            return propObj;
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#tree.NodeSet.extend) or
        /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
        /// values for each node type in the set. Takes a [match
        /// object](#tree.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match) {
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /// Prop that is used to describe matching delimiters. For opening
    /// delimiters, this holds an array of node names (written as a
    /// space-separated string when declaring this prop in a grammar)
    /// for the node types of closing delimiters that match it.
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
    /// attached to closing delimiters, holding an array of node names
    /// of types of matching opening delimiters.
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// Used to assign node types to groups (for example, all node
    /// types that represent an expression could be tagged with an
    /// `"Expression"` group).
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    const noProps = Object.create(null);
    /// Each node in a syntax tree has a node type associated with it.
    class NodeType {
        /// @internal
        constructor(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
                (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src)
                        src[0].set(props, src[1]);
                }
            return type;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) { return this.props[prop.id]; }
        /// True when this is the top node of a grammar.
        get isTop() { return (this.flags & 1 /* Top */) > 0; }
        /// True when this node is produced by a skip rule.
        get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
        /// Indicates whether this is an error node.
        get isError() { return (this.flags & 4 /* Error */) > 0; }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
        /// Returns true when this node's name or one of its
        /// [groups](#tree.NodeProp^group) matches the given string.
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#tree.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /// An empty dummy node type to use when no actual type is available.
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
    /// A node set holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a number array. Each parser
    /// [has](#lezer.Parser.nodeSet) a node set, and [tree
    /// buffers](#tree.TreeBuffer) can only store collections of nodes
    /// from the same set. A set can have a maximum of 2**16 (65536)
    /// node types in it, so that the ids fit into 16-bit typed array
    /// slots.
    class NodeSet {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(
        /// The node types in this set, by id.
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method should be created with
        /// [`NodeProp.add`](#tree.NodeProp.add).
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        add[0].set(newProps, add[1]);
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the `TreeCursor` interface instead, which provides a view on
    /// some part of this data structure, and can be used to move around
    /// to adjacent nodes.
    class Tree {
        /// Construct a new tree. You usually want to go through
        /// [`Tree.build`](#tree.Tree^build) instead.
        constructor(type, 
        /// The tree's child nodes. Children small enough to fit in a
        /// `TreeBuffer will be represented as such, other children can be
        /// further `Tree` instances with their own internal structure.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
        }
        /// @internal
        toString() {
            let children = this.children.map(c => c.toString()).join();
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When
        /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)
        /// to the given position and side.
        cursor(pos, side = 0) {
            let scope = (pos != null && CachedNode.get(this)) || this.topNode;
            let cursor = new TreeCursor(scope);
            if (pos != null) {
                cursor.moveTo(pos, side);
                CachedNode.set(this, cursor._tree);
            }
            return cursor;
        }
        /// Get a [tree cursor](#tree.TreeCursor) that, unlike regular
        /// cursors, doesn't skip [anonymous](#tree.NodeType.isAnonymous)
        /// nodes.
        fullCursor() {
            return new TreeCursor(this.topNode, true);
        }
        /// Get a [syntax node](#tree.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#tree.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        resolve(pos, side = 0) {
            return this.cursor(pos, side).node;
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, the given node
        /// will not have its children iterated over (or `leave` called).
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            for (let c = this.cursor();;) {
                let mustLeave = false;
                if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to) !== false)) {
                    if (c.firstChild())
                        continue;
                    if (!c.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(c.type, c.from, c.to);
                    mustLeave = c.type.isAnonymous;
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    mustLeave = true;
                }
            }
        }
        /// Balance the direct children of this tree.
        balance(maxBufferLength = DefaultBufferLength) {
            return this.children.length <= BalanceBranchFactor ? this
                : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length, 0);
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data) { return buildTree(data); }
    }
    /// The empty tree
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    // For trees that need a context hash attached, we're using this
    // kludge which assigns an extra property directly after
    // initialization (creating a single new object shape).
    function withHash(tree, hash) {
        if (hash)
            tree.contextHash = hash;
        return tree;
    }
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it)
    class TreeBuffer {
        /// Create a tree buffer @internal
        constructor(
        /// @internal
        buffer, 
        // The total length of the group of nodes in the buffer.
        length, 
        /// @internal
        set, type = NodeType.none) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
            this.type = type;
        }
        /// @internal
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /// @internal
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, after) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (after != -100000000 /* None */) {
                    let start = buffer[i + 1], end = buffer[i + 2];
                    if (dir > 0) {
                        if (end > after)
                            pick = i;
                        if (end > after)
                            break;
                    }
                    else {
                        if (start < after)
                            pick = i;
                        if (end >= after)
                            break;
                    }
                }
                else {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
    }
    class TreeNode {
        constructor(node, from, index, _parent) {
            this.node = node;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this.node.type; }
        get name() { return this.node.type.name; }
        get to() { return this.from + this.node.length; }
        nextChild(i, dir, after, full = false) {
            for (let parent = this;;) {
                for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))
                        continue;
                    if (next instanceof TreeBuffer) {
                        let index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if (full || (!next.type.isAnonymous || hasChild(next))) {
                        let inner = new TreeNode(next, start, i, parent);
                        return full || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);
                    }
                }
                if (full || !parent.type.isAnonymous)
                    return null;
                i = parent.index + dir;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, -100000000 /* None */); }
        get lastChild() { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); }
        childAfter(pos) { return this.nextChild(0, 1, pos); }
        childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos); }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;
        }
        get prevSibling() {
            return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;
        }
        get cursor() { return new TreeCursor(this); }
        resolve(pos, side = 0) {
            return this.cursor.moveTo(pos, side).node;
        }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        /// @internal
        toString() { return this.node.toString(); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor, result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        child(dir, after) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, -100000000 /* None */); }
        get lastChild() { return this.child(-1, -100000000 /* None */); }
        childAfter(pos) { return this.child(1, pos); }
        childBefore(pos) { return this.child(-1, pos); }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
        }
        get cursor() { return new TreeCursor(this); }
        resolve(pos, side = 0) {
            return this.cursor.moveTo(pos, side).node;
        }
        /// @internal
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
    }
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    class TreeCursor {
        /// @internal
        constructor(node, full = false) {
            this.full = full;
            this.buffer = null;
            this.stack = [];
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        /// Shorthand for `.type.name`.
        get name() { return this.type.name; }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enter(dir, after) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, after, this.full));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() { return this.enter(1, -100000000 /* None */); }
        /// Move the cursor to this node's last child.
        lastChild() { return this.enter(-1, -100000000 /* None */); }
        /// Move the cursor to the first child that starts at or after `pos`.
        childAfter(pos) { return this.enter(1, pos); }
        /// Move to the last child that ends at or before `pos`.
        childBefore(pos) { return this.enter(-1, pos); }
        /// Move the node's parent node, if this isn't the top node.
        parent() {
            if (!this.buffer)
                return this.yieldNode(this.full ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = this.full ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree._parent.nextChild(this._tree.index + dir, dir, -100000000 /* None */, this.full));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */, this.full)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() { return this.sibling(1); }
        /// Move to this node's previous sibling, if any.
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                    let child = parent.node.children[i];
                    if (this.full || !child.type.isAnonymous || child instanceof TreeBuffer || hasChild(child))
                        return false;
                }
            }
            return true;
        }
        move(dir) {
            if (this.enter(dir, -100000000 /* None */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty, its next sibling or the next sibling of
        /// the first parent node that has one.
        next() { return this.move(1); }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by ist last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev() { return this.move(-1); }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            for (;;) {
                if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))
                    break;
                if (this.from == this.to ||
                    (side < 1 ? this.from >= pos : this.from > pos) ||
                    (side > -1 ? this.to <= pos : this.to < pos)) {
                    this.parent();
                    break;
                }
            }
            return this;
        }
        /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current
        /// position.
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#tree.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#tree.TreeBuffer).
        get tree() {
            return this.buffer ? null : this._tree.node;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => !ch.type.isAnonymous || ch instanceof TreeBuffer || hasChild(ch));
    }
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    const BalanceBranchFactor = 8;
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, topID = 0, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let startPos = start - parentStart;
            if (size < 0) {
                if (size == -1) { // Reused node
                    children.push(reused[id]);
                    positions.push(startPos);
                }
                else { // Context change
                    contextHash = id;
                }
                cursor.next();
                return;
            }
            let type = types[id], node, buffer;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index, inRepeat);
                node = new TreeBuffer(data, end - buffer.start, nodeSet, inRepeat < 0 ? NodeType.none : types[inRepeat]);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                while (cursor.pos > endPos) {
                    if (cursor.id == localInRepeat)
                        cursor.next();
                    else
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                }
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor)
                    node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start, contextHash);
                else
                    node = withHash(new Tree(type, localChildren, localPositions, end - start), contextHash);
            }
            children.push(node);
            positions.push(startPos);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let nodeSize = fork.size, startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0)
                        break scan;
                    if (fork.id >= minRepeatType)
                        localSkipped += 4;
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index, inRepeat) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (id == inRepeat)
                return index;
            let startIndex = index;
            if (size > 4) {
                let endPos = cursor.pos - (size - 4);
                while (cursor.pos > endPos)
                    index = copyToBuffer(bufferStart, buffer, index, inRepeat);
            }
            if (id < minRepeatType) { // Don't copy repeat nodes into buffers
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[topID], children.reverse(), positions.reverse(), length);
    }
    function balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length, contextHash) {
        let localChildren = [], localPositions = [];
        if (length <= maxBufferLength) {
            for (let i = from; i < to; i++) {
                localChildren.push(children[i]);
                localPositions.push(positions[i] - start);
            }
        }
        else {
            let maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i];
                i++;
                for (; i < to; i++) {
                    let nextEnd = positions[i] + children[i].length;
                    if (nextEnd - groupStart > maxChild)
                        break;
                }
                if (i == groupFrom + 1) {
                    let only = children[groupFrom];
                    if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse
                        for (let j = 0; j < only.children.length; j++) {
                            localChildren.push(only.children[j]);
                            localPositions.push(only.positions[j] + groupStart - start);
                        }
                        continue;
                    }
                    localChildren.push(only);
                }
                else if (i == groupFrom + 1) {
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart, contextHash);
                    if (innerType != NodeType.none && !containsType(inner.children, innerType))
                        inner = withHash(new Tree(NodeType.none, inner.children, inner.positions, inner.length), contextHash);
                    localChildren.push(inner);
                }
                localPositions.push(groupStart - start);
            }
        }
        return withHash(new Tree(outerType, localChildren, localPositions, length), contextHash);
    }
    function containsType(nodes, type) {
        for (let elt of nodes)
            if (elt.type == type)
                return true;
        return false;
    }
    /// Tree fragments are used during [incremental
    /// parsing](#lezer.ParseOptions.fragments) to track parts of old
    /// trees that can be reused in a new parse. An array of fragments is
    /// used to track regions of an old tree whose nodes might be reused
    /// in new parses. Use the static
    /// [`applyChanges`](#tree.TreeFragment^applyChanges) method to update
    /// fragments for document changes.
    class TreeFragment {
        constructor(
        /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, 
        /// The end of the unchanged range.
        to, 
        /// The tree that this fragment is based on.
        tree, 
        /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset, open) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = open;
        }
        get openStart() { return (this.open & 1 /* Start */) > 0; }
        get openEnd() { return (this.open & 2 /* End */) > 0; }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            let cI = 0, pos = 0, off = 0;
            for (;;) {
                let nextC = cI < changes.length ? changes[cI++] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null :
                                new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, (cI > 0 ? 1 /* Start */ : 0) | (nextC ? 2 /* End */ : 0));
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the token at its
        /// end is not included in [`safeTo`](#tree.TreeFragment.safeTo).
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, partial ? 2 /* End */ : 0)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
    }
    // Creates an `Input` that is backed by a single, flat string.
    function stringInput(input) { return new StringInput(input); }
    class StringInput {
        constructor(string, length = string.length) {
            this.string = string;
            this.length = length;
        }
        get(pos) {
            return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
        }
        lineAfter(pos) {
            if (pos < 0)
                return "";
            let end = this.string.indexOf("\n", pos);
            return this.string.slice(pos, end < 0 ? this.length : Math.min(end, this.length));
        }
        read(from, to) { return this.string.slice(from, Math.min(this.length, to)); }
        clip(at) { return new StringInput(this.string, at); }
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = null;

    class StyleSet {
      constructor(root) {
        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /// Returns a next grapheme cluster break _after_ (not equal to)
    /// `pos`, if `forward` is true, or before otherwise. Returns `pos`
    /// itself if no further cluster break is available in the string.
    /// Moves across surrogate pairs, extending characters, characters
    /// joined with zero-width joiners, and flag emoji.
    function findClusterBreak(str, pos, forward = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
    }
    function nextClusterBreak(str, pos) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /// Find the code point at the given position in a string (like the
    /// [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    /// string method).
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /// Given a Unicode codepoint, return the JavaScript string that
    /// respresents it (like
    /// [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /// The first character that takes up two positions in a JavaScript
    /// string. It is often useful to compare with this after calling
    /// `codePointAt`, to figure out whether your character takes up 1 or
    /// 2 index positions.
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    /// Count the column position at the given offset into the string,
    /// taking extending characters and tab size into account.
    function countColumn(string, n, tabSize) {
        for (let i = 0; i < string.length;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /// Find the offset that corresponds to the given column position in a
    /// string, taking extending characters and tab size into account.
    function findColumn(string, n, col, tabSize) {
        for (let i = 0; i < string.length;) {
            if (n >= col)
                return { offset: i, leftOver: 0 };
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return { offset: string.length, leftOver: col - n };
    }

    /// The data structure for documents.
    class Text {
        /// @internal
        constructor() { }
        /// Get the line description around the given position.
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /// Get the description for the given (1-based) line number.
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /// Replace a range of the text with the given content.
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
            this.decompose(to, this.length, parts, 1 /* From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /// Append another document to this one.
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /// Retrieve the text between the given points.
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /// Test whether this text is equal to another instance.
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (;;) {
                a.next();
                b.next();
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                if (a.done)
                    return true;
            }
        }
        /// Iterate over the text. When `dir` is `-1`, iteration happens
        /// from end to start. This will return lines and the breaks between
        /// them as separate strings, and for long lines, might split lines
        /// themselves into multiple chunks as well.
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /// Iterate over a range of the text. When `from` > `to`, the
        /// iterator will run in reverse.
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /// @internal
        toString() { return this.sliceString(0); }
        /// Convert the document to an array of lines (which can be
        /// deserialized again via [`Text.of`](#text.Text^of)).
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /// Create a `Text` instance for the given array of lines.
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    if (typeof Symbol != "undefined")
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 0 : text instanceof TextLeaf ? text.text.length : text.children.length];
        }
        next(skip = 0) {
            for (;;) {
                let last = this.nodes.length - 1;
                if (last < 0) {
                    this.done = true;
                    this.value = "";
                    this.lineBreak = false;
                    return this;
                }
                let top = this.nodes[last], offset = this.offsets[last];
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (this.dir > 0 ? size : 0)) {
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if (!this.lineBreak && offset != (this.dir > 0 ? 0 : size)) {
                    // Internal offset with lineBreak == false means we have to
                    // count the line break at this position
                    this.lineBreak = true;
                    if (skip == 0) {
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset - (this.dir < 0 ? 1 : 0)];
                    this.offsets[last] = (offset += this.dir);
                    this.lineBreak = false;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : this.dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[this.dir > 0 ? offset : offset - 1];
                    this.offsets[last] = offset + this.dir;
                    this.lineBreak = false;
                    if (skip > next.length) {
                        skip -= next.length;
                    }
                    else {
                        this.nodes.push(next);
                        this.offsets.push(this.dir > 0 ? 0 : next instanceof TextLeaf ? next.text.length : next.children.length);
                    }
                }
            }
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            if (start > end) {
                this.skip = text.length - start;
                this.limit = start - end;
            }
            else {
                this.skip = start;
                this.limit = end - start;
            }
        }
        next(skip = 0) {
            if (this.limit <= 0) {
                this.limit = -1;
            }
            else {
                let { value, lineBreak, done } = this.cursor.next(this.skip + skip);
                this.skip = 0;
                this.value = value;
                let len = lineBreak ? 1 : value.length;
                if (len > this.limit)
                    this.value = this.cursor.dir > 0 ? value.slice(0, this.limit) : value.slice(len - this.limit);
                if (done || this.value.length == 0)
                    this.limit = -1;
                else
                    this.limit -= this.value.length;
            }
            return this;
        }
        get lineBreak() { return this.cursor.lineBreak; }
        get done() { return this.limit < 0; }
    }
    /// This type describes a line in the document. It is created
    /// on-demand when lines are [queried](#text.Text.lineAt).
    class Line {
        /// @internal
        constructor(
        /// The position of the start of the line.
        from, 
        /// The position at the end of the line (_before_ the line break,
        /// or at the end of document for the last line).
        to, 
        /// This line's line number (1-based).
        number, 
        /// The line's content.
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /// The length of the line (not including any line break after it).
        get length() { return this.to - this.from; }
    }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode;
    (function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    })(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        /**
        @internal
        */
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each.
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return new ChangeDesc(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: new ChangeDesc(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let posA = 0, posB = 0;;) {
            if (a.ins == -1) {
                posA += a.len;
                a.next();
            }
            else if (b.ins == -1 && posB < posA) {
                let skip = Math.min(b.len, posA - posB);
                b.forward(skip);
                addSection(sections, skip, -1);
                posB += skip;
            }
            else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
                addSection(sections, b.ins, -1);
                while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                    posA += a.len;
                    a.next();
                }
                posB += b.len;
                b.next();
            }
            else if (a.ins >= 0) {
                let len = 0, end = posA + a.len;
                for (;;) {
                    if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                        len += b.ins;
                        posB += b.len;
                        b.next();
                    }
                    else if (b.ins == -1 && posB < end) {
                        let skip = Math.min(b.len, end - posB);
                        len += skip;
                        b.forward(skip);
                        posB += skip;
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, a.ins);
                if (insert)
                    addInsert(insert, sections, a.text);
                posA = end;
                a.next();
            }
            else if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        /**
        @internal
        */
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* GoalColumnOffset */;
            return value == 33554431 /* NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from = change.mapPos(this.from, assoc), to = change.mapPos(this.to, assoc);
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        /**
        @internal
        */
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex = 0) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
            return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
        }
    }
    function normalized(ranges, mainIndex = 0) {
        let main = ranges[mainIndex];
        ranges.sort((a, b) => a.from - b.from);
        mainIndex = ranges.indexOf(main);
        for (let i = 1; i < ranges.length; i++) {
            let range = ranges[i], prev = ranges[i - 1];
            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                let from = prev.from, to = Math.max(range.to, prev.to);
                if (i <= mainIndex)
                    mainIndex--;
                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
            }
        }
        return new EditorSelection(ranges, mainIndex);
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
    associated with an editor or the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
    value, using the input with the hightest precedence).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, 
        /**
        @internal
        */
        extensions) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            this.extensions = extensions;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value for this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In most cases, you'll want to use the
        [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
        defining a field instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return (state, tr) => {
                if (!tr || tr.reconfigured) {
                    state.values[idx] = getter(state);
                    return 1 /* Changed */;
                }
                else {
                    let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
                        depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);
                    if (!depChanged)
                        return 0;
                    let newVal = getter(state), oldVal = tr.startState.values[idx];
                    if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))
                        return 0;
                    state.values[idx] = newVal;
                    return 1 /* Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        return (state, tr) => {
            let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
            let changed = oldAddr == null;
            for (let dynAddr of dynamic) {
                if (ensureAddr(state, dynAddr) & 1 /* Changed */)
                    changed = true;
            }
            if (!changed)
                return 0;
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            let newVal = facet.combine(values);
            if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))
                return 0;
            state.values[idx] = newVal;
            return 1 /* Changed */;
        };
    }
    function maybeIndex(state, id) {
        let found = state.config.address[id];
        return found == null ? null : found >> 1;
    }
    const initField = Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return (state, tr) => {
                if (!tr) {
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                }
                let oldVal, changed = 0;
                if (tr.reconfigured) {
                    let oldIdx = maybeIndex(tr.startState, this.id);
                    oldVal = oldIdx == null ? this.create(tr.startState) : tr.startState.values[oldIdx];
                    changed = 1 /* Changed */;
                }
                else {
                    oldVal = tr.startState.values[idx];
                }
                let value = this.updateF(oldVal, tr);
                if (!changed && !this.compareF(oldVal, value))
                    changed = 1 /* Changed */;
                if (changed)
                    state.values[idx] = value;
                return changed;
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { fallback: 3, default: 2, extend: 1, override: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        A precedence below the default precedence, which will cause
        default-precedence extensions to override it even if they are
        specified later in the extension ordering.
        */
        fallback: prec(Prec_.fallback),
        /**
        The regular default precedence.
        */
        default: prec(Prec_.default),
        /**
        A higher-than-default precedence.
        */
        extend: prec(Prec_.extend),
        /**
        Precedence above the `default` and `extend` precedences.
        */
        override: prec(Prec_.override)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration$1 {
        constructor(base, compartments, dynamicSlots, address, staticValues) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* Uninitialized */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                if (providers.every(p => p.type == 0 /* Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    let value = facet.combine(providers.map(p => p.value));
                    let oldAddr = oldState ? oldState.config.address[facet.id] : null;
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (facet.compare(value, oldVal))
                            value = oldVal;
                    }
                    staticValues.push(value);
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            return new Configuration$1(base, newCompartments, dynamicSlots.map(f => f(address)), address, staticValues);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known >= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, prec);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* Computed */)
            return status;
        state.status[idx] = 4 /* Computing */;
        let changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2 /* Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = Facet.define();
    const allowMultipleSelections = Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = Facet.define();
    const transactionFilter = Facet.define();
    const transactionExtender = Facet.define();

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    class Transaction {
        /**
        @internal
        */
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so itis recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
    }
    /**
    Annotation used to store transaction timestamps.
    */
    Transaction.time = Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. The view will set this to...

     - `"input"` when the user types text
     - `"delete"` when the user deletes the selection or text near the selection
     - `"keyboardselection"` when moving the selection via the keyboard
     - `"pointerselection"` when moving the selection through the pointing device
     - `"paste"` when pasting content
     - `"cut"` when cutting
     - `"drop"` when content is inserted via drag-and-drop
    */
    Transaction.userEvent = Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection;
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations: asArray$1(spec.annotations),
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.invertedDesc;
            }
            tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$5 = [];
    function asArray$1(value) {
        return value == null ? none$5 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory;
    (function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    })(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, tr = null) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            /**
            @internal
            */
            this.applying = null;
            this.status = config.statusTemplate.slice();
            if (tr && tr.startState.config == config) {
                this.values = tr.startState.values.slice();
            }
            else {
                this.values = config.dynamicSlots.map(_ => null);
                // Copy over old values for shared facets/fields if this is a reconfigure
                if (tr)
                    for (let id in config.address) {
                        let cur = config.address[id], prev = tr.startState.config.address[id];
                        if (prev != null && (cur & 1) == 0)
                            this.values[cur >> 1] = getAddr(tr.startState, prev);
                    }
            }
            this.applying = tr;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.applying = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            new EditorState(conf || Configuration$1.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    let field = fields[prop], value = json[prop];
                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration$1.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        */
        phrase(phrase) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase))
                    return map[phrase];
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        */
        languageDataAt(name, pos) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = Facet.define();
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two number indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single (possibly the input transaction), or
    an array of specs (which will be combined in the same way as the
    arguments to [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are applied.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. Will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /// Each range is associated with a value, which must inherit from
    /// this class.
    class RangeValue {
        /// Compare this value with another value. The default
        /// implementation compares by identity.
        eq(other) { return this == other; }
        /// Create a [range](#rangeset.Range) with this value.
        range(from, to = from) { return new Range(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /// A range associates a value with a range of positions.
    class Range {
        /// @internal
        constructor(
        /// The range's start position.
        from, 
        /// Its end position.
        to, 
        /// The value associated with this range.
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // With side == -1, return the first index where to >= pos. When
        // side == 1, the first index where from > pos.
        findIndex(pos, end, side = end * 1000000000 /* Far */, startAt = 0) {
            if (pos <= 0)
                return startAt;
            let arr = end < 0 ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end < 0 ? this.value[mid].startSide : this.value[mid].endSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1), e = this.findIndex(to, 1, undefined, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /// A range set stores a collection of [ranges](#rangeset.Range) in a
    /// way that makes them efficient to [map](#rangeset.RangeSet.map) and
    /// [update](#rangeset.RangeSet.update). This is an immutable data
    /// structure.
    class RangeSet {
        /// @internal
        constructor(
        /// @internal
        chunkPos, 
        /// @internal
        chunk, 
        /// @internal
        nextLayer = RangeSet.empty, 
        /// @internal
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /// @internal
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /// The number of ranges in the set.
        get size() {
            if (this == RangeSet.empty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /// @internal
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /// Update the range set, optionally adding new ranges or filtering
        /// out existing ones.
        ///
        /// (The extra type parameter is just there as a kludge to work
        /// around TypeScript variance issues that prevented `RangeSet<X>`
        /// from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        /// `Y`.)
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add.slice().sort(cmpRange);
            if (this == RangeSet.empty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(new Range(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer == RangeSet.empty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /// Map this range set through a set of changes, return the new set.
        map(changes) {
            if (changes.length == 0 || this == RangeSet.empty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
        }
        /// Iterate over the ranges that touch the region `from` to `to`,
        /// calling `f` for each. There is no guarantee that the ranges will
        /// be reported in any specific order. When the callback returns
        /// `false`, iteration stops.
        between(from, to, f) {
            if (this == RangeSet.empty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /// Iterate over the ranges in this set, in order, including all
        /// ranges that end at or after `from`.
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /// Iterate over the ranges in a collection of sets, in order,
        /// starting from `from`.
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /// Iterate over two groups of sets, calling methods on `comparator`
        /// to notify it of possible differences.
        static compare(oldSets, newSets, 
        /// This indicates how the underlying data changed between these
        /// ranges, and is needed to synchronize the iteration. `from` and
        /// `to` are coordinates in the _new_ space, after these changes.
        textDiff, comparator, 
        /// Can be used to ignore all non-point ranges, and points below
        /// the given size. When -1, all ranges are compared.
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
                set != RangeSet.empty && newSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
                set != RangeSet.empty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /// Iterate over a group of range sets at the same time, notifying
        /// the iterator about the ranges covering every given piece of
        /// content. Returns the open count (see
        /// [`SpanIterator.span`](#rangeset.SpanIterator.span)) at the end
        /// of the iteration.
        static spans(sets, from, to, iterator, 
        /// When given and greater than -1, only points of at least this
        /// size are taken into account.
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let open = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
                    open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, open);
                    open = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    break;
                pos = cursor.to;
                cursor.next();
            }
            return open;
        }
        /// Create a range set for the given range or array of ranges. By
        /// default, this expects the ranges to be _sorted_ (by start
        /// position and, if two start at the same position,
        /// `value.startSide`). You can pass `true` as second argument to
        /// cause the method to sort them.
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range ? [ranges] : sort ? ranges.slice().sort(cmpRange) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /// The empty set of ranges.
    RangeSet.empty = new RangeSet([], [], null, -1);
    RangeSet.empty.nextLayer = RangeSet.empty;
    /// A range set builder is a data structure that helps build up a
    /// [range set](#rangeset.RangeSet) directly, without first allocating
    /// an array of [`Range`](#rangeset.Range) objects.
    class RangeSetBuilder {
        /// Create an empty builder.
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* Far */;
            this.lastTo = -1000000000 /* Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /// Add a range. Ranges should be added in sorted (by `from` and
        /// `value.startSide`) order.
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /// @internal
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /// @internal
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /// Finish the range set. Returns the new set. The builder can't be
        /// used anymore after this has been called.
        finish() { return this.finishInner(RangeSet.empty); }
        /// @internal
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint < 500 /* BigPointSize */)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++)
                if (inA.get(set.chunk[i]) == set.chunkPos[i])
                    shared.add(set.chunk[i]);
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            let rangeIndex = this.chunkIndex == this.layer.chunk.length ? 0
                : this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], -1, side);
            if (!forward || this.rangeIndex < rangeIndex)
                this.rangeIndex = rangeIndex;
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    if (++this.rangeIndex == chunk.value.length) {
                        this.chunkIndex++;
                        if (this.skip) {
                            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                                this.chunkIndex++;
                        }
                        this.rangeIndex = 0;
                    }
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; cur != RangeSet.empty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* Far */;
            this.endSide = 0;
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        if (this.cursor.from < from)
                            trackExtra = 1;
                        this.cursor.next();
                        if (this.to > from)
                            this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                let openStart = 0;
                while (openStart < trackOpen.length && trackOpen[openStart] < from)
                    openStart++;
                this.openStart = openStart + trackExtra;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = 0; i < this.active.length; i++) {
                if (this.activeRank[i] > this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide > this.point.endSide)
                    active.push(this.active[i]);
            }
            return active;
        }
        openEnd(to) {
            let open = 0;
            while (open < this.activeTo.length && this.activeTo[open] > to)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    let [nav, doc] = typeof navigator != "undefined"
        ? [navigator, document]
        : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
    const ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /MSIE \d/.test(nav.userAgent);
    const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /Apple Computer/.test(nav.vendor);
    var browser = {
        mac: /Mac/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios: safari && (/Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2),
        android: /Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    function getSelection(root) {
        return (root.getSelection ? root.getSelection() : document.getSelection());
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    function selectionCollapsed(domSel) {
        let collapsed = domSel.isCollapsed;
        if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
            collapsed = false;
        return collapsed;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return dom.contains(selection.anchorNode.nodeType == 3 ? selection.anchorNode.parentNode : selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    const ScrollSpace = 5;
    function scrollRectIntoView(dom, rect) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom.parentNode; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == document.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top)
                    moveY = -(bounding.top - rect.top + ScrollSpace);
                else if (rect.bottom > bounding.bottom)
                    moveY = rect.bottom - bounding.bottom + ScrollSpace;
                if (rect.left < bounding.left)
                    moveX = -(bounding.left - rect.left + ScrollSpace);
                else if (rect.right > bounding.right)
                    moveX = rect.right - bounding.right + ScrollSpace;
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelection {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        set(domSel) {
            this.anchorNode = domSel.anchorNode;
            this.anchorOffset = domSel.anchorOffset;
            this.focusNode = domSel.focusNode;
            this.focusOffset = domSel.focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const none$3 = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Node */;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            if (this.dirty & 2 /* Node */) {
                let parent = this.dom, pos = null;
                for (let child of this.children) {
                    if (child.dirty) {
                        let next = pos ? pos.nextSibling : parent.firstChild;
                        if (next && !child.dom && !ContentView.get(next))
                            child.reuseDOM(next);
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
                    if (track && track.node == parent && pos != child.dom)
                        track.written = true;
                    syncNodeInto(parent, pos, child.dom);
                    pos = child.dom;
                }
                let next = pos ? pos.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.dirty & 1 /* Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
            }
        }
        reuseDOM(_dom) { return false; }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (end >= to && end != pos && toI == -1) {
                    toI = i;
                    toEnd = end;
                    break;
                }
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd, startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild, endDOM: toI < this.children.length - 1 && toI >= 0 ? this.children[toI + 1].dom : null };
        }
        markDirty(andParent = false) {
            if (this.dirty & 2 /* Node */)
                return;
            this.dirty |= 2 /* Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Node */;
                if (parent.dirty & 1 /* Child */)
                    return;
                parent.dirty |= 1 /* Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = none$3) {
            this.markDirty();
            for (let i = from; i < to; i++)
                this.children[i].parent = null;
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    function syncNodeInto(parent, after, dom) {
        let next = after ? after.nextSibling : parent.firstChild;
        if (dom.parentNode == parent)
            while (next != dom)
                next = rm$1(next);
        else
            parent.insertBefore(dom, next);
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }

    const none$2 = [];
    class InlineView extends ContentView {
        /**
        Return true when this view is equivalent to `other` and can take
        on its role.
        */
        become(_other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // negative number to indicate it is before its position, or a
        // positive number when after its position.
        getSide() { return 0; }
    }
    InlineView.prototype.children = none$2;
    const MaxJoinLen = 256;
    class TextView extends InlineView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType != 3)
                return false;
            this.createDOM(dom);
            return true;
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new TextView(this.text.slice(from));
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends InlineView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        createDOM() {
            let dom = document.createElement(this.mark.tagName);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            this.setDOM(dom);
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            super.sync(track);
        }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new MarkView(this.mark, sliceInlineChildren(this.children, from), this.length - from);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends InlineView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        slice(from) { return WidgetView.create(this.widget, this.length - from, this.side); }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return Rect0;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) { return new DOMPos(this.widget.text, pos); }
        sync() { if (!this.dom)
            this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) { return textCoords(this.widget.text, pos, side); }
    }
    function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of elts)
            dLen += view.length;
        parent.length += dLen;
        let { children } = parent;
        // Both from and to point into the same text view
        if (fromI == toI && fromOff) {
            let start = children[fromI];
            // Maybe just update that view and be done
            if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd))
                return;
            if (elts.length == 0) {
                start.merge(fromOff, toOff, null, openStart, openEnd);
                return;
            }
            // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
            let after = start.slice(toOff);
            if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd))
                elts[elts.length - 1] = after;
            else
                elts.push(after);
            toI++;
            openEnd = toOff = 0;
        }
        // Make sure start and end positions fall on node boundaries
        // (fromOff/toOff are no longer used after this), and that if the
        // start or end of the elts can be merged with adjacent nodes,
        // this is done
        if (toOff) {
            let end = children[toI];
            if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
                elts.pop();
                openEnd = 0;
            }
            else {
                end.merge(0, toOff, null, 0, 0);
            }
        }
        else if (toI < children.length && elts.length &&
            children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
            elts.pop();
            openEnd = 0;
        }
        if (fromOff) {
            let start = children[fromI];
            if (elts.length && start.merge(fromOff, start.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
            else {
                start.merge(fromOff, start.length, null, 0, 0);
            }
            fromI++;
        }
        else if (fromI && elts.length) {
            let end = children[fromI - 1];
            if (end.merge(end.length, end.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
        }
        // Then try to merge any mergeable nodes at the start and end of
        // the changed range
        while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
            elts.pop();
            toI--;
            openEnd = 0;
        }
        while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
            elts.shift();
            fromI++;
            openStart = 0;
        }
        if (!elts.length && fromI && toI < children.length && openStart && openEnd &&
            children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd))
            fromI--;
        // And if anything remains, splice the child array to insert the new elts
        if (elts.length || fromI != toI)
            parent.replaceChildren(fromI, toI, elts);
    }
    function sliceInlineChildren(children, from) {
        let result = [], off = 0;
        for (let elt of children) {
            let end = off + elt.length;
            if (end > from)
                result.push(off < from ? elt.slice(from - off) : elt);
            off = end;
        }
        return result;
    }
    function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (side <= 0 || end == view.length ? end >= pos : end > pos)
                return child.coordsAt(pos - off, side);
            off = end;
        }
        return (view.dom.lastChild || view.dom).getBoundingClientRect();
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(name, attrs[name]);
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even when the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(_widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(_dom) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(_event) { return true; }
        /**
        / @internal
        */
        get customView() { return null; }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType;
    (function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    })(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
    */
    class Decoration extends RangeValue {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
        (below the facet-provided decorations) [view
        plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
        on line boundaries and on the boundaries of higher-precedence
        decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which adds an element at the given
        position.
        */
        static widget(spec) {
            let side = spec.side || 0;
            if (spec.block)
                side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
            return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block;
            let { start, end } = getInclusive(spec);
            let startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
            let endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start || false, end: end || false };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin > from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, takeDeco, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (takeDeco)
                this.setDeco(source ? source.attrs : null);
            mergeInlineChildren(this, from, to, source ? source.children : none$1$1, openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].slice(off), 0);
                this.children[i].merge(off, this.children[i].length, null, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0) {
                this.children[i - 1].parent = null;
                i--;
            }
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        // Only called when building a line view in ContentBuilder
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        sync(track) {
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            if (!last || (last.nodeName != "BR" && (ContentView.get(last) instanceof WidgetView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height, charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
        match(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0;; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (block.length)
                        return null;
                }
                off = end + block.breakAfter;
            }
        }
    }
    const none$1$1 = [];
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            return new BlockWidgetView(this.widget, len, this.type);
        }
        get children() { return none$1$1; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        match(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
    }

    class ContentBuilder {
        constructor(doc, pos, end) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine)
                this.content.push(this.curLine = new LineView);
            return this.curLine;
        }
        addWidget(view) {
            this.curLine = null;
            this.content.push(view);
        }
        finish() {
            if (!this.posCovered())
                this.getLine();
        }
        wrapMarks(view, active) {
            for (let i = active.length - 1; i >= 0; i--)
                view = new MarkView(active[i], [view], view.length);
            return view;
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
                this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart) {
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
                    this.getLine().append(widget, openStart);
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations) {
            let builder = new ContentBuilder(text, from, to);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish();
            return builder;
        }
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    const none$4 = [];
    const clickAddsSelectionRange = Facet.define();
    const dragMovesSelection$1 = Facet.define();
    const mouseSelectionStyle = Facet.define();
    const exceptionSink = Facet.define();
    const updateListener = Facet.define();
    const inputHandler = Facet.define();
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = Facet.define({ combine: values => values.length ? values[0] : true });
    /**
    Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
    [fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
    provides.
    */
    class PluginFieldProvider {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        field, 
        /**
        @internal
        */
        get) {
            this.field = field;
            this.get = get;
        }
    }
    /**
    Plugin fields are a mechanism for allowing plugins to provide
    values that can be retrieved through the
    [`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
    */
    class PluginField {
        /**
        Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
        to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
        option.
        */
        from(get) {
            return new PluginFieldProvider(this, get);
        }
        /**
        Define a new plugin field.
        */
        static define() { return new PluginField(); }
    }
    /**
    This field can be used by plugins to provide
    [decorations](https://codemirror.net/6/docs/ref/#view.Decoration).

    **Note**: For reasons of data flow (plugins are only updated
    after the viewport is computed), decorations produced by plugins
    are _not_ taken into account when predicting the vertical
    layout structure of the editor. Thus, things like large widgets
    or big replacements (i.e. code folding) should be provided
    through the state-level [`decorations`
    facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), not this plugin field.
    */
    PluginField.decorations = PluginField.define();
    /**
    Plugins can provide additional scroll margins (space around the
    sides of the scrolling element that should be considered
    invisible) through this field. This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    PluginField.scrollMargins = PluginField.define();
    let nextPluginID = 0;
    const viewPlugin = Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        fields) {
            this.id = id;
            this.create = create;
            this.fields = fields;
            this.extension = viewPlugin.of(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            let { eventHandlers, provide, decorations } = spec || {};
            let fields = [];
            if (provide)
                for (let provider of Array.isArray(provide) ? provide : [provide])
                    fields.push(provider);
            if (eventHandlers)
                fields.push(domEventHandlers.from((value) => ({ plugin: value, handlers: eventHandlers })));
            if (decorations)
                fields.push(PluginField.decorations.from(decorations));
            return new ViewPlugin(nextPluginID++, create, fields);
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    const domEventHandlers = PluginField.define();
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        takeField(type, target) {
            for (let { field, get } of this.spec.fields)
                if (field == type)
                    target.push(get(this.value));
        }
        update(view) {
            if (!this.value) {
                try {
                    this.value = this.spec.create(view);
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                    return PluginInstance.dummy;
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (!this.value.update)
                    return this;
                try {
                    this.value.update(update);
                }
                catch (e) {
                    logException(update.state, e, "CodeMirror plugin crashed");
                    if (this.value.destroy)
                        try {
                            this.value.destroy();
                        }
                        catch (_) { }
                    return PluginInstance.dummy;
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
    }
    PluginInstance.dummy = new PluginInstance(ViewPlugin.define(() => ({})));
    const editorAttributes = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    const contentAttributes = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    // Provide decorations
    const decorations = Facet.define();
    const styleModule = Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        /**
        @internal
        */
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions = none$4) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags |= 1 /* Focus */;
            }
            if (this.docChanged)
                this.flags |= 2 /* Height */;
        }
        /**
        Tells you whether the viewport changed in this update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* Viewport */) > 0;
        }
        /**
        Indicates whether the line height in the editor changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* Height */) > 0;
        }
        /**
        Returns true when the document changed or the size of the editor
        or the lines or characters within it has changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (16 /* Geometry */ | 2 /* Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return this.transactions.some(tr => tr.docChanged);
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            // Track a minimum width for the editor. When measuring sizes in
            // checkLayout, this is updated to point at the width of a given
            // element and its extent in the document. When a change happens in
            // that range, these are reset. That way, once we've seen a
            // line/element of a given length, we keep the editor wide enough to
            // fit at least that element, until it is changed, at which point we
            // forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (this.view.inputState.composing < 0)
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            let forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.startState.doc.lines;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            let pointerSel = update.transactions.some(tr => tr.annotation(Transaction.userEvent) == "pointerselection");
            if (this.dirty == 0 /* Not */ && changedRanges.length == 0 &&
                !(update.flags & (4 /* Viewport */ | 8 /* LineGaps */)) &&
                update.state.selection.main.from >= this.view.viewport.from &&
                update.state.selection.main.to <= this.view.viewport.to) {
                this.updateSelection(forceSelection, pointerSel);
                return false;
            }
            else {
                this.updateInner(changedRanges, deco, update.startState.doc.length, forceSelection, pointerSel);
                return true;
            }
        }
        // Used both by update and checkLayout do perform the actual DOM
        // update
        updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
            this.updateChildren(changes, deco, oldLength);
            this.view.observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.domHeight + "px";
                this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome ? { node: getSelection(this.view.root).focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = 0 /* Not */;
                if (track === null || track === void 0 ? void 0 : track.written)
                    forceSelection = true;
                this.updateSelection(forceSelection, pointerSel);
                this.dom.style.height = "";
            });
        }
        updateChildren(changes, deco, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
            let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
            let breakAtEnd = last ? last.breakAfter : breakAtStart;
            // Change within a single line
            if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
                before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd))
                return;
            let after = this.children[toI];
            // Make sure the end of the line after the update is preserved in `after`
            if (toOff < after.length || after.children.length && after.children[after.children.length - 1].length == 0) {
                // If we're splitting a line, separate part of the start line to
                // avoid that being mangled when updating the start line.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    content[content.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && after.children[0].length == 0)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    content.push(after);
                }
            }
            else if (after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
                    before.breakAfter = content.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
            // Try to merge widgets on the boundaries of the replacement
            while (fromI < toI && content.length) {
                if (this.children[toI - 1].match(content[content.length - 1]))
                    toI--, content.pop();
                else if (this.children[fromI].match(content[0]))
                    fromI++, content.shift();
                else
                    break;
            }
            if (fromI < toI || content.length)
                this.replaceChildren(fromI, toI, content);
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(force = false, fromPointer = false) {
            if (!(fromPointer || this.mayControlSelection()))
                return;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = getSelection(this.root);
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                (browser.gecko && main.empty && nextToUneditable(domSel.focusNode, domSel.focusOffset)) ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        domSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = main.bidiLevel;
                    }
                    else if (domSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        domSel.collapse(anchor.node, anchor.offset);
                        domSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        domSel.removeAllRanges();
                        domSel.addRange(range);
                    }
                });
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            let cursor = this.view.state.selection.main;
            let sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head); // FIXME provide view-line-range finding helper
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, getSelection(this.root));
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start || pos == start && (child.type == BlockType.Text || !i || this.children[i - 1].breakAfter))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights() {
            let result = [], { from, to } = this.view.viewState.viewport;
            let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    result.push(child.dom.getBoundingClientRect().height);
                    let width = child.dom.scrollWidth;
                    if (width > minWidth) {
                        this.minWidth = minWidth = width;
                        this.minWidthFrom = pos;
                        this.minWidthTo = end;
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = vs.lineAt(end, 0).bottom - vs.lineAt(pos, 0).top;
                    deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            return this.decorations = [
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco,
                this.compositionDeco,
                ...this.view.state.facet(decorations),
                ...this.view.pluginField(PluginField.decorations)
            ];
        }
        scrollPosIntoView(pos, side) {
            let rect = this.coordsAt(pos, side);
            if (!rect)
                return;
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.pluginField(PluginField.scrollMargins))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            scrollRectIntoView(this.dom, {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            });
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset < pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function computeCompositionDeco(view, changes) {
        let sel = getSelection(view.root);
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return Decoration.none;
        let cView = view.docView.nearest(textNode);
        let from, to, topNode = textNode;
        if (cView instanceof InlineView) {
            while (cView.parent instanceof InlineView)
                cView = cView.parent;
            from = cView.posAtStart;
            to = from + cView.length;
            topNode = cView.dom;
        }
        else if (cView instanceof LineView) {
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        }
        else {
            return Decoration.none;
        }
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let text = textNode.nodeValue, { state } = view;
        if (newTo - newFrom < text.length) {
            if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
                newTo = newFrom + text.length;
            else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.sliceDoc(newFrom, newTo) != text) {
            return Decoration.none;
        }
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(topNode, textNode) }).range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text) {
            super();
            this.top = top;
            this.text = text;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction;
    (function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    })(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */;
        if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == 512 /* NSM */)
                type = prev;
            else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
                type = 16 /* AN */;
            types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
            if (type & 7 /* Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types[i];
            if (type == 128 /* CS */) {
                if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))
                    type = types[i] = prev;
                else
                    types[i] = 256 /* NI */;
            }
            else if (type == 64 /* ET */) {
                let end = i + 1;
                while (end < len && types[end] == 64 /* ET */)
                    end++;
                let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
                types[i] = 1 /* L */;
            }
            prev = type;
            if (type & 7 /* Strong */)
                prevStrong = type;
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types[i] == 256 /* NI */) {
                let end = i + 1;
                while (end < len && types[end] == 256 /* NI */)
                    end++;
                let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;
                let afterL = (end < len ? types[end] : outerType) == 1 /* L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] != 1 /* L */;
                while (i < len && rtl == (types[i] != 1 /* L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types[--j] != 2 /* R */;
                        while (j > start && l == (types[j - 1] != 2 /* R */))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] == 2 /* R */;
                while (i < len && rtl == (types[i] == 2 /* R */))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, 0, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, 0, span.level);
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    // FIXME holding arrow-up/down at the end of the viewport is a rather
    // common use case that will repeatedly trigger this code. Maybe
    // introduce some element of binary search after all?
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, { x, y }, bias = -1) {
        let content = view.contentDOM.getBoundingClientRect(), block;
        let halfLine = view.defaultLineHeight / 2;
        for (let bounced = false;;) {
            block = view.blockAtHeight(y, content.top);
            if (block.top > y || block.bottom < y) {
                bias = block.top > y ? -1 : 1;
                y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
                if (bounced)
                    return -1;
                else
                    bounced = true;
            }
            if (block.type == BlockType.Text)
                break;
            y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        }
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : null;
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length : null;
        // Clip x to the viewport sides
        x = Math.max(content.left + 1, Math.min(content.right - 1, x));
        let root = view.root, element = root.elementFromPoint(x, y);
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
            if (root.caretPositionFromPoint) {
                let pos = root.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (root.caretRangeFromPoint) {
                let range = root.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (browser.safari && isSuspiciousCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = node.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        var _a;
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos);
        let startCoords = view.coordsAtPos(startPos);
        if (startCoords) {
            let rect = view.dom.getBoundingClientRect();
            let goal = (_a = start.goalColumn) !== null && _a !== void 0 ? _a : startCoords.left - rect.left;
            let resolvedGoal = rect.left + goal;
            let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
            for (let startY = dir < 0 ? startCoords.top : startCoords.bottom, extra = 0; extra < 50; extra += 10) {
                let pos = posAtCoords(view, { x: resolvedGoal, y: startY + (dist + extra) * dir }, dir);
                if (pos == null)
                    break;
                if (pos != startPos)
                    return EditorSelection.cursor(pos, undefined, undefined, goal);
            }
        }
        // Outside of the drawn viewport, use a crude column-based approach
        let { doc } = view.state, line = doc.lineAt(startPos), tabSize = view.state.tabSize;
        let goal = start.goalColumn, goalCol = 0;
        if (goal == null) {
            for (const iter = doc.iterRange(line.from, startPos); !iter.next().done;)
                goalCol = countColumn(iter.value, goalCol, tabSize);
            goal = goalCol * view.defaultCharacterWidth;
        }
        else {
            goalCol = Math.round(goal / view.defaultCharacterWidth);
        }
        if (dir < 0 && line.from == 0)
            return EditorSelection.cursor(0);
        else if (dir > 0 && line.to == doc.length)
            return EditorSelection.cursor(line.to);
        let otherLine = doc.line(line.number + dir);
        let result = otherLine.from;
        let seen = 0;
        for (const iter = doc.iterRange(otherLine.from, otherLine.to); seen >= goalCol && !iter.next().done;) {
            const { offset, leftOver } = findColumn(iter.value, seen, goalCol, tabSize);
            seen = goalCol - leftOver;
            result += offset;
        }
        return EditorSelection.cursor(result, undefined, undefined, goal);
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            this.compositionEndedAt = 0;
            this.mouseSelection = null;
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event) ||
                        type == "keydown" && this.screenKeyEvent(view, event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            // Must always run, even if a custom handler handled the event
            view.contentDOM.addEventListener("keydown", (event) => {
                view.inputState.lastKeyCode = event.keyCode;
                view.inputState.lastKeyTime = Date.now();
            });
            this.notifiedFocused = view.hasFocus;
            this.ensureHandlers(view);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view) {
            let handlers = this.customHandlers = view.pluginField(domEventHandlers);
            for (let set of handlers) {
                for (let type in set.handlers)
                    if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                        this.registeredEvents.push(type);
                        view.contentDOM.addEventListener(type, (event) => {
                            if (!eventBelongsToEditor(view, event))
                                return;
                            if (this.runCustomHandlers(type, view, event))
                                event.preventDefault();
                        });
                    }
            }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type], handled = false;
                if (handler) {
                    try {
                        handled = handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                    if (handled || event.defaultPrevented) {
                        // Chrome for Android often applies a bunch of nonsensical
                        // DOM changes after an enter press, even when
                        // preventDefault-ed. This tries to ignore those.
                        if (browser.android && type == "keydown" && event.keyCode == 13)
                            view.observer.flushSoon();
                        return true;
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && event.timeStamp - this.compositionEndedAt < 500) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        screenKeyEvent(view, event) {
            let protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
            if (event.keyCode == 27)
                this.lastEscPress = Date.now();
            else if (modifierCodes.indexOf(event.keyCode) < 0)
                this.lastEscPress = 0;
            return protectedTab;
        }
        mustFlushObserver(event) {
            return (event.type == "keydown" && event.keyCode != 229) ||
                event.type == "compositionend" && !browser.ios;
        }
        startMouseSelection(view, event, style) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = new MouseSelection(this, view, event, style);
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    class MouseSelection {
        constructor(inputState, view, startEvent, style) {
            this.inputState = inputState;
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.startEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (!selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc)
                this.view.dispatch({
                    selection,
                    annotations: Transaction.userEvent.of("pointerselection"),
                    scrollIntoView: true
                });
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            this.style.update(update);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            annotations: Transaction.userEvent.of("paste"),
            scrollIntoView: true
        });
    }
    function mustCapture(event) {
        let mods = (event.ctrlKey ? 1 /* Ctrl */ : 0) | (event.metaKey ? 8 /* Meta */ : 0) |
            (event.altKey ? 2 /* Alt */ : 0) | (event.shiftKey ? 4 /* Shift */ : 0);
        let code = event.keyCode, macCtrl = browser.mac && mods == 1 /* Ctrl */;
        return code == 8 || (macCtrl && code == 72) || // Backspace, Ctrl-h on Mac
            code == 46 || (macCtrl && code == 68) || // Delete, Ctrl-d on Mac
            code == 27 || // Esc
            (mods == (browser.mac ? 8 /* Meta */ : 1 /* Ctrl */) && // Ctrl/Cmd-[biyz]
                (code == 66 || code == 73 || code == 89 || code == 90));
    }
    handlers.keydown = (view, event) => {
        if (mustCapture(event))
            event.preventDefault();
        view.inputState.setSelectionOrigin("keyboardselection");
    };
    let lastTouch = 0;
    function mouseLikeTouchEvent(e) {
        return e.touches.length == 1 && e.touches[0].radiusX <= 1 && e.touches[0].radiusY <= 1;
    }
    handlers.touchstart = (view, e) => {
        if (!mouseLikeTouchEvent(e))
            lastTouch = Date.now();
        view.inputState.setSelectionOrigin("pointerselection");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("pointerselection");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            if (view.root.activeElement != view.contentDOM)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            view.inputState.startMouseSelection(view, event, style);
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (pos == null)
            return null;
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown;
        lastMouseDown = event;
        return lastMouseDownCount = !last || (last.timeStamp > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.changes) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        let text = event.dataTransfer.getData("Text");
        if (dropPos == null || !text)
            return;
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            annotations: Transaction.userEvent.of("drop")
        });
    };
    handlers.paste = (view, event) => {
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let text = data && data.getData("text/plain");
        if (text) {
            doPaste(view, text);
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut")
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                annotations: Transaction.userEvent.of("cut")
            });
    };
    handlers.focus = handlers.blur = view => {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    };
    handlers.beforeprint = view => {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(() => {
            view.viewState.printing = false;
            view.requestMeasure();
        }, 2000);
    };
    function forceClearComposition(view) {
        if (view.docView.compositionDeco.size)
            view.update([]);
    }
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.composing < 0) {
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition(view);
            }
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        setTimeout(() => {
            if (view.inputState.composing < 0)
                forceClearComposition(view);
        }, 50);
    };

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
    class HeightOracle {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.direction = Direction.LTR;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefresh(lineHeights, whiteSpace, direction) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight || (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
        }
        refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
                this.lineWrapping != lineWrapping ||
                this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element.
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        @internal
        */
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType;
    (function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    })(QueryType || (QueryType = {}));
    const Epsilon = 1e-4;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
                top += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from);
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let line = new HeightMapText(len, measured.heights[measured.index++]);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                oracle.heightChanged = true;
                return HeightMap.of(nodes);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Break */; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
            if (parent.nodeType == 1) {
                if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
                    window.getComputedStyle(parent).overflow != "visible") {
                    let parentRect = parent.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = parent.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: right - rect.left,
            top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentWidth = 0;
            this.heightOracle = new HeightOracle;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTo = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be signficant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineAt(pos, 0);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
        }
        update(update, scrollTo = null) {
            let prev = this.state;
            this.state = update.state;
            let newDeco = this.state.facet(decorations);
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.startState.facet(decorations), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTo);
            if (!viewport.eq(this.viewport)) {
                this.viewport = viewport;
                update.flags |= 4 /* Viewport */;
            }
            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                update.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            this.computeVisibleRanges();
            if (scrollTo)
                this.scrollTo = scrollTo;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(docView, repeated) {
            let dom = docView.dom, whiteSpace = "", direction = Direction.LTR;
            if (!repeated) {
                // Vertical padding
                let style = window.getComputedStyle(dom);
                whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction.RTL : Direction.LTR);
                this.paddingTop = parseInt(style.paddingTop) || 0;
                this.paddingBottom = parseInt(style.paddingBottom) || 0;
            }
            // Pixel viewport
            let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (!this.inView)
                return 0;
            let lineHeights = docView.measureVisibleLineHeights();
            let refresh = false, bias = 0, result = 0, oracle = this.heightOracle;
            if (!repeated) {
                let contentWidth = docView.dom.clientWidth;
                if (oracle.mustRefresh(lineHeights, whiteSpace, direction) ||
                    oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        docView.minWidth = 0;
                        result |= 16 /* Geometry */;
                    }
                }
                if (this.contentWidth != contentWidth) {
                    this.contentWidth = contentWidth;
                    result |= 16 /* Geometry */;
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
            }
            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
            if (oracle.heightChanged)
                result |= 2 /* Height */;
            if (!this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
                let newVP = this.getViewport(bias, this.scrollTo);
                if (newVP.from != this.viewport.from || newVP.to != this.viewport.to) {
                    this.viewport = newVP;
                    result |= 4 /* Viewport */;
                }
            }
            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top, 0); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom, 0); }
        getViewport(bias, scrollTo) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
            let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).to);
            // If scrollTo is given, make sure the viewport includes that position
            if (scrollTo) {
                if (scrollTo.head < viewport.from) {
                    let { top: newTop } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (visibleBottom - visibleTop) + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
                else if (scrollTo.head > viewport.to) {
                    let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newBottom - (visibleBottom - visibleTop) - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.heightOracle.direction != Direction.LTR)
                return gaps;
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
                if (line.length < 10000 /* Margin */)
                    return;
                let structure = lineStructure(line.from, line.to, this.state);
                if (structure.total < 10000 /* Margin */)
                    return;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    if (line.from != this.viewport.from)
                        viewFrom = line.from;
                    else
                        viewFrom = findPosition(structure, (this.visibleTop - line.top) / line.height);
                    if (line.to != this.viewport.to)
                        viewTo = line.to;
                    else
                        viewTo = findPosition(structure, (this.visibleBottom - line.top) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    viewFrom = findPosition(structure, this.pixelViewport.left / totalWidth);
                    viewTo = findPosition(structure, this.pixelViewport.right / totalWidth);
                }
                let sel = this.state.selection.main;
                // Make sure the gap doesn't cover a selection end
                if (sel.from <= viewFrom && sel.to >= line.from)
                    viewFrom = sel.from;
                if (sel.from <= line.to && sel.to >= viewTo)
                    viewTo = sel.to;
                let gapTo = viewFrom - 10000 /* Margin */, gapFrom = viewTo + 10000 /* Margin */;
                if (gapTo > line.from + 5000 /* HalfMargin */)
                    gaps.push(find(current, gap => gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000 /* HalfMargin */) ||
                        new LineGap(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
                if (gapFrom < line.to - 5000 /* HalfMargin */)
                    gaps.push(find(current, gap => gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ &&
                        gap.from < gapFrom + 5000 /* HalfMargin */) ||
                        new LineGap(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
            });
            return gaps;
        }
        gapSize(line, pos, start, structure) {
            if (this.heightOracle.lineWrapping) {
                let height = line.height * findFraction(structure, pos);
                return start ? height : line.height - height;
            }
            else {
                let ratio = findFraction(structure, pos);
                return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
                return 8 /* LineGaps */;
            }
            return 0;
        }
        computeVisibleRanges() {
            let deco = this.state.facet(decorations);
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            this.visibleRanges = ranges;
        }
        lineAt(pos, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        lineAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height, editorTop), QueryType.ByHeight, this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        blockAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height, editorTop), this.state.doc, editorTop, 0), this.scaler, editorTop);
        }
        forEachLine(from, to, f, editorTop) {
            editorTop += this.paddingTop;
            return this.heightMap.forEachLine(from, to, this.state.doc, editorTop, 0, this.scaler.scale == 1 ? f : b => f(scaleBlock(b, this.scaler, editorTop)));
        }
        get contentHeight() {
            return this.domHeight + this.paddingTop + this.paddingBottom;
        }
        get domHeight() {
            return this.scaler.toDOM(this.heightMap.height, this.paddingTop);
        }
    }
    /**
    Indicates the range of the document that is in the visible
    viewport.
    */
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
        eq(b) { return this.from == b.from && this.to == b.to; }
    }
    function lineStructure(from, to, state) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(state.facet(decorations), from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(doc, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n, top) {
            n -= top;
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale + top;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top) + top;
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n, top) {
            n -= top;
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale + top;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop) + top;
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler, top) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top, top), bBottom = scaler.toDOM(block.bottom, top);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler, top)) : block.type);
    }

    const theme = Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = StyleModule.newName(), baseLightID = StyleModule.newName(), baseDarkID = StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$8 = buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // FIXME it would be great if we could directly use the browser's
                // default focus outline, but it appears we can't, so this tries to
                // approximate that
                outline_fallback: "1px dotted #212121",
                outline: "5px auto -webkit-focus-ring-color"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none"
        },
        ".cm-lineWrapping": {
            whiteSpace: "pre-wrap",
            overflowWrap: "anywhere"
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
            zIndex: -1,
            contain: "size style"
        },
        ".cm-selectionBackground": {
            position: "absolute",
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        ".cm-cursor": {
            position: "absolute",
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
        "&dark .cm-activeLine": { backgroundColor: "#223039" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "3px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            this.ignoreSelection = new DOMSelection;
            this.delayedFlush = -1;
            this.queue = [];
            this.scrollTargets = [];
            this.intersection = null;
            this.intersecting = false;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.start();
            this.onScroll = this.onScroll.bind(this);
            window.addEventListener("scroll", this.onScroll);
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
            }
            this.listenForScroll();
        }
        onScroll(e) {
            if (this.intersecting) {
                this.flush();
                this.onScrollChanged(e);
            }
        }
        onSelectionChange(event) {
            let { view } = this, sel = getSelection(view.root);
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event))
                return;
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // (Selection.isCollapsed isn't reliable on IE)
            if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty &&
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush();
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        clearSelection() {
            this.ignoreSelection.set(getSelection(this.view.root));
        }
        // Throw away any pending changes
        clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.clearSelection();
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        // Apply pending changes, if any
        flush() {
            if (this.delayedFlush >= 0)
                return;
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let selection = getSelection(this.view.root);
            let newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
            if (records.length == 0 && !newSel)
                return;
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            let startState = this.view.state;
            if (from > -1 || newSel)
                this.onChange(from, to, typeOver);
            if (this.view.state == startState) { // The view wasn't updated
                if (this.view.docView.dirty) {
                    this.ignore(() => this.view.docView.sync());
                    this.view.docView.dirty = 0 /* Not */;
                }
                this.view.docView.updateSelection();
            }
            this.clearSelection();
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty();
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else { // "characterData"
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
        }
        destroy() {
            this.stop();
            if (this.intersection)
                this.intersection.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            clearTimeout(this.parentCheck);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }

    function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.main, bounds;
        if (start > -1 && (bounds = view.docView.domBoundsAround(start, end, 0))) {
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view.contentDOM, view.root);
            let reader = new DOMReader(selPoints, view);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            newSel = selectionFromPoints(selPoints, from);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
                browser.android && reader.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
            if (diff)
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: view.state.toText(reader.text.slice(diff.from, diff.toB)) };
        }
        else if (view.hasFocus || !view.state.facet(editable)) {
            let domSel = getSelection(view.root);
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ? view.state.selection.main.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset
                ? view.state.selection.main.anchor
                : selectionCollapsed(domSel) ? head : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        if (change) {
            let startState = view.state;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events.
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view, "Enter", 10)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view, "Delete", 46))))
                return;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))
                return;
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
                (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) +
                    after));
            }
            else {
                let changes = startState.changes(change);
                tr = {
                    changes,
                    selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                        ? startState.selection.replaceRange(newSel.main) : undefined
                };
            }
            view.dispatch(tr, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") });
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, annotations;
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "keyboardselection")
                    scrollIntoView = true;
                else
                    annotations = Transaction.userEvent.of(view.inputState.lastSelectionOrigin);
            }
            view.dispatch({ selection: newSel, scrollIntoView, annotations });
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    class DOMReader {
        constructor(points, view) {
            this.points = points;
            this.view = view;
            this.text = "";
            this.lineBreak = view.state.lineBreak;
        }
        readRange(start, end) {
            if (!start)
                return;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if ((view ? view.breakAfter : isBlockElement(cur)) ||
                    ((nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)))
                    this.text += this.lineBreak;
                cur = next;
            }
            this.findPointBefore(parent, end);
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            let text;
            if (fromView != null)
                text = fromView.sliceString(0, undefined, this.lineBreak);
            else if (node.nodeType == 3)
                text = node.nodeValue;
            else if (node.nodeName == "BR")
                text = node.nextSibling ? this.lineBreak : "";
            else if (node.nodeType == 1)
                this.readRange(node.firstChild, null);
            if (text != null) {
                this.findPointIn(node, text.length);
                this.text += text;
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. This drops one of those.
                if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text))
                    this.text = this.text.slice(0, -1);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointIn(node, maxLen) {
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }
    function selectionPoints(dom, root) {
        let result = [];
        if (root.activeElement != dom)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = getSelection(root);
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }
    function dispatchKey(view, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        view.contentDOM.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        view.contentDOM.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        Construct a new view. You'll usually want to put `view.dom` into
        your document after creating a view, so that the user can see
        it.
        */
        constructor(
        /**
        Initialization options.
        */
        config = {}) {
            this.plugins = [];
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            /**
            @internal
            */
            this.updateState = 2 /* Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: absolute; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || document);
            this.viewState = new ViewState(config.state || EditorState.create());
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
            this.observer = new DOMObserver(this, (from, to, typeOver) => {
                applyDOMChange(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                this.measure();
            });
            this.inputState = new InputState(this);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* Idle */;
            ensureGlobalHandler();
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide).
        */
        get composing() { return this.inputState.composing > 0; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = new ViewUpdate(this, state, transactions);
            try {
                this.updateState = 2 /* Updating */;
                let scrollTo = transactions.some(tr => tr.scrollIntoView) ? state.selection.main : null;
                this.viewState.update(update, scrollTo);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty)
                    this.updatePlugins(update);
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                this.updateAttrs();
                this.showAnnouncements(transactions);
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (redrawn || scrollTo || this.viewState.mustEnforceCursorAssoc)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            this.updateState = 2 /* Updating */;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.inputState.ensureHandlers(this);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i] = this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure() {
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* Measuring */;
                    let changed = this.viewState.measure(this.docView, i > 0);
                    let measuring = this.measureRequests;
                    if (!changed && !measuring.length && this.viewState.scrollTo == null)
                        break;
                    this.measureRequests = [];
                    if (i > 5) {
                        console.warn("Viewport failed to stabilize");
                        break;
                    }
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = new ViewUpdate(this, this.state);
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* Updating */;
                    if (!update.empty)
                        this.updatePlugins(update);
                    this.updateAttrs();
                    if (changed)
                        this.docView.update(update);
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                measuring[i].write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTo) {
                        this.docView.scrollPosIntoView(this.viewState.scrollTo.head, this.viewState.scrollTo.assoc);
                        this.viewState.scrollTo = null;
                    }
                    if (!(changed & 4 /* Viewport */) && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.measureScheduled = -1;
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
                // FIXME drop cm-wrap in next major release
                class: "cm-editor cm-wrap" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            updateAttrs(this.dom, this.editorAttrs, editorAttrs);
            this.editorAttrs = editorAttrs;
            let contentAttrs = combineAttrs(this.state.facet(contentAttributes), {
                spellcheck: "false",
                contenteditable: String(this.state.facet(editable)),
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            });
            updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
            this.contentAttrs = contentAttrs;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$8).reverse());
        }
        readMeasured() {
            if (this.updateState == 2 /* Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
                this.measure();
        }
        /**
        Make sure plugins get a chance to measure the DOM layout before
        the next frame. Calling this is preferable reading DOM layout
        directly from, for example, an event handler, because it'll make
        sure measuring and drawing done by other components is
        synchronized, avoiding unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Collect all values provided by the active plugins for a given
        field.
        */
        pluginField(field) {
            let result = [];
            for (let plugin of this.plugins)
                plugin.update(this).takeField(field, result);
            return result;
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            for (let inst of this.plugins)
                if (inst.spec == plugin)
                    return inst.update(this).value;
            return null;
        }
        /**
        Find the line or block widget at the given vertical position.
        `editorTop`, if given, provides the vertical position of the top
        of the editor. It defaults to the editor's screen position
        (which will force a DOM layout). You can explicitly pass 0 to
        use editor-relative offsets.
        */
        blockAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.blockAtHeight(height, ensureTop(editorTop, this.contentDOM));
        }
        /**
        Find information for the visual line (see
        [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
        vertical position. The resulting block info might hold another
        array of block info structs in its `type` field if this line
        consists of more than one block.
        
        Heights are interpreted relative to the given `editorTop`
        position. When not given, the top position of the editor's
        [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM) is taken.
        */
        visualLineAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.lineAtHeight(height, ensureTop(editorTop, this.contentDOM));
        }
        /**
        Iterate over the height information of the visual lines in the
        viewport.
        */
        viewportLines(f, editorTop) {
            let { from, to } = this.viewport;
            this.viewState.forEachLine(from, to, f, ensureTop(editorTop, this.contentDOM));
        }
        /**
        Find the extent and height of the visual line (the content shown
        in the editor as a line, which may be smaller than a document
        line when broken up by block widgets, or bigger than a document
        line when line breaks are covered by replaced decorations) at
        the given position.
        
        Vertical positions are computed relative to the `editorTop`
        argument, which defaults to 0 for this method. You can pass
        `view.contentDOM.getBoundingClientRect().top` here to get screen
        coordinates.
        */
        visualLineAt(pos, editorTop = 0) {
            return this.viewState.lineAt(pos, editorTop);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. Motion in
        bidirectional text is in visual order, in the editor's [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
        position was the last one on the line, the returned position
        will be across the line break. If there is no further line, the
        original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return moveByChar(this, start, forward, by);
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return moveByChar(this, start, forward, initial => byGroup(this, start.head, initial));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return moveVertically(this, start, forward, distance);
        }
        /**
        Scroll the given document position into view.
        */
        scrollPosIntoView(pos) {
            this.viewState.scrollTo = EditorSelection.cursor(pos);
            this.requestMeasure();
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        /**
        Get the document position at the given screen coordinates.
        Returns null if no valid position could be found.
        */
        posAtCoords(coords) {
            this.readMeasured();
            return posAtCoords(this, coords);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor.
        */
        get textDirection() { return this.viewState.heightOracle.direction; }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirection;
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.text, this.textDirection);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            return document.hasFocus() && this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
        }
        /**
        Facet that can be used to add DOM event handlers. The value
        should be an object mapping event names to handler functions. The
        first such function to return true will be assumed to have handled
        that event, and no other handlers or built-in behavior will be
        activated for it.
        These are registered on the [content
        element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
        handlers, which will be called any time the editor's [scroll
        element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
        is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.fallback(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
    */
    EditorView.inputHandler = inputHandler;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content is editable. When
    its highest-precedence value is `false`, editing is disabled,
    and the content element will no longer have its
    `contenteditable` attribute set to `true`. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds
    a new range to the existing selection or replaces it entirely.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. See also [view
    plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
    mechanism for providing decorations.
    */
    EditorView.decorations = decorations;
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    function ensureTop(given, dom) {
        return given == null ? dom.getBoundingClientRect().top : given;
    }
    let resizeDebounce = -1;
    function ensureGlobalHandler() {
        window.addEventListener("resize", () => {
            if (resizeDebounce == -1)
                resizeDebounce = setTimeout(handleResize, 50);
        });
    }
    function handleResize() {
        resizeDebounce = -1;
        let found = document.querySelectorAll(".cm-content");
        for (let i = 0; i < found.length; i++) {
            let docView = ContentView.get(found[i]);
            if (docView)
                docView.editorView.requestMeasure();
        }
    }
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }

    const currentPlatform = typeof navigator == "undefined" ? "key"
        : /Mac/.test(navigator.platform) ? "mac"
            : /Win/.test(navigator.platform) ? "win"
                : /Linux|X11/.test(navigator.platform) ? "linux"
                    : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    });
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = Facet.define({ enables: handleKeyEvents });
    const Keymaps = new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    /**
    Run the key handlers registered for a given scope. The event
    object should be `"keydown"` event. Returns true if any of the
    handlers handled it.
    */
    function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers(map, event, view, scope) {
        let name = keyName(event), isChar = name.length == 1 && name != " ";
        let prefix = "", fallthrough = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
                storedPrefix = null;
        }
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        let scopeObj = map[scope], baseName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            drawSelectionPlugin,
            hideNativeSelection
        ];
    }
    class Piece {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = "cm-selectionLayer";
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = "cm-cursorLayer";
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let piece = measureCursor(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                let oldCursors = this.cursorLayer.children;
                if (oldCursors.length !== cursors.length) {
                    this.cursorLayer.textContent = "";
                    for (const c of cursors)
                        this.cursorLayer.appendChild(c.draw());
                }
                else {
                    cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
                }
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
    const hideNativeSelection = Prec.override(EditorView.theme(themeSpec));
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function wrappedLine(view, pos, inside) {
        let range = EditorSelection.cursor(pos);
        return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
            to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from) };
    }
    function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let visualStart = view.visualLineAt(from);
        let visualEnd = view.visualLineAt(to);
        if (view.lineWrapping) {
            visualStart = wrappedLine(view, from, visualStart);
            visualEnd = wrappedLine(view, to, visualEnd);
        }
        if (visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = drawForLine(range.from, null, visualStart);
            let bottom = drawForLine(null, range.to, visualEnd);
            let between = [];
            if (visualStart.to < visualEnd.from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && bottom.top - top.bottom < 4)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                let fromCoords = view.coordsAtPos(from, from == line.to ? -1 : 1);
                let toCoords = view.coordsAtPos(to, to == line.from ? 1 : -1);
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
    }
    function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
    }

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, pos + m.index + m[0].length, m);
        }
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            let { regexp, decoration, boundary } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
            this.boundary = boundary;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges)
                iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to > update.view.viewport.from && from < update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportChanged || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to > from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                            let pos = m.index + fromLine.from;
                            ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
                        }
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: () => false, add: ranges });
                }
            }
            return deco;
        }
    }

    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = (styles.tabSize || styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const specialCharConfig = Facet.define({
        combine(configs) {
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /**
    Returns an extension that installs highlighting of special
    characters.
    */
    function highlightSpecialChars(
    /**
    Configuration options.
    */
    config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.decorations = Decoration.none;
                this.decorationCache = Object.create(null);
                this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
                this.decorations = this.decorator.createDeco(view);
            }
            makeDecorator(conf) {
                return new MatchDecorator({
                    regexp: conf.specialChars,
                    decoration: (m, view, pos) => {
                        let { doc } = view.state;
                        let code = codePointAt(m[0], 0);
                        if (code == 9) {
                            let line = doc.lineAt(pos);
                            let size = view.state.tabSize, col = countColumn(doc.sliceString(line.from, pos), 0, size);
                            return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                        }
                        return this.decorationCache[code] ||
                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                    },
                    boundary: conf.replaceTabs ? undefined : /[^]/
                });
            }
            update(update) {
                let conf = update.state.facet(specialCharConfig);
                if (update.startState.facet(specialCharConfig) != conf) {
                    this.decorator = this.makeDecorator(conf);
                    this.decorations = this.decorator.createDeco(update.view);
                }
                else {
                    this.decorations = this.decorator.updateDeco(update, this.decorations);
                }
            }
        }, {
            decorations: v => v.decorations
        }));
    }
    const DefaultPlaceholder = "\u2022";
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeholder$1(code) {
        if (code >= 32)
            return DefaultPlaceholder;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM(view) {
            let ph = placeholder$1(this.code);
            let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = Decoration.line({ attributes: { class: "cm-activeLine" } });
    const activeLineHighlighter = ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                if (!r.empty)
                    continue;
                let line = view.visualLineAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    /**
    Node prop stored in a grammar's top syntax node to provide the
    facet that stores language data for that language.
    */
    const languageDataProp = new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. You'll
    want to subclass this class for custom parsers, or use the
    [`LezerLanguage`](https://codemirror.net/6/docs/ref/#language.LezerLanguage) or
    [`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for
    [Lezer](https://lezer.codemirror.net/) or stream parsers.
    */
    class Language {
        /**
        Construct a language object. You usually don't need to invoke
        this directly. But when you do, make sure you use
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
        the first argument.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data
        facet used for this language.
        */
        data, parser, 
        /**
        The node type of the top node of trees produced by this parser.
        */
        topNode, extraExtensions = []) {
            this.data = data;
            this.topNode = topNode;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos) => state.facet(languageDataFacetAt(state, pos)))
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos) {
            return languageDataFacetAt(state, pos) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            syntaxTree(state).iterate({
                enter: (type, from, to) => {
                    if (type.isTop && type.prop(languageDataProp) == this.data) {
                        result.push({ from, to });
                        return false;
                    }
                    return undefined;
                }
            });
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
        /**
        Use this language to parse the given string into a tree.
        */
        parseString(code) {
            let doc = Text.of(code.split("\n"));
            let parse = this.parser.startParse(new DocInput(doc), 0, new EditorParseContext(this.parser, EditorState.create({ doc }), [], Tree.empty, { from: 0, to: code.length }, [], null));
            let tree;
            while (!(tree = parse.advance())) { }
            return tree;
        }
    }
    /**
    @internal
    */
    Language.setState = StateEffect.define();
    function languageDataFacetAt(state, pos) {
        let topLang = state.facet(language);
        if (!topLang)
            return null;
        if (!topLang.allowsNesting)
            return topLang.data;
        let tree = syntaxTree(state);
        let target = tree.resolve(pos, -1);
        while (target) {
            let facet = target.type.prop(languageDataProp);
            if (facet)
                return facet;
            target = target.parent;
        }
        return topLang.data;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with
    [Lezer](https://lezer.codemirror.net/docs/ref#lezer.Parser)
    parsers.
    */
    class LezerLanguage extends Language {
        constructor(data, parser) {
            super(data, parser, parser.topNode);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LezerLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }));
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser.
        */
        configure(options) {
            return new LezerLanguage(this.data, this.parser.configure(options));
        }
        get allowsNesting() { return this.parser.hasNested; }
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),
    or the empty tree if there is no language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    // Lezer-style Input object for a Text document.
    class DocInput {
        constructor(doc, length = doc.length) {
            this.doc = doc;
            this.length = length;
            this.cursorPos = 0;
            this.string = "";
            this.prevString = "";
            this.cursor = doc.iter();
        }
        syncTo(pos) {
            if (pos < this.cursorPos) { // Reset the cursor if we have to go back
                this.cursor = this.doc.iter();
                this.cursorPos = 0;
            }
            this.prevString = pos == this.cursorPos ? this.string : "";
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        get(pos) {
            if (pos >= this.length)
                return -1;
            let stringStart = this.cursorPos - this.string.length;
            if (pos < stringStart || pos >= this.cursorPos) {
                if (pos < stringStart && pos >= stringStart - this.prevString.length)
                    return this.prevString.charCodeAt(pos - (stringStart - this.prevString.length));
                stringStart = this.syncTo(pos);
            }
            return this.string.charCodeAt(pos - stringStart);
        }
        lineAfter(pos) {
            if (pos >= this.length || pos < 0)
                return "";
            let stringStart = this.cursorPos - this.string.length;
            if (pos < stringStart || pos >= this.cursorPos)
                stringStart = this.syncTo(pos);
            return this.cursor.lineBreak ? "" : this.string.slice(pos - stringStart, Math.min(this.length - stringStart, this.string.length));
        }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
        clip(at) {
            return new DocInput(this.doc, at);
        }
    }
    /**
    A parse context provided to parsers working on the editor content.
    */
    class EditorParseContext {
        /**
        @internal
        */
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.EditorParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        work(time, upto) {
            if (this.tree != Tree.empty && (upto == null ? this.tree.length == this.state.doc.length : this.tree.length >= upto)) {
                this.takeTree();
                return true;
            }
            if (!this.parse)
                this.parse = this.parser.startParse(new DocInput(this.state.doc), 0, this);
            let endTime = Date.now() + time;
            for (;;) {
                let done = this.parse.advance();
                if (done) {
                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done));
                    this.parse = null;
                    this.tree = done;
                    return true;
                }
                else if (upto != null && this.parse.pos >= upto) {
                    this.takeTree();
                    return true;
                }
                if (Date.now() > endTime)
                    return false;
            }
        }
        /**
        @internal
        */
        takeTree() {
            if (this.parse && this.parse.pos > this.tree.length) {
                this.tree = this.parse.forceFinish();
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new EditorParseContext(this.parser, newState, fragments, tree, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            return this.skipped.length < startLen;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return {
                startParse(input, startPos, context) {
                    return {
                        pos: startPos,
                        advance() {
                            let ecx = context;
                            ecx.tempSkipped.push({ from: startPos, to: input.length });
                            if (until)
                                ecx.scheduleOn = ecx.scheduleOn ? Promise.all([ecx.scheduleOn, until]) : until;
                            this.pos = input.length;
                            return new Tree(NodeType.none, [], [], input.length - startPos);
                        },
                        forceFinish() { return this.advance(); }
                    };
                }
            };
        }
        /**
        @internal
        */
        movedPast(pos) {
            return this.tree.length < pos && this.parse && this.parse.pos >= pos;
        }
    }
    /**
    FIXME backwards compatible shim, remove on next major @internal
    */
    EditorParseContext.skippingParser = EditorParseContext.getSkippingParser();
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.tree.length == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.tree.length), newCx.viewport.to);
            if (!newCx.work(25 /* Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let parseState = new EditorParseContext(state.facet(language).parser, state, [], Tree.empty, { from: 0, to: state.doc.length }, [], null);
            if (!parseState.work(25 /* Apply */))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = typeof window != "undefined" && window.requestIdleCallback ||
        ((callback, { timeout }) => setTimeout(callback, timeout));
    let cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
    const parseWorker = ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = -1;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (update.viewportChanged) {
                if (cx.updateViewport(update.view.viewport))
                    cx.reset();
                if (this.view.viewport.to > cx.tree.length)
                    this.scheduleWork();
            }
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork(force = false) {
            if (this.working > -1)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (!force && field.tree.length >= state.doc.length)
                return;
            this.working = requestIdle(this.work, { timeout: 500 /* Pause */ });
        }
        work(deadline) {
            this.working = -1;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* ChunkTime */;
                this.chunkBudget = 3000 /* ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree.length >= vpTo + 1000000 /* MaxParseAhead */)
                return;
            let time = Math.min(this.chunkBudget, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
            let done = field.context.work(time, vpTo + 1000000 /* MaxParseAhead */);
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (!done && this.chunkBudget > 0)
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                cx.scheduleOn.then(() => this.scheduleWork(true));
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working >= 0)
                cancelIdle(this.working);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state.
    */
    const language = Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: [Language.state, parseWorker]
    });
    /**
    This class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a support object.
        */
        constructor(
        /**
        The language object.
        */
        language, 
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth at the start of a given line, or
    `null` to indicate no appropriate indentation could be determined.
    */
    const indentService = Facet.define();
    /**
    Facet for overriding the unit by which indentation happens.
    Should be a string consisting either entirely of spaces or
    entirely of tabs. When not set, this defaults to 2 spaces.
    */
    const indentUnit = Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize;
        if (state.facet(indentUnit).charCodeAt(0) == 9)
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
        for (let i = 0; i < cols; i++)
            result += " ";
        return result;
    }
    /**
    Get the indentation at the given position. Will first consult any
    [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
    and if none of those return an indentation, this will check the
    syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
    and use that if found. Returns a number when an indentation could
    be determined, and null otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result != null)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos) {
            var _a, _b;
            let sim = (_a = this.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
            if (pos == sim && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak))
                return "";
            return this.state.sliceDoc(pos, Math.min(pos + 100, sim != null && sim > pos ? sim : 1e9, this.state.doc.lineAt(pos).to));
        }
        /**
        Find the column for the given position.
        */
        column(pos) {
            var _a;
            let line = this.state.doc.lineAt(pos), text = line.text.slice(0, pos - line.from);
            let result = this.countColumn(text, pos - line.from);
            let override = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation) ? this.options.overrideIndentation(line.from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S/));
            return result;
        }
        /**
        find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos) {
            return countColumn(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);
        }
        /**
        Find the indentation column of the given document line.
        */
        lineIndent(line) {
            var _a;
            let override = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation;
            if (override) {
                let overriden = override(line.from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(line.text, line.text.search(/\S/));
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number or null, where null indicates that no
    definitive indentation can be determined.
    */
    const indentNodeProp = new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        let tree = ast.resolve(pos);
        // Enter previous nodes that end in empty error terms, which means
        // they were broken off by error recovery, so that indentation
        // works even if the constructs haven't been finished.
        for (let scan = tree, scanPos = pos;;) {
            let last = scan.childBefore(scanPos);
            if (!last)
                break;
            if (last.type.isError && last.from == last.to) {
                tree = scan;
                scanPos = last.from;
            }
            else {
                scan = last;
                scanPos = scan.to + 1;
            }
        }
        return indentFrom(tree, pos, cx);
    }
    function ignoreClosed(cx) {
        var _a, _b;
        return cx.pos == ((_a = cx.options) === null || _a === void 0 ? void 0 : _a.simulateBreak) && ((_b = cx.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak);
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent : null;
    }
    function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
            let strategy = indentStrategy(node);
            if (strategy)
                return strategy(new TreeIndentContext(base, pos, node));
        }
        return null;
    }
    function topIndent() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions.
    */
    class TreeIndentContext extends IndentContext {
        /**
        @internal
        */
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.node = node;
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            let line = this.state.doc.lineAt(this.node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = this.node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, this.node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            let parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        var _a;
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = (_a = context.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    /**
    An indentation strategy for delimited (usually bracketed) nodes.
    Will, by default, indent one unit more than the parent's base
    indent unless the line starts with a closing token. When `align`
    is true and there are non-skipped nodes on the node's opening
    line, the content of the node will be aligned with the end of the
    opening node, like this:

        foo(bar,
            baz)
    */
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /**
    An indentation strategy that aligns a node's content to its base
    indentation.
    */
    const flatIndent = (context) => context.baseIndent;
    /**
    Creates an indentation strategy that, by default, indents
    continued lines one unit more than the node's base indentation.
    You can provide `except` to prevent indentation of lines that
    match a pattern (for example `/^else\b/` in `if`/`else`
    constructs), and you can change the amount of units used with the
    `units` option.
    */
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || tr.annotation(Transaction.userEvent) != "input")
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside$1(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length == 0)
            return null;
        let inner = tree.resolve(end);
        let found = null;
        for (let cur = inner; cur; cur = cur.parent) {
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }

    let nextTagID = 0;
    /// Highlighting tags are markers that denote a highlighting category.
    /// They are [associated](#highlight.styleTags) with parts of a syntax
    /// tree by a language mode, and then mapped to an actual CSS style by
    /// a [highlight style](#highlight.HighlightStyle).
    ///
    /// Because syntax tree node types and highlight styles have to be
    /// able to talk the same language, CodeMirror uses a mostly _closed_
    /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
    /// traditional open string-based systems, which make it hard for
    /// highlighting themes to cover all the tokens produced by the
    /// various languages).
    ///
    /// It _is_ possible to [define](#highlight.Tag^define) your own
    /// highlighting tags for system-internal use (where you control both
    /// the language package and the highlighter), but such tags will not
    /// be picked up by regular highlighters (though you can derive them
    /// from standard tags to allow highlighters to fall back to those).
    class Tag {
        /// @internal
        constructor(
        /// The set of tags that match this tag, starting with this one
        /// itself, sorted in order of decreasing specificity. @internal
        set, 
        /// The base unmodified tag that this one is based on, if it's
        /// modified @internal
        base, 
        /// The modifiers applied to this.base @internal
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /// @internal
            this.id = nextTagID++;
        }
        /// Define a new tag. If `parent` is given, the tag is treated as a
        /// sub-tag of that parent, and [highlight
        /// styles](#highlight.HighlightStyle) that don't mention this tag
        /// will try to fall back to the parent tag (or grandparent tag,
        /// etc).
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /// Define a tag _modifier_, which is a function that, given a tag,
        /// will return a tag that is a subtag of the original. Applying the
        /// same modifier to a twice tag will return the same value (`m1(t1)
        /// == m1(t1)`) and applying multiple modifiers will, regardless or
        /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        ///
        /// When multiple modifiers are applied to a given base tag, each
        /// smaller set of modifiers is registered as a parent, so that for
        /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        /// `m1(m3(t1)`, and so on.
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    /// This function is used to add a set of tags to a language syntax
    /// via
    /// [`Parser.configure`](https://lezer.codemirror.net/docs/ref#lezer.Parser.configure).
    ///
    /// The argument object maps node selectors to [highlighting
    /// tags](#highlight.Tag) or arrays of tags.
    ///
    /// Node selectors may hold one or more (space-separated) node paths.
    /// Such a path can be a [node
    /// name](https://lezer.codemirror.net/docs/ref#tree.NodeType.name),
    /// or multiple node names (or `*` wildcards) separated by slash
    /// characters, as in `"Block/Declaration/VariableName"`. Such a path
    /// matches the final node but only if its direct parent nodes are the
    /// other nodes mentioned. A `*` in such a path matches any parent,
    /// but only a single level—wildcards that match multiple parents
    /// aren't supported, both for efficiency reasons and because Lezer
    /// trees make it rather hard to reason about what they would match.)
    ///
    /// A path can be ended with `/...` to indicate that the tag assigned
    /// to the node should also apply to all child nodes, even if they
    /// match their own style (by default, only the innermost style is
    /// used).
    ///
    /// When a path ends in `!`, as in `Attribute!`, no further matching
    /// happens for the node's child nodes, and the entire node gets the
    /// given style.
    ///
    /// In this notation, node names that contain `/`, `!`, `*`, or `...`
    /// must be quoted as JSON strings.
    ///
    /// For example:
    ///
    /// ```javascript
    /// parser.withProps(
    ///   styleTags({
    ///     // Style Number and BigNumber nodes
    ///     "Number BigNumber": tags.number,
    ///     // Style Escape nodes whose parent is String
    ///     "String/Escape": tags.escape,
    ///     // Style anything inside Attributes nodes
    ///     "Attributes!": tags.meta,
    ///     // Add a style to all content inside Italic nodes
    ///     "Italic/...": tags.emphasis,
    ///     // Style InvalidString nodes as both `string` and `invalid`
    ///     "InvalidString": [tags.string, tags.invalid],
    ///     // Style the node named "/" as punctuation
    ///     '"/"': tags.punctuation
    ///   })
    /// )
    /// ```
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    const highlightStyle = Facet.define({
        combine(stylings) { return stylings.length ? HighlightStyle.combinedMatch(stylings) : null; }
    });
    const fallbackHighlightStyle = Facet.define({
        combine(values) { return values.length ? values[0].match : null; }
    });
    function noHighlight() { return null; }
    function getHighlightStyle(state) {
        return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle) || noHighlight;
    }
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    /// A highlight style associates CSS styles with higlighting
    /// [tags](#highlight.Tag).
    class HighlightStyle {
        constructor(spec, options) {
            this.map = Object.create(null);
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;
            for (let style of spec) {
                let cls = (style.class || def(Object.assign({}, style, { tag: null }))) +
                    (this.all ? " " + this.all : "");
                let tags = style.tag;
                if (!Array.isArray(tags))
                    this.map[tags.id] = cls;
                else
                    for (let tag of tags)
                        this.map[tag.id] = cls;
            }
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.scope = options.scope || null;
            this.match = this.match.bind(this);
            let ext = [treeHighlighter];
            if (this.module)
                ext.push(EditorView.styleModule.of(this.module));
            this.extension = ext.concat(highlightStyle.of(this));
            this.fallback = ext.concat(fallbackHighlightStyle.of(this));
        }
        /// Returns the CSS class associated with the given tag, if any.
        /// This method is bound to the instance by the constructor.
        match(tag, scope) {
            if (this.scope && scope != this.scope)
                return null;
            for (let t of tag.set) {
                let match = this.map[t.id];
                if (match !== undefined) {
                    if (t != tag)
                        this.map[tag.id] = match;
                    return match;
                }
            }
            return this.map[tag.id] = this.all;
        }
        /// Combines an array of highlight styles into a single match
        /// function that returns all of the classes assigned by the styles
        /// for a given tag.
        static combinedMatch(styles) {
            if (styles.length == 1)
                return styles[0].match;
            let cache = styles.some(s => s.scope) ? undefined : Object.create(null);
            return (tag, scope) => {
                let cached = cache && cache[tag.id];
                if (cached !== undefined)
                    return cached;
                let result = null;
                for (let style of styles) {
                    let value = style.match(tag, scope);
                    if (value)
                        result = result ? result + " " + value : value;
                }
                if (cache)
                    cache[tag.id] = result;
                return result;
            };
        }
        /// Create a highlighter style that associates the given styles to
        /// the given tags. The spec must be objects that hold a style tag
        /// or array of tags in their `tag` property, and either a single
        /// `class` property providing a static CSS class (for highlighters
        /// like [`classHighlightStyle`](#highlight.classHighlightStyle)
        /// that rely on external styling), or a
        /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        /// set of CSS properties (which define the styling for those tags).
        ///
        /// The CSS rules created for a highlighter will be emitted in the
        /// order of the spec's properties. That means that for elements that
        /// have multiple tags associated with them, styles defined further
        /// down in the list will have a higher CSS precedence than styles
        /// defined earlier.
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
        /// Returns the CSS classes (if any) that the highlight styles
        /// active in the given state would assign to the given a style
        /// [tag](#highlight.Tag) and (optional) language
        /// [scope](#highlight.HighlightStyle^define^options.scope).
        static get(state, tag, scope) {
            return getHighlightStyle(state)(tag, scope || NodeType.none);
        }
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlightStyle(view.state));
        }
        update(update) {
            let tree = syntaxTree(update.state), style = getHighlightStyle(update.state);
            let styleChange = style != update.startState.facet(highlightStyle);
            if (tree.length < update.view.viewport.to && !styleChange) {
                this.decorations = this.decorations.map(update.changes);
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, style);
            }
        }
        buildDeco(view, match) {
            if (match == noHighlight || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTreeRange(this.tree, from, to, match, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                });
            }
            return builder.finish();
        }
    }
    // This extension installs a highlighter that highlights based on the
    // syntax tree and highlight style.
    const treeHighlighter = Prec.fallback(ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    const nodeStack = [""];
    function highlightTreeRange(tree, from, to, style, span) {
        let spanStart = from, spanClass = "";
        let cursor = tree.topNode.cursor;
        function node(inheritedClass, depth, scope) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            nodeStack[depth] = type.name;
            if (type.isTop)
                scope = type;
            let cls = inheritedClass;
            let rule = type.prop(ruleNodeProp), opaque = false;
            while (rule) {
                if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
                    for (let tag of rule.tags) {
                        let st = style(tag, scope);
                        if (st) {
                            if (cls)
                                cls += " ";
                            cls += st;
                            if (rule.mode == 1 /* Inherit */)
                                inheritedClass += (inheritedClass ? " " : "") + st;
                            else if (rule.mode == 0 /* Opaque */)
                                opaque = true;
                        }
                    }
                    break;
                }
                rule = rule.next;
            }
            if (cls != spanClass) {
                if (start > spanStart && spanClass)
                    span(spanStart, cursor.from, spanClass);
                spanStart = start;
                spanClass = cls;
            }
            if (!opaque && cursor.firstChild()) {
                do {
                    let end = cursor.to;
                    node(inheritedClass, depth + 1, scope);
                    if (spanClass != cls) {
                        let pos = Math.min(to, end);
                        if (pos > spanStart && spanClass)
                            span(spanStart, pos, spanClass);
                        spanStart = pos;
                        spanClass = cls;
                    }
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
        node("", 0, tree.type);
    }
    function matchContext(context, stack, depth) {
        if (context.length > depth - 1)
            return false;
        for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
            let check = context[i];
            if (check && check != stack[d])
                return false;
        }
        return true;
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /// The default set of highlighting [tags](#highlight.Tag^define) used
    /// by regular language packages and themes.
    ///
    /// This collection is heavily biased towards programming languages,
    /// and necessarily incomplete. A full ontology of syntactic
    /// constructs would fill a stack of books, and be impractical to
    /// write themes for. So try to make do with this set. If all else
    /// fails, [open an
    /// issue](https://github.com/codemirror/codemirror.next) to propose a
    /// new tag, or [define](#highlight.Tag^define) a local custom tag for
    /// your use case.
    ///
    /// Note that it is not obligatory to always attach the most specific
    /// tag possible to an element—if your grammar can't easily
    /// distinguish a certain type of element (such as a local variable),
    /// it is okay to style it as its more general variant (a variable).
    /// 
    /// For tags that extend some parent tag, the documentation links to
    /// the parent.
    const tags = {
        /// A comment.
        comment,
        /// A line [comment](#highlight.tags.comment).
        lineComment: t(comment),
        /// A block [comment](#highlight.tags.comment).
        blockComment: t(comment),
        /// A documentation [comment](#highlight.tags.comment).
        docComment: t(comment),
        /// Any kind of identifier.
        name,
        /// The [name](#highlight.tags.name) of a variable.
        variableName: t(name),
        /// A type [name](#highlight.tags.name).
        typeName: typeName,
        /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        tagName: t(typeName),
        /// A property, field, or attribute [name](#highlight.tags.name).
        propertyName: t(name),
        /// The [name](#highlight.tags.name) of a class.
        className: t(name),
        /// A label [name](#highlight.tags.name).
        labelName: t(name),
        /// A namespace [name](#highlight.tags.name).
        namespace: t(name),
        /// The [name](#highlight.tags.name) of a macro.
        macroName: t(name),
        /// A literal value.
        literal,
        /// A string [literal](#highlight.tags.literal).
        string,
        /// A documentation [string](#highlight.tags.string).
        docString: t(string),
        /// A character literal (subtag of [string](#highlight.tags.string)).
        character: t(string),
        /// A number [literal](#highlight.tags.literal).
        number,
        /// An integer [number](#highlight.tags.number) literal.
        integer: t(number),
        /// A floating-point [number](#highlight.tags.number) literal.
        float: t(number),
        /// A boolean [literal](#highlight.tags.literal).
        bool: t(literal),
        /// Regular expression [literal](#highlight.tags.literal).
        regexp: t(literal),
        /// An escape [literal](#highlight.tags.literal), for example a
        /// backslash escape in a string.
        escape: t(literal),
        /// A color [literal](#highlight.tags.literal).
        color: t(literal),
        /// A URL [literal](#highlight.tags.literal).
        url: t(literal),
        /// A language keyword.
        keyword,
        /// The [keyword](#highlight.tags.keyword) for the self or this
        /// object.
        self: t(keyword),
        /// The [keyword](#highlight.tags.keyword) for null.
        null: t(keyword),
        /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
        atom: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that represents a unit.
        unit: t(keyword),
        /// A modifier [keyword](#highlight.tags.keyword).
        modifier: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that acts as an operator.
        operatorKeyword: t(keyword),
        /// A control-flow related [keyword](#highlight.tags.keyword).
        controlKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that defines something.
        definitionKeyword: t(keyword),
        /// An operator.
        operator,
        /// An [operator](#highlight.tags.operator) that defines something.
        derefOperator: t(operator),
        /// Arithmetic-related [operator](#highlight.tags.operator).
        arithmeticOperator: t(operator),
        /// Logical [operator](#highlight.tags.operator).
        logicOperator: t(operator),
        /// Bit [operator](#highlight.tags.operator).
        bitwiseOperator: t(operator),
        /// Comparison [operator](#highlight.tags.operator).
        compareOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that updates its operand.
        updateOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that defines something.
        definitionOperator: t(operator),
        /// Type-related [operator](#highlight.tags.operator).
        typeOperator: t(operator),
        /// Control-flow [operator](#highlight.tags.operator).
        controlOperator: t(operator),
        /// Program or markup punctuation.
        punctuation,
        /// [Punctuation](#highlight.tags.punctuation) that separates
        /// things.
        separator: t(punctuation),
        /// Bracket-style [punctuation](#highlight.tags.punctuation).
        bracket,
        /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        /// tokens).
        angleBracket: t(bracket),
        /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        /// tokens).
        squareBracket: t(bracket),
        /// Parentheses (usually `(` and `)` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        paren: t(bracket),
        /// Braces (usually `{` and `}` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        brace: t(bracket),
        /// Content, for example plain text in XML or markup documents.
        content,
        /// [Content](#highlight.tags.content) that represents a heading.
        heading,
        /// A level 1 [heading](#highlight.tags.heading).
        heading1: t(heading),
        /// A level 2 [heading](#highlight.tags.heading).
        heading2: t(heading),
        /// A level 3 [heading](#highlight.tags.heading).
        heading3: t(heading),
        /// A level 4 [heading](#highlight.tags.heading).
        heading4: t(heading),
        /// A level 5 [heading](#highlight.tags.heading).
        heading5: t(heading),
        /// A level 6 [heading](#highlight.tags.heading).
        heading6: t(heading),
        /// A prose separator (such as a horizontal rule).
        contentSeparator: t(content),
        /// [Content](#highlight.tags.content) that represents a list.
        list: t(content),
        /// [Content](#highlight.tags.content) that represents a quote.
        quote: t(content),
        /// [Content](#highlight.tags.content) that is emphasized.
        emphasis: t(content),
        /// [Content](#highlight.tags.content) that is styled strong.
        strong: t(content),
        /// [Content](#highlight.tags.content) that is part of a link.
        link: t(content),
        /// [Content](#highlight.tags.content) that is styled as code or
        /// monospace.
        monospace: t(content),
        /// Inserted text in a change-tracking format.
        inserted: t(),
        /// Deleted text.
        deleted: t(),
        /// Changed text.
        changed: t(),
        /// An invalid or unsyntactic element.
        invalid: t(),
        /// Metadata or meta-instruction.
        meta,
        /// [Metadata](#highlight.tags.meta) that applies to the entire
        /// document.
        documentMeta: t(meta),
        /// [Metadata](#highlight.tags.meta) that annotates or adds
        /// attributes to a given syntactic element.
        annotation: t(meta),
        /// Processing instruction or preprocessor directive. Subtag of
        /// [meta](#highlight.tags.meta).
        processingInstruction: t(meta),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
        /// given element is being defined. Expected to be used with the
        /// various [name](#highlight.tags.name) tags.
        definition: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that
        /// something is constant. Mostly expected to be used with
        /// [variable names](#highlight.tags.variableName).
        constant: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
        /// a [variable](#highlight.tags.variableName) or [property
        /// name](#highlight.tags.propertyName) is being called or defined
        /// as a function.
        function: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
        /// [names](#highlight.tags.name) to indicate that they belong to
        /// the language's standard environment.
        standard: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
        /// [names](#highlight.tags.name) is local to some scope.
        local: Tag.defineModifier(),
        /// A generic variant [modifier](#highlight.Tag^defineModifier) that
        /// can be used to tag language-specific alternative variants of
        /// some common tag. It is recommended for themes to define special
        /// forms of at least the [string](#highlight.tags.string) and
        /// [variable name](#highlight.tags.variableName) tags, since those
        /// come up a lot.
        special: Tag.defineModifier()
    };
    /// A default highlight style (works well with light themes).
    const defaultHighlightStyle = HighlightStyle.define([
        { tag: tags.link,
            textDecoration: "underline" },
        { tag: tags.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags.emphasis,
            fontStyle: "italic" },
        { tag: tags.strong,
            fontWeight: "bold" },
        { tag: tags.keyword,
            color: "#708" },
        { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
            color: "#219" },
        { tag: [tags.literal, tags.inserted],
            color: "#164" },
        { tag: [tags.string, tags.deleted],
            color: "#a11" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)],
            color: "#e40" },
        { tag: tags.definition(tags.variableName),
            color: "#00f" },
        { tag: tags.local(tags.variableName),
            color: "#30a" },
        { tag: [tags.typeName, tags.namespace],
            color: "#085" },
        { tag: tags.className,
            color: "#167" },
        { tag: [tags.special(tags.variableName), tags.macroName],
            color: "#256" },
        { tag: tags.definition(tags.propertyName),
            color: "#00c" },
        { tag: tags.comment,
            color: "#940" },
        { tag: tags.meta,
            color: "#7a757a" },
        { tag: tags.invalid,
            color: "#f00" }
    ]);
    /// This is a highlight style that adds stable, predictable classes to
    /// tokens, for styling with external CSS.
    ///
    /// These tags are mapped to their name prefixed with `"cmt-"` (for
    /// example `"cmt-comment"`):
    ///
    /// * [`link`](#highlight.tags.link)
    /// * [`heading`](#highlight.tags.heading)
    /// * [`emphasis`](#highlight.tags.emphasis)
    /// * [`strong`](#highlight.tags.strong)
    /// * [`keyword`](#highlight.tags.keyword)
    /// * [`atom`](#highlight.tags.atom) [`bool`](#highlight.tags.bool)
    /// * [`url`](#highlight.tags.url)
    /// * [`labelName`](#highlight.tags.labelName)
    /// * [`inserted`](#highlight.tags.inserted)
    /// * [`deleted`](#highlight.tags.deleted)
    /// * [`literal`](#highlight.tags.literal)
    /// * [`string`](#highlight.tags.string)
    /// * [`number`](#highlight.tags.number)
    /// * [`variableName`](#highlight.tags.variableName)
    /// * [`typeName`](#highlight.tags.typeName)
    /// * [`namespace`](#highlight.tags.namespace)
    /// * [`macroName`](#highlight.tags.macroName)
    /// * [`propertyName`](#highlight.tags.propertyName)
    /// * [`operator`](#highlight.tags.operator)
    /// * [`comment`](#highlight.tags.comment)
    /// * [`meta`](#highlight.tags.meta)
    /// * [`punctuation`](#highlight.tags.puncutation)
    /// * [`invalid`](#highlight.tags.invalid)
    ///
    /// In addition, these mappings are provided:
    ///
    /// * [`regexp`](#highlight.tags.regexp),
    ///   [`escape`](#highlight.tags.escape), and
    ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    ///   are mapped to `"cmt-string2"`
    /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"cmt-variableName2"`
    /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"cmt-variableName cmt-local"`
    /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"cmt-variableName cmt-definition"`
    HighlightStyle.define([
        { tag: tags.link, class: "cmt-link" },
        { tag: tags.heading, class: "cmt-heading" },
        { tag: tags.emphasis, class: "cmt-emphasis" },
        { tag: tags.strong, class: "cmt-strong" },
        { tag: tags.keyword, class: "cmt-keyword" },
        { tag: tags.atom, class: "cmt-atom" },
        { tag: tags.bool, class: "cmt-bool" },
        { tag: tags.url, class: "cmt-url" },
        { tag: tags.labelName, class: "cmt-labelName" },
        { tag: tags.inserted, class: "cmt-inserted" },
        { tag: tags.deleted, class: "cmt-deleted" },
        { tag: tags.literal, class: "cmt-literal" },
        { tag: tags.string, class: "cmt-string" },
        { tag: tags.number, class: "cmt-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "cmt-string2" },
        { tag: tags.variableName, class: "cmt-variableName" },
        { tag: tags.local(tags.variableName), class: "cmt-variableName cmt-local" },
        { tag: tags.definition(tags.variableName), class: "cmt-variableName cmt-definition" },
        { tag: tags.special(tags.variableName), class: "cmt-variableName2" },
        { tag: tags.typeName, class: "cmt-typeName" },
        { tag: tags.namespace, class: "cmt-namespace" },
        { tag: tags.macroName, class: "cmt-macroName" },
        { tag: tags.propertyName, class: "cmt-propertyName" },
        { tag: tags.operator, class: "cmt-operator" },
        { tag: tags.comment, class: "cmt-comment" },
        { tag: tags.meta, class: "cmt-meta" },
        { tag: tags.invalid, class: "cmt-invalid" },
        { tag: tags.punctuation, class: "cmt-punctuation" }
    ]);

    // Counts the column offset in a string, taking tabs into account.
    // Used mostly to find indentation.
    function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
        if (end == null) {
            end = string.search(/[^\s\u00a0]/);
            if (end == -1)
                end = string.length;
        }
        return countColumn(string.slice(startIndex, end), startValue, tabSize);
    }
    /// Encapsulates a single line of input. Given to stream syntax code,
    /// which uses it to tokenize the content.
    class StringStream {
        /// @internal
        constructor(
        /// The line.
        string, tabSize, 
        /// The current indent unit size.
        indentUnit) {
            this.string = string;
            this.tabSize = tabSize;
            this.indentUnit = indentUnit;
            /// The current position on the line.
            this.pos = 0;
            /// The start position of the current token.
            this.start = 0;
            this.lastColumnPos = 0;
            this.lastColumnValue = 0;
        }
        /// True if we are at the end of the line.
        eol() { return this.pos >= this.string.length; }
        /// True if we are at the start of the line.
        sol() { return this.pos == 0; }
        /// Get the next code unit after the current position, or undefined
        /// if we're at the end of the line.
        peek() { return this.string.charAt(this.pos) || undefined; }
        /// Read the next code unit and advance `this.pos`.
        next() {
            if (this.pos < this.string.length)
                return this.string.charAt(this.pos++);
        }
        /// Match the next character against the given string, regular
        /// expression, or predicate. Consume and return it if it matches.
        eat(match) {
            let ch = this.string.charAt(this.pos);
            let ok;
            if (typeof match == "string")
                ok = ch == match;
            else
                ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
            if (ok) {
                ++this.pos;
                return ch;
            }
        }
        /// Continue matching characters that match the given string,
        /// regular expression, or predicate function. Return true if any
        /// characters were consumed.
        eatWhile(match) {
            let start = this.pos;
            while (this.eat(match)) { }
            return this.pos > start;
        }
        /// Consume whitespace ahead of `this.pos`. Return true if any was
        /// found.
        eatSpace() {
            let start = this.pos;
            while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
                ++this.pos;
            return this.pos > start;
        }
        /// Move to the end of the line.
        skipToEnd() { this.pos = this.string.length; }
        /// Move to directly before the given character, if found on the
        /// current line.
        skipTo(ch) {
            let found = this.string.indexOf(ch, this.pos);
            if (found > -1) {
                this.pos = found;
                return true;
            }
        }
        /// Move back `n` characters.
        backUp(n) { this.pos -= n; }
        /// Get the column position at `this.pos`.
        column() {
            if (this.lastColumnPos < this.start) {
                this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
                this.lastColumnPos = this.start;
            }
            return this.lastColumnValue;
        }
        /// Get the indentation column of the current line.
        indentation() {
            return countCol(this.string, null, this.tabSize);
        }
        /// Match the input against the given string or regular expression
        /// (which should start with a `^`). Return true or the regexp match
        /// if it matches.
        ///
        /// Unless `consume` is set to `false`, this will move `this.pos`
        /// past the matched text.
        ///
        /// When matching a string `caseInsensitive` can be set to true to
        /// make the match case-insensitive.
        match(pattern, consume, caseInsensitive) {
            if (typeof pattern == "string") {
                let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
                let substr = this.string.substr(this.pos, pattern.length);
                if (cased(substr) == cased(pattern)) {
                    if (consume !== false)
                        this.pos += pattern.length;
                    return true;
                }
                else
                    return null;
            }
            else {
                let match = this.string.slice(this.pos).match(pattern);
                if (match && match.index > 0)
                    return null;
                if (match && consume !== false)
                    this.pos += match[0].length;
                return match;
            }
        }
        /// Get the current token.
        current() { return this.string.slice(this.start, this.pos); }
    }

    function fullParser(spec) {
        return {
            token: spec.token,
            blankLine: spec.blankLine || (() => { }),
            startState: spec.startState || (() => true),
            copyState: spec.copyState || defaultCopyState,
            indent: spec.indent || (() => null),
            languageData: spec.languageData || {}
        };
    }
    function defaultCopyState(state) {
        if (typeof state != "object")
            return state;
        let newState = {};
        for (let prop in state) {
            let val = state[prop];
            newState[prop] = (val instanceof Array ? val.slice() : val);
        }
        return newState;
    }
    /// A [language](#language.Language) class based on a streaming
    /// parser.
    class StreamLanguage extends Language {
        constructor(parser) {
            let data = defineLanguageFacet(parser.languageData);
            let p = fullParser(parser);
            let startParse = (input, startPos, context) => new Parse$1(this, input, startPos, context);
            super(data, { startParse }, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);
            this.streamParser = p;
            this.stateAfter = new WeakMap;
        }
        static define(spec) { return new StreamLanguage(spec); }
        getIndent(cx, pos) {
            let tree = syntaxTree(cx.state), at = tree.resolve(pos);
            while (at && at.type != this.topNode)
                at = at.parent;
            if (!at)
                return null;
            let start = findState(this, tree, 0, at.from, pos), statePos, state;
            if (start) {
                state = start.state;
                statePos = start.pos + 1;
            }
            else {
                state = this.streamParser.startState(cx.unit);
                statePos = 0;
            }
            if (pos - statePos > 10000 /* MaxIndentScanDist */)
                return null;
            while (statePos < pos) {
                let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);
                if (line.length) {
                    let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);
                    while (stream.pos < end - line.from)
                        readToken$1(this.streamParser.token, stream, state);
                }
                else {
                    this.streamParser.blankLine(state, cx.unit);
                }
                if (end == pos)
                    break;
                statePos = line.to + 1;
            }
            let { text } = cx.state.doc.lineAt(pos);
            return this.streamParser.indent(state, /^\s*(.*)/.exec(text)[1], cx);
        }
        get allowsNesting() { return false; }
    }
    function findState(lang, tree, off, startPos, before) {
        let state = off >= startPos && off + tree.length <= before && lang.stateAfter.get(tree);
        if (state)
            return { state: lang.streamParser.copyState(state), pos: off + tree.length };
        for (let i = tree.children.length - 1; i >= 0; i--) {
            let child = tree.children[i], pos = off + tree.positions[i];
            let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
            if (found)
                return found;
        }
        return null;
    }
    function cutTree(lang, tree, from, to, inside) {
        if (inside && from <= 0 && to >= tree.length)
            return tree;
        if (!inside && tree.type == lang.topNode)
            inside = true;
        for (let i = tree.children.length - 1; i >= 0; i--) {
            let pos = tree.positions[i] + from, child = tree.children[i], inner;
            if (pos < to && child instanceof Tree) {
                if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))
                    break;
                return !inside ? inner
                    : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
            }
        }
        return null;
    }
    function findStartInFragments(lang, fragments, startPos, state) {
        for (let f of fragments) {
            let found = f.from <= startPos && f.to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, f.to), tree;
            if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
                return { state: found.state, tree };
        }
        return { state: lang.streamParser.startState(getIndentUnit(state)), tree: Tree.empty };
    }
    class Parse$1 {
        constructor(lang, input, startPos, context) {
            this.lang = lang;
            this.input = input;
            this.startPos = startPos;
            this.context = context;
            this.chunks = [];
            this.chunkPos = [];
            this.chunk = [];
            let { state, tree } = findStartInFragments(lang, context.fragments, startPos, context.state);
            this.state = state;
            this.pos = this.chunkStart = startPos + tree.length;
            if (tree.length) {
                this.chunks.push(tree);
                this.chunkPos.push(0);
            }
            if (this.pos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {
                this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
                context.skipUntilInView(this.pos, context.viewport.from);
                this.pos = context.viewport.from;
            }
        }
        advance() {
            let end = Math.min(this.context.viewport.to, this.input.length, this.chunkStart + 2048 /* ChunkSize */);
            while (this.pos < end)
                this.parseLine();
            if (this.chunkStart < this.pos)
                this.finishChunk();
            if (end < this.input.length && this.pos < this.context.viewport.to)
                return null;
            this.context.skipUntilInView(this.pos, this.input.length);
            return this.finish();
        }
        parseLine() {
            let line = this.input.lineAfter(this.pos), { streamParser } = this.lang;
            let stream = new StringStream(line, this.context ? this.context.state.tabSize : 4, getIndentUnit(this.context.state));
            if (stream.eol()) {
                streamParser.blankLine(this.state, stream.indentUnit);
            }
            else {
                while (!stream.eol()) {
                    let token = readToken$1(streamParser.token, stream, this.state);
                    if (token)
                        this.chunk.push(tokenID(token), this.pos + stream.start, this.pos + stream.pos, 4);
                }
            }
            this.pos += line.length;
            if (this.pos < this.input.length)
                this.pos++;
        }
        finishChunk() {
            let tree = Tree.build({
                buffer: this.chunk,
                start: this.chunkStart,
                length: this.pos - this.chunkStart,
                nodeSet,
                topID: 0,
                maxBufferLength: 2048 /* ChunkSize */
            });
            this.lang.stateAfter.set(tree, this.lang.streamParser.copyState(this.state));
            this.chunks.push(tree);
            this.chunkPos.push(this.chunkStart - this.startPos);
            this.chunk = [];
            this.chunkStart = this.pos;
        }
        finish() {
            return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.pos - this.startPos).balance();
        }
        forceFinish() {
            return this.finish();
        }
    }
    function readToken$1(token, stream, state) {
        stream.start = stream.pos;
        for (let i = 0; i < 10; i++) {
            let result = token(stream, state);
            if (stream.pos > stream.start)
                return result;
        }
        throw new Error("Stream parser failed to advance stream.");
    }
    const tokenTable = Object.create(null);
    const typeArray = [NodeType.none];
    const nodeSet = new NodeSet(typeArray);
    const warned = [];
    function tokenID(tag) {
        return !tag ? 0 : tokenTable[tag] || (tokenTable[tag] = createTokenType(tag));
    }
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "typeName"],
        ["attribute", "propertyName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        tokenTable[legacyName] = tokenID(name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = tags[part];
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray.push(type);
        return type.id;
    }
    function docID(data) {
        let type = NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data)] });
        typeArray.push(type);
        return type;
    }

    const fromHistory = Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = Facet.define();
    const historyConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500
            }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
    });
    const historyField_ = StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let item = HistEvent.fromTransaction(tr), from = fromHist.side;
                let other = from == 0 /* Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    if (e.inputType == "historyUndo")
                        return undo(view);
                    if (e.inputType == "historyRedo")
                        return redo(view);
                    return false;
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = cmd(0 /* Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = cmd(1 /* Undone */, false);
    /**
    Undo a selection change.
    */
    const undoSelection = cmd(0 /* Done */, true);
    /**
    Redo a selection change.
    */
    const redoSelection = cmd(1 /* Undone */, true);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr) {
            let effects = none$1;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none$1);
        }
        static selection(selections) {
            return new HistEvent(undefined, none$1, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none$1 = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none$1;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none$1;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$1, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes &&
                time - this.prevTime < newGroupDelay &&
                !lastEvent.selectionsAfter.length &&
                !lastEvent.changes.empty && event.changes &&
                isAdjacent(lastEvent.changes, event.changes)) {
                done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$1));
            }
            else {
                done = updateBranch(done, done.length, maxLen, event);
            }
            return new HistoryState(done, none$1, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$1;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == "keyboardselection" && this.prevUserEvent == userEvent &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, selection) {
            let branch = side == 0 /* Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1];
            if (selection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch) })
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none$1 : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest }),
                    filter: false
                });
            }
        }
    }
    HistoryState.empty = new HistoryState(none$1, none$1);
    /**
    Default key bindings for the undo history.

    - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#history.undo).
    - Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#history.redo).
    - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#history.undoSelection).
    - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#history.redoSelection).
    */
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    /// A gutter marker represents a bit of information attached to a line
    /// in a specific gutter. Your own custom markers have to extend this
    /// class.
    class GutterMarker extends RangeValue {
        /// @internal
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /// Render the DOM node for this marker, if any.
        toDOM(_view) { return null; }
        /// Create a range that places this marker at the given position.
        at(pos) { return this.range(pos); }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    const defaults$1 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = Facet.define();
    /// Define an editor gutter. The order in which the gutters appear is
    /// determined by their extension priority.
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
    }
    const baseTheme$7 = EditorView.baseTheme({
        ".cm-gutters": {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#999",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            height: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        }
    });
    const unfixGutters = Facet.define({
        combine: values => values.some(x => x)
    });
    /// The gutter-drawing plugin is automatically enabled when you add a
    /// gutter, but you can use this function to explicitly configure it.
    ///
    /// Unless `fixed` is explicitly set to `false`, the gutters are
    /// fixed, meaning they don't scroll along with the content
    /// horizontally (except on Internet Explorer, which doesn't support
    /// CSS [`position:
    /// sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    function gutters(config) {
        let result = [
            gutterView,
            baseTheme$7
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (!this.updateGutters(update))
                return;
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));
            this.view.viewportLines(line => {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType.Text ? line : undefined;
                }
                if (!text)
                    return;
                for (let cx of contexts)
                    cx.line(this.view, text);
            }, 0);
            for (let cx of contexts)
                cx.finish();
            this.dom.style.minHeight = this.view.contentHeight + "px";
            if (update.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged;
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters)
                    g.dom.remove();
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            this.dom.remove();
        }
    }, {
        provide: PluginField.scrollMargins.from(value => {
            if (value.gutters.length == 0 || !value.fixed)
                return null;
            return value.view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    class UpdateContext {
        constructor(gutter, viewport) {
            this.gutter = gutter;
            this.localMarkers = [];
            this.i = 0;
            this.height = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        line(view, line) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            while (this.cursor.value && this.cursor.from <= line.from) {
                if (this.cursor.from == line.from)
                    this.localMarkers.push(this.cursor.value);
                this.cursor.next();
            }
            let forLine = this.gutter.config.lineMarker(view, line, this.localMarkers);
            if (forLine)
                this.localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (this.localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, line.height, above, this.localMarkers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                let markers = this.localMarkers, elt = gutter.elements[this.i];
                if (sameMarkers(markers, elt.markers)) {
                    markers = elt.markers;
                    this.localMarkers.length = 0;
                }
                elt.update(view, line.height, above, markers);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i)
                gutter.dom.removeChild(gutter.elements.pop().dom);
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            return this.markers != prevMarkers;
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.dom = document.createElement("div");
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (this.markers != markers) {
                this.markers = markers;
                for (let ch; ch = this.dom.lastChild;)
                    ch.remove();
                let cls = "cm-gutterElement";
                for (let m of markers) {
                    let dom = m.toDOM(view);
                    if (dom)
                        this.dom.appendChild(dom);
                    let c = m.elementClass;
                    if (c)
                        cls += " " + c;
                }
                this.dom.className = cls;
            }
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /// Facet used to provide markers to the line number gutter.
    const lineNumberMarkers = Facet.define();
    const lineNumberConfig = Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() {
            return document.createTextNode(this.number);
        }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = gutter({
        class: "cm-lineNumbers",
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.length)
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        }
    });
    /// Create a line number gutter extension.
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }

    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    const foldEffect = StateEffect.define({ map: mapRange });
    const unfoldEffect = StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.visualLineAt(head));
        }
        return lines;
    }
    const foldState = StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                    folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
                else if (e.is(unfoldEffect)) {
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
                }
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.main;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: f => EditorView.decorations.compute([f], s => s.field(f))
    });
    function foldInside(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
    }
    /// Fold the lines that are selected, if possible.
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = foldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
                return true;
            }
        }
        return false;
    };
    /// Unfold folded ranges on selected lines.
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = foldInside(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    function announceFold(view, range, fold = true) {
        let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
        return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
    }
    /// Fold all top-level foldable ranges.
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.visualLineAt(pos), range = foldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.visualLineAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects: maybeEnable(view.state, effects) });
        return !!effects.length;
    };
    /// Unfold all folded code.
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /// Default fold-related key bindings.
    ///
    ///  - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](#fold.foldCode).
    ///  - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](#fold.unfoldCode).
    ///  - Ctrl-Alt-[: [`foldAll`](#fold.foldAll).
    ///  - Ctrl-Alt-]: [`unfoldAll`](#fold.unfoldAll).
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
    };
    const foldConfig = Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /// Create an extension that configures code folding.
    function codeFolding(config) {
        let result = [foldState, baseTheme$6];
        if (config)
            result.push(foldConfig.of(config));
        return result;
    }
    const foldWidget = Decoration.replace({ widget: new class extends WidgetType {
            ignoreEvents() { return false; }
            toDOM(view) {
                let { state } = view, conf = state.facet(foldConfig);
                if (conf.placeholderDOM)
                    return conf.placeholderDOM();
                let element = document.createElement("span");
                element.textContent = conf.placeholderText;
                element.setAttribute("aria-label", state.phrase("folded code"));
                element.title = state.phrase("unfold");
                element.className = "cm-foldPlaceholder";
                element.onclick = event => {
                    let line = view.visualLineAt(view.posAtDOM(event.target));
                    let folded = foldInside(view.state, line.from, line.to);
                    if (folded)
                        view.dispatch({ effects: unfoldEffect.of(folded) });
                    event.preventDefault();
                };
                return element;
            }
        } });
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›"
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /// Create an extension that registers a fold gutter, which shows a
    /// fold status indicator before foldable lines (which can be clicked
    /// to fold or unfold the line).
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = RangeSet.of(this.buildMarkers(view));
            }
            update(update) {
                let firstChange = -1;
                update.changes.iterChangedRanges(from => { if (firstChange < 0)
                    firstChange = from; });
                let foldChange = update.startState.field(foldState, false) != update.state.field(foldState, false);
                if (!foldChange && update.docChanged && update.view.viewport.from == this.from && firstChange > this.from) {
                    let start = update.view.visualLineAt(firstChange).from;
                    this.markers = this.markers.update({
                        filter: () => false,
                        filterFrom: start,
                        add: this.buildMarkers(update.view, start)
                    });
                }
                else if (foldChange || update.docChanged || update.viewportChanged) {
                    this.from = update.view.viewport.from;
                    this.markers = RangeSet.of(this.buildMarkers(update.view));
                }
            }
            buildMarkers(view, from = 0) {
                let ranges = [];
                view.viewportLines(line => {
                    if (line.from >= from) {
                        let mark = foldInside(view.state, line.from, line.to) ? canUnfold
                            : foldable(view.state, line.from, line.to) ? canFold : null;
                        if (mark)
                            ranges.push(mark.range(line.from));
                    }
                });
                return ranges;
            }
        });
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: {
                    click: (view, line) => {
                        let folded = foldInside(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    }
                }
            }),
            codeFolding()
        ];
    }
    const baseTheme$6 = EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter .cm-gutterElement": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    const baseTheme$5 = EditorView.baseTheme({
        ".cm-matchingBracket": { color: "#0b0" },
        ".cm-nonmatchingBracket": { color: "#a22" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist
            });
        }
    });
    const matchingMark = Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = Decoration.mark({ class: "cm-nonmatchingBracket" });
    const bracketMatchingState = StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (!match)
                    continue;
                let mark = match.matched ? matchingMark : nonmatchingMark;
                decorations.push(mark.range(match.start.from, match.start.to));
                if (match.end)
                    decorations.push(mark.range(match.end.from, match.end.to));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$5
    ];
    /// Create an extension that enables bracket matching. Whenever the
    /// cursor is next to a bracket, that bracket and the one it matches
    /// are highlighted. Or, when no matching bracket is found, another
    /// highlighting style is used to indicate this.
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /// Find the matching bracket for the token at `pos`, scanning
    /// direction `dir`. Only the `brackets` and `maxScanDistance`
    /// properties are used from `config`, if given. Returns null if no
    /// bracket was found at `pos`, or a match result otherwise.
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), sub = tree.resolve(pos, dir), matches;
        if (matches = matchingNodes(sub.type, dir, brackets))
            return matchMarkedBrackets(state, pos, dir, sub, matches, brackets);
        else
            return matchPlainBrackets(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: false };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, annotations: Transaction.userEvent.of("keyboardselection") });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection one character to the left (which is backward in
    /// left-to-right text, forward in right-to-left text).
    const cursorCharLeft = view => cursorByChar(view, view.textDirection != Direction.LTR);
    /// Move the selection one character to the right.
    const cursorCharRight = view => cursorByChar(view, view.textDirection == Direction.LTR);
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection across one group of word or non-word (but also
    /// non-space) characters.
    const cursorGroupLeft = view => cursorByGroup(view, view.textDirection != Direction.LTR);
    /// Move the selection one group to the right.
    const cursorGroupRight = view => cursorByGroup(view, view.textDirection == Direction.LTR);
    /// Move the selection one group forward.
    const cursorGroupForward = view => cursorByGroup(view, true);
    /// Move the selection one group backward.
    const cursorGroupBackward = view => cursorByGroup(view, false);
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolve(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /// Move the cursor over the next syntactic element to the left.
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
    /// Move the cursor over the next syntactic element to the right.
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
    function cursorByLine(view, forward) {
        return moveSel(view, range => range.empty ? view.moveVertically(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection one line up.
    const cursorLineUp = view => cursorByLine(view, false);
    /// Move the selection one line down.
    const cursorLineDown = view => cursorByLine(view, true);
    function cursorByPage(view, forward) {
        return moveSel(view, range => range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward));
    }
    /// Move the selection one page up.
    const cursorPageUp = view => cursorByPage(view, false);
    /// Move the selection one page down.
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.visualLineAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /// Move the selection to the next line wrap point, or to the end of
    /// the line if there isn't one left on this line.
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /// Move the selection to previous line wrap point, or failing that to
    /// the start of the line. If the line is indented, and the cursor
    /// isn't already at the end of the indentation, this will move to the
    /// end of the indentation instead of the start of the line.
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /// Move the selection to the start of the line.
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from, 1));
    /// Move the selection to the end of the line.
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /// Move the selection to the bracket matching the one it is currently
    /// on, if any.
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /// Move the selection head one character to the left, while leaving
    /// the anchor in place.
    const selectCharLeft = view => selectByChar(view, view.textDirection != Direction.LTR);
    /// Move the selection head one character to the right.
    const selectCharRight = view => selectByChar(view, view.textDirection == Direction.LTR);
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /// Move the selection head one [group](#commands.cursorGroupLeft) to
    /// the left.
    const selectGroupLeft = view => selectByGroup(view, view.textDirection != Direction.LTR);
    /// Move the selection head one group to the right.
    const selectGroupRight = view => selectByGroup(view, view.textDirection == Direction.LTR);
    /// Move the selection head one group forward.
    const selectGroupForward = view => selectByGroup(view, true);
    /// Move the selection head one group backward.
    const selectGroupBackward = view => selectByGroup(view, false);
    /// Move the selection head over the next syntactic element to the left.
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
    /// Move the selection head over the next syntactic element to the right.
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /// Move the selection head one line up.
    const selectLineUp = view => selectByLine(view, false);
    /// Move the selection head one line down.
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
    }
    /// Move the selection head one page up.
    const selectPageUp = view => selectByPage(view, false);
    /// Move the selection head one page down.
    const selectPageDown = view => selectByPage(view, true);
    /// Move the selection head to the next line boundary.
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /// Move the selection head to the previous line boundary.
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /// Move the selection head to the start of the line.
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from));
    /// Move the selection head to the end of the line.
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to));
    /// Move the selection to the start of the document.
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /// Move the selection to the end of the document.
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /// Move the selection head to the start of the document.
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /// Move the selection head to the end of the document.
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /// Select the entire document.
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, annotations: Transaction.userEvent.of("keyboardselection") }));
        return true;
    };
    /// Expand the selection to cover entire lines.
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), annotations: Transaction.userEvent.of("keyboardselection") }));
        return true;
    };
    /// Select the next syntactic construct that is larger than the
    /// selection. Note that this will only work insofar as the language
    /// [provider](#language.language) you use builds up a full
    /// syntax tree.
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = syntaxTree(state).resolve(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /// Simplify the current selection. When multiple ranges are selected,
    /// reduce it to its main range. Otherwise, if the selection is
    /// non-empty, convert it to a cursor selection.
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy({ state, dispatch }, by) {
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("delete") }));
        return true;
    }
    const deleteByChar = (target, forward, codePoint) => deleteBy(target, pos => {
        let { state } = target, line = state.doc.lineAt(pos), before;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, 0, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            return pos;
        }
        let targetPos;
        if (codePoint) {
            let next = line.text.slice(pos - line.from + (forward ? 0 : -2), pos - line.from + (forward ? 2 : 0));
            let size = next ? codePointSize(codePointAt(next, 0)) : 1;
            targetPos = forward ? Math.min(state.doc.length, pos + size) : Math.max(0, pos - size);
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward) + line.from;
        }
        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
            targetPos += forward ? 1 : -1;
        return targetPos;
    });
    /// Delete the selection, or, for cursor selections, the code point
    /// before the cursor.
    const deleteCodePointBackward = view => deleteByChar(view, false, true);
    /// Delete the selection, or, for cursor selections, the character
    /// before the cursor.
    const deleteCharBackward = view => deleteByChar(view, false, false);
    /// Delete the selection or the character after the cursor.
    const deleteCharForward = view => deleteByChar(view, true, false);
    const deleteByGroup = (target, forward) => deleteBy(target, start => {
        let pos = start, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == start && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != start)
                cat = nextCat;
            pos = next;
        }
        return pos;
    });
    /// Delete the selection or backward until the end of the next
    /// [group](#view.EditorView.moveByGroup), only skipping groups of
    /// whitespace when they consist of a single space.
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /// Delete the selection or forward until the end of the next group.
    const deleteGroupForward = target => deleteByGroup(target, true);
    /// Delete the selection, or, if it is a cursor selection, delete to
    /// the end of the line. If the cursor is directly at the end of the
    /// line, delete the line break after it.
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.visualLineAt(pos).to;
        if (pos < lineEnd)
            return lineEnd;
        return Math.min(view.state.doc.length, pos + 1);
    });
    /// Replace each selection range with a line break, leaving the cursor
    /// on the line before the break.
    const splitLine = ({ state, dispatch }) => {
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") }));
        return true;
    };
    /// Flip the characters before and after the cursor(s).
    const transposeChars = ({ state, dispatch }) => {
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (upto == startLine.number)
                blocks[blocks.length - 1].to = endLine.to;
            else
                blocks.push({ from: startLine.from, to: endLine.to });
            upto = endLine.number;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            if (forward)
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
            else
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
        }
        if (!changes.length)
            return false;
        dispatch(state.update({ changes, scrollIntoView: true }));
        return true;
    }
    /// Move the selected lines up one line.
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /// Move the selected lines down one line.
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true }));
        return true;
    }
    /// Create a copy of the selected lines. Keep the selection in the top copy.
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /// Create a copy of the selected lines. Keep the selection in the bottom copy.
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /// Delete selected lines.
    const deleteLine = view => {
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolve(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
            return { from: before.to, to: after.from };
        return null;
    }
    /// Replace the selection with a newline and indent the newly created
    /// line(s). If the current line consists only of whitespace, this
    /// will also delete that whitespace. When the cursor is between
    /// matching brackets, an additional newline will be inserted after
    /// the cursor.
    const insertNewlineAndIndent = ({ state, dispatch }) => {
        let changes = state.changeByRange(({ from, to }) => {
            let explode = from == to && isBetweenBrackets(state, from);
            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
            let indent = getIndentation(cx, from);
            if (indent == null)
                indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
            let line = state.doc.lineAt(from);
            while (to < line.to && /\s/.test(line.text.slice(to - line.from, to + 1 - line.from)))
                to++;
            if (explode)
                ({ from, to } = explode);
            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                from = line.from;
            let insert = ["", indentString(state, indent)];
            if (explode)
                insert.push(indentString(state, cx.lineIndent(line)));
            return { changes: { from, to, insert: Text.of(insert) },
                range: EditorSelection.cursor(from + 1 + insert[1].length) };
        });
        dispatch(state.update(changes, { scrollIntoView: true }));
        return true;
    };
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /// Auto-indent the selected lines. This uses the [indentation service
    /// facet](#language.indentService) as source for auto-indent
    /// information.
    const indentSelection = ({ state, dispatch }) => {
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes));
        return true;
    };
    /// Add a [unit](#language.indentUnit) of indentation to all selected
    /// lines.
    const indentMore = ({ state, dispatch }) => {
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        })));
        return true;
    };
    /// Remove a [unit](#language.indentUnit) of indentation from all
    /// selected lines.
    const indentLess = ({ state, dispatch }) => {
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, 0, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        })));
        return true;
    };
    /// Array of key bindings containing the Emacs-style bindings that are
    /// available on macOS by default.
    ///
    ///  - Ctrl-b: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
    ///  - Ctrl-f: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
    ///  - Ctrl-p: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
    ///  - Ctrl-n: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
    ///  - Ctrl-a: [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
    ///  - Ctrl-e: [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
    ///  - Ctrl-d: [`deleteCharForward`](#commands.deleteCharForward)
    ///  - Ctrl-h: [`deleteCharBackward`](#commands.deleteCharBackward)
    ///  - Ctrl-k: [`deleteToLineEnd`](#commands.deleteToLineEnd)
    ///  - Alt-d: [`deleteGroupForward`](#commands.deleteGroupForward)
    ///  - Ctrl-Alt-h: [`deleteGroupBackward`](#commands.deleteGroupBackward)
    ///  - Ctrl-o: [`splitLine`](#commands.splitLine)
    ///  - Ctrl-t: [`transposeChars`](#commands.transposeChars)
    ///  - Alt-f: [`cursorGroupForward`](#commands.cursorGroupForward) ([`selectGroupForward`](#commands.selectGroupForward) with Shift)
    ///  - Alt-b: [`cursorGroupBackward`](#commands.cursorGroupBackward) ([`selectGroupBackward`](#commands.selectGroupBackward) with Shift)
    ///  - Alt-<: [`cursorDocStart`](#commands.cursorDocStart)
    ///  - Alt->: [`cursorDocEnd`](#commands.cursorDocEnd)
    ///  - Ctrl-v: [`cursorPageDown`](#commands.cursorPageDown)
    ///  - Alt-v: [`cursorPageUp`](#commands.cursorPageUp)
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Alt-d", run: deleteGroupForward },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Alt-f", run: cursorGroupForward, shift: selectGroupForward },
        { key: "Alt-b", run: cursorGroupBackward, shift: selectGroupBackward },
        { key: "Alt-<", run: cursorDocStart },
        { key: "Alt->", run: cursorDocEnd },
        { key: "Ctrl-v", run: cursorPageDown },
        { key: "Alt-v", run: cursorPageUp },
    ];
    /// An array of key bindings closely sticking to platform-standard or
    /// widely used bindings. (This includes the bindings from
    /// [`emacsStyleKeymap`](#commands.emacsStyleKeymap), with their `key`
    /// property changed to `mac`.)
    ///
    ///  - ArrowLeft: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
    ///  - ArrowRight: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
    ///  - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](#commands.cursorGroupLeft) ([`selectGroupLeft`](#commands.selectGroupLeft) with Shift)
    ///  - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](#commands.cursorGroupRight) ([`selectGroupRight`](#commands.selectGroupRight) with Shift)
    ///  - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
    ///  - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
    ///  - ArrowUp: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
    ///  - ArrowDown: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
    ///  - Cmd-ArrowUp (on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
    ///  - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
    ///  - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
    ///  - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
    ///  - PageUp: [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
    ///  - PageDown: [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
    ///  - Home: [`cursorLineBoundaryBackward`](#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](#commands.selectLineBoundaryBackward) with Shift)
    ///  - End: [`cursorLineBoundaryForward`](#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](#commands.selectLineBoundaryForward) with Shift)
    ///  - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
    ///  - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
    ///  - Enter: [`insertNewlineAndIndent`](#commands.insertNewlineAndIndent)
    ///  - Ctrl-a (Cmd-a on macOS): [`selectAll`](#commands.selectAll)
    ///  - Backspace: [`deleteCodePointBackward`](#commands.deleteCodePointBackward)
    ///  - Delete: [`deleteCharForward`](#commands.deleteCharForward)
    ///  - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](#commands.deleteGroupBackward)
    ///  - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](#commands.deleteGroupForward)
    const standardKeymap = [
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineStart, shift: selectLineStart },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineEnd, shift: selectLineEnd },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCodePointBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
    ].concat(emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /// The default keymap. Includes all bindings from
    /// [`standardKeymap`](#commands.standardKeymap) plus the following:
    ///
    /// - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](#commands.selectSyntaxLeft) with Shift)
    /// - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](#commands.cursorSyntaxRight) ([`selectSyntaxRight`](#commands.selectSyntaxRight) with Shift)
    /// - Alt-ArrowUp: [`moveLineUp`](#commands.moveLineUp)
    /// - Alt-ArrowDown: [`moveLineDown`](#commands.moveLineDown)
    /// - Shift-Alt-ArrowUp: [`copyLineUp`](#commands.copyLineUp)
    /// - Shift-Alt-ArrowDown: [`copyLineDown`](#commands.copyLineDown)
    /// - Escape: [`simplifySelection`](#commands.simplifySelection)
    /// - Alt-l: [`selectLine`](#commands.selectLine)
    /// - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](#commands.selectParentSyntax)
    /// - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](#commands.indentLess)
    /// - Ctrl-] (Cmd-] on macOS): [`indentMore`](#commands.indentMore)
    /// - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](#commands.indentSelection)
    /// - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](#commands.deleteLine)
    /// - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](#commands.cursorMatchingBracket)
    const defaultKeymap = [
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Alt-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket }
    ].concat(standardKeymap);

    const defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}'\":;>"
    };
    const closeBracketEffect = StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const skipBracketEffect = StateEffect.define({
        map(value, mapping) { return mapping.mapPos(value); }
    });
    const closedBracket = new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            if (tr.selection) {
                let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
                let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
                if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                    value = RangeSet.empty;
            }
            value = value.map(tr.changes);
            for (let effect of tr.effects) {
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
                else if (effect.is(skipBracketEffect))
                    value = value.update({ filter: from => from != effect.value });
            }
            return value;
        }
    });
    /// Extension to enable bracket-closing behavior. When a closeable
    /// bracket is typed, its closing bracket is immediately inserted
    /// after the cursor. When closing a bracket directly in front of a
    /// closing bracket inserted by the extension, the cursor moves over
    /// that bracket.
    function closeBrackets() {
        return [EditorView.inputHandler.of(handleInput), bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config$1(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults;
    }
    function handleInput(view, from, to, insert) {
        if (view.composing)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    }
    /// Command that implements deleting a pair of matching brackets when
    /// the cursor is between them.
    const deleteBracketPair = ({ state, dispatch }) => {
        let conf = config$1(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length),
                            annotations: Transaction.userEvent.of("delete") };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true }));
        return !dont;
    };
    /// Close-brackets related key bindings. Binds Backspace to
    /// [`deleteBracketPair`](#closebrackets.deleteBracketPair).
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /// Implements the extension's behavior on text insertion. If the
    /// given string counts as a bracket in the language around the
    /// selection, and replacing the selection with it requires custom
    /// behavior (inserting a closing version or skipping past a
    /// previously-closed bracket), this function returns a transaction
    /// representing that custom behavior. (You only need this if you want
    /// to programmatically insert brackets—the
    /// [`closeBrackets`](#closebrackets.closeBrackets) extension will
    /// take care of running this for user input.)
    function insertBracket(state, bracket) {
        let conf = config$1(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                    : handleOpen(state, tok, closed, conf.before || defaults.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            annotations: Transaction.userEvent.of("input")
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, moved = state.selection.ranges.map(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return EditorSelection.cursor(range.head + close.length);
            return dont = range;
        });
        return dont ? null : state.update({
            selection: EditorSelection.create(moved, state.selection.mainIndex),
            scrollIntoView: true,
            effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos);
            if (next == token) {
                if (nodeStart(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                        effects: skipBracketEffect.of(pos) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                nodeStart(state, pos - 2 * token.length)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                let prev = state.sliceDoc(pos - 1, pos);
                if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word)
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            annotations: Transaction.userEvent.of("input")
        });
    }
    function nodeStart(state, pos) {
        let tree = syntaxTree(state).resolve(pos + 1);
        return tree.parent && tree.from == pos;
    }

    const panelConfig = Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    /**
    Get the active panel created by the given constructor, if any.
    This can be useful when you need access to your panels' DOM
    structure.
    */
    function getPanel(view, panel) {
        let plugin = view.plugin(panelPlugin);
        let index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
    }
    const panelPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.input = view.state.facet(showPanel);
            this.specs = this.input.filter(s => s);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.classList.add("cm-panel");
                // FIXME drop on next breaking release
                if (p.class)
                    p.dom.classList.add(p.class);
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let input = update.state.facet(showPanel);
            if (input != this.input) {
                let specs = input.filter(x => x);
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.classList.add("cm-panel");
                    // FIXME drop on next breaking release
                    if (p.class)
                        p.dom.classList.add(p.class);
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: PluginField.scrollMargins.from(value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }))
    });
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - this.view.scrollDOM.getBoundingClientRect().top
                    : this.view.scrollDOM.getBoundingClientRect().bottom - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    const baseTheme$4 = EditorView.baseTheme({
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        }
    });
    /**
    Opening a panel is done by providing a constructor function for
    the panel through this facet. (The panel is closed again when its
    constructor is no longer provided.) Values of `null` are ignored.
    */
    const showPanel = Facet.define({
        enables: [panelPlugin, baseTheme$4]
    });

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add(elt, arguments[i]);
      return elt
    }

    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize) {
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }

    const empty = { from: -1, to: -1, match: /.*/.exec("") };
    const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
    class RegExpCursor {
        constructor(text, query, options, from = 0, to = text.length) {
            this.to = to;
            this.curLine = "";
            this.done = false;
            this.value = empty;
            if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
                return new MultilineRegExpCursor(text, query, options, from, to);
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.iter = text.iter();
            let startLine = text.lineAt(from);
            this.curLineStart = startLine.from;
            this.matchPos = from;
            this.getLine(this.curLineStart);
        }
        getLine(skip) {
            this.iter.next(skip);
            if (this.iter.lineBreak) {
                this.curLine = "";
            }
            else {
                this.curLine = this.iter.value;
                if (this.curLineStart + this.curLine.length > this.to)
                    this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
                this.iter.next();
            }
        }
        nextLine() {
            this.curLineStart = this.curLineStart + this.curLine.length + 1;
            if (this.curLineStart > this.to)
                this.curLine = "";
            else
                this.getLine(0);
        }
        next() {
            for (let off = this.matchPos - this.curLineStart;;) {
                this.re.lastIndex = off;
                let match = this.matchPos <= this.to && this.re.exec(this.curLine);
                if (match) {
                    let from = this.curLineStart + match.index, to = from + match[0].length;
                    this.matchPos = to + (from == to ? 1 : 0);
                    if (from == this.curLine.length)
                        this.nextLine();
                    if (from < to || from > this.value.to) {
                        this.value = { from, to, match };
                        return this;
                    }
                    off = this.matchPos - this.curLineStart;
                }
                else if (this.curLineStart + this.curLine.length < this.to) {
                    this.nextLine();
                    off = 0;
                }
                else {
                    this.done = true;
                    return this;
                }
            }
        }
    }
    const flattened = new WeakMap();
    // Reusable (partially) flattened document strings
    class FlattenedDoc {
        constructor(from, text) {
            this.from = from;
            this.text = text;
        }
        get to() { return this.from + this.text.length; }
        static get(doc, from, to) {
            let cached = flattened.get(doc);
            if (!cached || cached.from >= to || cached.to <= from) {
                let flat = new FlattenedDoc(from, doc.sliceString(from, to));
                flattened.set(doc, flat);
                return flat;
            }
            if (cached.from == from && cached.to == to)
                return cached;
            let { text, from: cachedFrom } = cached;
            if (cachedFrom > from) {
                text = doc.sliceString(from, cachedFrom) + text;
                cachedFrom = from;
            }
            if (cached.to < to)
                text += doc.sliceString(cached.to, to);
            flattened.set(doc, new FlattenedDoc(cachedFrom, text));
            return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
        }
    }
    class MultilineRegExpCursor {
        constructor(text, query, options, from, to) {
            this.text = text;
            this.to = to;
            this.done = false;
            this.value = empty;
            this.matchPos = from;
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
        }
        chunkEnd(pos) {
            return pos >= this.to ? this.to : this.text.lineAt(pos).to;
        }
        next() {
            for (;;) {
                let off = this.re.lastIndex = this.matchPos - this.flat.from;
                let match = this.re.exec(this.flat.text);
                // Skip empty matches directly after the last match
                if (match && !match[0] && match.index == off) {
                    this.re.lastIndex = off + 1;
                    match = this.re.exec(this.flat.text);
                }
                // If a match goes almost to the end of a noncomplete chunk, try
                // again, since it'll likely be able to match more
                if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
                    match = null;
                if (match) {
                    let from = this.flat.from + match.index, to = from + match[0].length;
                    this.value = { from, to, match };
                    this.matchPos = to + (from == to ? 1 : 0);
                    return this;
                }
                else {
                    if (this.flat.to == this.to) {
                        this.done = true;
                        return this;
                    }
                    // Grow the flattened doc
                    this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
                }
            }
        }
    }
    function validRegExp(source) {
        try {
            new RegExp(source, baseFlags);
            return true;
        }
        catch (_a) {
            return false;
        }
    }

    function createLineDialog(view) {
        let input = crelt("input", { class: "cm-textfield", name: "line" });
        let dom = crelt("form", {
            class: "cm-gotoLine",
            onkeydown: (event) => {
                if (event.keyCode == 27) { // Escape
                    event.preventDefault();
                    view.dispatch({ effects: dialogEffect.of(false) });
                    view.focus();
                }
                else if (event.keyCode == 13) { // Enter
                    event.preventDefault();
                    go();
                }
            },
            onsubmit: (event) => {
                event.preventDefault();
                go();
            }
        }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
        function go() {
            let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
            if (!match)
                return;
            let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
            let [, sign, ln, cl, percent] = match;
            let col = cl ? +cl.slice(1) : 0;
            let line = ln ? +ln : startLine.number;
            if (ln && percent) {
                let pc = line / 100;
                if (sign)
                    pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
                line = Math.round(state.doc.lines * pc);
            }
            else if (ln && sign) {
                line = line * (sign == "-" ? -1 : 1) + startLine.number;
            }
            let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
            view.dispatch({
                effects: dialogEffect.of(false),
                selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
                scrollIntoView: true
            });
            view.focus();
        }
        return { dom, pos: -10 };
    }
    const dialogEffect = StateEffect.define();
    const dialogField = StateField.define({
        create() { return true; },
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(dialogEffect))
                    value = e.value;
            return value;
        },
        provide: f => showPanel.from(f, val => val ? createLineDialog : null)
    });
    /**
    Command that shows a dialog asking the user for a line number, and
    when a valid position is provided, moves the cursor to that line.

    Supports line numbers, relative line offsets prefixed with `+` or
    `-`, document percentages suffixed with `%`, and an optional
    column position by adding `:` and a second number after the line
    number.

    The dialog can be styled with the `panel.gotoLine` theme
    selector.
    */
    const gotoLine = view => {
        let panel = getPanel(view, createLineDialog);
        if (!panel) {
            let effects = [dialogEffect.of(true)];
            if (view.state.field(dialogField, false) == null)
                effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
            view.dispatch({ effects });
            panel = getPanel(view, createLineDialog);
        }
        if (panel)
            panel.dom.querySelector("input").focus();
        return true;
    };
    const baseTheme$1$1 = EditorView.baseTheme({
        ".cm-panel.cm-gotoLine": {
            padding: "2px 6px 4px",
            "& label": { fontSize: "80%" }
        }
    });

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100
    };
    const highlightConfig = Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        if (options)
            ext.push(highlightConfig.of(options));
        return ext;
    }
    function wordAt(doc, pos, check) {
        let line = doc.lineAt(pos);
        let from = pos - line.from, to = pos - line.from;
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (check(line.text.slice(prev, from)) != CharCategory.Word)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (check(line.text.slice(to, next)) != CharCategory.Word)
                break;
            to = next;
        }
        return from == to ? null : line.text.slice(from, to);
    }
    const matchDeco = Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    const matchHighlighter = ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = wordAt(state.doc, range.head, check);
                if (!query)
                    return Decoration.none;
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                query = state.sliceDoc(range.from, range.to).trim();
                if (!query)
                    return Decoration.none;
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.nextOverlapping().done) {
                    let { from, to } = cursor.value;
                    if (!check || ((from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
                        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word))) {
                        if (check && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });

    class Query {
        constructor(search, replace, caseInsensitive) {
            this.search = search;
            this.replace = replace;
            this.caseInsensitive = caseInsensitive;
        }
        eq(other) {
            return this.search == other.search && this.replace == other.replace &&
                this.caseInsensitive == other.caseInsensitive && this.constructor == other.constructor;
        }
    }
    class StringQuery extends Query {
        constructor(search, replace, caseInsensitive) {
            super(search, replace, caseInsensitive);
            this.unquoted = search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
        }
        cursor(doc, from = 0, to = doc.length) {
            return new SearchCursor(doc, this.unquoted, from, to, this.caseInsensitive ? x => x.toLowerCase() : undefined);
        }
        nextMatch(doc, curFrom, curTo) {
            let cursor = this.cursor(doc, curTo).nextOverlapping();
            if (cursor.done)
                cursor = this.cursor(doc, 0, curFrom).nextOverlapping();
            return cursor.done ? null : cursor.value;
        }
        // Searching in reverse is, rather than implementing inverted search
        // cursor, done by scanning chunk after chunk forward.
        prevMatchInRange(doc, from, to) {
            for (let pos = to;;) {
                let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.unquoted.length);
                let cursor = this.cursor(doc, start, pos), range = null;
                while (!cursor.nextOverlapping().done)
                    range = cursor.value;
                if (range)
                    return range;
                if (start == from)
                    return null;
                pos -= 10000 /* ChunkSize */;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(_result) { return this.replace; }
        matchAll(doc, limit) {
            let cursor = this.cursor(doc), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = this.cursor(doc, Math.max(0, from - this.unquoted.length), Math.min(to + this.unquoted.length, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
        get valid() { return !!this.search; }
    }
    class RegExpQuery extends Query {
        constructor(search, replace, caseInsensitive) {
            super(search, replace, caseInsensitive);
            this.valid = !!search && validRegExp(search);
        }
        cursor(doc, from = 0, to = doc.length) {
            return new RegExpCursor(doc, this.search, this.caseInsensitive ? { ignoreCase: true } : undefined, from, to);
        }
        nextMatch(doc, curFrom, curTo) {
            let cursor = this.cursor(doc, curTo).next();
            if (cursor.done)
                cursor = this.cursor(doc, 0, curFrom).next();
            return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(doc, from, to) {
            for (let size = 1;; size++) {
                let start = Math.max(from, to - size * 10000 /* ChunkSize */);
                let cursor = this.cursor(doc, start, to), range = null;
                while (!cursor.next().done)
                    range = cursor.value;
                if (range && (start == from || range.from > start + 10))
                    return range;
                if (start == from)
                    return null;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(result) {
            return this.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
                : i == "&" ? result.match[0]
                    : i != "0" && +i < result.match.length ? result.match[i]
                        : m);
        }
        matchAll(doc, limit) {
            let cursor = this.cursor(doc), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = this.cursor(doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    const setQuery = StateEffect.define();
    const togglePanel$1 = StateEffect.define();
    const searchState = StateField.define({
        create() {
            return new SearchState(new StringQuery("", "", false), null);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setQuery))
                    value = new SearchState(effect.value, value.panel);
                else if (effect.is(togglePanel$1))
                    value = new SearchState(value.query, effect.value ? createSearchPanel : null);
            }
            return value;
        },
        provide: f => showPanel.from(f, val => val.panel)
    });
    class SearchState {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark = Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
    const searchHighlighter = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState));
        }
        update(update) {
            let state = update.state.field(searchState);
            if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel || !query.valid)
                return Decoration.none;
            let { view } = this;
            let builder = new RangeSetBuilder();
            for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
                let { from, to } = ranges[i];
                while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)
                    to = ranges[++i].to;
                query.highlight(view.state.doc, from, to, (from, to) => {
                    let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                    builder.add(from, to, selected ? selectedMatchMark : matchMark);
                });
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand(f) {
        return view => {
            let state = view.state.field(searchState, false);
            return state && state.query.valid ? f(view, state) : openSearchPanel(view);
        };
    }
    /**
    Open the search panel if it isn't already open, and move the
    selection to the first match after the current main selection.
    Will wrap around to the start of the document when it reaches the
    end.
    */
    const findNext = searchCommand((view, { query }) => {
        let { from, to } = view.state.selection.main;
        let next = query.nextMatch(view.state.doc, from, to);
        if (!next || next.from == from && next.to == to)
            return false;
        view.dispatch({
            selection: { anchor: next.from, head: next.to },
            scrollIntoView: true,
            effects: announceMatch(view, next)
        });
        return true;
    });
    /**
    Move the selection to the previous instance of the search query,
    before the current main selection. Will wrap past the start
    of the document to start searching at the end again.
    */
    const findPrevious = searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        let range = query.prevMatch(state.doc, from, to);
        if (!range)
            return false;
        view.dispatch({
            selection: { anchor: range.from, head: range.to },
            scrollIntoView: true,
            effects: announceMatch(view, range)
        });
        return true;
    });
    /**
    Select all instances of the search query.
    */
    const selectMatches = searchCommand((view, { query }) => {
        let ranges = query.matchAll(view.state.doc, 1000);
        if (!ranges || !ranges.length)
            return false;
        view.dispatch({
            selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to)))
        });
        return true;
    });
    /**
    Select all instances of the currently selected text.
    */
    const selectSelectionMatches = ({ state, dispatch }) => {
        let sel = state.selection;
        if (sel.ranges.length > 1 || sel.main.empty)
            return false;
        let { from, to } = sel.main;
        let ranges = [], main = 0;
        for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
            if (ranges.length > 1000)
                return false;
            if (cur.value.from == from)
                main = ranges.length;
            ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state.update({ selection: EditorSelection.create(ranges, main) }));
        return true;
    };
    /**
    Replace the current match of the search query.
    */
    const replaceNext = searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        let next = query.nextMatch(state.doc, from, from);
        if (!next)
            return false;
        let changes = [], selection, replacement;
        if (next.from == from && next.to == to) {
            replacement = state.toText(query.getReplacement(next));
            changes.push({ from: next.from, to: next.to, insert: replacement });
            next = query.nextMatch(state.doc, next.from, next.to);
        }
        if (next) {
            let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
            selection = { anchor: next.from - off, head: next.to - off };
        }
        view.dispatch({
            changes, selection,
            scrollIntoView: !!selection,
            effects: next ? announceMatch(view, next) : undefined
        });
        return true;
    });
    /**
    Replace all instances of the search query with the given
    replacement.
    */
    const replaceAll = searchCommand((view, { query }) => {
        let changes = query.matchAll(view.state.doc, 1e9).map(match => {
            let { from, to } = match;
            return { from, to, insert: query.getReplacement(match) };
        });
        if (!changes.length)
            return false;
        view.dispatch({ changes });
        return true;
    });
    function createSearchPanel(view) {
        let { query } = view.state.field(searchState);
        return {
            dom: buildPanel({
                view,
                query,
                updateQuery(q) {
                    if (!query.eq(q)) {
                        query = q;
                        view.dispatch({ effects: setQuery.of(query) });
                    }
                }
            }),
            mount() {
                this.dom.querySelector("[name=search]").select();
            },
            pos: 80
        };
    }
    /**
    Make sure the search panel is open and focused.
    */
    const openSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (state && state.panel) {
            let panel = getPanel(view, createSearchPanel);
            if (!panel)
                return false;
            panel.dom.querySelector("[name=search]").focus();
        }
        else {
            view.dispatch({ effects: [togglePanel$1.of(true), ...state ? [] : [StateEffect.appendConfig.of(searchExtensions)]] });
        }
        return true;
    };
    /**
    Close the search panel.
    */
    const closeSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (!state || !state.panel)
            return false;
        let panel = getPanel(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel$1.of(false) });
        return true;
    };
    /**
    Default search-related key bindings.

     - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
     - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
     - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
     - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
    */
    const searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel" },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel" },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches },
        { key: "Alt-g", run: gotoLine }
    ];
    function buildPanel(conf) {
        function phrase(phrase) { return conf.view.state.phrase(phrase); }
        let searchField = crelt("input", {
            value: conf.query.search,
            placeholder: phrase("Find"),
            "aria-label": phrase("Find"),
            class: "cm-textfield",
            name: "search",
            onchange: update,
            onkeyup: update
        });
        let replaceField = crelt("input", {
            value: conf.query.replace,
            placeholder: phrase("Replace"),
            "aria-label": phrase("Replace"),
            class: "cm-textfield",
            name: "replace",
            onchange: update,
            onkeyup: update
        });
        let caseField = crelt("input", {
            type: "checkbox",
            name: "case",
            checked: !conf.query.caseInsensitive,
            onchange: update
        });
        let reField = crelt("input", {
            type: "checkbox",
            name: "re",
            checked: conf.query instanceof RegExpQuery,
            onchange: update
        });
        function update() {
            conf.updateQuery(new (reField.checked ? RegExpQuery : StringQuery)(searchField.value, replaceField.value, !caseField.checked));
        }
        function keydown(e) {
            if (runScopeHandlers(conf.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious : findNext)(conf.view);
            }
            else if (e.keyCode == 13 && e.target == replaceField) {
                e.preventDefault();
                replaceNext(conf.view);
            }
        }
        function button(name, onclick, content) {
            return crelt("button", { class: "cm-button", name, onclick }, content);
        }
        let panel = crelt("div", { onkeydown: keydown, class: "cm-search" }, [
            searchField,
            button("next", () => findNext(conf.view), [phrase("next")]),
            button("prev", () => findPrevious(conf.view), [phrase("previous")]),
            button("select", () => selectMatches(conf.view), [phrase("all")]),
            crelt("label", null, [caseField, phrase("match case")]),
            crelt("label", null, [reField, phrase("regexp")]),
            crelt("br"),
            replaceField,
            button("replace", () => replaceNext(conf.view), [phrase("replace")]),
            button("replaceAll", () => replaceAll(conf.view), [phrase("replace all")]),
            crelt("button", { name: "close", onclick: () => closeSearchPanel(conf.view), "aria-label": phrase("close") }, ["×"])
        ]);
        return panel;
    }
    const AnnounceMargin = 30;
    const Break = /[\s\.,:;?!]/;
    function announceMatch(view, { from, to }) {
        let lineStart = view.state.doc.lineAt(from).from, lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text = view.state.sliceDoc(start, end);
        if (start != lineStart) {
            for (let i = 0; i < AnnounceMargin; i++)
                if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
                if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${view.state.doc.lineAt(from).number}`);
    }
    const baseTheme$3 = EditorView.baseTheme({
        ".cm-panel.cm-search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button, & label": {
                margin: ".2em .6em .2em 0"
            },
            "& input[type=checkbox]": {
                marginRight: ".2em"
            },
            "& label": {
                fontSize: "80%"
            }
        },
        "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
        "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
        "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
        "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions = [
        searchState,
        Prec.override(searchHighlighter),
        baseTheme$3
    ];

    const ios = typeof navigator != "undefined" &&
        !/Edge\/(\d+)/.exec(navigator.userAgent) && /Apple Computer/.test(navigator.vendor) &&
        (/Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
    const Outside = "-10000px";
    const tooltipPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.inView = true;
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.input = view.state.facet(showTooltip);
            this.tooltips = this.input.filter(t => t);
            this.tooltipViews = this.tooltips.map(tp => this.createTooltip(tp));
        }
        update(update) {
            let input = update.state.facet(showTooltip);
            if (input == this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
            }
            else {
                let tooltips = input.filter(x => x);
                let views = [];
                for (let i = 0; i < tooltips.length; i++) {
                    let tip = tooltips[i], known = -1;
                    if (!tip)
                        continue;
                    for (let i = 0; i < this.tooltips.length; i++) {
                        let other = this.tooltips[i];
                        if (other && other.create == tip.create)
                            known = i;
                    }
                    if (known < 0) {
                        views[i] = this.createTooltip(tip);
                    }
                    else {
                        let tooltipView = views[i] = this.tooltipViews[known];
                        if (tooltipView.update)
                            tooltipView.update(update);
                    }
                }
                for (let t of this.tooltipViews)
                    if (views.indexOf(t) < 0)
                        t.dom.remove();
                this.input = input;
                this.tooltips = tooltips;
                this.tooltipViews = views;
                this.maybeMeasure();
            }
        }
        createTooltip(tooltip) {
            let tooltipView = tooltip.create(this.view);
            tooltipView.dom.classList.add("cm-tooltip");
            // FIXME drop this on the next breaking release
            if (tooltip.class)
                tooltipView.dom.classList.add(tooltip.class);
            tooltipView.dom.style.top = Outside;
            this.view.dom.appendChild(tooltipView.dom);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            return tooltipView;
        }
        destroy() {
            for (let { dom } of this.tooltipViews)
                dom.remove();
        }
        readMeasure() {
            return {
                editor: this.view.dom.getBoundingClientRect(),
                pos: this.tooltips.map(t => this.view.coordsAtPos(t.pos)),
                size: this.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            };
        }
        writeMeasure(measured) {
            let { editor } = measured;
            for (let i = 0; i < this.tooltipViews.length; i++) {
                let tooltip = this.tooltips[i], tView = this.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= editor.top || pos.top >= editor.bottom || pos.right <= editor.left || pos.left >= editor.right) {
                    dom.style.top = Outside;
                    continue;
                }
                let width = size.right - size.left, height = size.bottom - size.top;
                let left = this.view.textDirection == Direction.LTR ? Math.min(pos.left, measured.innerWidth - width)
                    : Math.max(0, pos.left - width);
                let above = !!tooltip.above;
                if (!tooltip.strictSide &&
                    (above ? pos.top - (size.bottom - size.top) < 0 : pos.bottom + (size.bottom - size.top) > measured.innerHeight))
                    above = !above;
                if (ios) {
                    dom.style.top = ((above ? pos.top - height : pos.bottom) - editor.top) + "px";
                    dom.style.left = (left - editor.left) + "px";
                    dom.style.position = "absolute";
                }
                else {
                    dom.style.top = (above ? pos.top - height : pos.bottom) + "px";
                    dom.style.left = left + "px";
                }
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned();
            }
        }
        maybeMeasure() {
            if (this.tooltips.length) {
                if (this.view.inView || this.inView)
                    this.view.requestMeasure(this.measureReq);
                this.inView = this.view.inView;
            }
        }
    }, {
        eventHandlers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$2 = EditorView.baseTheme({
        ".cm-tooltip": {
            position: "fixed",
            zIndex: 100
        },
        "&light .cm-tooltip": {
            border: "1px solid #ddd",
            backgroundColor: "#f5f5f5"
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        }
    });
    /**
    Behavior by which an extension can provide a tooltip to be shown.
    */
    const showTooltip = Facet.define({
        enables: [tooltipPlugin, baseTheme$2]
    });
    const HoverTime = 750, HoverMaxDist = 6;
    class HoverPlugin {
        constructor(view, source, field, setHover) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.lastMouseMove = null;
            this.hoverTimeout = -1;
            this.restartTimeout = -1;
            this.pending = null;
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
            if (this.pending) {
                this.pending = null;
                clearTimeout(this.restartTimeout);
                this.restartTimeout = setTimeout(() => this.startHover(), 20);
            }
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (this.active)
                return;
            let now = Date.now(), lastMove = this.lastMouseMove;
            if (now - lastMove.timeStamp < HoverTime)
                this.hoverTimeout = setTimeout(this.checkHover, HoverTime - (now - lastMove.timeStamp));
            else
                this.startHover();
        }
        startHover() {
            var _a;
            clearTimeout(this.restartTimeout);
            let lastMove = this.lastMouseMove;
            let coords = { x: lastMove.clientX, y: lastMove.clientY };
            let pos = this.view.contentDOM.contains(lastMove.target)
                ? this.view.posAtCoords(coords) : null;
            if (pos == null)
                return;
            let posCoords = this.view.coordsAtPos(pos);
            if (posCoords == null || coords.y < posCoords.top || coords.y > posCoords.bottom ||
                coords.x < posCoords.left - this.view.defaultCharacterWidth ||
                coords.x > posCoords.right + this.view.defaultCharacterWidth)
                return;
            let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
            let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
            let open = this.source(this.view, pos, (coords.x < posCoords.left ? -rtl : rtl));
            if ((_a = open) === null || _a === void 0 ? void 0 : _a.then) {
                let pending = this.pending = { pos };
                open.then(result => {
                    if (this.pending == pending) {
                        this.pending = null;
                        if (result)
                            this.view.dispatch({ effects: this.setHover.of(result) });
                    }
                }, e => logException(this.view.state, e, "hover tooltip"));
            }
            else if (open) {
                this.view.dispatch({ effects: this.setHover.of(open) });
            }
        }
        mousemove(event) {
            var _a;
            this.lastMouseMove = event;
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, HoverTime);
            let tooltip = this.active;
            if (tooltip && !isInTooltip(event.target) || this.pending) {
                let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
                if ((pos == end ? this.view.posAtCoords({ x: event.clientX, y: event.clientY }) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY, HoverMaxDist))) {
                    this.view.dispatch({ effects: this.setHover.of(null) });
                    this.pending = null;
                }
            }
        }
        mouseleave() {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            if (this.active)
                this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
            if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
                return true;
        return false;
    }
    function isOverRange(view, from, to, x, y, margin) {
        let range = document.createRange();
        let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        range.detach();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
            if (dist <= margin)
                return true;
        }
        return false;
    }
    /**
    Enable a hover tooltip, which shows up when the pointer hovers
    over ranges of text. The callback is called when the mouse hovers
    over the document text. It should, if there is a tooltip
    associated with position `pos` return the tooltip description
    (either directly or in a promise). The `side` argument indicates
    on which side of the position the pointer is—it will be -1 if the
    pointer is before the position, 1 if after the position.
    */
    function hoverTooltip(source, options = {}) {
        const setHover = StateEffect.define();
        const hoverState = StateField.define({
            create() { return null; },
            update(value, tr) {
                if (value && (options.hideOnChange && (tr.docChanged || tr.selection)))
                    return null;
                for (let effect of tr.effects)
                    if (effect.is(setHover))
                        return effect.value;
                if (value && tr.docChanged) {
                    let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                    if (newPos == null)
                        return null;
                    let copy = Object.assign(Object.create(null), value);
                    copy.pos = newPos;
                    if (value.end != null)
                        copy.end = tr.changes.mapPos(value.end);
                    return copy;
                }
                return value;
            },
            provide: f => showTooltip.from(f)
        });
        return [
            hoverState,
            ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover))
        ];
    }

    /**
    An instance of this is passed to completion source functions.
    */
    class CompletionContext {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        constructor(
        /**
        The editor state that the completion happens in.
        */
        state, 
        /**
        The position at which the completion is happening.
        */
        pos, 
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            /**
            @internal
            */
            this.abortListeners = [];
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */
        tokenBefore(types) {
            let token = syntaxTree(this.state).resolve(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /**
        Get the match of the given expression directly before the
        cursor.
        */
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.text.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /**
        Yields true when the query has been aborted. Can be useful in
        asynchronous queries to avoid doing work that will be ignored.
        */
        get aborted() { return this.abortListeners == null; }
        /**
        Allows you to register abort handlers, which will be called when
        the query is
        [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
        */
        addEventListener(type, listener) {
            if (type == "abort" && this.abortListeners)
                this.abortListeners.push(listener);
        }
    }
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [span, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, span } : null;
        };
    }
    /**
    Wrap the given completion source so that it will not fire when the
    cursor is in a syntax node with one of the given names.
    */
    function ifNotIn(nodes, source) {
        return (context) => {
            for (let pos = syntaxTree(context.state).resolve(context.pos, -1); pos; pos = pos.parent)
                if (nodes.indexOf(pos.name) > -1)
                    return null;
            return source(context);
        };
    }
    class Option {
        constructor(completion, source, match) {
            this.completion = completion;
            this.source = source;
            this.match = match;
        }
    }
    function cur(state) { return state.selection.main.head; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    function applyCompletion(view, option) {
        let apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string") {
            view.dispatch({
                changes: { from: result.from, to: result.to, insert: apply },
                selection: { anchor: result.from + apply.length }
            });
        }
        else {
            apply(view, option.completion, result.from, result.to);
        }
    }
    const SourceCache = new WeakMap();
    function asSource(source) {
        if (!Array.isArray(source))
            return source;
        let known = SourceCache.get(source);
        if (!known)
            SourceCache.set(source, known = completeFromList(source));
        return known;
    }

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return [0];
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0);
                return first == chars[0] ? [0, 0, codePointSize(first)]
                    : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return [0, 0, this.pattern.length];
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match
            let preciseTo = 0;
            // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match
            let byWordTo = 0, byWordFolded = false;
            // If we've found a partial adjacent match, these track its state
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            let hasLower = /[a-z]/.test(word);
            // Go over the option's text, scanning for the various kinds of matches
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
                if ((type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) &&
                    (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true))))
                    byWord[byWordTo++] = i;
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return [-200 /* CaseFold */, 0, adjacentEnd];
            if (direct > -1)
                return [-700 /* NotStart */, direct, direct + this.pattern.length];
            if (adjacentTo == len)
                return [-200 /* CaseFold */ + -700 /* NotStart */, adjacentStart, adjacentEnd];
            if (byWordTo == len)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */, byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [score], i = 1;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return result;
        }
    }

    const completionConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                override: null,
                maxRenderedOptions: 100,
                defaultKeymap: true
            }, {
                defaultKeymap: (a, b) => a && b
            });
        }
    });

    const MaxInfoWidth = 300;
    const baseTheme$1 = EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    cursor: "pointer",
                    padding: "1px 1em 1px 3px",
                    lineHeight: 1.2
                },
                "& > li[aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                }
            }
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: MaxInfoWidth + "px",
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    function createListBox(options, id, range) {
        const ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        for (let i = range.from; i < range.to; i++) {
            let { completion, match } = options[i];
            const li = ul.appendChild(document.createElement("li"));
            li.id = id + "-" + i;
            let icon = li.appendChild(document.createElement("div"));
            icon.classList.add("cm-completionIcon");
            if (completion.type)
                icon.classList.add("cm-completionIcon-" + completion.type);
            icon.setAttribute("aria-hidden", "true");
            let labelElt = li.appendChild(document.createElement("span"));
            labelElt.className = "cm-completionLabel";
            let { label, detail } = completion, off = 0;
            for (let j = 1; j < match.length;) {
                let from = match[j++], to = match[j++];
                if (from > off)
                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                let span = labelElt.appendChild(document.createElement("span"));
                span.appendChild(document.createTextNode(label.slice(from, to)));
                span.className = "cm-completionMatchedText";
                off = to;
            }
            if (off < label.length)
                labelElt.appendChild(document.createTextNode(label.slice(off)));
            if (detail) {
                let detailElt = li.appendChild(document.createElement("span"));
                detailElt.className = "cm-completionDetail";
                detailElt.textContent = detail;
            }
            li.setAttribute("role", "option");
        }
        if (range.from)
            ul.classList.add("cm-completionListIncompleteTop");
        if (range.to < options.length)
            ul.classList.add("cm-completionListIncompleteBottom");
        return ul;
    }
    function createInfoDialog(option, view) {
        let dom = document.createElement("div");
        dom.className = "cm-tooltip cm-completionInfo";
        let { info } = option.completion;
        if (typeof info == "string") {
            dom.textContent = info;
        }
        else {
            let content = info(option.completion);
            if (content.then)
                content.then(node => dom.appendChild(node), e => logException(view.state, e, "completion info"));
            else
                dom.appendChild(content);
        }
        return dom;
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField) {
            this.view = view;
            this.stateField = stateField;
            this.info = null;
            this.placeInfo = {
                read: () => this.measureInfo(),
                write: (pos) => this.positionInfo(pos),
                key: this
            };
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.className = "cm-tooltip-autocomplete";
            this.dom.addEventListener("mousedown", (e) => {
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.list = this.dom.appendChild(createListBox(options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfo);
            });
        }
        mount() { this.updateSel(); }
        update(update) {
            if (update.state.field(this.stateField) != update.startState.field(this.stateField))
                this.updateSel();
        }
        positioned() {
            if (this.info)
                this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.list.remove();
                this.list = this.dom.appendChild(createListBox(open.options, cState.id, this.range));
                this.list.addEventListener("scroll", () => {
                    if (this.info)
                        this.view.requestMeasure(this.placeInfo);
                });
            }
            if (this.updateSelectedOption(open.selected)) {
                if (this.info) {
                    this.info.remove();
                    this.info = null;
                }
                let option = open.options[open.selected];
                if (option.completion.info) {
                    this.info = this.dom.appendChild(createInfoDialog(option, this.view));
                    this.view.requestMeasure(this.placeInfo);
                }
            }
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel)
                return null;
            let rect = this.dom.getBoundingClientRect();
            let top = sel.getBoundingClientRect().top - rect.top;
            if (top < 0 || top > this.list.clientHeight - 10)
                return null;
            let left = this.view.textDirection == Direction.RTL;
            let spaceLeft = rect.left, spaceRight = innerWidth - rect.right;
            if (left && spaceLeft < Math.min(MaxInfoWidth, spaceRight))
                left = false;
            else if (!left && spaceRight < Math.min(MaxInfoWidth, spaceLeft))
                left = true;
            return { top, left };
        }
        positionInfo(pos) {
            if (this.info && pos) {
                this.info.style.top = pos.top + "px";
                this.info.classList.toggle("cm-completionInfo-left", pos.left);
                this.info.classList.toggle("cm-completionInfo-right", !pos.left);
            }
        }
    }
    // We allocate a new function instance every time the completion
    // changes to force redrawing/repositioning of the tooltip
    function completionTooltip(stateField) {
        return (view) => new CompletionTooltip(view, stateField);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
            container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
            container.scrollTop += self.bottom - parent.bottom;
    }

    const MaxOptions = 300;
    // Used to pick a preferred option when two options with the same
    // label occur in the result.
    function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
            (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
        let options = [];
        for (let a of active)
            if (a.hasResult()) {
                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                for (let option of a.result.options)
                    if (match = matcher.match(option.label)) {
                        if (option.boost != null)
                            match[0] += option.boost;
                        options.push(new Option(option, a, match));
                    }
            }
        options.sort(cmpOption);
        let result = [], prev = null;
        for (let opt of options.sort(cmpOption)) {
            if (result.length == MaxOptions)
                break;
            if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail)
                result.push(opt);
            else if (score(opt.completion) > score(prev))
                result[result.length - 1] = opt;
            prev = opt.completion;
        }
        return result;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state, id, prev) {
            let options = sortOptions(active, state);
            if (!options.length)
                return null;
            let selected = 0;
            if (prev && prev.selected) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length && !selected; i++) {
                    if (options[i].completion == selectedValue)
                        selected = i;
                }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), {
                pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                create: completionTooltip(completionState)
            }, prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override ||
                state.languageDataAt("autocomplete", cur(state)).map(asSource);
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) || new ActiveSource(source, 0 /* Inactive */, false);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open)
                : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))
                active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */, false) : a);
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : null; }
        get attrs() { return this.open ? this.open.attrs : baseAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult)
                iA++;
            while (iB < b.length && !b[iB].hasResult)
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    function makeAttrs(id, selected) {
        return {
            "aria-autocomplete": "list",
            "aria-activedescendant": id + "-" + selected,
            "aria-owns": id
        };
    }
    const baseAttrs = { "aria-autocomplete": "list" }, none = [];
    function cmpOption(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
            return dScore;
        let lA = a.completion.label, lB = b.completion.label;
        return lA < lB ? -1 : lA == lB ? 0 : 1;
    }
    class ActiveSource {
        constructor(source, state, explicit) {
            this.source = source;
            this.state = state;
            this.explicit = explicit;
        }
        hasResult() { return false; }
        update(tr, conf) {
            let event = tr.annotation(Transaction.userEvent), value = this;
            if (event == "input" || event == "delete")
                value = value.handleUserEvent(tr, event, conf);
            else if (tr.docChanged)
                value = value.handleChange(tr);
            else if (tr.selection && value.state != 0 /* Inactive */)
                value = new ActiveSource(value.source, 0 /* Inactive */, false);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, 1 /* Pending */, effect.value);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, 0 /* Inactive */, false);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        handleUserEvent(_tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this : new ActiveSource(this.source, 1 /* Pending */, false);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */, false) : this;
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicit, result, from, to, span) {
            super(source, 2 /* Result */, explicit);
            this.result = result;
            this.from = from;
            this.to = to;
            this.span = span;
        }
        hasResult() { return true; }
        handleUserEvent(tr, type, conf) {
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if ((this.explicit ? pos < from : pos <= from) || pos > to)
                return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */, false);
            if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to))))
                return new ActiveResult(this.source, this.explicit, this.result, from, to, this.span);
            return new ActiveSource(this.source, 1 /* Pending */, this.explicit);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to)
                ? new ActiveSource(this.source, 0 /* Inactive */, false)
                : new ActiveResult(this.source, this.explicit, this.result, tr.changes.mapPos(this.from), tr.changes.mapPos(this.to, 1), this.span);
        }
        map(mapping) {
            return new ActiveResult(this.source, this.explicit, this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
        }
    }
    const startCompletionEffect = StateEffect.define();
    const closeCompletionEffect = StateEffect.define();
    const setActiveEffect = StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.hasResult() && !mapping.empty ? s.map(mapping) : s); }
    });
    const setSelectedEffect = StateEffect.define();
    const completionState = StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: f => [
            showTooltip.from(f, val => val.tooltip),
            EditorView.contentAttributes.from(f, state => state.attrs)
        ]
    });

    const CompletionInteractMargin = 75;
    /**
    Returns a command that moves the completion selection forward or
    backward by the given amount.
    */
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = view.dom.querySelector(".cm-tooltip-autocomplete")))
                step = Math.max(2, Math.floor(tooltip.offsetHeight / tooltip.firstChild.offsetHeight));
            let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /**
    Accept the current completion.
    */
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
            return false;
        applyCompletion(view, cState.open.options[cState.open.selected]);
        return true;
    };
    /**
    Explicitly start autocompletion.
    */
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /**
    Close the currently active completion.
    */
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(source, context) {
            this.source = source;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
    const completionPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.composing = 0 /* None */;
            for (let active of view.state.field(completionState).active)
                if (active.state == 1 /* Pending */)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                let event = tr.annotation(Transaction.userEvent);
                return (tr.selection || tr.docChanged) && event != "input" && event != "delete";
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.source == a.source))
                ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
            if (this.composing != 0 /* None */)
                for (let tr of update.transactions) {
                    if (tr.annotation(Transaction.userEvent) == "input")
                        this.composing = 2 /* Changed */;
                    else if (this.composing == 2 /* Changed */ && tr.selection)
                        this.composing = 3 /* ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.state == 1 /* Pending */ && !this.running.some(r => r.source == active.source))
                    this.startQuery(active);
            }
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicit);
            let pending = new RunningQuery(active.source, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let active = new ActiveResult(query.source, query.context.explicit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state), query.done.span ? ensureAnchor(query.done.span, true) : null);
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = this.view.state.field(completionState).active.find(a => a.source == query.source);
                if (current && current.state == 1 /* Pending */) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.source, 0 /* Inactive */, false);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (active.state != 1 /* Pending */)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            compositionstart() {
                this.composing = 1 /* Started */;
            },
            compositionend() {
                if (this.composing == 3 /* ChangedAndMoved */)
                    this.view.dispatch({ effects: startCompletionEffect.of(false) });
                this.composing = 0 /* None */;
            }
        }
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, name = m[2] || m[3], found = -1;
                    for (let i = 0; i < fields.length; i++) {
                        if (name ? fields[i].name == name : seq != null && fields[i].seq == seq)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name: name || null });
                        found = i;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
                }
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker = Decoration.widget({ widget: new class extends WidgetType {
            toDOM() {
                let span = document.createElement("span");
                span.className = "cm-snippetFieldPosition";
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = Decoration.mark({ class: "cm-snippetField" });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            return new ActiveSnippet(this.ranges.map(r => r.map(changes)), this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = StateEffect.define();
    const snippetState = StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /**
    Convert a snippet template to a function that can apply it.
    Snippets are written using syntax like this:

        "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

    Each `${}` placeholder (you may also use `#{}`) indicates a field
    that the user can fill in. Its name, if any, will be the default
    content for the field.

    When the snippet is activated by calling the returned function,
    the code is inserted at the given position. Newlines in the
    template are indented by the indentation of the start line, plus
    one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
    the newline.

    On activation, (all instances of) the first field are selected.
    The user can move between fields with Tab and Shift-Tab as long as
    the fields are active. Moving to the last field or moving the
    cursor out of the current field deactivates the fields.

    The order of fields defaults to textual order, but you can add
    numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    a custom order.
    */
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, _completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let spec = { changes: { from, to, insert: Text.of(text) } };
            if (ranges.length)
                spec.selection = fieldSelection(ranges, 0);
            if (ranges.length > 1) {
                let effects = spec.effects = [setActive.of(new ActiveSnippet(ranges, 0))];
                if (editor.state.field(snippetState, false) === undefined)
                    effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$1]));
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
            }));
            return true;
        };
    }
    /**
    A command that clears the active snippet, if any.
    */
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    /**
    Move to the next snippet field, if available.
    */
    const nextSnippetField = moveField(1);
    /**
    Move to the previous snippet field, if available.
    */
    const prevSnippetField = moveField(-1);
    const defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
    ];
    /**
    A facet that can be used to configure the key bindings used by
    snippets. The default binds Tab to
    [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
    [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
    to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
    */
    const snippetKeymap = Facet.define({
        combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
    });
    const addSnippetKeymap = Prec.override(keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
    /**
    Create a completion from a snippet. Returns an object with the
    properties from `completion`, plus an `apply` function that
    applies the snippet.
    */
    function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
    }
    const snippetPointerHandler = EditorView.domEventHandlers({
        mousedown(event, view) {
            let active = view.state.field(snippetState, false), pos;
            if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
                return false;
            let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
            if (!match || match.field == active.active)
                return false;
            view.dispatch({
                selection: fieldSelection(active.ranges, match.field),
                effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
            });
            return true;
        }
    });

    /**
    Returns an extension that enables autocompletion.
    */
    function autocompletion(config = {}) {
        return [
            completionState,
            completionConfig.of(config),
            completionPlugin,
            completionKeymapExt,
            baseTheme$1
        ];
    }
    /**
    Basic keybindings for autocompletion.

     - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
     - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
     - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
     - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
    */
    const completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: moveCompletionSelection(true) },
        { key: "ArrowUp", run: moveCompletionSelection(false) },
        { key: "PageDown", run: moveCompletionSelection(true, "page") },
        { key: "PageUp", run: moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = Prec.override(keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

    /// Comment or uncomment the current selection. Will use line comments
    /// if available, otherwise falling back to block comments.
    const toggleComment = target => {
        let config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            let tr = f(option, state.selection.ranges, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /// Comment or uncomment the current selection using line comments.
    /// The line comment syntax is taken from the
    /// [`commentTokens`](#comment.CommentTokens) [language
    /// data](#state.EditorState.languageDataAt).
    const toggleLineComment = command(changeLineComment, 0 /* Toggle */);
    /// Comment or uncomment the current selection using block comments.
    /// The block comment syntax is taken from the
    /// [`commentTokens`](#comment.CommentTokens) [language
    /// data](#state.EditorState.languageDataAt).
    const toggleBlockComment = command(changeBlockComment, 0 /* Toggle */);
    /// Default key bindings for this package.
    ///
    ///  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](#comment.toggleComment).
    ///  - Shift-Alt-a: [`toggleBlockComment`](#comment.toggleBlockComment).
    const commentKeymap = [
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
    ];
    function getConfig(state, pos = state.selection.main.head) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /// Determines if the given range is block-commented in the given
    /// state.
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, ranges, state) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
            let index = 0;
            return state.changeByRange(range => {
                let { open, close } = tokens[index++];
                if (comments[index])
                    return { range };
                let shift = open.length + 1;
                return {
                    changes: [{ from: range.from, insert: open + " " }, { from: range.to, insert: " " + close }],
                    range: EditorSelection.range(range.anchor + shift, range.head + shift)
                };
            });
        }
        else if (option != 1 /* Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, ranges, state) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let token = getConfig(state, pos).line;
                    if (!token)
                        continue;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        else if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0)) {
            let changes = [];
            for (let { line, comment, token, indent, single } of lines)
                if (comment != indent && (single || /\S/.test(line.text)))
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        return null;
    }

    // Don't compute precise column positions for line offsets above this
    // (since it could get expensive). Assume offset==column for them.
    const MaxOff = 2000;
    function rectangleFor(state, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
            let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                if (line.length <= endOff)
                    ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
            }
        }
        else {
            let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i), str = line.length > MaxOff ? line.text.slice(0, 2 * endCol) : line.text;
                let start = findColumn(str, 0, startCol, state.tabSize), end = findColumn(str, 0, endCol, state.tabSize);
                if (!start.leftOver)
                    ranges.push(EditorSelection.range(line.from + start.offset, line.from + end.offset));
            }
        }
        return ranges;
    }
    function absoluteColumn(view, x) {
        let ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
    }
    function getPos(view, event) {
        let offset = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (offset == null)
            return null;
        let line = view.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1
            : off == line.length ? absoluteColumn(view, event.clientX)
                : countColumn(line.text.slice(0, offset - line.from), 0, view.state.tabSize);
        return { line: line.number, col, off };
    }
    function rectangleSelectionStyle(view, event) {
        let start = getPos(view, event), startSel = view.state.selection;
        if (!start)
            return null;
        return {
            update(update) {
                if (update.docChanged) {
                    let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                    let newLine = update.state.doc.lineAt(newStart);
                    start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, _extend, multiple) {
                let cur = getPos(view, event);
                if (!cur)
                    return startSel;
                let ranges = rectangleFor(view.state, start, cur);
                if (!ranges.length)
                    return startSel;
                if (multiple)
                    return EditorSelection.create(ranges.concat(startSel.ranges));
                else
                    return EditorSelection.create(ranges);
            }
        };
    }
    /// Create an extension that enables rectangular selections. By
    /// default, it will react to left mouse drag with the Alt key held
    /// down. When such a selection occurs, the text within the rectangle
    /// that was dragged over will be selected, as one selection
    /// [range](#state.SelectionRange) per line.
    function rectangularSelection(options) {
        let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
        return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
    }

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostic != diagnostic)
                return;
            found = new SelectedDiagnostic(from, to, spec.diagnostic);
            return false;
        });
        return found;
    }
    function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([
            lintState,
            EditorView.decorations.compute([lintState], state => {
                let { selected, panel } = state.field(lintState);
                return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                    activeMark.range(selected.from, selected.to)
                ]);
            }),
            hoverTooltip(lintTooltip),
            baseTheme
        ]));
    }
    /**
    State effect that is used to update the current set of
    diagnostics.
    */
    function setDiagnostics(state, diagnostics) {
        return {
            effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
        };
    }
    const setDiagnosticsEffect = StateEffect.define();
    const togglePanel = StateEffect.define();
    const movePanelSelection = StateEffect.define();
    const lintState = StateField.define({
        create() {
            return new LintState(Decoration.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged) {
                let mapped = value.diagnostics.map(tr.changes), selected = null;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                value = new LintState(mapped, value.panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    let ranges = Decoration.set(effect.value.map((d) => {
                        return d.from < d.to
                            ? Decoration.mark({
                                attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
                                diagnostic: d
                            }).range(d.from, d.to)
                            : Decoration.widget({
                                widget: new DiagnosticWidget(d),
                                diagnostic: d
                            }).range(d.from);
                    }));
                    value = new LintState(ranges, value.panel, findDiagnostic(ranges));
                }
                else if (effect.is(togglePanel)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: f => [showPanel.from(f, val => val.panel),
            EditorView.decorations.from(f, s => s.diagnostics)]
    });
    const activeMark = Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos, side) {
        let { diagnostics } = view.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
            if (pos >= from && pos <= to &&
                (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
                found.push(spec.diagnostic);
                stackStart = Math.min(from, stackStart);
                stackEnd = Math.max(to, stackEnd);
            }
        });
        if (!found.length)
            return null;
        return {
            pos: stackStart,
            end: stackEnd,
            above: view.state.doc.lineAt(stackStart).to < stackEnd,
            create() {
                return { dom: crelt("ul", { class: "cm-tooltip-lint" }, found.map(d => renderDiagnostic(view, d, false))) };
            }
        };
    }
    /**
    Command to open and focus the lint panel.
    */
    const openLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });
        let panel = getPanel(view, LintPanel.open);
        if (panel)
            panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
    };
    /**
    Command to close the lint panel, when open.
    */
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    /**
    Move the selection to the next diagnostic.
    */
    const nextDiagnostic = (view) => {
        let field = view.state.field(lintState, false);
        if (!field)
            return false;
        let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
            next = field.diagnostics.iter(0);
            if (!next.value || next.from == sel.from && next.to == sel.to)
                return false;
        }
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
    };
    /**
    A set of default key bindings for the lint functionality.

    - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
    - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
    */
    const lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel },
        { key: "F8", run: nextDiagnostic }
    ];
    const LintDelay = 500;
    /**
    Given a diagnostic source, this function returns an extension that
    enables linting with that source. It will be called whenever the
    editor is idle (after its content changed).
    */
    function linter(source) {
        return ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.lintTime = Date.now() + LintDelay;
                this.set = true;
                this.run = this.run.bind(this);
                setTimeout(this.run, LintDelay);
            }
            run() {
                let now = Date.now();
                if (now < this.lintTime - 10) {
                    setTimeout(this.run, this.lintTime - now);
                }
                else {
                    this.set = false;
                    let { state } = this.view;
                    Promise.resolve(source(this.view)).then(annotations => {
                        var _a, _b;
                        if (this.view.state.doc == state.doc &&
                            (annotations.length || ((_b = (_a = this.view.state.field(lintState, false)) === null || _a === void 0 ? void 0 : _a.diagnostics) === null || _b === void 0 ? void 0 : _b.size)))
                            this.view.dispatch(setDiagnostics(this.view.state, annotations));
                    }, error => { logException(this.view.state, error); });
                }
            }
            update(update) {
                if (update.docChanged) {
                    this.lintTime = Date.now() + LintDelay;
                    if (!this.set) {
                        this.set = true;
                        setTimeout(this.run, LintDelay);
                    }
                }
            }
        });
    }
    function assignKeys(actions) {
        let assigned = [];
        if (actions)
            actions: for (let { name } of actions) {
                for (let i = 0; i < name.length; i++) {
                    let ch = name[i];
                    if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                        assigned.push(ch);
                        continue actions;
                    }
                }
                assigned.push("");
            }
        return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
            let click = (e) => {
                e.preventDefault();
                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                    action.apply(view, found.from, found.to);
            };
            let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
            let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
                crelt("u", name.slice(keyIndex, keyIndex + 1)),
                name.slice(keyIndex + 1)];
            return crelt("button", {
                class: "cm-diagnosticAction",
                onclick: click,
                onmousedown: click,
                "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
            }, nameElt);
        }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
        constructor(diagnostic) {
            super();
            this.diagnostic = diagnostic;
        }
        eq(other) { return other.diagnostic == this.diagnostic; }
        toDOM() {
            return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic, true);
            this.dom.id = this.id;
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            let onkeydown = (event) => {
                if (event.keyCode == 27) { // Escape
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) { // Enter
                    this.view.focus();
                }
                else if (event.keyCode >= 65 && event.keyCode <= 90 && this.items.length) { // A-Z
                    let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                    for (let i = 0; i < keys.length; i++)
                        if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                            if (found)
                                diagnostic.actions[i].apply(view, found.from, found.to);
                        }
                }
                else {
                    return;
                }
                event.preventDefault();
            };
            let onclick = (event) => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            };
            this.list = crelt("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown,
                onclick
            });
            this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
                name: "close",
                "aria-label": this.view.state.phrase("close"),
                onclick: () => closeLintPanel(this.view)
            }, "×"));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                let found = -1, item;
                for (let j = i; j < this.items.length; j++)
                    if (this.items[j].diagnostic == spec.diagnostic) {
                        found = j;
                        break;
                    }
                if (found < 0) {
                    item = new PanelItem(this.view, spec.diagnostic);
                    this.items.splice(i, 0, item);
                    needsSync = true;
                }
                else {
                    item = this.items[found];
                    if (found > i) {
                        this.items.splice(i, found - i);
                        needsSync = true;
                    }
                }
                if (selected && item.diagnostic == selected.diagnostic) {
                    if (!item.dom.hasAttribute("aria-selected")) {
                        item.dom.setAttribute("aria-selected", "true");
                        newSelectedItem = item;
                    }
                }
                else if (item.dom.hasAttribute("aria-selected")) {
                    item.dom.removeAttribute("aria-selected");
                }
                i++;
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        if (sel.top < panel.top)
                            this.list.scrollTop -= panel.top - sel.top;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += sel.bottom - panel.bottom;
                    }
                });
            }
            else if (!this.items.length) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
            if (!this.list.firstChild)
                this.list.appendChild(renderDiagnostic(this.view, {
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }, true));
        }
        moveSelection(selectedIndex) {
            if (this.items.length == 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        static open(view) { return new LintPanel(view); }
    }
    function underline(color) {
        if (typeof btoa != "function")
            return "none";
        let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="6" height="3">
    <path d="m0 3 l2 -2 l1 0 l2 2 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>
  </svg>`;
        return `url('data:image/svg+xml;base64,${btoa(svg)}')`;
    }
    const baseTheme = EditorView.baseTheme({
        ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px"
        },
        ".cm-diagnosticSource": {
            fontSize: "70%",
            opacity: .7
        },
        ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x"
        },
        ".cm-lintRange-error": { backgroundImage: underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: underline("orange") },
        ".cm-lintRange-info": { backgroundImage: underline("#999") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-lintPoint": {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
            "&:after": { borderBottomColor: "#999" }
        },
        ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd",
                    "& u": { textDecoration: "underline" }
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                "& u": { textDecoration: "none" },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        },
        ".cm-tooltip.cm-tooltip-lint": {
            padding: 0,
            margin: 0
        }
    });

    /// This is an extension value that just pulls together a whole lot of
    /// extensions that you might want in a basic editor. It is meant as a
    /// convenient helper to quickly set up CodeMirror without installing
    /// and importing a lot of packages.
    ///
    /// Specifically, it includes...
    ///
    ///  - [the default command bindings](#commands.defaultKeymap)
    ///  - [line numbers](#gutter.lineNumbers)
    ///  - [special character highlighting](#view.highlightSpecialChars)
    ///  - [the undo history](#history.history)
    ///  - [a fold gutter](#fold.foldGutter)
    ///  - [custom selection drawing](#view.drawSelection)
    ///  - [multiple selections](#state.EditorState^allowMultipleSelections)
    ///  - [reindentation on input](#language.indentOnInput)
    ///  - [the default highlight style](#highlight.defaultHighlightStyle) (as fallback)
    ///  - [bracket matching](#matchbrackets.bracketMatching)
    ///  - [bracket closing](#closebrackets.closeBrackets)
    ///  - [autocompletion](#autocomplete.autocompletion)
    ///  - [rectangular selection](#rectangular-selection.rectangularSelection)
    ///  - [active line highlighting](#view.highlightActiveLine)
    ///  - [selection match highlighting](#search.highlightSelectionMatches)
    ///  - [search](#search.searchKeymap)
    ///  - [commenting](#comment.commentKeymap)
    ///  - [linting](#lint.lintKeymap)
    ///
    /// (You'll probably want to add some language package to your setup
    /// too.)
    ///
    /// This package does not allow customization. The idea is that, once
    /// you decide you want to configure your editor more precisely, you
    /// take this package's source (which is just a bunch of imports and
    /// an array literal), copy it into your own code, and adjust it as
    /// desired.
    const basicSetup = ({showLineNumbers}) => {
      let bs = [
        highlightSpecialChars(),
        history(),
        foldGutter(),
        drawSelection(),
        EditorState.allowMultipleSelections.of(true),
        indentOnInput(),
        defaultHighlightStyle.fallback,
        bracketMatching(),
        closeBrackets(),
        autocompletion(),
        rectangularSelection(),
        highlightActiveLine(),
        highlightSelectionMatches(),
        keymap.of([
          ...closeBracketsKeymap,
          ...defaultKeymap,
          ...searchKeymap,
          ...historyKeymap,
          ...foldKeymap,
          ...commentKeymap,
          ...completionKeymap,
          ...lintKeymap
        ])
      ];

      if(showLineNumbers){
        bs = [lineNumbers(), ...bs];
      }

      return bs;
    };

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    class Stack {
        /// @internal
        constructor(
        /// A the parse that this stack is part of @internal
        p, 
        /// Holds state, pos, value stack pos (15 bits array index, 15 bits
        /// buffer index) triplets for all but the top state
        /// @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        /// @internal
        curContext, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.parent = parent;
        }
        /// @internal
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null);
        }
        /// The stack's current [context](#lezer.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
            let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            let { parser } = this.p;
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                this.reduceContext(type);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            let start = this.stack[base - 2];
            let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start, end, size = 4, isReduce = false) {
            if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /// @internal
        shift(action, next, nextEnd) {
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                let start = this.pos, nextState = action, { parser } = this.p;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
                this.shiftContext(next);
            }
            else { // Shift-and-stay, which means this is a skipped token
                if (next <= this.p.parser.maxNode)
                    this.buffer.push(next, this.pos, nextEnd, 4);
                this.pos = nextEnd;
            }
        }
        // Apply an action
        /// @internal
        apply(action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        }
        // Add a prebuilt node into the buffer. This may be a reused node or
        // the result of running a nested parser.
        /// @internal
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 200 /* Token */;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.top, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        }
        /// Find the start position of the rule that is currently being parsed.
        get ruleStart() {
            for (let state = this.state, base = this.stack.length;;) {
                let force = this.p.parser.stateSlot(state, 5 /* ForcedReduce */);
                if (!(force & 65536 /* ReduceFlag */))
                    return 0;
                base -= 3 * (force >> 19 /* ReduceDepthShift */);
                if ((force & 65535 /* ValueMask */) < this.p.parser.minRepeatTerm)
                    return this.stack[base + 1];
                state = this.stack[base];
            }
        }
        /// Find the start position of an instance of any of the given term
        /// types, or return `null` when none of them are found.
        ///
        /// **Note:** this is only reliable when there is at least some
        /// state that unambiguously matches the given rule on the stack.
        /// I.e. if you have a grammar like this, where the difference
        /// between `a` and `b` is only apparent at the third token:
        ///
        ///     a { b | c }
        ///     b { "x" "y" "x" }
        ///     c { "x" "y" "z" }
        ///
        /// Then a parse state after `"x"` will not reliably tell you that
        /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check
        /// for either of those two rules (assuming that `a` isn't part of
        /// some rule that includes other things starting with `"x"`).
        ///
        /// When `before` is given, this keeps scanning up the stack until
        /// it finds a match that starts before that position.
        ///
        /// Note that you have to be careful when using this in tokenizers,
        /// since it's relatively easy to introduce data dependencies that
        /// break incremental parsing by using this method.
        startOf(types, before) {
            let state = this.state, frame = this.stack.length, { parser } = this.p;
            for (;;) {
                let force = parser.stateSlot(state, 5 /* ForcedReduce */);
                let depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;
                if (types.indexOf(term) > -1) {
                    let base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];
                    if (before == null || before > pos)
                        return pos;
                }
                if (frame == 0)
                    return null;
                if (depth == 0) {
                    frame -= 3;
                    state = this.stack[frame];
                }
                else {
                    frame -= 3 * (depth - 1);
                    state = parser.getGoto(this.stack[frame - 3], term, true);
                }
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.pushState(s, this.pos);
                stack.shiftContext(nextStates[i]);
                stack.score -= 200 /* Token */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
            let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            if (!this.p.parser.validAction(this.state, reduce)) {
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reduce(reduce);
            return true;
        }
        /// @internal
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
            return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                !parser.stateSlot(this.state, 4 /* DefaultReduce */);
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /// Get the parser used by this stack.
        get parser() { return this.p.parser; }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this));
        }
        reduceContext(term) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this));
        }
        /// @internal
        emitContext() {
            let cx = this.curContext;
            if (!cx.tracker.strict)
                return;
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -2)
                this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.hash(context);
        }
    }
    var Recover;
    (function (Recover) {
        Recover[Recover["Token"] = 200] = "Token";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(stack) {
            this.stack = stack;
            this.top = stack.state;
            this.rest = stack.stack;
            this.offset = this.rest.length;
        }
        reduce(action) {
            let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.rest == this.stack.stack)
                    this.rest = this.rest.slice();
                this.rest.push(this.top, 0, 0);
                this.offset += 3;
            }
            else {
                this.offset -= (depth - 1) * 3;
            }
            let goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true);
            this.top = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack) {
            return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    /// Tokenizers write the tokens they read into instances of this class.
    class Token {
        constructor() {
            /// The start of the token. This is set by the parser, and should not
            /// be mutated by the tokenizer.
            this.start = -1;
            /// This starts at -1, and should be updated to a term id when a
            /// matching token is found.
            this.value = -1;
            /// When setting `.value`, you should also set `.end` to the end
            /// position of the token. (You'll usually want to use the `accept`
            /// method.)
            this.end = -1;
        }
        /// Accept a token, setting `value` and `end` to the given values.
        accept(value, end) {
            this.value = value;
            this.end = end;
        }
    }
    /// @internal
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, token, stack) { readToken(this.data, input, token, stack, this.id); }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /// Exports that are used for `@external tokens` in the grammar should
    /// export an instance of this class.
    class ExternalTokenizer {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream and a token object,
        /// [fills](#lezer.Token.accept) the token object if it recognizes a
        /// token. `token.start` should be used as the start position to
        /// scan from.
        constructor(
        /// @internal
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `token` when it matches a token.
    function readToken(data, input, token, stack, group) {
        let state = 0, groupMask = 1 << group, dialect = stack.p.parser.dialect;
        scan: for (let pos = token.start;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {
                        token.accept(term, pos);
                        break;
                    }
                }
            let next = input.get(pos++);
            // Do a binary search on the state's edges
            for (let low = 0, high = data[state + 2]; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                let digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // FIXME find some way to reduce recovery work done when the input
    // doesn't match the grammar at all.
    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to <= pos : cursor.from >= pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments) {
            this.fragments = fragments;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                else if (start == pos && start + next.length <= this.safeTo) {
                    return start == pos && start >= this.safeFrom ? next : null;
                }
                if (next instanceof TreeBuffer) {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
                else {
                    this.index[last]++;
                    if (start + next.length >= pos) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
            }
        }
    }
    class CachedToken extends Token {
        constructor() {
            super(...arguments);
            this.extended = -1;
            this.mask = 0;
            this.context = 0;
        }
        clear(start) {
            this.start = start;
            this.value = this.extended = -1;
        }
    }
    const dummyToken = new Token;
    class TokenCache {
        constructor(parser) {
            this.tokens = [];
            this.mainToken = dummyToken;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack, input) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack, input);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.value != 0 /* Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (!main) {
                main = dummyToken;
                main.start = stack.pos;
                if (stack.pos == input.length)
                    main.accept(stack.p.parser.eofTerm, stack.pos);
                else
                    main.accept(0 /* Err */, stack.pos + 1);
            }
            this.mainToken = main;
            return this.actions;
        }
        updateCachedToken(token, tokenizer, stack, input) {
            token.clear(stack.pos);
            tokenizer.token(input, token, stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](input.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else if (stack.pos == input.length) {
                token.accept(stack.p.parser.eofTerm, stack.pos);
            }
            else {
                token.accept(0 /* Err */, stack.pos + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair(data, i + 1), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    var Rec;
    (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        Rec[Rec["MinBufferLengthPrune"] = 200] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
    })(Rec || (Rec = {}));
    /// A parse context can be used for step-by-step parsing. After
    /// creating it, you repeatedly call `.advance()` until it returns a
    /// tree to indicate it has reached the end of the parse.
    class Parse {
        constructor(parser, input, startPos, context) {
            this.parser = parser;
            this.input = input;
            this.startPos = startPos;
            this.context = context;
            // The position to which the parse has advanced.
            this.pos = 0;
            this.recovering = 0;
            this.nextStackID = 0x2654;
            this.nested = null;
            this.nestEnd = 0;
            this.nestWrap = null;
            this.reused = [];
            this.tokens = new TokenCache(parser);
            this.topTerm = parser.top[1];
            this.stacks = [Stack.start(this, parser.top[0], this.startPos)];
            let fragments = context === null || context === void 0 ? void 0 : context.fragments;
            this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            if (this.nested) {
                let result = this.nested.advance();
                this.pos = this.nested.pos;
                if (result) {
                    this.finishNested(this.stacks[0], result);
                    this.nested = null;
                }
                return null;
            }
            let stacks = this.stacks, pos = this.pos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            let maybeNest;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], nest;
                for (;;) {
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (nest = this.checkNest(stack)) {
                        if (!maybeNest || maybeNest.stack.score < stack.score)
                            maybeNest = nest;
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.mainToken;
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (maybeNest) {
                this.startNested(maybeNest);
                return null;
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished)
                    return this.stackToTree(finished);
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + this.parser.getName(this.tokens.mainToken.value));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished)
                    return this.stackToTree(finished.forceAll());
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 200 /* MinBufferLengthPrune */ && other.buffer.length > 200 /* MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.pos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.pos)
                    this.pos = newStacks[i].pos;
            return null;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { input, parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.contextHash || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
                return true;
            }
            let actions = this.tokens.getActions(stack, input);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                let nest = this.checkNest(stack);
                if (nest)
                    return nest;
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            let maybeNest;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done) {
                        if (done !== true)
                            maybeNest = done;
                        continue;
                    }
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done) {
                        if (done !== true)
                            maybeNest = done;
                        break;
                    }
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.input.length > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            if (finished)
                return finished;
            if (maybeNest)
                for (let s of this.stacks)
                    if (s.score > maybeNest.stack.score) {
                        maybeNest = undefined;
                        break;
                    }
            if (maybeNest)
                this.startNested(maybeNest);
            return null;
        }
        forceFinish() {
            let stack = this.stacks[0].split();
            if (this.nested)
                this.finishNested(stack, this.nested.forceFinish());
            return this.stackToTree(stack.forceAll());
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack, pos = stack.pos) {
            if (this.parser.context)
                stack.emitContext();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.startPos,
                length: pos - this.startPos,
                minRepeatType: this.parser.minRepeatTerm });
        }
        checkNest(stack) {
            let info = this.parser.findNested(stack.state);
            if (!info)
                return null;
            let spec = info.value;
            if (typeof spec == "function")
                spec = spec(this.input, stack);
            return spec ? { stack, info, spec } : null;
        }
        startNested(nest) {
            let { stack, info, spec } = nest;
            this.stacks = [stack];
            this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd);
            this.nestWrap = typeof spec.wrapType == "number" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null;
            if (spec.startParse) {
                this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context);
            }
            else {
                this.finishNested(stack);
            }
        }
        scanForNestEnd(stack, endToken, filter) {
            for (let pos = stack.pos; pos < this.input.length; pos++) {
                dummyToken.start = pos;
                dummyToken.value = -1;
                endToken.token(this.input, dummyToken, stack);
                if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end))))
                    return pos;
            }
            return this.input.length;
        }
        finishNested(stack, tree) {
            if (this.nestWrap)
                tree = new Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos);
            else if (!tree)
                tree = new Tree(NodeType.none, [], [], this.nestEnd - stack.pos);
            let info = this.parser.findNested(stack.state);
            stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true));
            if (verbose)
                console.log(this.stackID(stack) + ` (via unnest)`);
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    /// A parser holds the parse tables for a given grammar, as generated
    /// by `lezer-generator`.
    class Parser {
        /// @internal
        constructor(spec) {
            /// @internal
            this.bufferLength = DefaultBufferLength;
            /// @internal
            this.strict = false;
            this.cachedDialect = null;
            if (spec.version != 13 /* Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);
            let tokenArray = decodeArray(spec.tokenData);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            this.context = spec.context;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (let i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.nested = (spec.nested || []).map(([name, value, endToken, placeholder]) => {
                return { name, value, end: new TokenGroup(decodeArray(endToken), 0), placeholder };
            });
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        /// Parse a given string or stream.
        parse(input, startPos = 0, context = {}) {
            if (typeof input == "string")
                input = stringInput(input);
            let cx = new Parse(this, input, startPos, context);
            for (;;) {
                let done = cx.advance();
                if (done)
                    return done;
            }
        }
        /// Start an incremental parse.
        startParse(input, startPos = 0, context = {}) {
            if (typeof input == "string")
                input = stringInput(input);
            return new Parse(this, input, startPos, context);
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /// @internal
        stateSlot(state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        }
        /// @internal
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        }
        /// @internal
        findNested(state) {
            let flags = this.stateSlot(state, 0 /* Flags */);
            return flags & 4 /* StartNest */ ? this.nested[flags >> 10 /* NestShift */] : null;
        }
        /// @internal
        validAction(state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /// @internal
        overrides(token, prev) {
            let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(Parser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.nested)
                copy.nested = this.nested.map(obj => {
                    if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name))
                        return obj;
                    return { name: obj.name, value: config.nested[obj.name], end: obj.end, placeholder: obj.placeholder };
                });
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() { return this.maxNode + 1; }
        /// Tells you whether this grammar has any nested grammars.
        get hasNested() { return this.nested.length > 0; }
        /// The type of top node produced by the parser.
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /// @internal
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /// @internal
        parseDialect(dialect) {
            if (this.cachedDialect && this.cachedDialect.source == dialect)
                return this.cachedDialect;
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return this.cachedDialect = new Dialect(dialect, flags, disabled);
        }
        /// (used by the output of the parser generator) @internal
        static deserialize(spec) {
            return new Parser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            if (stack.pos == stack.p.input.length &&
                stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const noSemi = 269,
      incdec = 1,
      incdecPrefix = 2,
      templateContent = 270,
      templateDollarBrace = 271,
      templateEnd = 272,
      insertSemi = 273,
      TSExtends = 3,
      Dialect_ts = 1;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const newline = [10, 13, 8232, 8233];
    const space = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288];

    const braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42,
          plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

    // FIXME this should technically enter block comments
    function newlineBefore(input, pos) {
      for (let i = pos - 1; i >= 0; i--) {
        let prev = input.get(i);
        if (newline.indexOf(prev) > -1) return true
        if (space.indexOf(prev) < 0) break
      }
      return false
    }

    const insertSemicolon = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == braceR || next == -1 || newlineBefore(input, pos)) && stack.canShift(insertSemi))
        token.accept(insertSemi, token.start);
    }, {contextual: true, fallback: true});

    const noSemicolon = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos++);
      if (space.indexOf(next) > -1 || newline.indexOf(next) > -1) return
      if (next == slash) {
        let after = input.get(pos++);
        if (after == slash || after == star) return
      }
      if (next != braceR && next != semicolon && next != -1 && !newlineBefore(input, token.start) &&
          stack.canShift(noSemi))
        token.accept(noSemi, token.start);
    }, {contextual: true});

    const incdecToken = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == plus || next == minus) && next == input.get(pos + 1)) {
        let mayPostfix = !newlineBefore(input, token.start) && stack.canShift(incdec);
        token.accept(mayPostfix ? incdec : incdecPrefix, pos + 2);
      }
    }, {contextual: true});

    const template = new ExternalTokenizer((input, token) => {
      let pos = token.start, afterDollar = false;
      for (;;) {
        let next = input.get(pos++);
        if (next < 0) {
          if (pos - 1 > token.start) token.accept(templateContent, pos - 1);
          break
        } else if (next == backtick) {
          if (pos == token.start + 1) token.accept(templateEnd, pos);
          else token.accept(templateContent, pos - 1);
          break
        } else if (next == braceL && afterDollar) {
          if (pos == token.start + 2) token.accept(templateDollarBrace, pos);
          else token.accept(templateContent, pos - 2);
          break
        } else if (next == 10 /* "\n" */ && pos > token.start + 1) {
          // Break up template strings on lines, to avoid huge tokens
          token.accept(templateContent, pos);
          break
        } else if (next == backslash && pos != input.length) {
          pos++;
        }
        afterDollar = next == dollar;
      }
    });

    function tsExtends(value, stack) {
      return value == "extends" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$1 = {__proto__:null,export:16, as:21, from:25, default:30, async:35, function:36, this:46, true:54, false:54, void:58, typeof:62, null:76, super:78, new:112, await:129, yield:131, delete:132, class:142, extends:144, public:181, private:181, protected:181, readonly:183, in:202, instanceof:204, import:236, keyof:287, unique:291, infer:297, is:331, abstract:351, implements:353, type:355, let:358, var:360, const:362, interface:369, enum:373, namespace:379, module:381, declare:385, global:389, for:410, of:419, while:422, with:426, do:430, if:434, else:436, switch:440, case:446, try:452, catch:454, finally:456, return:460, throw:464, break:468, continue:472, debugger:476};
    const spec_word = {__proto__:null,async:99, get:101, set:103, public:151, private:151, protected:151, static:153, abstract:155, readonly:159, new:335};
    const spec_LessThan = {__proto__:null,"<":119};
    const parser$2 = Parser.deserialize({
      version: 13,
      states: "$8xO]QYOOO&zQ!LdO'#CgO'ROSO'#DRO)ZQYO'#DWO)kQYO'#DcO)rQYO'#DmO-iQYO'#DsOOQO'#ET'#ETO-|QWO'#ESO.RQWO'#ESO.ZQ!LdO'#IgO2dQ!LdO'#IhO3QQWO'#EpO3VQpO'#FVOOQ!LS'#Ex'#ExO3_O!bO'#ExO3mQWO'#F^O4wQWO'#F]OOQ!LS'#Ih'#IhOOQ!LS'#Ig'#IgOOQQ'#JR'#JRO4|QWO'#HeO5RQ!LYO'#HfOOQQ'#I['#I[OOQQ'#Hg'#HgQ]QYOOO)rQYO'#DeO5ZQWO'#GQO5`Q#tO'#ClO5nQWO'#ERO5yQ#tO'#EwO6eQWO'#GQO6jQWO'#GUO6uQWO'#GUO7TQWO'#GYO7TQWO'#GZO7TQWO'#G]O5ZQWO'#G`O7tQWO'#GcO9SQWO'#CcO9dQWO'#GpO9lQWO'#GvO9lQWO'#GxO]QYO'#GzO9lQWO'#G|O9lQWO'#HPO9qQWO'#HVO9vQ!LZO'#HZO)rQYO'#H]O:RQ!LZO'#H_O:^Q!LZO'#HaO5RQ!LYO'#HcO)rQYO'#IjOOOS'#Hh'#HhO:iOSO,59mOOQ!LS,59m,59mO<zQbO'#CgO=UQYO'#HiO=cQWO'#IlO?bQbO'#IlO'^QYO'#IlO?iQWO,59rO@PQ&jO'#D]O@xQWO'#ETOAVQWO'#IvOAbQWO'#IuOAjQWO,5:qOAoQWO'#ItOAvQWO'#DtO5`Q#tO'#EROBUQWO'#EROBaQ`O'#EwOOQ!LS,59},59}OBiQYO,59}ODgQ!LdO,5:XOETQWO,5:_OEnQ!LYO'#IsO6jQWO'#IrOEuQWO'#IrOE}QWO,5:pOFSQWO'#IrOFbQYO,5:nOH_QWO'#EPOIfQWO,5:nOJrQWO'#DgOJyQYO'#DlOKTQ&jO,5:wO)rQYO,5:wOOQQ'#Eh'#EhOOQQ'#Ej'#EjO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xOOQQ'#En'#EnOKYQYO,5;XOOQ!LS,5;^,5;^OOQ!LS,5;_,5;_OMVQWO,5;_OOQ!LS,5;`,5;`O)rQYO'#HsOM[Q!LYO,5;yOH_QWO,5:xO)rQYO,5;[ONXQpO'#IzOMvQpO'#IzON`QpO'#IzONqQpO,5;gOOQO,5;q,5;qO!!|QYO'#FXOOOO'#Hr'#HrO3_O!bO,5;dO!#TQpO'#FZOOQ!LS,5;d,5;dO!#qQ,UO'#CqOOQ!LS'#Ct'#CtO!$UQWO'#CtO!$lQ#tO,5;vO!$sQWO,5;xO!%|QWO'#FhO!&ZQWO'#FiO!&`QWO'#FmO!'bQ&jO'#FqO!(TQ,UO'#IeOOQ!LS'#Ie'#IeO!(_QWO'#IdO!(mQWO'#IcOOQ!LS'#Cr'#CrOOQ!LS'#Cx'#CxO!(uQWO'#CzOIkQWO'#F`OIkQWO'#FbO!(zQWO'#FdOIaQWO'#FeO!)PQWO'#FkOIkQWO'#FpO!)UQWO'#EUO!)mQWO,5;wO]QYO,5>POOQQ'#I_'#I_OOQQ,5>Q,5>QOOQQ-E;e-E;eO!+iQ!LdO,5:POOQ!LQ'#Co'#CoO!,YQ#tO,5<lOOQO'#Ce'#CeO!,kQWO'#CpO!,sQ!LYO'#I`O4wQWO'#I`O9qQWO,59WO!-RQpO,59WO!-ZQ#tO,59WO5`Q#tO,59WO!-fQWO,5:nO!-nQWO'#GoO!-vQWO'#JVO!.OQYO,5;aOKTQ&jO,5;cO!/{QWO,5=YO!0QQWO,5=YO!0VQWO,5=YO5RQ!LYO,5=YO5ZQWO,5<lO!0eQWO'#EVO!0vQ&jO'#EWOOQ!LQ'#It'#ItO!1XQ!LYO'#JSO5RQ!LYO,5<pO7TQWO,5<wOOQO'#Cq'#CqO!1dQpO,5<tO!1lQ#tO,5<uO!1wQWO,5<wO!1|Q`O,5<zO9qQWO'#GeO5ZQWO'#GgO!2UQWO'#GgO5`Q#tO'#GjO!2ZQWO'#GjOOQQ,5<},5<}O!2`QWO'#GkO!2hQWO'#ClO!2mQWO,58}O!2wQWO,58}O!4vQYO,58}OOQQ,58},58}O!5TQ!LYO,58}O)rQYO,58}O!5`QYO'#GrOOQQ'#Gs'#GsOOQQ'#Gt'#GtO]QYO,5=[O!5pQWO,5=[O)rQYO'#DsO]QYO,5=bO]QYO,5=dO!5uQWO,5=fO]QYO,5=hO!5zQWO,5=kO!6PQYO,5=qOOQQ,5=u,5=uO)rQYO,5=uO5RQ!LYO,5=wOOQQ,5=y,5=yO!9}QWO,5=yOOQQ,5={,5={O!9}QWO,5={OOQQ,5=},5=}O!:SQ`O,5?UOOOS-E;f-E;fOOQ!LS1G/X1G/XO!:XQbO,5>TO)rQYO,5>TOOQO-E;g-E;gO!:cQWO,5?WO!:kQbO,5?WO!:rQWO,5?aOOQ!LS1G/^1G/^O!:zQpO'#DPOOQO'#In'#InO)rQYO'#InO!;iQpO'#InO!<WQpO'#D^O!<iQ&jO'#D^O!>qQYO'#D^O!>xQWO'#ImO!?QQWO,59wO!?VQWO'#EXO!?eQWO'#IwO!?mQWO,5:rO!@TQ&jO'#D^O)rQYO,5?bO!@_QWO'#HnO!:rQWO,5?aOOQ!LQ1G0]1G0]O!AeQ&jO'#DwOOQ!LS,5:`,5:`O)rQYO,5:`OH_QWO,5:`O!AlQWO,5:`O9qQWO,5:mO!-RQpO,5:mO!-ZQ#tO,5:mO5`Q#tO,5:mOOQ!LS1G/i1G/iOOQ!LS1G/y1G/yOOQ!LQ'#EO'#EOO)rQYO,5?_O!AwQ!LYO,5?_O!BYQ!LYO,5?_O!BaQWO,5?^O!BiQWO'#HpO!BaQWO,5?^OOQ!LQ1G0[1G0[O6jQWO,5?^OOQ!LS1G0Y1G0YO!CTQ!LbO,5:kOOQ!LS'#Fg'#FgO!CqQ!LdO'#IeOFbQYO1G0YO!EpQ#tO'#IoO!EzQWO,5:RO!FPQbO'#IpO)rQYO'#IpO!FZQWO,5:WOOQ!LS'#DP'#DPOOQ!LS1G0c1G0cO!F`QWO1G0cO!HqQ!LdO1G0dO!HxQ!LdO1G0dO!K]Q!LdO1G0dO!KdQ!LdO1G0dO!MkQ!LdO1G0dO!NOQ!LdO1G0dO#!oQ!LdO1G0dO#!vQ!LdO1G0dO#%ZQ!LdO1G0dO#%bQ!LdO1G0dO#'VQ!LdO1G0dO#*PQ7^O'#CgO#+zQ7^O1G0sO#-xQ7^O'#IhOOQ!LS1G0y1G0yO#.SQ!LdO,5>_OOQ!LS-E;q-E;qO#.sQ!LdO1G0dO#0uQ!LdO1G0vO#1fQpO,5;iO#1kQpO,5;jO#1pQpO'#FQO#2UQWO'#FPOOQO'#I{'#I{OOQO'#Hq'#HqO#2ZQpO1G1ROOQ!LS1G1R1G1ROOQO1G1[1G1[O#2iQ7^O'#IgO#4cQWO,5;sO! PQYO,5;sOOOO-E;p-E;pOOQ!LS1G1O1G1OOOQ!LS,5;u,5;uO#4hQpO,5;uOOQ!LS,59`,59`O)rQYO1G1bOKTQ&jO'#HuO#4mQWO,5<ZOOQ!LS,5<W,5<WOOQO'#F{'#F{OIkQWO,5<fOOQO'#F}'#F}OIkQWO,5<hOIkQWO,5<jOOQO1G1d1G1dO#4xQ`O'#CoO#5]Q`O,5<SO#5dQWO'#JOO5ZQWO'#JOO#5rQWO,5<UOIkQWO,5<TO#5wQ`O'#FgO#6UQ`O'#JPO#6`QWO'#JPOH_QWO'#JPO#6eQWO,5<XOOQ!LQ'#Db'#DbO#6jQWO'#FjO#6uQpO'#FrO!']Q&jO'#FrO!']Q&jO'#FtO#7WQWO'#FuO!)PQWO'#FxOOQO'#Hw'#HwO#7]Q&jO,5<]OOQ!LS,5<],5<]O#7dQ&jO'#FrO#7rQ&jO'#FsO#7zQ&jO'#FsOOQ!LS,5<k,5<kOIkQWO,5?OOIkQWO,5?OO#8PQWO'#HxO#8[QWO,5>}OOQ!LS'#Cg'#CgO#9OQ#tO,59fOOQ!LS,59f,59fO#9qQ#tO,5;zO#:dQ#tO,5;|O#:nQWO,5<OOOQ!LS,5<P,5<PO#:sQWO,5<VO#:xQ#tO,5<[OFbQYO1G1cO#;YQWO1G1cOOQQ1G3k1G3kOOQ!LS1G/k1G/kOMVQWO1G/kOOQQ1G2W1G2WOH_QWO1G2WO)rQYO1G2WOH_QWO1G2WO#;_QWO1G2WO#;mQWO,59[O#<sQWO'#EPOOQ!LQ,5>z,5>zO#<}Q!LYO,5>zOOQQ1G.r1G.rO9qQWO1G.rO!-RQpO1G.rO!-ZQ#tO1G.rO#=]QWO1G0YO#=bQWO'#CgO#=mQWO'#JWO#=uQWO,5=ZO#=zQWO'#JWO#>PQWO'#IQO#>_QWO,5?qO#@ZQbO1G0{OOQ!LS1G0}1G0}O5ZQWO1G2tO#@bQWO1G2tO#@gQWO1G2tO#@lQWO1G2tOOQQ1G2t1G2tO#@qQ#tO1G2WO6jQWO'#IuO6jQWO'#EXO6jQWO'#HzO#ASQ!LYO,5?nOOQQ1G2[1G2[O!1wQWO1G2cOH_QWO1G2`O#A_QWO1G2`OOQQ1G2a1G2aOH_QWO1G2aO#AdQWO1G2aO#AlQ&jO'#G_OOQQ1G2c1G2cO!']Q&jO'#H|O!1|Q`O1G2fOOQQ1G2f1G2fOOQQ,5=P,5=PO#AtQ#tO,5=RO5ZQWO,5=RO#7WQWO,5=UO4wQWO,5=UO!-RQpO,5=UO!-ZQ#tO,5=UO5`Q#tO,5=UO#BVQWO'#JUO#BbQWO,5=VOOQQ1G.i1G.iO#BgQ!LYO1G.iO#BrQWO1G.iO!(uQWO1G.iO5RQ!LYO1G.iO#BwQbO,5?sO#CRQWO,5?sO#C^QYO,5=^O#CeQWO,5=^O6jQWO,5?sOOQQ1G2v1G2vO]QYO1G2vOOQQ1G2|1G2|OOQQ1G3O1G3OO9lQWO1G3QO#CjQYO1G3SO#GbQYO'#HROOQQ1G3V1G3VO9qQWO1G3]O#GoQWO1G3]O5RQ!LYO1G3aOOQQ1G3c1G3cOOQ!LQ'#Fn'#FnO5RQ!LYO1G3eO5RQ!LYO1G3gOOOS1G4p1G4pO#IkQ!LdO,5;yO#JOQbO1G3oO#JYQWO1G4rO#JbQWO1G4{O#JjQWO,5?YO! PQYO,5:sO6jQWO,5:sO9qQWO,59xO! PQYO,59xO!-RQpO,59xO#LcQ7^O,59xOOQO,5:s,5:sO#LmQ&jO'#HjO#MTQWO,5?XOOQ!LS1G/c1G/cO#M]Q&jO'#HoO#MqQWO,5?cOOQ!LQ1G0^1G0^O!<iQ&jO,59xO#MyQbO1G4|OOQO,5>Y,5>YO6jQWO,5>YOOQO-E;l-E;lO#NTQ!LrO'#D|O!']Q&jO'#DxOOQO'#Hm'#HmO#NoQ&jO,5:cOOQ!LS,5:c,5:cO#NvQ&jO'#DxO$ UQ&jO'#D|O$ jQ&jO'#D|O!']Q&jO'#D|O$ tQWO1G/zO$ yQ`O1G/zOOQ!LS1G/z1G/zO)rQYO1G/zOH_QWO1G/zOOQ!LS1G0X1G0XO9qQWO1G0XO!-RQpO1G0XO!-ZQ#tO1G0XO$!QQ!LdO1G4yO)rQYO1G4yO$!bQ!LYO1G4yO$!sQWO1G4xO6jQWO,5>[OOQO,5>[,5>[O$!{QWO,5>[OOQO-E;n-E;nO$!sQWO1G4xOOQ!LS,5;y,5;yO$#ZQ!LdO,59fO$%YQ!LdO,5;zO$'[Q!LdO,5;|O$)^Q!LdO,5<[OOQ!LS7+%t7+%tO$+fQWO'#HkO$+pQWO,5?ZOOQ!LS1G/m1G/mO$+xQYO'#HlO$,VQWO,5?[O$,_QbO,5?[OOQ!LS1G/r1G/rOOQ!LS7+%}7+%}O$,iQ7^O,5:XO)rQYO7+&_O$,sQ7^O,5:POOQO1G1T1G1TOOQO1G1U1G1UO$,zQMhO,5;lO! PQYO,5;kOOQO-E;o-E;oOOQ!LS7+&m7+&mOOQO7+&v7+&vOOOO1G1_1G1_O$-VQWO1G1_OOQ!LS1G1a1G1aO$-[Q!LdO7+&|OOQ!LS,5>a,5>aO$-{QWO,5>aOOQ!LS1G1u1G1uP$.QQWO'#HuPOQ!LS-E;s-E;sO$.qQ#tO1G2QO$/dQ#tO1G2SO$/nQ#tO1G2UOOQ!LS1G1n1G1nO$/uQWO'#HtO$0TQWO,5?jO$0TQWO,5?jO$0]QWO,5?jO$0hQWO,5?jOOQO1G1p1G1pO$0vQ#tO1G1oO$1WQWO'#HvO$1hQWO,5?kOH_QWO,5?kO$1pQ`O,5?kOOQ!LS1G1s1G1sO5RQ!LYO,5<^O5RQ!LYO,5<_O$1zQWO,5<_O#7RQWO,5<_O!-RQpO,5<^O$2PQWO,5<`O5RQ!LYO,5<aO$1zQWO,5<dOOQO-E;u-E;uOOQ!LS1G1w1G1wO!']Q&jO,5<^O$2XQWO,5<_O!']Q&jO,5<`O!']Q&jO,5<_O$2dQ#tO1G4jO$2nQ#tO1G4jOOQO,5>d,5>dOOQO-E;v-E;vOKTQ&jO,59hO)rQYO,59hO$2{QWO1G1jOIkQWO1G1qOOQ!LS7+&}7+&}OFbQYO7+&}OOQ!LS7+%V7+%VO$3QQ`O'#JQO$ tQWO7+'rO$3[QWO7+'rO$3dQ`O7+'rOOQQ7+'r7+'rOH_QWO7+'rO)rQYO7+'rOH_QWO7+'rOOQO1G.v1G.vO$3nQ!LbO'#CgO$4OQ!LbO,5<bO$4mQWO,5<bOOQ!LQ1G4f1G4fOOQQ7+$^7+$^O9qQWO7+$^O!-RQpO7+$^OFbQYO7+%tO$4rQWO'#IPO$4}QWO,5?rOOQO1G2u1G2uO5ZQWO,5?rOOQO,5>l,5>lOOQO-E<O-E<OOOQ!LS7+&g7+&gO$5VQWO7+(`O5RQ!LYO7+(`O5ZQWO7+(`O$5[QWO7+(`O$5aQWO7+'rOOQ!LQ,5>f,5>fOOQ!LQ-E;x-E;xOOQQ7+'}7+'}O$5oQ!LbO7+'zOH_QWO7+'zO$5yQ`O7+'{OOQQ7+'{7+'{OH_QWO7+'{O$6QQWO'#JTO$6]QWO,5<yOOQO,5>h,5>hOOQO-E;z-E;zOOQQ7+(Q7+(QO$7SQ&jO'#GhOOQQ1G2m1G2mOH_QWO1G2mO)rQYO1G2mOH_QWO1G2mO$7ZQWO1G2mO$7iQ#tO1G2mO5RQ!LYO1G2pO#7WQWO1G2pO4wQWO1G2pO!-RQpO1G2pO!-ZQ#tO1G2pO$7zQWO'#IOO$8VQWO,5?pO$8_Q&jO,5?pOOQ!LQ1G2q1G2qOOQQ7+$T7+$TO$8dQWO7+$TO5RQ!LYO7+$TO$8iQWO7+$TO)rQYO1G5_O)rQYO1G5`O$8nQYO1G2xO$8uQWO1G2xO$8zQYO1G2xO$9RQ!LYO1G5_OOQQ7+(b7+(bO5RQ!LYO7+(lO]QYO7+(nOOQQ'#JZ'#JZOOQQ'#IR'#IRO$9]QYO,5=mOOQQ,5=m,5=mO)rQYO'#HSO$9jQWO'#HUOOQQ7+(w7+(wO$9oQYO7+(wO6jQWO7+(wOOQQ7+({7+({OOQQ7+)P7+)POOQQ7+)R7+)ROOQO1G4t1G4tO$=jQ7^O1G0_O$=tQWO1G0_OOQO1G/d1G/dO$>PQ7^O1G/dO9qQWO1G/dO! PQYO'#D^OOQO,5>U,5>UOOQO-E;h-E;hOOQO,5>Z,5>ZOOQO-E;m-E;mO!-RQpO1G/dOOQO1G3t1G3tO9qQWO,5:dOOQO,5:h,5:hO!.OQYO,5:hO$>ZQ!LYO,5:hO$>fQ!LYO,5:hO!-RQpO,5:dOOQO-E;k-E;kOOQ!LS1G/}1G/}O!']Q&jO,5:dO$>tQ!LrO,5:hO$?`Q&jO,5:dO!']Q&jO,5:hO$?nQ&jO,5:hO$@SQ!LYO,5:hOOQ!LS7+%f7+%fO$ tQWO7+%fO$ yQ`O7+%fOOQ!LS7+%s7+%sO9qQWO7+%sO!-RQpO7+%sO$@hQ!LdO7+*eO)rQYO7+*eOOQO1G3v1G3vO6jQWO1G3vO$@xQWO7+*dO$AQQ!LdO1G2QO$CSQ!LdO1G2SO$EUQ!LdO1G1oO$G^Q#tO,5>VOOQO-E;i-E;iO$GhQbO,5>WO)rQYO,5>WOOQO-E;j-E;jO$GrQWO1G4vO$ItQ7^O1G0dO$KoQ7^O1G0dO$MjQ7^O1G0dO$MqQ7^O1G0dO% `Q7^O1G0dO% sQ7^O1G0dO%#zQ7^O1G0dO%$RQ7^O1G0dO%%|Q7^O1G0dO%&TQ7^O1G0dO%'xQ7^O1G0dO%(VQ!LdO<<IyO%(vQ7^O1G0dO%*fQ7^O'#IeO%,cQ7^O1G0vO! PQYO'#FSOOQO'#I|'#I|OOQO1G1W1G1WO%,jQWO1G1VO%,oQ7^O,5>_OOOO7+&y7+&yOOQ!LS1G3{1G3{OIkQWO7+'pO%,|QWO,5>`O5ZQWO,5>`OOQO-E;r-E;rO%-[QWO1G5UO%-[QWO1G5UO%-dQWO1G5UO%-oQ`O,5>bO%-yQWO,5>bOH_QWO,5>bOOQO-E;t-E;tO%.OQ`O1G5VO%.YQWO1G5VOOQO1G1x1G1xOOQO1G1y1G1yO5RQ!LYO1G1yO$1zQWO1G1yO5RQ!LYO1G1xO%.bQWO1G1zOH_QWO1G1zOOQO1G1{1G1{O5RQ!LYO1G2OO!-RQpO1G1xO#7RQWO1G1yO%.gQWO1G1zO%.oQWO1G1yOIkQWO7+*UOOQ!LS1G/S1G/SO%.zQWO1G/SOOQ!LS7+'U7+'UO%/PQ#tO7+']OOQ!LS<<Ji<<JiOH_QWO'#HyO%/aQWO,5?lOOQQ<<K^<<K^OH_QWO<<K^O$ tQWO<<K^O%/iQWO<<K^O%/qQ`O<<K^OH_QWO1G1|OOQQ<<Gx<<GxO9qQWO<<GxOOQ!LS<<I`<<I`OOQO,5>k,5>kO%/{QWO,5>kOOQO-E;}-E;}O%0QQWO1G5^O%0YQWO<<KzOOQQ<<Kz<<KzO%0_QWO<<KzO5RQ!LYO<<KzO)rQYO<<K^OH_QWO<<K^OOQQ<<Kf<<KfO$5oQ!LbO<<KfOOQQ<<Kg<<KgO$5yQ`O<<KgO%0dQ&jO'#H{O%0oQWO,5?oO! PQYO,5?oOOQQ1G2e1G2eO#NTQ!LrO'#D|O!']Q&jO'#GiOOQO'#H}'#H}O%0wQ&jO,5=SOOQQ,5=S,5=SO#7rQ&jO'#D|O%1OQ&jO'#D|O%1dQ&jO'#D|O%1nQ&jO'#GiO%1|QWO7+(XO%2RQWO7+(XO%2ZQ`O7+(XOOQQ7+(X7+(XOH_QWO7+(XO)rQYO7+(XOH_QWO7+(XO%2eQWO7+(XOOQQ7+([7+([O5RQ!LYO7+([O#7WQWO7+([O4wQWO7+([O!-RQpO7+([O%2sQWO,5>jOOQO-E;|-E;|OOQO'#Gl'#GlO%3OQWO1G5[O5RQ!LYO<<GoOOQQ<<Go<<GoO%3WQWO<<GoO%3]QWO7+*yO%3bQWO7+*zOOQQ7+(d7+(dO%3gQWO7+(dO%3lQYO7+(dO%3sQWO7+(dO)rQYO7+*yO)rQYO7+*zOOQQ<<LW<<LWOOQQ<<LY<<LYOOQQ-E<P-E<POOQQ1G3X1G3XO%3xQWO,5=nOOQQ,5=p,5=pO9qQWO<<LcO%3}QWO<<LcO! PQYO7+%yOOQO7+%O7+%OO%4SQ7^O1G4|O9qQWO7+%OOOQO1G0O1G0OO%4^Q!LdO1G0SOOQO1G0S1G0SO!.OQYO1G0SO%4hQ!LYO1G0SO9qQWO1G0OO!-RQpO1G0OO%4sQ!LYO1G0SO!']Q&jO1G0OO%5RQ!LYO1G0SO%5gQ!LrO1G0SO%5qQ&jO1G0OO!']Q&jO1G0SOOQ!LS<<IQ<<IQOOQ!LS<<I_<<I_O9qQWO<<I_O%6PQ!LdO<<NPOOQO7+)b7+)bO%6aQ!LdO7+']O%8iQbO1G3rO%8sQ7^O,5;yO%8}Q7^O,59fO%:zQ7^O,5;zO%<wQ7^O,5;|O%>tQ7^O,5<[O%@dQ7^O7+&|O%@kQWO,5;nOOQO7+&q7+&qO%@pQ#tO<<K[OOQO1G3z1G3zO%AQQWO1G3zO%A]QWO1G3zO%AkQWO7+*pO%AkQWO7+*pOH_QWO1G3|O%AsQ`O1G3|O%A}QWO7+*qOOQO7+'e7+'eO5RQ!LYO7+'eOOQO7+'d7+'dO$1zQWO7+'fO%BVQ`O7+'fOOQO7+'j7+'jO5RQ!LYO7+'dO$1zQWO7+'eO%B^QWO7+'fOH_QWO7+'fO#7RQWO7+'eO%BcQ#tO<<MpOOQ!LS7+$n7+$nO%BmQ`O,5>eOOQO-E;w-E;wO$ tQWOAN@xOOQQAN@xAN@xOH_QWOAN@xO%BwQ!LbO7+'hOOQQAN=dAN=dO5ZQWO1G4VO%CUQWO7+*xO5RQ!LYOANAfO%C^QWOANAfOOQQANAfANAfO%CcQWOAN@xO%CkQ`OAN@xOOQQANAQANAQOOQQANARANARO%CuQWO,5>gOOQO-E;y-E;yO%DQQ7^O1G5ZO#7WQWO,5=TO4wQWO,5=TO!-RQpO,5=TOOQO-E;{-E;{OOQQ1G2n1G2nO$>tQ!LrO,5:hO!']Q&jO,5=TO%D[Q&jO,5=TO%DjQ&jO,5:hOOQQ<<Ks<<KsOH_QWO<<KsO%1|QWO<<KsO%EOQWO<<KsO%EWQ`O<<KsO)rQYO<<KsOH_QWO<<KsOOQQ<<Kv<<KvO5RQ!LYO<<KvO#7WQWO<<KvO4wQWO<<KvO%EbQ&jO1G4UO%EgQWO7+*vOOQQAN=ZAN=ZO5RQ!LYOAN=ZOOQQ<<Ne<<NeOOQQ<<Nf<<NfOOQQ<<LO<<LOO%EoQWO<<LOO%EtQYO<<LOO%E{QWO<<NeO%FQQWO<<NfOOQQ1G3Y1G3YOOQQANA}ANA}O9qQWOANA}O%FVQ7^O<<IeOOQO<<Hj<<HjOOQO7+%n7+%nO%4^Q!LdO7+%nO!.OQYO7+%nOOQO7+%j7+%jO9qQWO7+%jO%FaQ!LYO7+%nO!-RQpO7+%jO%FlQ!LYO7+%nO!']Q&jO7+%jO%FzQ!LYO7+%nOOQ!LSAN>yAN>yO%G`Q!LdO<<K[O%IhQ7^O<<IyO%IoQ7^O1G1oO%K_Q7^O1G2QO%M[Q7^O1G2SOOQO1G1Y1G1YOOQO7+)f7+)fO& XQWO7+)fO& dQWO<<N[O& lQ`O7+)hOOQO<<KP<<KPO5RQ!LYO<<KQO$1zQWO<<KQOOQO<<KO<<KOO5RQ!LYO<<KPO& vQ`O<<KQO$1zQWO<<KPOOQQG26dG26dO$ tQWOG26dOOQO7+)q7+)qOOQQG27QG27QO5RQ!LYOG27QOH_QWOG26dO! PQYO1G4RO& }QWO7+*uO5RQ!LYO1G2oO#7WQWO1G2oO4wQWO1G2oO!-RQpO1G2oO!']Q&jO1G2oO%5gQ!LrO1G0SO&!VQ&jO1G2oO%1|QWOANA_OOQQANA_ANA_OH_QWOANA_O&!eQWOANA_O&!mQ`OANA_OOQQANAbANAbO5RQ!LYOANAbO#7WQWOANAbOOQO'#Gm'#GmOOQO7+)p7+)pOOQQG22uG22uOOQQANAjANAjO&!wQWOANAjOOQQANDPANDPOOQQANDQANDQO&!|QYOG27iOOQO<<IY<<IYO%4^Q!LdO<<IYOOQO<<IU<<IUO!.OQYO<<IYO9qQWO<<IUO&&wQ!LYO<<IYO!-RQpO<<IUO&'SQ!LYO<<IYO&'bQ7^O7+']OOQO<<MQ<<MQOOQOAN@lAN@lO5RQ!LYOAN@lOOQOAN@kAN@kO$1zQWOAN@lO5RQ!LYOAN@kOOQQLD,OLD,OOOQQLD,lLD,lO$ tQWOLD,OO&)QQ7^O7+)mOOQO7+(Z7+(ZO5RQ!LYO7+(ZO#7WQWO7+(ZO4wQWO7+(ZO!-RQpO7+(ZO!']Q&jO7+(ZOOQQG26yG26yO%1|QWOG26yOH_QWOG26yOOQQG26|G26|O5RQ!LYOG26|OOQQG27UG27UO9qQWOLD-TOOQOAN>tAN>tO%4^Q!LdOAN>tOOQOAN>pAN>pO!.OQYOAN>tO9qQWOAN>pO&)[Q!LYOAN>tO&)gQ7^O<<K[OOQOG26WG26WO5RQ!LYOG26WOOQOG26VG26VOOQQ!$( j!$( jOOQO<<Ku<<KuO5RQ!LYO<<KuO#7WQWO<<KuO4wQWO<<KuO!-RQpO<<KuOOQQLD,eLD,eO%1|QWOLD,eOOQQLD,hLD,hOOQQ!$(!o!$(!oOOQOG24`G24`O%4^Q!LdOG24`OOQOG24[G24[O!.OQYOG24`OOQOLD+rLD+rOOQOANAaANAaO5RQ!LYOANAaO#7WQWOANAaO4wQWOANAaOOQQ!$(!P!$(!POOQOLD)zLD)zO%4^Q!LdOLD)zOOQOG26{G26{O5RQ!LYOG26{O#7WQWOG26{OOQO!$'Mf!$'MfOOQOLD,gLD,gO5RQ!LYOLD,gOOQO!$(!R!$(!ROKYQYO'#DmO&+VQ!LdO'#IgO&+jQ!LdO'#IgOKYQYO'#DeO&+qQ!LdO'#CgO&,[QbO'#CgO&,lQYO,5:nOFbQYO,5:nOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xOKYQYO,5:xO! PQYO'#HsO&.iQWO,5;yO&.qQWO,5:xOKYQYO,5;[O!(uQWO'#CzO!(uQWO'#CzOH_QWO'#F`O&.qQWO'#F`OH_QWO'#FbO&.qQWO'#FbOH_QWO'#FpO&.qQWO'#FpO! PQYO,5?bO&,lQYO1G0YOFbQYO1G0YO&/xQ7^O'#CgO&0SQ7^O'#IgO&0^Q7^O'#IgOKYQYO1G1bOH_QWO,5<fO&.qQWO,5<fOH_QWO,5<hO&.qQWO,5<hOH_QWO,5<TO&.qQWO,5<TO&,lQYO1G1cOFbQYO1G1cO&,lQYO1G1cO&,lQYO1G0YOKYQYO7+&_OH_QWO1G1qO&.qQWO1G1qO&,lQYO7+&}OFbQYO7+&}O&,lQYO7+&}O&,lQYO7+%tOFbQYO7+%tO&,lQYO7+%tOH_QWO7+'pO&.qQWO7+'pO&0eQWO'#ESO&0jQWO'#ESO&0oQWO'#ESO&0wQWO'#ESO&1PQWO'#EpO!.OQYO'#DeO!.OQYO'#DmO&1UQWO'#IvO&1aQWO'#ItO&1lQWO,5:nO&1qQWO,5:nO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5:xO!.OQYO,5;[O&1vQ#tO,5;vO&1}QWO'#FiO&2SQWO'#FiO&2XQWO,5;wO&2aQWO,5;wO&2iQWO,5;wO&2qQ!LdO,5:PO&3OQWO,5:nO&3TQWO,5:nO&3]QWO,5:nO&3eQWO,5:nO&5aQ!LdO1G0dO&5nQ!LdO1G0dO&7uQ!LdO1G0dO&7|Q!LdO1G0dO&9}Q!LdO1G0dO&:UQ!LdO1G0dO&<VQ!LdO1G0dO&<^Q!LdO1G0dO&>_Q!LdO1G0dO&>fQ!LdO1G0dO&>mQ7^O1G0sO&>tQ!LdO1G0vO!.OQYO1G1bO&?RQWO,5<VO&?WQWO,5<VO&?]QWO1G1cO&?bQWO1G1cO&?gQWO1G1cO&?lQWO1G0YO&?qQWO1G0YO&?vQWO1G0YO!.OQYO7+&_O&?{Q!LdO7+&|O&@YQ#tO1G2UO&@aQ#tO1G2UO&@hQ!LdO<<IyO&,lQYO,5:nO&BiQ!LdO'#IhO&B|QWO'#EpO3mQWO'#F^O4wQWO'#F]O4wQWO'#F]O4wQWO'#F]OBUQWO'#EROBUQWO'#EROBUQWO'#EROKYQYO,5;XO&CRQ#tO,5;vO!)PQWO'#FkO!)PQWO'#FkO&CYQ7^O1G0sOIkQWO,5<jOIkQWO,5<jO! PQYO'#DmO! PQYO'#DeO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5:xO! PQYO,5;[O! PQYO1G1bO! PQYO7+&_O&CaQWO'#ESO&CfQWO'#ESO&CnQWO'#EpO&CsQ#tO,5;vO&CzQ7^O1G0sO3mQWO'#F^OKYQYO,5;XO&DRQ7^O'#IhO&DcQ7^O,5:PO&DpQ7^O1G0dO&FqQ7^O1G0dO&FxQ7^O1G0dO&HmQ7^O1G0dO&IQQ7^O1G0dO&K_Q7^O1G0dO&KfQ7^O1G0dO&MgQ7^O1G0dO&MnQ7^O1G0dO' cQ7^O1G0dO' vQ7^O1G0vO'!TQ7^O7+&|O'!bQ7^O<<IyO3mQWO'#F^OKYQYO,5;X",
      stateData: "'#b~O&}OSSOSTOS~OPTOQTOWwO]bO^gOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#jnO#n]O$uoO$wrO$ypO$zpO${qO%OsO%QtO%TuO%UuO%WvO%exO%kyO%mzO%o{O%q|O%t}O%z!OO&O!PO&Q!QO&S!RO&U!SO&W!TO'PPO']QO'q`O~OPZXYZX^ZXiZXqZXrZXtZX|ZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX&{ZX']ZX'eZX'lZX'mZX~O!W$bX~P$tO&x!VO&y!UO&z!XO~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'P!YO']QO'q`O~O{!^O|!ZOy'`Py'iP~P'^O}!jO~P]OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'P8ZO']QO'q`O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O']QO'q`O~O{!oO!|!rO!}!oO'P8[O!^'fP~P+oO#O!sO~O!W!tO#O!sO~OP#ZOY#aOi#OOq!xOr!xOt!yO|#_O![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO']QO'e#XO'l!zO'm!{O^'ZX&{'ZX!^'ZXy'ZX!O'ZX$v'ZX!W'ZX~O!t#bO#e#bOP'[XY'[X^'[Xi'[Xq'[Xr'[Xt'[X|'[X!['[X!]'[X!_'[X!e'[X#R'[X#S'[X#T'[X#U'[X#V'[X#W'[X#Y'[X#Z'[X#]'[X#_'[X#`'[X']'[X'e'[X'l'[X'm'[X~O#X'[X&{'[Xy'[X!^'[X'_'[X!O'[X$v'[X!W'[X~P0gO!t#bO~O#p#cO#w#gO~O!O#hO#n]O#z#iO#|#kO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$T#}O$V$OO$Y$QO'P#mO'T'VP~O!_$TO~O!W$VO~O^$WO&{$WO~O'P$[O~O!_$TO'P$[O'Q$^O'U$_O~Ob$eO!_$TO'P$[O~O]$nOq$jO!O$gO!_$iO$w$mO'P$[O'Q$^O['yP~O!i$oO~Ot$pO!O$qO'P$[O~Ot$pO!O$qO%Q$uO'P$[O~O'P$vO~O$wrO$ypO$zpO${qO%OsO%QtO%TuO%UuO~Oa%POb%OO!i$|O$u$}O%Y${O~P7YOa%SOblO!O%RO!ikO$uoO$ypO$zpO${qO%OsO%QtO%TuO%UuO%WvO~O_%VO!t%YO$w%TO'Q$^O~P8XO!_%ZO!b%_O~O!_%`O~O!OSO~O^$WO&w%hO&{$WO~O^$WO&w%kO&{$WO~O^$WO&w%mO&{$WO~O&x!VO&y!UO&z%qO~OPZXYZXiZXqZXrZXtZX|ZX|cX![ZX!]ZX!_ZX!eZX!tZX!tcX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX']ZX'eZX'lZX'mZX~OyZXycX~P:tO{%sOy&]X|&]X~P)rO|!ZOy'`X~OP#ZOY#aOi#OOq!xOr!xOt!yO|!ZO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO']QO'e#XO'l!zO'm!{O~Oy'`X~P=kOy%xO~Ot%{O!R&VO!S&OO!T&OO'Q$^O~O]%|Oj%|O{&PO'Y%yO}'aP}'kP~P?nOy'hX|'hX!W'hX!^'hX'e'hX~O!t'hX#O!wX}'hX~P@gO!t&WOy'jX|'jX~O|&XOy'iX~Oy&ZO~O!t#bO~P@gOR&_O!O&[O!j&^O'P$[O~Ob&dO!_$TO'P$[O~Oq$jO!_$iO~O}&eO~P]Oq!xOr!xOt!yO!]!vO!_!wO']QOP!aaY!aai!aa|!aa![!aa!e!aa#R!aa#S!aa#T!aa#U!aa#V!aa#W!aa#X!aa#Y!aa#Z!aa#]!aa#_!aa#`!aa'e!aa'l!aa'm!aa~O^!aa&{!aay!aa!^!aa'_!aa!O!aa$v!aa!W!aa~PBpO!^&fO~O!W!tO!t&hO'e&gO|'gX^'gX&{'gX~O!^'gX~PEYO|&lO!^'fX~O!^&nO~Ot$pO!O$qO!}&oO'P$[O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'P8ZO']QO'q`O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8nOt#tO!O#uO!Y;OO!_#rO!}8tO#j$PO$T8pO$V8rO$Y$QO'P&rO~O#O&tO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$T#}O$V$OO$Y$QO'P&rO~O'T'cP~PIkO{&xO!^'dP~P)rO'Y&zO~OP8VOQ8VO]bOa:yOb!gOgbOi8VOjbOkbOm8VOo8VOtROvbOwbOxbO!O!`O!Y8YO!_UO!b8VO!c8VO!d8VO!e8VO!f8VO!i!fO#j!iO#n]O'P'YO']QO'q:uO~O!_!wO~O|#_O^$Ra&{$Ra!^$Ray$Ra!O$Ra$v$Ra!W$Ra~O!W'bO!O'nX#m'nX#p'nX#w'nX~Oq'cO~PMvOq'cO!O'nX#m'nX#p'nX#w'nX~O!O'eO#m'iO#p'dO#w'jO~OP;TOQ;TO]bOa:{Ob!gOgbOi;TOjbOkbOm;TOo;TOtROvbOwbOxbO!O!`O!Y;UO!_UO!b;TO!c;TO!d;TO!e;TO!f;TO!i!fO#j!iO#n]O'P'YO']QO'q;{O~O{'mO~P! PO#p#cO#w'pO~Oq$ZXt$ZX!]$ZX'e$ZX'l$ZX'm$ZX~OReX|eX!teX'TeX'T$ZX~P!#]Oj'rO~Oq'tOt'uO'e#XO'l'wO'm'yO~O'T'sO~P!$ZO'T'|O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8nOt#tO!O#uO!Y;OO!_#rO!}8tO#j$PO$T8pO$V8rO$Y$QO~O{(QO'P'}O!^'rP~P!$xO#O(SO~O{(WO'P(TOy'sP~P!$xO^(aOi(fOt(^O!R(dO!S(]O!T(]O!_(ZO!q(eO$m(`O'Q$^O'Y(YO~O}(cO~P!&mO!]!vOq'XXt'XX'e'XX'l'XX'm'XX|'XX!t'XX~O'T'XX#c'XX~P!'iOR(iO!t(hO|'WX'T'WX~O|(jO'T'VX~O'P(lO~O!_(qO~O!_(ZO~Ot$pO{!oO!O$qO!|!rO!}!oO'P$[O!^'fP~O!W!tO#O(uO~OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO']QO'e#XO'l!zO'm!{O~O^!Xa|!Xa&{!Xay!Xa!^!Xa'_!Xa!O!Xa$v!Xa!W!Xa~P!)uOR(}O!O&[O!j(|O$v({O'U$_O~O'P$vO'T'VP~O!W)QO!O'SX^'SX&{'SX~O!_$TO'U$_O~O!_$TO'P$[O'U$_O~O!W!tO#O&tO~O'P)YO}'zP~O|)^O['yX~OP9jOQ9jO]bOa:zOb!gOgbOi9jOjbOkbOm9jOo9jOtROvbOwbOxbO!O!`O!Y9iO!_UO!b9jO!c9jO!d9jO!e9jO!f9jO!i!fO#j!iO#n]O'P8ZO']QO'q;jO~OY)bO~O[)cO~O!O$gO'P$[O'Q$^O['yP~Ot$pO{)hO!O$qO'P$[Oy'iP~O]&SOj&SO{)iO'Y&zO}'kP~O|)jO^'vX&{'vX~O!t)nO'U$_O~OR)qO!O#uO'U$_O~O!O)sO~Oq)uO!OSO~O!i)zO~Ob*PO~O'P(lO}'xP~Ob$eO~O$wrO'P$vO~P8XOY*VO[*UO~OPTOQTO]bOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#n]O$uoO']QO'q`O~O!O!`O#j!iO'P8ZO~P!3PO[*UO^$WO&{$WO~O^*ZO$y*]O$z*]O${*]O~P)rO!_%ZO~O%k*bO~O!O*dO~O%{*gO%|*fOP%yaQ%yaW%ya]%ya^%yaa%yab%yag%yai%yaj%yak%yam%yao%yat%yav%yaw%yax%ya!O%ya!Y%ya!_%ya!b%ya!c%ya!d%ya!e%ya!f%ya!i%ya#j%ya#n%ya$u%ya$w%ya$y%ya$z%ya${%ya%O%ya%Q%ya%T%ya%U%ya%W%ya%e%ya%k%ya%m%ya%o%ya%q%ya%t%ya%z%ya&O%ya&Q%ya&S%ya&U%ya&W%ya&v%ya'P%ya']%ya'q%ya}%ya%r%ya_%ya%w%ya~O'P*jO~O'_*mO~Oy&]a|&]a~P!)uO|!ZOy'`a~Oy'`a~P=kO|&XOy'ia~O|sX|!UX}sX}!UX!WsX!W!UX!_!UX!tsX'U!UX~O!W*tO!t*sO|!{X|'bX}!{X}'bX!W'bX!_'bX'U'bX~O!W*vO!_$TO'U$_O|!QX}!QX~O]%zOj%zOt%{O'Y(YO~OP;TOQ;TO]bOa:{Ob!gOgbOi;TOjbOkbOm;TOo;TOtROvbOwbOxbO!O!`O!Y;UO!_UO!b;TO!c;TO!d;TO!e;TO!f;TO!i!fO#j!iO#n]O']QO'q;{O~O'P8yO~P!<wO|*zO}'aX~O}*|O~O!W*tO!t*sO|!{X}!{X~O|*}O}'kX~O}+PO~O]%zOj%zOt%{O'Q$^O'Y(YO~O!S+QO!T+QO~P!?rOt$pO{+TO!O$qO'P$[Oy&bX|&bX~O^+XO!R+[O!S+WO!T+WO!m+^O!n+]O!o+]O!q+_O'Q$^O'Y(YO~O}+ZO~P!@sOR+dO!O&[O!j+cO~O!t+jO|'ga!^'ga^'ga&{'ga~O!W!tO~P!AwO|&lO!^'fa~Ot$pO{+mO!O$qO!|+oO!}+mO'P$[O|&dX!^&dX~O#O!sa|!sa!^!sa!t!sa!O!sa^!sa&{!say!sa~P!$ZO#O'XXP'XXY'XX^'XXi'XXr'XX!['XX!_'XX!e'XX#R'XX#S'XX#T'XX#U'XX#V'XX#W'XX#X'XX#Y'XX#Z'XX#]'XX#_'XX#`'XX&{'XX']'XX!^'XXy'XX!O'XX$v'XX'_'XX!W'XX~P!'iO|+xO'T'cX~P!$ZO'T+zO~O|+{O!^'dX~P!)uO!^,OO~Oy,PO~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO']QOY#Qi^#Qii#Qi|#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&{#Qi'e#Qi'l#Qi'm#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~O#R#Qi~P!FeO#R!|O~P!FeOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O']QOY#Qi^#Qi|#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&{#Qi'e#Qi'l#Qi'm#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~Oi#Qi~P!IPOi#OO~P!IPOP#ZOi#OOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO']QO^#Qi|#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&{#Qi'e#Qi'l#Qi'm#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P!KkOY#aO![#QO#W#QO#X#QO#Y#QO~P!KkOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO']QO^#Qi|#Qi#]#Qi#_#Qi#`#Qi&{#Qi'e#Qi'm#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~O'l#Qi~P!NcO'l!zO~P!NcOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO']QO'l!zO^#Qi|#Qi#_#Qi#`#Qi&{#Qi'e#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~O'm#Qi~P#!}O'm!{O~P#!}OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO']QO'l!zO'm!{O~O^#Qi|#Qi#`#Qi&{#Qi'e#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~P#%iOPZXYZXiZXqZXrZXtZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX']ZX'eZX'lZX'mZX|ZX}ZX~O#cZX~P#'|OP#ZOY8lOi8aOq!xOr!xOt!yO![8cO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O#V8bO#W8cO#X8cO#Y8cO#Z8dO#]8fO#_8hO#`8iO']QO'e#XO'l!zO'm!{O~O#c,RO~P#*WOP'[XY'[Xi'[Xq'[Xr'[Xt'[X!['[X!]'[X!_'[X!e'[X#R'[X#S'[X#T'[X#U'[X#V'[X#W'[X#X'[X#Y'[X#Z'[X#]'[X#_'[X#`'[X#c'[X']'[X'e'[X'l'[X'm'[X~O!t8mO#e8mO~P#,RO^&ga|&ga&{&ga!^&ga'_&gay&ga!O&ga$v&ga!W&ga~P!)uOP#QiY#Qi^#Qii#Qir#Qi|#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&{#Qi']#Qiy#Qi!^#Qi'_#Qi!O#Qi$v#Qi!W#Qi~P!$ZO^#di|#di&{#diy#di!^#di'_#di!O#di$v#di!W#di~P!)uO#p,TO~O#p,UO~O!W'bO!t,VO!O#tX#m#tX#p#tX#w#tX~O{,WO~O!O'eO#m,YO#p'dO#w,ZO~OP#ZOY8lOi;XOq!xOr!xOt!yO|8jO![;ZO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO#W;ZO#X;ZO#Y;ZO#Z;[O#];^O#_;`O#`;aO']QO'e#XO'l!zO'm!{O}'ZX~O},[O~O#w,^O~O],aOj,aOy,bO~O|cX!WcX!^cX!^$ZX'ecX~P!#]O!^,hO~P!$ZO|,iO!W!tO'e&gO!^'rX~O!^,nO~Oy$ZX|$ZX!W$bX~P!#]O|,pOy'sX~P!$ZO!W,rO~Oy,tO~O{(QO'P$[O!^'rP~Oi,xO!W!tO!_$TO'U$_O'e&gO~O!W)QO~O}-OO~P!&mO!S-PO!T-PO'Q$^O'Y(YO~Ot-RO'Y(YO~O!q-SO~O'P$vO|&lX'T&lX~O|(jO'T'Va~Oq-XOr-XOt-YO'ena'lna'mna|na!tna~O'Tna#cna~P#8dOq'tOt'uO'e$Sa'l$Sa'm$Sa|$Sa!t$Sa~O'T$Sa#c$Sa~P#9YOq'tOt'uO'e$Ua'l$Ua'm$Ua|$Ua!t$Ua~O'T$Ua#c$Ua~P#9{O]-ZO~O#O-[O~O'T$da|$da#c$da!t$da~P!$ZO#O-^O~OR-gO!O&[O!j-fO$v-eO~O'T-hO~O]#nOi#oOj#nOk#nOm#{Oo8nOt#tO!O#uO!Y;OO!_#rO!}8tO#j$PO$T8pO$V8rO$Y$QO~Og-jO'P-iO~P#;rO!W)QO!O'Sa^'Sa&{'Sa~O#O-pO~OYZX|cX}cX~O|-qO}'zX~O}-sO~OY-tO~O!O$gO'P$[O[&tX|&tX~O|)^O['ya~OP#ZOY#aOi9qOq!xOr!xOt!yO![9sO!]!vO!_!wO!e#ZO#R9oO#S9pO#T9pO#U9pO#V9rO#W9sO#X9sO#Y9sO#Z9tO#]9vO#_9xO#`9yO']QO'e#XO'l!zO'm!{O~O!^-wO~P#>gO]-yO~OY-zO~O[-{O~OR-gO!O&[O!j-fO$v-eO'U$_O~O|)jO^'va&{'va~O!t.RO~OR.UO!O#uO~O'Y&zO}'wP~OR.`O!O.[O!j._O$v.^O'U$_O~OY.jO|.hO}'xX~O}.kO~O[.mO^$WO&{$WO~O].nO~O#X.pO%i.qO~P0gO!t#bO#X.pO%i.qO~O^.rO~P)rO^.tO~O%r.xOP%piQ%piW%pi]%pi^%pia%pib%pig%pii%pij%pik%pim%pio%pit%piv%piw%pix%pi!O%pi!Y%pi!_%pi!b%pi!c%pi!d%pi!e%pi!f%pi!i%pi#j%pi#n%pi$u%pi$w%pi$y%pi$z%pi${%pi%O%pi%Q%pi%T%pi%U%pi%W%pi%e%pi%k%pi%m%pi%o%pi%q%pi%t%pi%z%pi&O%pi&Q%pi&S%pi&U%pi&W%pi&v%pi'P%pi']%pi'q%pi}%pi_%pi%w%pi~O_/OO}.|O%w.}O~P]O!OSO!_/RO~OP$RaY$Rai$Raq$Rar$Rat$Ra![$Ra!]$Ra!_$Ra!e$Ra#R$Ra#S$Ra#T$Ra#U$Ra#V$Ra#W$Ra#X$Ra#Y$Ra#Z$Ra#]$Ra#_$Ra#`$Ra']$Ra'e$Ra'l$Ra'm$Ra~O|#_O'_$Ra!^$Ra^$Ra&{$Ra~P#GwOy&]i|&]i~P!)uO|!ZOy'`i~O|&XOy'ii~Oy/VO~OP#ZOY8lOi;XOq!xOr!xOt!yO![;ZO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO#W;ZO#X;ZO#Y;ZO#Z;[O#];^O#_;`O#`;aO']QO'e#XO'l!zO'm!{O~O|!Qa}!Qa~P#JoO]%zOj%zO{/]O'Y(YO|&^X}&^X~P?nO|*zO}'aa~O]&SOj&SO{)iO'Y&zO|&cX}&cX~O|*}O}'ka~Oy'ji|'ji~P!)uO^$WO!W!tO!_$TO!e/hO!t/fO&{$WO'U$_O'e&gO~O}/kO~P!@sO!S/lO!T/lO'Q$^O'Y(YO~O!R/nO!S/lO!T/lO!q/oO'Q$^O'Y(YO~O!n/pO!o/pO~P$ UO!O&[O~O!O&[O~P!$ZO|'gi!^'gi^'gi&{'gi~P!)uO!t/yO|'gi!^'gi^'gi&{'gi~O|&lO!^'fi~Ot$pO!O$qO!}/{O'P$[O~O#OnaPnaYna^naina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na&{na']na!^nayna!Ona$vna'_na!Wna~P#8dO#O$SaP$SaY$Sa^$Sai$Sar$Sa![$Sa!]$Sa!_$Sa!e$Sa#R$Sa#S$Sa#T$Sa#U$Sa#V$Sa#W$Sa#X$Sa#Y$Sa#Z$Sa#]$Sa#_$Sa#`$Sa&{$Sa']$Sa!^$Say$Sa!O$Sa$v$Sa'_$Sa!W$Sa~P#9YO#O$UaP$UaY$Ua^$Uai$Uar$Ua![$Ua!]$Ua!_$Ua!e$Ua#R$Ua#S$Ua#T$Ua#U$Ua#V$Ua#W$Ua#X$Ua#Y$Ua#Z$Ua#]$Ua#_$Ua#`$Ua&{$Ua']$Ua!^$Uay$Ua!O$Ua$v$Ua'_$Ua!W$Ua~P#9{O#O$daP$daY$da^$dai$dar$da|$da![$da!]$da!_$da!e$da#R$da#S$da#T$da#U$da#V$da#W$da#X$da#Y$da#Z$da#]$da#_$da#`$da&{$da']$da!^$day$da!O$da!t$da$v$da'_$da!W$da~P!$ZO|&_X'T&_X~PIkO|+xO'T'ca~O{0TO|&`X!^&`X~P)rO|+{O!^'da~O|+{O!^'da~P!)uO#c!aa}!aa~PBpO#c!Xa~P#*WO!O0gO#n]O#u0hO~O}0lO~O^$Oq|$Oq&{$Oqy$Oq!^$Oq'_$Oq!O$Oq$v$Oq!W$Oq~P!)uOy0mO~O],aOj,aO~Oq'tOt'uO'm'yO'e$ni'l$ni|$ni!t$ni~O'T$ni#c$ni~P$.YOq'tOt'uO'e$pi'l$pi'm$pi|$pi!t$pi~O'T$pi#c$pi~P$.{O#c0nO~P!$ZO{0pO'P$[O|&hX!^&hX~O|,iO!^'ra~O|,iO!W!tO!^'ra~O|,iO!W!tO'e&gO!^'ra~O'T$]i|$]i#c$]i!t$]i~P!$ZO{0wO'P(TOy&jX|&jX~P!$xO|,pOy'sa~O|,pOy'sa~P!$ZO!W!tO~O!W!tO#X1RO~Oi1VO!W!tO'e&gO~O|'Wi'T'Wi~P!$ZO!t1YO|'Wi'T'Wi~P!$ZO!^1]O~O|1`O!O'tX~P!$ZO!O&[O$v1cO~O!O&[O$v1cO~P!$ZO!O$ZX$kZX^$ZX&{$ZX~P!#]O$k1gOqfXtfX!OfX'efX'lfX'mfX^fX&{fX~O$k1gO~O'P)YO|&sX}&sX~O|-qO}'za~O[1oO~O]1rO~OR1tO!O&[O!j1sO$v1cO~O^$WO&{$WO~P!$ZO!O#uO~P!$ZO|1yO!t1{O}'wX~O}1|O~Ot(^O!R2VO!S2OO!T2OO!m2UO!n2TO!o2TO!q2SO'Q$^O'Y(YO~O}2RO~P$6bOR2^O!O.[O!j2]O$v2[O~OR2^O!O.[O!j2]O$v2[O'U$_O~O'P(lO|&rX}&rX~O|.hO}'xa~O'Y2gO~O]2iO~O[2kO~O!^2nO~P)rO^2pO~O^2pO~P)rO#X2rO%i2sO~PEYO_/OO}2wO%w.}O~P]O!W2yO~O%|2zOP%yqQ%yqW%yq]%yq^%yqa%yqb%yqg%yqi%yqj%yqk%yqm%yqo%yqt%yqv%yqw%yqx%yq!O%yq!Y%yq!_%yq!b%yq!c%yq!d%yq!e%yq!f%yq!i%yq#j%yq#n%yq$u%yq$w%yq$y%yq$z%yq${%yq%O%yq%Q%yq%T%yq%U%yq%W%yq%e%yq%k%yq%m%yq%o%yq%q%yq%t%yq%z%yq&O%yq&Q%yq&S%yq&U%yq&W%yq&v%yq'P%yq']%yq'q%yq}%yq%r%yq_%yq%w%yq~O|!{i}!{i~P#JoO!t2|O|!{i}!{i~O|!Qi}!Qi~P#JoO^$WO!t3TO&{$WO~O^$WO!W!tO!t3TO&{$WO~O^$WO!W!tO!_$TO!e3XO!t3TO&{$WO'U$_O'e&gO~O!S3YO!T3YO'Q$^O'Y(YO~O!R3]O!S3YO!T3YO!q3^O'Q$^O'Y(YO~O^$WO!W!tO!e3XO!t3TO&{$WO'e&gO~O|'gq!^'gq^'gq&{'gq~P!)uO|&lO!^'fq~O#O$niP$niY$ni^$nii$nir$ni![$ni!]$ni!_$ni!e$ni#R$ni#S$ni#T$ni#U$ni#V$ni#W$ni#X$ni#Y$ni#Z$ni#]$ni#_$ni#`$ni&{$ni']$ni!^$niy$ni!O$ni$v$ni'_$ni!W$ni~P$.YO#O$piP$piY$pi^$pii$pir$pi![$pi!]$pi!_$pi!e$pi#R$pi#S$pi#T$pi#U$pi#V$pi#W$pi#X$pi#Y$pi#Z$pi#]$pi#_$pi#`$pi&{$pi']$pi!^$piy$pi!O$pi$v$pi'_$pi!W$pi~P$.{O#O$]iP$]iY$]i^$]ii$]ir$]i|$]i![$]i!]$]i!_$]i!e$]i#R$]i#S$]i#T$]i#U$]i#V$]i#W$]i#X$]i#Y$]i#Z$]i#]$]i#_$]i#`$]i&{$]i']$]i!^$]iy$]i!O$]i!t$]i$v$]i'_$]i!W$]i~P!$ZO|&_a'T&_a~P!$ZO|&`a!^&`a~P!)uO|+{O!^'di~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO']QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'e#Qi'l#Qi'm#Qi|#Qi}#Qi~O#R#Qi~P$GzOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO']QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'e#Qi'l#Qi'm#Qi~O#R8_O~P$I{OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O']QOY#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'e#Qi'l#Qi'm#Qi~Oi#Qi~P$KvOi8aO~P$KvOP#ZOi8aOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O#V8bO']QO#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'e#Qi'l#Qi'm#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P$MxOY8lO![8cO#W8cO#X8cO#Y8cO~P$MxOP#ZOY8lOi8aOq!xOr!xOt!yO![8cO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O#V8bO#W8cO#X8cO#Y8cO#Z8dO']QO#]#Qi#_#Qi#`#Qi#c#Qi'e#Qi'm#Qi~O'l#Qi~P%!WO'l!zO~P%!WOP#ZOY8lOi8aOq!xOr!xOt!yO![8cO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O#V8bO#W8cO#X8cO#Y8cO#Z8dO#]8fO']QO'l!zO#_#Qi#`#Qi#c#Qi'e#Qi~O'm#Qi~P%$YO'm!{O~P%$YOP#ZOY8lOi8aOq!xOr!xOt!yO![8cO!]!vO!_!wO!e#ZO#R8_O#S8`O#T8`O#U8`O#V8bO#W8cO#X8cO#Y8cO#Z8dO#]8fO#_8hO']QO'l!zO'm!{O~O#`#Qi#c#Qi'e#Qi~P%&[O^#ay|#ay&{#ayy#ay!^#ay'_#ay!O#ay$v#ay!W#ay~P!)uOP#QiY#Qii#Qir#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi']#Qi|#Qi}#Qi~P!$ZO!]!vOP'XXY'XXi'XXq'XXr'XXt'XX!['XX!_'XX!e'XX#R'XX#S'XX#T'XX#U'XX#V'XX#W'XX#X'XX#Y'XX#Z'XX#]'XX#_'XX#`'XX#c'XX']'XX'e'XX'l'XX'm'XX|'XX}'XX~O#c#di~P#*WO}3mO~O|&ga}&ga#c&ga~P#JoO!W!tO'e&gO|&ha!^&ha~O|,iO!^'ri~O|,iO!W!tO!^'ri~Oy&ja|&ja~P!$ZO!W3tO~O|,pOy'si~P!$ZO|,pOy'si~Oy3zO~O!W!tO#X4QO~Oi4RO!W!tO'e&gO~Oy4TO~O'T$_q|$_q#c$_q!t$_q~P!$ZO|1`O!O'ta~O!O&[O$v4YO~O!O&[O$v4YO~P!$ZOY4]O~O|-qO}'zi~O]4_O~O[4`O~O'Y&zO|&oX}&oX~O|1yO}'wa~O}4mO~P$6bO!R4pO!S4oO!T4oO!q/oO'Q$^O'Y(YO~O!n4qO!o4qO~P%1OO!S4oO!T4oO'Q$^O'Y(YO~O!O.[O~O!O.[O$v4sO~O!O.[O$v4sO~P!$ZOR4xO!O.[O!j4wO$v4sO~OY4}O|&ra}&ra~O|.hO}'xi~O]5QO~O!^5RO~O!^5SO~O!^5TO~O!^5TO~P)rO^5VO~O!W5YO~O!^5[O~O|'ji}'ji~P#JoO^$WO&{$WO~P#>gO^$WO!t5aO&{$WO~O^$WO!W!tO!t5aO&{$WO~O^$WO!W!tO!e5fO!t5aO&{$WO'e&gO~O!_$TO'U$_O~P%5RO!S5gO!T5gO'Q$^O'Y(YO~O|'gy!^'gy^'gy&{'gy~P!)uO#O$_qP$_qY$_q^$_qi$_qr$_q|$_q![$_q!]$_q!_$_q!e$_q#R$_q#S$_q#T$_q#U$_q#V$_q#W$_q#X$_q#Y$_q#Z$_q#]$_q#_$_q#`$_q&{$_q']$_q!^$_qy$_q!O$_q!t$_q$v$_q'_$_q!W$_q~P!$ZO|&`i!^&`i~P!)uO|8jO#c$Ra~P#GwOq-XOr-XOt-YOPnaYnaina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na#cna']na'ena'lna'mna|na}na~Oq'tOt'uOP$SaY$Sai$Sar$Sa![$Sa!]$Sa!_$Sa!e$Sa#R$Sa#S$Sa#T$Sa#U$Sa#V$Sa#W$Sa#X$Sa#Y$Sa#Z$Sa#]$Sa#_$Sa#`$Sa#c$Sa']$Sa'e$Sa'l$Sa'm$Sa|$Sa}$Sa~Oq'tOt'uOP$UaY$Uai$Uar$Ua![$Ua!]$Ua!_$Ua!e$Ua#R$Ua#S$Ua#T$Ua#U$Ua#V$Ua#W$Ua#X$Ua#Y$Ua#Z$Ua#]$Ua#_$Ua#`$Ua#c$Ua']$Ua'e$Ua'l$Ua'm$Ua|$Ua}$Ua~OP$daY$dai$dar$da![$da!]$da!_$da!e$da#R$da#S$da#T$da#U$da#V$da#W$da#X$da#Y$da#Z$da#]$da#_$da#`$da#c$da']$da|$da}$da~P!$ZO#c$Oq~P#*WO}5oO~O'T$ry|$ry#c$ry!t$ry~P!$ZO!W!tO|&hi!^&hi~O!W!tO'e&gO|&hi!^&hi~O|,iO!^'rq~Oy&ji|&ji~P!$ZO|,pOy'sq~Oy5vO~P!$ZOy5vO~O|'Wy'T'Wy~P!$ZO|&ma!O&ma~P!$ZO!O$jq^$jq&{$jq~P!$ZO|-qO}'zq~O]6PO~O!O&[O$v6QO~O!O&[O$v6QO~P!$ZO!t6RO|&oa}&oa~O|1yO}'wi~P#JoO!S6XO!T6XO'Q$^O'Y(YO~O!R6ZO!S6XO!T6XO!q3^O'Q$^O'Y(YO~O!O.[O$v6^O~O!O.[O$v6^O~P!$ZO'Y6dO~O|.hO}'xq~O!^6gO~O!^6gO~P)rO!^6iO~O!^6jO~O|!{y}!{y~P#JoO^$WO!t6oO&{$WO~O^$WO!W!tO!t6oO&{$WO~O^$WO!W!tO!e6sO!t6oO&{$WO'e&gO~O#O$ryP$ryY$ry^$ryi$ryr$ry|$ry![$ry!]$ry!_$ry!e$ry#R$ry#S$ry#T$ry#U$ry#V$ry#W$ry#X$ry#Y$ry#Z$ry#]$ry#_$ry#`$ry&{$ry']$ry!^$ryy$ry!O$ry!t$ry$v$ry'_$ry!W$ry~P!$ZO#c#ay~P#*WOP$]iY$]ii$]ir$]i![$]i!]$]i!_$]i!e$]i#R$]i#S$]i#T$]i#U$]i#V$]i#W$]i#X$]i#Y$]i#Z$]i#]$]i#_$]i#`$]i#c$]i']$]i|$]i}$]i~P!$ZOq'tOt'uO'm'yOP$niY$nii$nir$ni![$ni!]$ni!_$ni!e$ni#R$ni#S$ni#T$ni#U$ni#V$ni#W$ni#X$ni#Y$ni#Z$ni#]$ni#_$ni#`$ni#c$ni']$ni'e$ni'l$ni|$ni}$ni~Oq'tOt'uOP$piY$pii$pir$pi![$pi!]$pi!_$pi!e$pi#R$pi#S$pi#T$pi#U$pi#V$pi#W$pi#X$pi#Y$pi#Z$pi#]$pi#_$pi#`$pi#c$pi']$pi'e$pi'l$pi'm$pi|$pi}$pi~O!W!tO|&hq!^&hq~O|,iO!^'ry~Oy&jq|&jq~P!$ZOy6yO~P!$ZO|1yO}'wq~O!S7UO!T7UO'Q$^O'Y(YO~O!O.[O$v7XO~O!O.[O$v7XO~P!$ZO!^7[O~O%|7]OP%y!ZQ%y!ZW%y!Z]%y!Z^%y!Za%y!Zb%y!Zg%y!Zi%y!Zj%y!Zk%y!Zm%y!Zo%y!Zt%y!Zv%y!Zw%y!Zx%y!Z!O%y!Z!Y%y!Z!_%y!Z!b%y!Z!c%y!Z!d%y!Z!e%y!Z!f%y!Z!i%y!Z#j%y!Z#n%y!Z$u%y!Z$w%y!Z$y%y!Z$z%y!Z${%y!Z%O%y!Z%Q%y!Z%T%y!Z%U%y!Z%W%y!Z%e%y!Z%k%y!Z%m%y!Z%o%y!Z%q%y!Z%t%y!Z%z%y!Z&O%y!Z&Q%y!Z&S%y!Z&U%y!Z&W%y!Z&v%y!Z'P%y!Z']%y!Z'q%y!Z}%y!Z%r%y!Z_%y!Z%w%y!Z~O^$WO!t7aO&{$WO~O^$WO!W!tO!t7aO&{$WO~OP$_qY$_qi$_qr$_q![$_q!]$_q!_$_q!e$_q#R$_q#S$_q#T$_q#U$_q#V$_q#W$_q#X$_q#Y$_q#Z$_q#]$_q#_$_q#`$_q#c$_q']$_q|$_q}$_q~P!$ZO|&oq}&oq~P#JoO^$WO!t7uO&{$WO~OP$ryY$ryi$ryr$ry![$ry!]$ry!_$ry!e$ry#R$ry#S$ry#T$ry#U$ry#V$ry#W$ry#X$ry#Y$ry#Z$ry#]$ry#_$ry#`$ry#c$ry']$ry|$ry}$ry~P!$ZO|#_O'_'ZX!^'ZX^'ZX&{'ZX~P!)uO'_'ZX~P.ZO'_ZXyZX!^ZX%iZX!OZX$vZX!WZX~P$tO!WcX!^ZX!^cX'ecX~P:tOP;TOQ;TO]bOa:{Ob!gOgbOi;TOjbOkbOm;TOo;TOtROvbOwbOxbO!OSO!Y;UO!_UO!b;TO!c;TO!d;TO!e;TO!f;TO!i!fO#j!iO#n]O'P'YO']QO'q;{O~O|8jO}$Ra~O]#nOg#zOi#oOj#nOk#nOm#{Oo8oOt#tO!O#uO!Y;PO!_#rO!}8uO#j$PO$T8qO$V8sO$Y$QO'P&rO~O}ZX}cX~P:tO|8jO#c'ZX~P#JoO#c'ZX~P#2iO#O8]O~O#O8^O~O!W!tO#O8]O~O!W!tO#O8^O~O!t8mO~O!t8vO|'jX}'jX~O!t;bO|'hX}'hX~O#O8wO~O#O8xO~O'T8|O~P!$ZO#O9RO~O#O9SO~O!W!tO#O9TO~O!W!tO#O9UO~O!W!tO#O9VO~O!^!Xa^!Xa&{!Xa~P#>gO#O9WO~O!W!tO#O8wO~O!W!tO#O8xO~O!W!tO#O9WO~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9oO']QOY#Qii#Qi![#Qi!^#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'e#Qi'l#Qi'm#Qi^#Qi&{#Qi~O#S#Qi#T#Qi#U#Qi~P&3mO#S9pO#T9pO#U9pO~P&3mOP#ZOi9qOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9oO#S9pO#T9pO#U9pO']QOY#Qi![#Qi!^#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'e#Qi'l#Qi'm#Qi^#Qi&{#Qi~O#V#Qi~P&5{O#V9rO~P&5{OP#ZOY#aOi9qOq!xOr!xOt!yO![9sO!]!vO!_!wO!e#ZO#R9oO#S9pO#T9pO#U9pO#V9rO#W9sO#X9sO#Y9sO']QO!^#Qi#]#Qi#_#Qi#`#Qi'e#Qi'l#Qi'm#Qi^#Qi&{#Qi~O#Z#Qi~P&8TO#Z9tO~P&8TOP#ZOY#aOi9qOq!xOr!xOt!yO![9sO!]!vO!_!wO!e#ZO#R9oO#S9pO#T9pO#U9pO#V9rO#W9sO#X9sO#Y9sO#Z9tO']QO'l!zO!^#Qi#_#Qi#`#Qi'e#Qi'm#Qi^#Qi&{#Qi~O#]#Qi~P&:]O#]9vO~P&:]OP#ZOY#aOi9qOq!xOr!xOt!yO![9sO!]!vO!_!wO!e#ZO#R9oO#S9pO#T9pO#U9pO#V9rO#W9sO#X9sO#Y9sO#Z9tO#]9vO']QO'l!zO'm!{O!^#Qi#`#Qi'e#Qi^#Qi&{#Qi~O#_#Qi~P&<eO#_9xO~P&<eO#c9XO~P#*WO!^#di^#di&{#di~P#>gO#O9YO~O#O9ZO~O#O9[O~O#O9]O~O#O9^O~O#O9_O~O#O9`O~O#O9aO~O!^$Oq^$Oq&{$Oq~P#>gO#c9bO~P!$ZO#c9cO~P!$ZO!^#ay^#ay&{#ay~P#>gOP'[XY'[Xi'[Xq'[Xr'[Xt'[X!['[X!]'[X!_'[X!e'[X#R'[X#S'[X#T'[X#U'[X#V'[X#W'[X#X'[X#Y'[X#Z'[X#]'[X#_'[X#`'[X']'[X'e'[X'l'[X'm'[X~O!t9zO#e9zO!^'[X^'[X&{'[X~P&@uO!t9zO~O'T:dO~P!$ZO#c:mO~P#*WO#O:rO~O!W!tO#O:rO~O!t;bO~O'T;cO~P!$ZO#c;dO~P#*WO!t;bO#e;bO|'[X}'[X~P#,RO|!Xa}!Xa#c!Xa~P#JoO#R;VO~P$GzOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO']QOY#Qi|#Qi}#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'e#Qi'l#Qi'm#Qi#c#Qi~Oi#Qi~P&DwOi;XO~P&DwOP#ZOi;XOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO']QO|#Qi}#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'e#Qi'l#Qi'm#Qi#c#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P&GPOY8lO![;ZO#W;ZO#X;ZO#Y;ZO~P&GPOP#ZOY8lOi;XOq!xOr!xOt!yO![;ZO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO#W;ZO#X;ZO#Y;ZO#Z;[O']QO|#Qi}#Qi#]#Qi#_#Qi#`#Qi'e#Qi'm#Qi#c#Qi~O'l#Qi~P&IeO'l!zO~P&IeOP#ZOY8lOi;XOq!xOr!xOt!yO![;ZO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO#W;ZO#X;ZO#Y;ZO#Z;[O#];^O']QO'l!zO|#Qi}#Qi#_#Qi#`#Qi'e#Qi#c#Qi~O'm#Qi~P&KmO'm!{O~P&KmOP#ZOY8lOi;XOq!xOr!xOt!yO![;ZO!]!vO!_!wO!e#ZO#R;VO#S;WO#T;WO#U;WO#V;YO#W;ZO#X;ZO#Y;ZO#Z;[O#];^O#_;`O']QO'l!zO'm!{O~O|#Qi}#Qi#`#Qi'e#Qi#c#Qi~P&MuO|#di}#di#c#di~P#JoO|$Oq}$Oq#c$Oq~P#JoO|#ay}#ay#c#ay~P#JoO#n~!]!m!o!|!}'q$T$V$Y$k$u$v$w%O%Q%T%U%W%Y~TS#n'q#p'Y'P&}#Sx~",
      goto: "$!x(OPPPPPPP(PP(aP)|PPPP._PP.t4x6k7QP7QPPP7QP7QP8oPP8tP9]PPPP?RPPPP?RBoPPPBuDxP?RPGgPPPPIv?RPPPPPLW?RPP!!T!#QPPP!#UP!#^!$_P?R?R!'x!+y!1w!1w!6WPPP!6_?RPPPPPPPPP!:TP!;uPP?R!=_P?RP?R?R?R?RP?R!?zPP!CoP!G`!Gh!Gl!GlP!ClP!Gp!GpP!KaP!Ke?R?R!Kk# _7QP7QP7Q7QP#!v7Q7Q#$l7Q7Q7Q#&o7Q7Q#']#)W#)W#)[#)W#)dP#)WP7Q#*`7Q#+k7Q7Q._PPP#,yPPP#-c#-cP#-cP#-x#-cPP#.OP#-uP#-u#.b!#Y#-u#/P#/V#/Y(P#/](PP#/d#/d#/dP(PP(PP(PP(PPP(PP#/j#/mP#/m(PPPP(PP(PP(PP(PP(PP(P(P#/q#/{#0R#0a#0g#0m#0w#0}#1X#1_#1m#1s#1y#2a#2v#4Z#4i#4o#4u#4{#5R#5]#5c#5i#5s#5}#6TPPPPPPPP#6ZPP#6}#:{PP#<`#<i#<sP#AS#DVP#K}P#LR#LU#LX#Ld#LgP#Lj#Ln#M]#NQ#NU#NhPP#Nl#Nr#NvP#Ny#N}$ Q$ p$!W$!]$!`$!c$!i$!l$!p$!tmgOSi{!k$V%^%a%b%d*_*d.x.{Q$dlQ$knQ%UwS&O!`*zQ&c!gS(]#u(bQ)W$eQ)d$mQ*O%OQ+Q&VS+W&[+YQ+h&dQ-P(dQ.g*PU/l+[+]+^S2O.[2QS3Y/n/pU4o2T2U2VQ5g3]S6X4p4qR7U6Z$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`x'[#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|Q(m#|Q)]$gQ*Q%RQ*X%ZQ+s8nQ-k)QQ.o*VQ1l-qQ2e.hQ3g8o!O:s$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m!q;l#h&P'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;dpdOSiw{!k$V%T%^%a%b%d*_*d.x.{R*S%V(WVOSTijm{!Q!U!Z!h!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:y:z:{:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|W!aRU!^&PQ$]kQ$clS$hn$mv$rpq!o!r$T$p&X&l&o)h)i)j*]*t+T+m+o/R/{Q$zuQ&`!fQ&b!gS(P#r(ZS)V$d$eQ)Z$gQ)g$oQ)y$|Q)}%OS+g&c&dQ,m(QQ-o)WQ-u)^Q-x)bQ.b)zS.f*O*PQ/w+hQ0o,iQ1k-qQ1n-tQ1q-zQ2d.gQ3q0pR5}4]!W$al!g$c$d$e%}&b&c&d([)V)W*w+V+g+h,y-o/b/i/m/w1U3W3[5e6rQ)O$]Q)o$wQ)r$xQ)|%OQ-|)gQ.a)yU.e)}*O*PQ2_.bS2c.f.gQ4j1}Q4|2dS6V4k4nS7S6W6YQ7l7TR7z7m[#x`$_(j:u;j;{S$wr%TQ$xsQ$ytR)m$u$X#w`!t!v#a#r#t#}$O$S&_'x'z'{(S(W(h(i({(})Q)n)q+d+x,p,r-[-e-g.R.U.^.`0n0w1R1Y1`1c1g1t2[2^3t4Q4Y4s4x6Q6^7X8l8p8q8r8s8t8u8}9O9P9Q9R9S9Y9Z9b9c:u;R;S;j;{V(n#|8n8oU&S!`$q*}Q&{!xQ)a$jQ,`'tQ.V)sQ1Z-XR4f1y(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|%]#^Y!]!l$Z%r%v&w&}'O'P'Q'R'S'T'U'V'W'X'Z'^'a'k)`*o*x+R+i+},Q,S,_/W/Z/x0S0W0X0Y0Z0[0]0^0_0`0a0b0c0f0k3O3R3b3e3k4h5]5`5k6m7O7_7s7}8W8X8z8{:R:W:X:Y:Z:[:]:^:_:`:a:b:c:n:q;Q;i;m;n;o;p;q;r;s;t;u;v;w;x;y;z(VbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|Q&Q!`R/^*zY%z!`&O&V*z+QS([#u(bS+V&[+YS,y(](dQ,z(^Q-Q(eQ.X)uS/i+W+[S/m+]+^S/q+_2SQ1U-PQ1W-RQ1X-SS1}.[2QS3W/l/nQ3Z/oQ3[/pS4k2O2VS4n2T2US5e3Y3]Q5h3^S6W4o4pQ6Y4qQ6r5gS7T6X6ZR7m7UlgOSi{!k$V%^%a%b%d*_*d.x.{Q%f!OW&p!s8]8^:rQ)T$bQ)w$zQ)x${Q+e&aW+w&t8w8x9WW-](u9T9U9VQ-m)UQ.Z)vQ/P*fQ/Q*gQ/Y*uQ/u+fW1_-^9[9]9^Q1h-nW1j-p9_9`9aQ2}/[Q3Q/dQ3`/vQ4[1iQ5Z2zQ5^3PQ5b3VQ5i3aQ6k5[Q6n5cQ7`6pQ7q7]R7t7b%S#]Y!]!l%r%v&w&}'O'P'Q'R'S'T'U'V'W'X'Z'^'a'k)`*o*x+R+i+},Q,_/W/Z/x0S0W0X0Y0Z0[0]0^0_0`0a0b0c0f0k3O3R3b3e3k4h5]5`5k6m7O7_7s7}8W8X8z8{:W:X:Y:Z:[:]:^:_:`:a:b:c:n:q;Q;i;n;o;p;q;r;s;t;u;v;w;x;y;zU(g#v&s0eX(y$Z,S:R;m%S#[Y!]!l%r%v&w&}'O'P'Q'R'S'T'U'V'W'X'Z'^'a'k)`*o*x+R+i+},Q,_/W/Z/x0S0W0X0Y0Z0[0]0^0_0`0a0b0c0f0k3O3R3b3e3k4h5]5`5k6m7O7_7s7}8W8X8z8{:W:X:Y:Z:[:]:^:_:`:a:b:c:n:q;Q;i;n;o;p;q;r;s;t;u;v;w;x;y;zQ']#]W(x$Z,S:R;mR-_(y(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|Q%ayQ%bzQ%d|Q%e}R.w*bQ&]!fQ(z$]Q+b&`S-d)O)gS/r+`+aW1b-a-b-c-|S3_/s/tU4X1d1e1fU5{4W4b4cQ6{5|R7h6}T+X&[+YS+X&[+YT2P.[2QS&j!n.uQ,l(PQ,w([S/h+V1}Q0t,mS1O,x-QU3X/m/q4nQ3p0oS4O1V1XU5f3Z3[6YQ5q3qQ5z4RR6s5hQ!uXS&i!n.uQ(v$UQ)R$`Q)X$fQ+k&jQ,k(PQ,v([Q,{(_Q-l)SQ.c){S/g+V1}S0s,l,mS0},w-QQ1Q,zQ1T,|Q2a.dW3U/h/m/q4nQ3o0oQ3s0tS3x1O1XQ4P1WQ4z2bW5d3X3Z3[6YS5p3p3qQ5u3zQ5x4OQ6T4iQ6b4{S6q5f5hQ6u5qQ6w5vQ6z5zQ7Q6UQ7Z6cQ7c6sQ7f6yQ7j7RQ7x7kQ8P7yQ8T8QQ9m9fQ9n9gQ:S;fQ:g:OQ:h:PQ:i:QQ:j:TQ:k:UR:l:V$jWORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`S!um!hx9d#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|!O9e$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:mQ9m:yQ9n:zQ:S:{!q;e#h&P'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d$jXORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`Q$Ua!W$`l!g$c$d$e%}&b&c&d([)V)W*w+V+g+h,y-o/b/i/m/w1U3W3[5e6rS$fm!hQ)S$aQ){%OW.d)|)}*O*PU2b.e.f.gQ4i1}S4{2c2dU6U4j4k4nQ6c4|U7R6V6W6YS7k7S7TS7y7l7mQ8Q7zx9f#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|!O9g$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:mQ:O:vQ:P:wQ:Q:xQ:T:yQ:U:zQ:V:{!q;f#h&P'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d$b[OSTij{!Q!U!Z!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`U!eRU!^v$rpq!o!r$T$p&X&l&o)h)i)j*]*t+T+m+o/R/{Q*Y%Zx9h#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|Q9l&P!O:t$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m!o;g#h'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;dS&T!`$qR/`*}$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`x'[#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|Q*X%Z!O:s$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m!q;l#h&P'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d!Q#SY!]$Z%r%v&w'U'V'W'X'^'a*o+R+i+},_/x0S0c3b3e8W8Xh8e'Z,S0_0`0a0b0f3k5k:b;Q;in9u)`3R5`6m7_7s7}:R:^:_:`:a:c:n:qw;]'k*x/W/Z0k3O4h5]7O8z8{;m;t;u;v;w;x;y;z|#UY!]$Z%r%v&w'W'X'^'a*o+R+i+},_/x0S0c3b3e8W8Xd8g'Z,S0a0b0f3k5k:b;Q;ij9w)`3R5`6m7_7s7}:R:`:a:c:n:qs;_'k*x/W/Z0k3O4h5]7O8z8{;m;v;w;x;y;zx#YY!]$Z%r%v&w'^'a*o+R+i+},_/x0S0c3b3e8W8Xp'{#p&u(t,g,o-T-U0Q1^3n4S9{:o:p:};h`:|'Z,S0f3k5k:b;Q;i!^;R&q'`(O(U+a+v,s-`-c.Q.S/t0P0u0y1f1v1x2Y3d3u3{4U4Z4c4v5j5s5y6`Y;S0d3j5l6t7df;k)`3R5`6m7_7s7}:R:c:n:qo;|'k*x/W/Z0k3O4h5]7O8z8{;m;x;y;z(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|S#i_#jR0h,V(]^ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,V,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|S#d]#kT'd#f'hT#e]#kT'f#f'h(]_ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&h&t&x'm's(u(|*Z*_*d*s*v+c+j+{,R,V,W-Y-^-f-p._.p.q.r.t.x.{.}/]/f/y0T0g1s1{2]2p2r2s2|3T4w5V5a6R6o7a7u8V8Y8]8^8_8`8a8b8c8d8e8f8g8h8i8j8m8v8w8x8|9T9U9V9W9X9[9]9^9_9`9a9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m:r:|;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d;k;|T#i_#jQ#l_R'o#j$jaORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&h&t&x's(u(|*Z*_*d+c+j+{,R-Y-^-f-p._.p.q.r.t.x.{.}/y0T1s2]2p2r2s4w5V8^8x9U9]9`x:v#Y8V8Y8_8`8a8b8c8d8e8f8g8h8i8m8|9X:|;k;|!O:w$i/f3T5a6o7a7u9i9j9o9p9q9r9s9t9u9v9w9x9y9z:d:m!q:x#h&P'm*s*v,W/]0g1{2|6R8]8j8v8w9T9V9W9[9^9_9a:r;T;U;V;W;X;Y;Z;[;];^;_;`;a;b;c;d#{cOSUi{!Q!U!k!s!y#h$V%V%Y%Z%^%`%a%b%d%h%{&^&t'm(u(|*Z*_*d+c,W-Y-^-f-p._.p.q.r.t.x.{.}0g1s2]2p2r2s4w5V8]8^8w8x9T9U9V9W9[9]9^9_9`9a:rx#v`!v#}$O$S'x'z'{(S(h(i+x-[0n1Y:u;R;S;j;{!z&s!t#a#r#t&_(W({(})Q)n)q+d,p,r-e-g.R.U.^.`0w1R1`1c1g1t2[2^3t4Q4Y4s4x6Q6^7X8p8r8t8}9P9R9Y9bQ(r$Qc0e8l8q8s8u9O9Q9S9Z9cx#s`!v#}$O$S'x'z'{(S(h(i+x-[0n1Y:u;R;S;j;{S(_#u(bQ(s$RQ,|(`!z9|!t#a#r#t&_(W({(})Q)n)q+d,p,r-e-g.R.U.^.`0w1R1`1c1g1t2[2^3t4Q4Y4s4x6Q6^7X8p8r8t8}9P9R9Y9bb9}8l8q8s8u9O9Q9S9Z9cQ:e;OR:f;PleOSi{!k$V%^%a%b%d*_*d.x.{Q(V#tQ*k%kQ*l%mR0v,p$W#w`!t!v#a#r#t#}$O$S&_'x'z'{(S(W(h(i({(})Q)n)q+d+x,p,r-[-e-g.R.U.^.`0n0w1R1Y1`1c1g1t2[2^3t4Q4Y4s4x6Q6^7X8l8p8q8r8s8t8u8}9O9P9Q9R9S9Y9Z9b9c:u;R;S;j;{Q)p$xQ.T)rQ1w.SR4e1xT(a#u(bS(a#u(bT2P.[2QQ)R$`Q,{(_Q-l)SQ.c){Q2a.dQ4z2bQ6T4iQ6b4{Q7Q6UQ7Z6cQ7j7RQ7x7kQ8P7yR8T8Qp'x#p&u(t,g,o-T-U0Q1^3n4S9{:o:p:};h!^8}&q'`(O(U+a+v,s-`-c.Q.S/t0P0u0y1f1v1x2Y3d3u3{4U4Z4c4v5j5s5y6`Z9O0d3j5l6t7dr'z#p&u(t,e,g,o-T-U0Q1^3n4S9{:o:p:};h!`9P&q'`(O(U+a+v,s-`-c.Q.S/t/}0P0u0y1f1v1x2Y3d3u3{4U4Z4c4v5j5s5y6`]9Q0d3j5l5m6t7dpdOSiw{!k$V%T%^%a%b%d*_*d.x.{Q%QvR*Z%ZpdOSiw{!k$V%T%^%a%b%d*_*d.x.{R%QvQ)t$yR.P)mqdOSiw{!k$V%T%^%a%b%d*_*d.x.{Q.])yS2Z.a.bW4r2W2X2Y2_U6]4t4u4vU7V6[6_6`Q7n7WR7{7oQ%XwR*T%TR2h.jR6e4}S$hn$mR-u)^Q%^xR*_%_R*e%eT.y*d.{QiOQ!kST$Yi!kQ!WQR%p!WQ![RU%t![%u*pQ%u!]R*p%vQ*{&QR/_*{Q+y&uR0R+yQ+|&wS0U+|0VR0V+}Q+Y&[R/j+YQ&Y!cQ*q%wT+U&Y*qQ+O&TR/a+OQ&m!pQ+l&kU+p&m+l/|R/|+qQ'h#fR,X'hQ#j_R'n#jQ#`YW'_#`*n3f8kQ*n8WS+r8X8{Q3f8zR8k'kQ,j(PW0q,j0r3r5rU0r,k,l,mS3r0s0tR5r3s#s'v#p&q&u'`(O(U(o(p(t+a+t+u+v,e,f,g,o,s-T-U-`-c.Q.S/t/}0O0P0Q0d0u0y1^1f1v1x2Y3d3h3i3j3n3u3{4S4U4Z4c4v5j5l5m5n5s5y6`6t7d9{:o:p:};hQ,q(UU0x,q0z3vQ0z,sR3v0yQ(b#uR,}(bQ(k#yR-W(kQ1a-`R4V1aQ)k$sR.O)kQ1z.VS4g1z6SR6S4hQ)v$zR.Y)vQ2Q.[R4l2QQ.i*QS2f.i5OR5O2hQ-r)ZS1m-r4^R4^1nQ)_$hR-v)_Q.{*dR2v.{WhOSi!kQ%c{Q(w$VQ*^%^Q*`%aQ*a%bQ*c%dQ.v*_S.y*d.{R2u.xQ$XfQ%g!PQ%j!RQ%l!SQ%n!TQ)f$nQ)l$tQ*S%XQ*i%iS.l*T*WQ/S*hQ/T*kQ/U*lS/e+V1}Q0{,uQ0|,vQ1S,{Q1p-yQ1u.QQ2`.cQ2j.nQ2t.wY3S/g/h/m/q4nQ3w0}Q3y1PQ3|1TQ4a1rQ4d1vQ4y2aQ5P2i[5_3R3U3X3Z3[6YQ5t3xQ5w3}Q6O4_Q6a4zQ6f5QW6l5`5d5f5hQ6v5uQ6x5xQ6|6PQ7P6TQ7Y6bU7^6m6q6sQ7e6wQ7g6zQ7i7QQ7p7ZS7r7_7cQ7v7fQ7w7jQ7|7sQ8O7xQ8R7}Q8S8PR8U8TQ$blQ&a!gU)U$c$d$eQ*u%}U+f&b&c&dQ,u([S-n)V)WQ/[*wQ/d+VS/v+g+hQ1P,yQ1i-oQ3P/bS3V/i/mQ3a/wQ3}1US5c3W3[Q6p5eR7b6rW#q`:u;j;{R)P$_Y#y`$_:u;j;{R-V(jQ#p`S&q!t)QQ&u!vQ'`#aQ(O#rQ(U#tQ(o#}Q(p$OQ(t$SQ+a&_Q+t8pQ+u8rQ+v8tQ,e'xQ,f'zQ,g'{Q,o(SQ,s(WQ-T(hQ-U(id-`({-e.^1c2[4Y4s6Q6^7XQ-c(}Q.Q)nQ.S)qQ/t+dQ/}8}Q0O9PQ0P9RQ0Q+xQ0d8lQ0u,pQ0y,rQ1^-[Q1f-gQ1v.RQ1x.UQ2Y.`Q3d9YQ3h8qQ3i8sQ3j8uQ3n0nQ3u0wQ3{1RQ4S1YQ4U1`Q4Z1gQ4c1tQ4v2^Q5j9bQ5l9SQ5m9OQ5n9QQ5s3tQ5y4QQ6`4xQ6t9ZQ7d9cQ9{:uQ:o;RQ:p;SQ:};jR;h;{lfOSi{!k$V%^%a%b%d*_*d.x.{S!mU%`Q%i!QQ%o!UW&p!s8]8^:rQ&|!yQ'l#hS*W%V%YQ*[%ZQ*h%hQ*r%{Q+`&^W+w&t8w8x9WQ,]'mW-](u9T9U9VQ-b(|Q.s*ZQ/s+cQ0j,WQ1[-YW1_-^9[9]9^Q1e-fW1j-p9_9`9aQ2X._Q2l.pQ2m.qQ2o.rQ2q.tQ2x.}Q3l0gQ4b1sQ4u2]Q5U2pQ5W2rQ5X2sQ6_4wR6h5V!vYOSUi{!Q!k!y$V%V%Y%Z%^%`%a%b%d%h%{&^(|*Z*_*d+c-Y-f._.p.q.r.t.x.{.}1s2]2p2r2s4w5VQ!]RS!lT9jQ$ZjQ%r!ZQ%v!^Q&w!wS&}!|9oQ'O!}Q'P#OQ'Q#PQ'R#QQ'S#RQ'T#SQ'U#TQ'V#UQ'W#VQ'X#WQ'Z#YQ'^#_Q'a#bW'k#h'm,W0gQ)`$iQ*o%sS*x&P/]Q+R&WQ+i&hQ+}&xS,Q8V;TQ,S8YQ,_'sQ/W*sQ/Z*vQ/x+jQ0S+{S0W8_;VQ0X8`Q0Y8aQ0Z8bQ0[8cQ0]8dQ0^8eQ0_8fQ0`8gQ0a8hQ0b8iQ0c,RQ0f8mQ0k8jQ3O8vQ3R/fQ3b/yQ3e0TQ3k8|Q4h1{Q5]2|Q5`3TQ5k9XQ6m5aQ7O6RQ7_6oQ7s7aQ7}7u[8W!U8^8x9U9]9`Y8X!s&t(u-^-pY8z8]8w9T9[9_Y8{9V9W9^9a:rQ:R9iQ:W9pQ:X9qQ:Y9rQ:Z9sQ:[9tQ:]9uQ:^9vQ:_9wQ:`9xQ:a9yQ:b:|Q:c9zQ:n:dQ:q:mQ;Q;kQ;i;|Q;m;UQ;n;WQ;o;XQ;p;YQ;q;ZQ;r;[Q;s;]Q;t;^Q;u;_Q;v;`Q;w;aQ;x;bQ;y;cR;z;dT!VQ!WR!_RR&R!`S%}!`*zS*w&O&VR/b+QR&v!vR&y!wT!qU$TS!pU$TU$spq*]S&k!o!rQ+n&lQ+q&oQ-})jS/z+m+oR3c/{[!bR!^$p&X)h+Th!nUpq!o!r$T&l&o)j+m+o/{Q.u*]Q/X*tQ2{/RT9k&P)iT!dR$pS!cR$pS%w!^)hS*y&P)iQ+S&XR/c+TT&U!`$qQ#f]R'q#kT'g#f'hR0i,VT(R#r(ZR(X#tQ-a({Q1d-eQ2W.^Q4W1cQ4t2[Q5|4YQ6[4sQ6}6QQ7W6^R7o7XlgOSi{!k$V%^%a%b%d*_*d.x.{Q%WwR*S%TV$tpq*]R.W)sR*R%RQ$lnR)e$mR)[$gT%[x%_T%]x%_T.z*d.{",
      nodeNames: "⚠ ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyNameDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract PropertyDeclaration readonly Optional TypeAnnotation Equals FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp in instanceof CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplatExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var const TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
      maxTerm: 321,
      nodeProps: [
        [NodeProp.group, -26,7,14,16,53,174,178,182,183,185,188,191,202,204,210,212,214,216,219,225,229,231,233,235,237,239,240,"Statement",-30,11,13,23,26,27,37,38,39,40,42,47,55,63,69,70,83,84,93,94,109,112,114,115,116,117,119,120,138,139,141,"Expression",-21,22,24,28,30,142,144,146,147,149,150,151,153,154,155,157,158,159,168,170,172,173,"Type",-2,74,78,"ClassItem"],
        [NodeProp.closedBy, 36,"]",46,"}",61,")",122,"JSXSelfCloseEndTag JSXEndTag",136,"JSXEndTag"],
        [NodeProp.openedBy, 41,"[",45,"{",60,"(",121,"JSXStartTag",131,"JSXStartTag JSXStartCloseTag"]
      ],
      skippedNodes: [0,4,5],
      repeatNodeCount: 27,
      tokenData: "!Ck~R!ZOX$tX^%S^p$tpq%Sqr&rrs'zst$ttu/wuv2Xvw2|wx3zxy:byz:rz{;S{|<S|}<g}!O<S!O!P<w!P!QAT!Q!R!0Z!R![!2j![!]!8Y!]!^!8l!^!_!8|!_!`!9y!`!a!;U!a!b!<{!b!c$t!c!}/w!}#O!>^#O#P$t#P#Q!>n#Q#R!?O#R#S/w#S#T!?c#T#o/w#o#p!?s#p#q!?x#q#r!@`#r#s!@r#s#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/wW$yR#zWO!^$t!_#o$t#p~$t,T%Zg#zW&}+{OX$tX^%S^p$tpq%Sq!^$t!_#o$t#p#y$t#y#z%S#z$f$t$f$g%S$g#BY$t#BY#BZ%S#BZ$IS$t$IS$I_%S$I_$I|$t$I|$JO%S$JO$JT$t$JT$JU%S$JU$KV$t$KV$KW%S$KW&FU$t&FU&FV%S&FV~$t$T&yS#zW!e#{O!^$t!_!`'V!`#o$t#p~$t$O'^S#Z#v#zWO!^$t!_!`'j!`#o$t#p~$t$O'qR#Z#v#zWO!^$t!_#o$t#p~$t'u(RZ#zW]!ROY'zYZ(tZr'zrs*Rs!^'z!^!_*e!_#O'z#O#P,q#P#o'z#o#p*e#p~'z&r(yV#zWOr(trs)`s!^(t!^!_)p!_#o(t#o#p)p#p~(t&r)gR#u&j#zWO!^$t!_#o$t#p~$t&j)sROr)prs)|s~)p&j*RO#u&j'u*[R#u&j#zW]!RO!^$t!_#o$t#p~$t'm*jV]!ROY*eYZ)pZr*ers+Ps#O*e#O#P+W#P~*e'm+WO#u&j]!R'm+ZROr*ers+ds~*e'm+kU#u&j]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,SU]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,kO]!R!R,nPO~+}'u,vV#zWOr'zrs-]s!^'z!^!_*e!_#o'z#o#p*e#p~'z'u-fZ#u&j#zW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z.`Z#zW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z/YR#zW]!RO!^$t!_#o$t#p~$t!Z/hT#zWO!^.X!^!_+}!_#o.X#o#p+}#p~.X&i0S_#zW#pS'Yp'P%kOt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p$g$t$g~/w[1Y_#zW#pSOt$ttu1Ru}$t}!O1R!O!Q$t!Q![1R![!^$t!_!c$t!c!}1R!}#R$t#R#S1R#S#T$t#T#o1R#p$g$t$g~1R$O2`S#T#v#zWO!^$t!_!`2l!`#o$t#p~$t$O2sR#zW#e#vO!^$t!_#o$t#p~$t%r3TU'm%j#zWOv$tvw3gw!^$t!_!`2l!`#o$t#p~$t$O3nS#zW#_#vO!^$t!_!`2l!`#o$t#p~$t'u4RZ#zW]!ROY3zYZ4tZw3zwx*Rx!^3z!^!_5l!_#O3z#O#P7l#P#o3z#o#p5l#p~3z&r4yV#zWOw4twx)`x!^4t!^!_5`!_#o4t#o#p5`#p~4t&j5cROw5`wx)|x~5`'m5qV]!ROY5lYZ5`Zw5lwx+Px#O5l#O#P6W#P~5l'm6ZROw5lwx6dx~5l'm6kU#u&j]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7SU]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7iPO~6}'u7qV#zWOw3zwx8Wx!^3z!^!_5l!_#o3z#o#p5l#p~3z'u8aZ#u&j#zW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z9ZZ#zW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z:RT#zWO!^9S!^!_6}!_#o9S#o#p6}#p~9S%V:iR!_$}#zWO!^$t!_#o$t#p~$tZ:yR!^R#zWO!^$t!_#o$t#p~$t%R;]U'Q!R#U#v#zWOz$tz{;o{!^$t!_!`2l!`#o$t#p~$t$O;vS#R#v#zWO!^$t!_!`2l!`#o$t#p~$t$u<ZSi$m#zWO!^$t!_!`2l!`#o$t#p~$t&i<nR|&a#zWO!^$t!_#o$t#p~$t&i=OVq%n#zWO!O$t!O!P=e!P!Q$t!Q![>Z![!^$t!_#o$t#p~$ty=jT#zWO!O$t!O!P=y!P!^$t!_#o$t#p~$ty>QR{q#zWO!^$t!_#o$t#p~$ty>bZ#zWjqO!Q$t!Q![>Z![!^$t!_!g$t!g!h?T!h#R$t#R#S>Z#S#X$t#X#Y?T#Y#o$t#p~$ty?YZ#zWO{$t{|?{|}$t}!O?{!O!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@QV#zWO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@nV#zWjqO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$t,TA[`#zW#S#vOYB^YZ$tZzB^z{HT{!PB^!P!Q!*|!Q!^B^!^!_Da!_!`!+u!`!a!,t!a!}B^!}#O!-s#O#P!/o#P#oB^#o#pDa#p~B^XBe[#zWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^XCb_#zWxPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$tPDfVxPOYDaZ!PDa!P!QD{!Q!}Da!}#OEd#O#PFP#P~DaPEQUxP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{PEgTOYEdZ#OEd#O#PEv#P#QDa#Q~EdPEyQOYEdZ~EdPFSQOYDaZ~DaXF_Y#zWOYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FYXGSV#zWOYFYYZ$tZ!^FY!^!_Ed!_#oFY#o#pEd#p~FYXGnV#zWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^,TH[^#zWxPOYHTYZIWZzHTz{Ki{!PHT!P!Q!)j!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TI]V#zWOzIWz{Ir{!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TIwX#zWOzIWz{Ir{!PIW!P!QJd!Q!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TJkR#zWT+{O!^$t!_#o$t#p~$t+{JwROzJtz{KQ{~Jt+{KTTOzJtz{KQ{!PJt!P!QKd!Q~Jt+{KiOT+{,TKp^#zWxPOYHTYZIWZzHTz{Ki{!PHT!P!QLl!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TLu_#zWT+{xPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$t+{MyYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q!$a!Q!}Mt!}#O! w#O#P!#}#P~Mt+{NnYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q! ^!Q!}Mt!}#O! w#O#P!#}#P~Mt+{! eUT+{xP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{+{! zWOY! wYZJtZz! wz{!!d{#O! w#O#P!#k#P#QMt#Q~! w+{!!gYOY! wYZJtZz! wz{!!d{!P! w!P!Q!#V!Q#O! w#O#P!#k#P#QMt#Q~! w+{!#[TT+{OYEdZ#OEd#O#PEv#P#QDa#Q~Ed+{!#nTOY! wYZJtZz! wz{!!d{~! w+{!$QTOYMtYZJtZzMtz{Ni{~Mt+{!$f_xPOzJtz{KQ{#ZJt#Z#[!$a#[#]Jt#]#^!$a#^#aJt#a#b!$a#b#gJt#g#h!$a#h#iJt#i#j!$a#j#mJt#m#n!$a#n~Jt,T!%j[#zWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!&e^#zWOY!%eYZIWZz!%ez{!&`{!P!%e!P!Q!'a!Q!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!'hY#zWT+{OYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FY,T!(]X#zWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#o!%e#o#p! w#p~!%e,T!(}X#zWOYHTYZIWZzHTz{Ki{!^HT!^!_Mt!_#oHT#o#pMt#p~HT,T!)qc#zWxPOzIWz{Ir{!^IW!^!_Jt!_#ZIW#Z#[!)j#[#]IW#]#^!)j#^#aIW#a#b!)j#b#gIW#g#h!)j#h#iIW#i#j!)j#j#mIW#m#n!)j#n#oIW#o#pJt#p~IW,T!+TV#zWS+{OY!*|YZ$tZ!^!*|!^!_!+j!_#o!*|#o#p!+j#p~!*|+{!+oQS+{OY!+jZ~!+j$P!,O[#zW#e#vxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^]!,}[#mS#zWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^X!-xY#zWOY!-sYZ$tZ!^!-s!^!_!.h!_#O!-s#O#P!/T#P#QB^#Q#o!-s#o#p!.h#p~!-sP!.kTOY!.hZ#O!.h#O#P!.z#P#QDa#Q~!.hP!.}QOY!.hZ~!.hX!/YV#zWOY!-sYZ$tZ!^!-s!^!_!.h!_#o!-s#o#p!.h#p~!-sX!/tV#zWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^y!0bd#zWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#U$t#U#V!4Q#V#X$t#X#Y?T#Y#b$t#b#c!3p#c#d!5`#d#l$t#l#m!6h#m#o$t#p~$ty!1wZ#zWjqO!Q$t!Q![!1p![!^$t!_!g$t!g!h?T!h#R$t#R#S!1p#S#X$t#X#Y?T#Y#o$t#p~$ty!2q_#zWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#X$t#X#Y?T#Y#b$t#b#c!3p#c#o$t#p~$ty!3wR#zWjqO!^$t!_#o$t#p~$ty!4VW#zWO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!4vW#zWjqO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!5eV#zWO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6RV#zWjqO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6mZ#zWO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$ty!7gZ#zWjqO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$t%w!8cR!WV#zW#c%hO!^$t!_#o$t#p~$t!P!8sR^w#zWO!^$t!_#o$t#p~$t+c!9XR'Ud![%Y#n&s'qP!P!Q!9b!^!_!9g!_!`!9tW!9gO#|W#v!9lP#V#v!_!`!9o#v!9tO#e#v#v!9yO#W#v%w!:QT!t%o#zWO!^$t!_!`!:a!`!a!:t!a#o$t#p~$t$O!:hS#Z#v#zWO!^$t!_!`'j!`#o$t#p~$t$P!:{R#O#w#zWO!^$t!_#o$t#p~$t%w!;aT'T!s#W#v#wS#zWO!^$t!_!`!;p!`!a!<Q!a#o$t#p~$t$O!;wR#W#v#zWO!^$t!_#o$t#p~$t$O!<XT#V#v#zWO!^$t!_!`2l!`!a!<h!a#o$t#p~$t$O!<oS#V#v#zWO!^$t!_!`2l!`#o$t#p~$t%w!=SV'e%o#zWO!O$t!O!P!=i!P!^$t!_!a$t!a!b!=y!b#o$t#p~$t$`!=pRr$W#zWO!^$t!_#o$t#p~$t$O!>QS#zW#`#vO!^$t!_!`2l!`#o$t#p~$t&e!>eRt&]#zWO!^$t!_#o$t#p~$tZ!>uRyR#zWO!^$t!_#o$t#p~$t$O!?VS#]#v#zWO!^$t!_!`2l!`#o$t#p~$t$P!?jR#zW']#wO!^$t!_#o$t#p~$t~!?xO!O~%r!@PT'l%j#zWO!^$t!_!`2l!`#o$t#p#q!=y#q~$t$u!@iR}$k#zW'_QO!^$t!_#o$t#p~$tX!@yR!fP#zWO!^$t!_#o$t#p~$t,T!Aar#zW#pS'Yp'P%k&}+{OX$tX^%S^p$tpq%Sqt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/w",
      tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon],
      topRules: {"Script":[0,6]},
      dialects: {jsx: 12773, ts: 12775},
      dynamicPrecedences: {"139":1,"166":1},
      specialized: [{term: 277, get: (value, stack) => (tsExtends(value, stack) << 1) | 1},{term: 277, get: value => spec_identifier$1[value] || -1},{term: 286, get: value => spec_word[value] || -1},{term: 58, get: value => spec_LessThan[value] || -1}],
      tokenPrec: 12795
    });

    /// A collection of JavaScript-related
    /// [snippets](#autocomplete.snippet).
    const snippets = [
        snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
            label: "function",
            detail: "definition",
            type: "keyword"
        }),
        snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
            label: "for",
            detail: "of loop",
            type: "keyword"
        }),
        snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
            label: "try",
            detail: "block",
            type: "keyword"
        }),
        snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        snippetCompletion("import {${names}} from \"${module}\"\n${}", {
            label: "import",
            detail: "named",
            type: "keyword"
        }),
        snippetCompletion("import ${name} from \"${module}\"\n${}", {
            label: "import",
            detail: "default",
            type: "keyword"
        })
    ];

    /// A language provider based on the [Lezer JavaScript
    /// parser](https://github.com/lezer-parser/javascript), extended with
    /// highlighting and indentation information.
    const javascriptLanguage = LezerLanguage.define({
        parser: parser$2.configure({
            props: [
                indentNodeProp.add({
                    IfStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
                    LabeledStatement: flatIndent,
                    SwitchBody: context => {
                        let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                    },
                    Block: delimitedIndent({ closing: "}" }),
                    ArrowFunction: cx => cx.baseIndent + cx.unit,
                    "TemplateString BlockComment": () => -1,
                    "Statement Property": continuedIndent({ except: /^{/ }),
                    JSXElement(context) {
                        let closed = /^\s*<\//.test(context.textAfter);
                        return context.lineIndent(context.state.doc.lineAt(context.node.from)) + (closed ? 0 : context.unit);
                    },
                    JSXEscape(context) {
                        let closed = /\s*\}/.test(context.textAfter);
                        return context.lineIndent(context.state.doc.lineAt(context.node.from)) + (closed ? 0 : context.unit);
                    },
                    "JSXOpenTag JSXSelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    }
                }),
                foldNodeProp.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside$1,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                }),
                styleTags({
                    "get set async static": tags.modifier,
                    "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
                    "in of await yield void typeof delete instanceof": tags.operatorKeyword,
                    "export import let var const function class extends": tags.definitionKeyword,
                    "with debugger from as new": tags.keyword,
                    TemplateString: tags.special(tags.string),
                    Super: tags.atom,
                    BooleanLiteral: tags.bool,
                    this: tags.self,
                    null: tags.null,
                    Star: tags.modifier,
                    VariableName: tags.variableName,
                    "CallExpression/VariableName": tags.function(tags.variableName),
                    VariableDefinition: tags.definition(tags.variableName),
                    Label: tags.labelName,
                    PropertyName: tags.propertyName,
                    "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
                    "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
                    "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
                    PropertyNameDefinition: tags.definition(tags.propertyName),
                    UpdateOp: tags.updateOperator,
                    LineComment: tags.lineComment,
                    BlockComment: tags.blockComment,
                    Number: tags.number,
                    String: tags.string,
                    ArithOp: tags.arithmeticOperator,
                    LogicOp: tags.logicOperator,
                    BitOp: tags.bitwiseOperator,
                    CompareOp: tags.compareOperator,
                    RegExp: tags.regexp,
                    Equals: tags.definitionOperator,
                    "Arrow : Spread": tags.punctuation,
                    "( )": tags.paren,
                    "[ ]": tags.squareBracket,
                    "{ }": tags.brace,
                    ".": tags.derefOperator,
                    ", ;": tags.separator,
                    TypeName: tags.typeName,
                    TypeDefinition: tags.definition(tags.typeName),
                    "type enum interface implements namespace module declare": tags.definitionKeyword,
                    "abstract global privacy readonly": tags.modifier,
                    "is keyof unique infer": tags.operatorKeyword,
                    JSXAttributeValue: tags.string,
                    JSXText: tags.content,
                    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
                    "JSXIdentifier JSXNameSpacedName": tags.tagName,
                    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.propertyName
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
            wordChars: "$"
        }
    });
    /// A language provider for TypeScript.
    const typescriptLanguage = javascriptLanguage.configure({ dialect: "ts" });
    /// Language provider for JSX.
    const jsxLanguage = javascriptLanguage.configure({ dialect: "jsx" });
    /// Language provider for JSX + TypeScript.
    const tsxLanguage = javascriptLanguage.configure({ dialect: "jsx ts" });
    /// JavaScript support. Includes [snippet](#lang-javascript.snippets)
    /// completion.
    function javascript(config = {}) {
        let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
            : config.typescript ? typescriptLanguage : javascriptLanguage;
        return new LanguageSupport(lang, javascriptLanguage.data.of({
            autocomplete: ifNotIn(["LineComment", "BlockComment", "String"], completeFromList(snippets))
        }));
    }

    /// Connects an [ESLint](https://eslint.org/) linter to CodeMirror's
    /// [lint](#lint) integration. `eslint` should be an instance of the
    /// [`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)
    /// class, and `config` an optional ESLint configuration. The return
    /// value of this function can be passed to [`linter`](#lint.linter)
    /// to create a JavaScript linting extension.
    ///
    /// Note that ESLint targets node, and is tricky to run in the
    /// browser. The [eslint4b](https://github.com/mysticatea/eslint4b)
    /// and
    /// [eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)
    /// packages may help with that.
    function esLint(eslint, config) {
        if (!config) {
            config = {
                parserOptions: { ecmaVersion: 2019, sourceType: "module" },
                env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
                rules: {}
            };
            eslint.getRules().forEach((desc, name) => {
                if (desc.meta.docs.recommended)
                    config.rules[name] = 2;
            });
        }
        return (view) => {
            let { state } = view, found = [];
            for (let { from, to } of javascriptLanguage.findRegions(state)) {
                let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
                for (let d of eslint.verify(state.sliceDoc(from, to), config))
                    found.push(translateDiagnostic$1(d, state.doc, offset));
            }
            return found;
        };
    }
    function mapPos$1(line, col, doc, offset) {
        return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
    }
    function translateDiagnostic$1(input, doc, offset) {
        let start = mapPos$1(input.line, input.column, doc, offset);
        let result = {
            from: start,
            to: input.endLine != null && input.endColumn != 1 ? mapPos$1(input.endLine, input.endColumn, doc, offset) : start,
            message: input.message,
            source: input.ruleId ? "jshint:" + input.ruleId : "jshint",
            severity: input.severity == 1 ? "warning" : "error",
        };
        if (input.fix) {
            let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
            result.actions = [{
                    name: "fix",
                    apply(view, start) {
                        view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });
                    }
                }];
        }
        return result;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,break:16, goto:20, do:24, end:26, while:30, nil:32, true:34, false:36, or:80, and:82, not:106, function:114, encoder_number:246, elapsed_time:246, active_bank:246, relative_change:246, set_default_bank_color:248, set_active_bank:248, set_element_default_number:248, set_encoder_velocity_parameters:248, midi_send:250, led_value:250, led_mode:250, keyboard_macro:250, keyboard_change:250, repeat:126, until:128, if:132, then:134, elseif:136, else:138, for:142, in:150, local:160, get_absolute_value:262, get_relative_value:262, return:176};
    const parser$1 = Parser.deserialize({
      version: 13,
      states: "=WO!gQPOOOOQO'#Cc'#CcO!nQPO'#CaO!sQPOOOOQO'#Ei'#EiO#XQQO'#CwO$tQPO'#EhOOQO'#Eh'#EhO%OQPO'#EhOOQO'#EQ'#EQO&kQPO'#EPOOQO'#Ed'#EdOOQO'#EX'#EXO&pQPO'#C_OOQO'#C_'#C_QOQPOOO!nQPO'#CeO'TQPO'#CgOOQO'#Di'#DiO'[QPO'#DjO'[QPO'#DkO#XQQO'#CjO'aQPO'#DlO#XQQO'#DoO!nQPO'#DtO!nQPO'#D{O'hQPO'#EROOQO'#EU'#EUO'pQQO'#EVO(WQPO,58{OOQO'#Cq'#CqO!nQPO,59^O#XQQO,59`O)gQQO'#C|O)nQQO'#EnOOQO'#Ej'#EjOOQO,59f,59fO!nQPO,59fO)uQPO'#EfO-qQPO,59cOOQO'#Dd'#DdOOQO'#De'#DeO#XQQO'#DbOOQO'#Ef'#EfO'[QPO'#DfO-xQPO'#E^O.QQPO,5;kO#XQQO,5:kOOQO-E8V-E8VOOQO,58y,58yOOQO,59P,59PO.YQPO,59RO._QPO'#DhOOQO,5:U,5:UOOQO,5:V,5:VO.dQPO,59UO.kQPO,5:WO.pQPO,5:ZO.wQPO'#FOOOQO'#Dx'#DxO/SQPO'#DwO/XQPO,5:`O/^QPO'#D|O'[QPO,5:gO/iQQO'#FQOOQO'#ES'#ESO!nQPO,5:iO1]QPO,5:mO2yQPO,5:qOOQO,5:q,5:qOOQO1G.g1G.gOOQO1G.x1G.xO3aQPO1G.zO3hQSO'#EfO4tQSO'#EiO#XQQO'#DOO7iQSO'#DQOOQO'#Ek'#EkOOQO,59h,59hO7sQSO,59hO7xQPO'#EoOOQO,5;Y,5;YO9kQPO,5;YO9pQPO1G/QOOQO1G.}1G.}OOQO'#DX'#DXOOQO'#DY'#DYOOQO'#DZ'#DZOOQO'#D['#D[OOQO'#D^'#D^OOQO'#D_'#D_OOQO'#Da'#DaO#XQQO,59oO#XQQO,59oO#XQQO,59oO#XQQO,59oO#XQQO,59oO#XQQO,59oOOQO,59o,59oO#XQQO,59oO#XQQO,59oO#XQQO,59oO;PQPO,59|OOQO,5:Q,5:QO<xQPO,5:xOOQO-E8[-E8[OOQO'#Dz'#DzOOQO1G0V1G0VOOQO1G.m1G.mO'TQPO,5:SO'TQPO1G.pO#XQQO1G/rO=SQPO1G/uO#XQQO,5:bO!nQPO'#E[O=^QPO,5;jO#XQQO,5:cO'TQPO1G/zO!nQPO'#E]O=fQPO,5:hO!nQPO,5:hOOQO1G0R1G0RO!nQPO'#ETO=qQPO,5;lO'[QPO1G0TO#XQQO1G0XOOQO1G0]1G0]OOQO7+$f7+$fO?bQQO,59kO@iQPO,59jO(]QQO1G/SO@pQSO,59|O#XQQO'#EYO@zQPO,5;ZOOQO1G0t1G0tOOQO7+$l7+$lOEaQPO1G/ZOEhQPO1G/ZOHeQPO1G/ZOHlQPO1G/ZOKcQPO1G/ZOKpQPO1G/ZOM}QPO1G/ZO!#pQPO1G/ZO!#wQPO1G/ZO!$OQPO1G/nO!$TQPO7+$[O!$YQPO7+%^O!%uQPO7+%aO!%}QPO1G/|OOQO,5:v,5:vOOQO-E8Y-E8YOOQO1G/}1G/}O!&UQPO7+%fOOQO,5:w,5:wOOQO-E8Z-E8ZO!nQPO1G0SOOQO1G0S1G0SO!&ZQQO,5:oO!nQPO'#E_O!&`QPO1G1WOOQO7+%o7+%oOOQO7+%s7+%sO!(PQSO1G/VO!(ZQPO1G/UO!)gQSO1G/ZO!)nQSO1G/ZO!*|QSO1G/ZO!+TQSO1G/ZO!,]QSO1G/ZO!,jQSO1G/ZO!-YQSO1G/ZO!/^QSO1G/ZO!/eQSO1G/ZO!/lQSO7+$nO!/tQPO,5:tOOQO-E8W-E8WOOQO7+%Y7+%YOOQO<<Gv<<GvO!1gQPO<<H{O#XQQO'#EZO'TQPO<<H{O#XQQO7+%hOOQO<<IQ<<IQOOQO7+%n7+%nOOQO1G0Z1G0ZO/iQQO,5:yOOQO-E8]-E8]O?bQQO7+$pOOQO<<HY<<HYO!1oQPO<<HYOOQO-E8X-E8XO'TQPOAN>gO!1tQPO,5:uO!1{QPOAN>gO!2QQPO<<ISOOQO1G0e1G0eO!2[QSO<<H[OOQOAN=tAN=tO!2fQPOG24RO=SQPO1G0aOOQOG24RG24RO#XQQOAN>nOOQOLD)mLD)mOOQO7+%{7+%{O!2kQPOG24YO?bQQO'#DbO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59oO?bQQO,59o",
      stateData: "!2r~O#UOS#VOSPOS~OSZOUQOWZOY`O[aO_eOlTO!ZiO!afO!dgO!ihO!rjO!zlO#XPO#obO#pcO#qdO#wkO~O#SRP~P]O#XPO~OgoOipOlrOouOqqO#ZnO~O`{Oa{Ob{Oc{Od{OlTOqqO!VzO!Z|O#XPO#ZnO#fyO#ixO#jxO#obO#pcO#qdO~Og#[Xi#[Xl#[Xo#[Xq#[X#Z#[X~Ov}O#`#sX~P$`OS#WXU#WXW#WXY#WX[#WX_#WXl#WX!Z#WX!a#WX!d#WX!i#WX!r#WX!z#WX#S#WX#X#WX#o#WX#p#WX#q#WX#w#WX]#WX!b#WX!f#WX!g#WX~P$`O#`!PO~O#SRX]RX!bRX!fRX!gRX~P]O]RP~P]Ol!UO~O!bRP~P]O!Z!dO#XPO~OS!gO#S!yX]!yX!b!yX!f!yX!g!yX~P#XOU!hO~O`{Oa{Ob{Oc{Od{Oi!mOlTOqqO!V%fO!Z|O#XPO#ZnO#fyO#ixO#jxO#obO#pcO#qdO~Ou!pO~P(]Om!sO~P#XOm#YXx#YXy#YXz#YX!P#YX!S#YX#d#YX#e#YX#f#YX#g#YX#h#YX#i#YX#j#YX#k#YX#l#YX#m#YX#n#YX[#YX!e#YXS#YX#S#YXj#YXv#YXU#YXW#YXY#YX_#YX!Z#YX!a#YX!d#YX!i#YX!r#YX!z#YX#X#YX#o#YX#p#YX#q#YX#w#YX]#YX!b#YX!f#YX!g#YX~P!sOx#WOy#XOz#OO!P#SO!S!|O#d!wO#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}O~Om!vO~P,mOlTO#XPO~Ov}O#`#sa~O]#`O~Om#aO~O[#bO~P,mO!b#cO~O!e#dO~P,mOv#fO#`#eO!m#rX~O!m#hO~O[#iO~Og#jOo#lOl!pX~O#u#nOS!wPU!wPW!wPY!wP[!wP_!wPl!wPv!wP!Z!wP!a!wP!d!wP!i!wP!r!wP!z!wP#S!wP#X!wP#`!wP#o!wP#p!wP#q!wP#w!wP]!wP!b!wP!f!wP!g!wP~O#`#qOS!uaU!uaW!uaY!ua[!ua_!ual!ua!Z!ua!a!ua!d!ua!i!ua!r!ua!z!ua#S!ua#X!ua#o!ua#p!ua#q!ua#w!ua]!ua!b!ua!f!ua!g!ua~OS#rO#S!ya]!ya!b!ya!f!ya!g!ya~P,mOj#sO~P,mOx#YXy#YXz#YX!P#YX!S#YX#a#YX#d#YX#e#YX#f#YX#g#YX#h#YX#i#YX#j#YX#k#YX#l#YX#m#YX#n#YXu#YX~P!sO#`#tOg#]Xi#]Xl#]Xo#]Xq#]Xx#]Xy#]Xz#]X!P#]X!S#]X#Z#]X#a#]X#d#]X#e#]X#f#]X#g#]X#h#]X#i#]X#j#]X#k#]X#l#]X#m#]X#n#]Xu#]X~Ox%nOy%oOz%gO!P%kO!S!|O#d!wO#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}O~O#atXutX~P6eO#a#vO~Ov#xOm#cXS#cXU#cXW#cXY#cX[#cX_#cXl#cX!Z#cX!a#cX!d#cX!i#cX!r#cX!z#cX#S#cX#X#cX#o#cX#p#cX#q#cX#w#cX]#cX!b#cX!f#cX!g#cX~P,mOm#zO~OlrOqqO#ZnO~O#n!}Ox!Uay!Uaz!Ua!P!Ua!S!Ua#d!Ua#e!Ua#f!Ua#g!Ua#h!Ua#i!Ua#j!Ua#k!Ua#l!Ua#m!Ua~Om!Ua[!Ua!e!UaS!Ua#S!Uaj!Uav!UaU!UaW!UaY!Ua_!Ual!Ua!Z!Ua!a!Ua!d!Ua!i!Ua!r!Ua!z!Ua#X!Ua#o!Ua#p!Ua#q!Ua#w!Ua]!Ua!b!Ua!f!Ua!g!Ua~P9{Ov#Qa#`#Qa~P$`O!fRP!gRP~P]Ov#fO!m#ra~Og#jOo$bOl!pa~Ov$eOS#taU#taW#taY#ta[#ta_#tal#ta!Z#ta!a#ta!d#ta!i#ta!r#ta!z#ta#S#ta#X#ta#`#ta#o#ta#p#ta#q#ta#w#ta]#ta!b#ta!f#ta!g#ta~O`{Oa{Ob{Oc{Od{OlTOqqO!V%fO!Z|O#XPO#ZnO#fyO#ixO#jxO#obO#pcO#qdO~Oj$jO~P,mO#a!Uau!Ua~P9{Ov#xOm#caS#caU#caW#caY#ca[#ca_#cal#ca!Z#ca!a#ca!d#ca!i#ca!r#ca!z#ca#S#ca#X#ca#o#ca#p#ca#q#ca#w#ca]#ca!b#ca!f#ca!g#ca~O!P#SO!S!|O#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Omwixwiywizwi[wi!ewiSwi#SwijwivwiUwiWwiYwi_wilwi!Zwi!awi!dwi!iwi!rwi!zwi#Xwi#owi#pwi#qwi#wwi]wi!bwi!fwi!gwi~O#d!wO~PBkO#dwi~PBkO!P#SO!S!|O#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Omwixwiywizwi#dwi#fwi[wi!ewiSwi#SwijwivwiUwiWwiYwi_wilwi!Zwi!awi!dwi!iwi!rwi!zwi#Xwi#owi#pwi#qwi#wwi]wi!bwi!fwi!gwi~O#ewi~PEoO#e!xO~PEoO!S!|O#k!|O#l!|O#m!|O#n!}Omwixwiywizwi#dwi#ewi#fwi#gwi#hwi[wi!ewiSwi#SwijwivwiUwiWwiYwi_wilwi!Zwi!awi!dwi!iwi!rwi!zwi#Xwi#owi#pwi#qwi#wwi]wi!bwi!fwi!gwi~O!P#SO#i!{O#j!{O~PHsO!Pwi#iwi#jwi~PHsO#n!}Omwixwiywi[wi!ewiSwi#SwijwivwiUwiWwiYwi_wilwi!Zwi!awi!dwi!iwi!rwi!zwi#Xwi#owi#pwi#qwi#wwi]wi!bwi!fwi!gwi~Ozwi!Pwi!Swi#dwi#ewi#fwi#gwi#hwi#iwi#jwi#kwi#lwi#mwi~PK}Oz#OO!P#SO!S!|O#d!wO#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Omwixwi[wi!ewiSwi#SwijwivwiUwiWwiYwi_wilwi!Zwi!awi!dwi!iwi!rwi!zwi#Xwi#owi#pwi#qwi#wwi]wi!bwi!fwi!gwi~Oy#XO~PNzOywi~PNzO]$wO~O]$xO~OS!`qU!`qW!`qY!`q[!`q_!`ql!`q!Z!`q!a!`q!d!`q!i!`q!r!`q!z!`q#S!`q#X!`q#o!`q#p!`q#q!`q#w!`q]!`q!b!`q!f!`q!g!`q~P,mO!f$zO!g${O~Ov$|O~P,mO]$}O~O#v%PO~Ov$eOS#tiU#tiW#tiY#ti[#ti_#til#ti!Z#ti!a#ti!d#ti!i#ti!r#ti!z#ti#S#ti#X#ti#`#ti#o#ti#p#ti#q#ti#w#ti]#ti!b#ti!f#ti!g#ti~O#asiusi~P6eO#`%SO~O!P%kO!S!|O#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Oxwiywizwi#awiuwi~O#d!wO~P!(`O#dwi~P!(`O!P%kO!S!|O#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Oxwiywizwi#awi#dwi#fwiuwi~O#ewi~P!)uO#e!xO~P!)uO!S!|O#k!|O#l!|O#m!|O#n!}Oxwiywizwi#awi#dwi#ewi#fwi#gwi#hwiuwi~O!P%kO#i!{O#j!{O~P!+[O!Pwi#iwi#jwi~P!+[O#n!}Oxwiywi#awiuwi~Ozwi!Pwi!Swi#dwi#ewi#fwi#gwi#hwi#iwi#jwi#kwi#lwi#mwi~P!,wOz%gO!P%kO!S!|O#d!wO#e!xO#f!yO#g!zO#h!zO#i!{O#j!{O#k!|O#l!|O#m!|O#n!}Oxwi#awiuwi~Oy%oO~P!.VOywi~P!.VOu%TO#a%UO~Om!|av!|aS!|aU!|aW!|aY!|a[!|a_!|al!|a!Z!|a!a!|a!d!|a!i!|a!r!|a!z!|a#S!|a#X!|a#o!|a#p!|a#q!|a#w!|a]!|a!b!|a!f!|a!g!|a~P,mO!f$zO!g%WO~Ou%^O~O!e%`O~P,mO]%aO~Ov%bO[!jy~P,mO#aryury~P6eO]%cO~O[!j!Z~P,mO",
      goto: ";g#uPPP#vP$fP$sP$fP$fPP$fPPPPPP&y'{P'{PP)TPP*]P&yP+g+g+gPP'PPPP+k,V,u-cP.T.wP/k'PP0e0e'PP1c1r1r1r$fPP$fPPPP$fP2{2{3OP3R$f3[$fP$f3_$f3l3o$f3uP4U4e4k4q4w4}5TPPPP5ZP5hP7|9Y:f:nPP:t:zPPPPPPPPPPPPPP;S;V;dQ_OQ!TaQ!YfQ$V#aQ$W#bQ$Y#dQ$_#iQ%Y${Q%_%WR%d%`gZO]af#a#b#d#i${%W%`#WSOT]aefglprz}!P!m#O#P#Q#R#S#T#V#W#X#a#b#c#d#e#h#i#q#t#x$z${$|%S%W%`%b%f%g%h%i%j%k%l%m%n%oQmQQ!S`Q![hQ!`iQ!bjQ!ioS!lq#vQ!uuQ#p!dQ$[#fQ$`#jQ$c#lQ$d#nQ%O$bR%Q$eWsRv!k!u!s{Teglpqrz!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#t#v#x$z$|%S%b%f%g%h%i%j%k%l%m%n%o#]SOT]aefglpqrz}!P!m#O#P#Q#R#S#T#V#W#X#a#b#c#d#e#h#i#q#t#v#x$z${$|%S%W%`%b%f%g%h%i%j%k%l%m%n%o#]VOT]aefglpqrz}!P!m#O#P#Q#R#S#T#V#W#X#a#b#c#d#e#h#i#q#t#v#x$z${$|%S%W%`%b%f%g%h%i%j%k%l%m%n%o!tVTeglpqrz}!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#t#v#x$z$|%S%b%f%g%h%i%j%k%l%m%n%ogWO]af#a#b#d#i${%W%`T!oq#vp#Pw!X!Z!f!j!r#u#|$T$U$X$Z$u%X%Z%e]%h!n$i$k$r$s%]t#Qw!X!Z!f!j!r#u#|#}$P$T$U$X$Z$u%X%Z%ea%i!n$i$k$l$n$r$s%]r#Rw!X!Z!f!j!r#u#|#}$T$U$X$Z$u%X%Z%e_%j!n$i$k$l$r$s%]v#Sw!X!Z!f!j!r#u#|#}$O$P$T$U$X$Z$u%X%Z%ec%k!n$i$k$l$m$n$r$s%]x#Tw!X!Z!f!j!r#u#|#}$O$P$Q$T$U$X$Z$u%X%Z%ee%l!n$i$k$l$m$n$o$r$s%]!c#Uw!X!Z!f!j!n!r#u#|#}$O$P$Q$R$T$U$X$Z$i$k$l$m$n$o$p$r$s$u%X%Z%]%e!O#Vw!X!Z!f!j!r#Y#u#|#}$O$P$Q$R$S$T$U$X$Z$u%X%Z%ek%m!n#w$i$k$l$m$n$o$p$q$r$s%]!UzTeglprz!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#x$z$|%bm%fq#t#v%S%f%g%h%i%j%k%l%m%n%oQ!VcQ!WdQ#Z|Q#m!aR$g#pfZO]af#a#b#d#i${%W%`!s{Teglpqrz!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#t#v#x$z$|%S%b%f%g%h%i%j%k%l%m%n%oR!_hR!^hQ#_!PQ$^#hR$h#qR!aigYO]af#a#b#d#i${%W%`R!ejQ#o!bR%[%Qd^Oaf#a#b#d#i${%W%`R!R]d]Oaf#a#b#d#i${%W%`R!Q]Q#y!rR$v#yQ$y$YR%V$yQ#g![R$]#gQ#k!`R$a#kQ!OUR#]!OQ$f#oR%R$fg[O]af#a#b#d#i${%W%`QwTQ!XeQ!ZgQ!flQ!jpS!nq#vW!rr!P#h#qQ#YzQ#u!mQ#w%fQ#|#OQ#}#PQ$O#QQ$P#RQ$Q#SQ$R#TQ$S#VQ$T#WQ$U#XQ$X#cQ$Z#eQ$i#tQ$k%gQ$l%hQ$m%iQ$n%jQ$o%kQ$p%lQ$q%mQ$r%nQ$s%oQ$u#xQ%X$zQ%Z$|Q%]%SR%e%bhRO]af}#a#b#d#i${%W%`!UvTeglprz!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#x$z$|%bm!kq#t#v%S%f%g%h%i%j%k%l%m%n%ofUO]af#a#b#d#i${%W%`!rVTeglpqrz!P!m#O#P#Q#R#S#T#V#W#X#c#e#h#q#t#v#x$z$|%S%b%f%g%h%i%j%k%l%m%n%oR#[}UtRv!kR#{!uQ!qqR$t#vXsRv!k!uQ!trV#^!P#h#qR!]hgXO]af#a#b#d#i${%W%`R!cj",
      nodeNames: "⚠ Comment Chunk Block ; Label :: Name break Goto goto Scope do end WhileStatement while nil true false Ellipsis Number String Property . MemberExpression [ ] Parens ( ) FunctionCall : TableConstructor { FieldDynamic FieldProp FieldExp } , BinaryExpression or and CompareOp BitOp BitOp BitOp BitOp Concat ArithOp ArithOp * ArithOp UnaryExpression not ArithOp BitOp FunctionDef function FuncBody GridVariable GridSetter GridAction RepeatStatement repeat until IfStatement if then elseif else ForStatement for ForNumeric ForGeneric NameList in ExpList Function FuncName LocalFunction local Assign VarList Local AttNameList Attrib GridGetter ReturnStatement return",
      maxTerm: 131,
      nodeProps: [
        [NodeProp.group, -18,4,5,8,9,11,14,30,59,60,61,62,65,70,77,79,81,83,86,"Statement",-3,34,35,36,"Field"]
      ],
      skippedNodes: [0,1],
      repeatNodeCount: 7,
      tokenData: "<c~RsXY#`YZ#z[]#`]^$Xpq#`rs$auv,Tvw,Ywx,_xy3|yz4Rz{4W{|4]|}4b}!O4i!O!P5P!P!Q5f!Q!R5s!R![7X![!]9k!]!^9x!^!_:P!_!`:h!`!a:p!c!};S!}#O;b#O#P;g#P#Q;p#Q#R;u#R#S;S#T#o;S#o#p;z#p#q<P#q#r<U#r#s<Z~#eS#V~XY#`[]#`pq#`#O#P#q~#tQYZ#`]^#`~$PP#U~]^$S~$XO#U~~$^P#U~YZ$S~$dUOY$vZ]$v^r$vs#O$v#O#P(t#P~$v~$yVOY$vZ]$v^r$vrs%`s#O$v#O#P%e#P~$v~%eO#Z~~%hZrs$vwx$v!Q![&Z#O#P$v#T#U$v#U#V$v#Y#Z$v#b#c$v#i#j'i#l#m([#n#o$v~&^XOY$vZ]$v^r$vrs%`s!Q$v!Q![&y![#O$v#O#P%e#P~$v~&|XOY$vZ]$v^r$vrs%`s!Q$v!Q![$v![#O$v#O#P%e#P~$v~'lP#o#p'o~'rR!Q!['{!c!i'{#T#Z'{~(OS!Q!['{!c!i'{#T#Z'{#q#r$v~(_R!Q![(h!c!i(h#T#Z(h~(kR!Q![$v!c!i$v#T#Z$v~(wZrs$vwx$v!Q![)j#O#P$v#T#U$v#U#V$v#Y#Z$v#b#c$v#i#j*x#l#m+k#n#o$v~)mXOY$vZ]$v^r$vrs%`s!Q$v!Q![*Y![#O$v#O#P%e#P~$v~*]XOY$vZ]$v^r$vrs%`s!Q$v!Q![$v![#O$v#O#P%e#P~$v~*{P#o#p+O~+RR!Q![+[!c!i+[#T#Z+[~+_S!Q![+[!c!i+[#T#Z+[#q#r$v~+nR!Q![+w!c!i+w#T#Z+w~+zR!Q![$v!c!i$v#T#Z$v~,YO#l~~,_O#e~~,bUOY,tZ],t^w,tx#O,t#O#P0m#P~,t~,wVOY,tZ],t^w,twx%`x#O,t#O#P-^#P~,t~-aZrs,twx,t!Q![.S#O#P,t#T#U,t#U#V,t#Y#Z,t#b#c,t#i#j/b#l#m0T#n#o,t~.VXOY,tZ],t^w,twx%`x!Q,t!Q![.r![#O,t#O#P-^#P~,t~.uXOY,tZ],t^w,twx%`x!Q,t!Q![,t![#O,t#O#P-^#P~,t~/eP#o#p/h~/kR!Q![/t!c!i/t#T#Z/t~/wS!Q![/t!c!i/t#T#Z/t#q#r,t~0WR!Q![0a!c!i0a#T#Z0a~0dR!Q![,t!c!i,t#T#Z,t~0pZrs,twx,t!Q![1c#O#P,t#T#U,t#U#V,t#Y#Z,t#b#c,t#i#j2q#l#m3d#n#o,t~1fXOY,tZ],t^w,twx%`x!Q,t!Q![2R![#O,t#O#P-^#P~,t~2UXOY,tZ],t^w,twx%`x!Q,t!Q![,t![#O,t#O#P-^#P~,t~2tP#o#p2w~2zR!Q![3T!c!i3T#T#Z3T~3WS!Q![3T!c!i3T#T#Z3T#q#r,t~3gR!Q![3p!c!i3p#T#Z3p~3sR!Q![,t!c!i,t#T#Z,t~4ROl~~4WOm~~4]O!S~~4bO#i~V4iOvR#aS~4nP#j~}!O4q~4vRP~OY4qZ]4q^~4qV5UPgT!O!P5XV5^P!PT!O!P5aQ5fOcQ~5kP#k~!P!Q5n~5sO#m~~5xUd~!O!P6[!Q![7X!g!h6p!z!{7j#X#Y6p#l#m7j~6_P!Q![6b~6gRd~!Q![6b!g!h6p#X#Y6p~6sQ{|6y}!O6y~6|P!Q![7P~7UPd~!Q![7P~7^Sd~!O!P6[!Q![7X!g!h6p#X#Y6p~7mR!Q![7v!c!i7v#T#Z7v~7{Ud~!O!P8_!Q![7v!c!i7v!r!s9P#T#Z7v#d#e9P~8bR!Q![8k!c!i8k#T#Z8k~8pTd~!Q![8k!c!i8k!r!s9P#T#Z8k#d#e9P~9SR{|9]!P!Q9]?Ar?As9]~9`P!Q![9c~9hPd~!Q![9c~9pPo~![!]9s~9xOU~V:POSR#aSV:WQ#uQzT!^!_:^!_!`:cT:cO#gTT:hOzT~:mP#`~!_!`:cV:wQ#vQzT!_!`:c!`!a:}T;SO#hT~;XR#X~!c!};S#R#S;S#T#o;S~;gOi~~;jQYZ#`]^#`~;uOj~~;zO#n~~<POq~~<UO#d~~<ZOu~~<`P#f~!_!`:c",
      tokenizers: [0, 1, 2],
      topRules: {"Chunk":[0,2]},
      dynamicPrecedences: {"110":1},
      specialized: [{term: 101, get: value => spec_identifier[value] || -1}],
      tokenPrec: 0
    });

    const lua_language = LezerLanguage.define({
      parser: parser$1.configure({
        props: [
          indentNodeProp.add({
            Block: delimitedIndent({closing: ")", align: false})
          }),
          foldNodeProp.add({
            Block: foldInside$1
          }),
          styleTags({
            "if then else elseif end": [tags.strong, tags.processingInstruction],
            GridAction: tags.special(tags.variableName),
            GridSetter: [tags.special(tags.string)],
            GridGetter: tags.function(tags.variableName),
            GridVariable: tags.keyword,
            ArithOp: tags.arithmeticOperator,
            CompareOp: tags.compareOperator,
            String: tags.string,
            Number: tags.number,
            Comment: tags.comment,
            "( )": tags.paren
          })
        ]
      }),
      languageData: {
        commentTokens: {line: "--", block: {open: "--[[", close: "]]--"}}
      }
    });

    const lua_completion = lua_language.data.of({
      autocomplete: completeFromList([
        {label: "midi", type: "keyword"}
      ])
    });

    function lua$2() {
      return new LanguageSupport(lua_language, [lua_completion])
    }

    // Using https://github.com/one-dark/vscode-one-dark-theme/ as reference for the colors

    const chalky = "#e5c07b",
      coral = "#e06c75",
      cyan = "#56b6c2",
      invalid = "#ffffff",
      ivory = "#abb2bf",
      stone = "#7d8799", // Brightened compared to original to increase contrast
      malibu = "#61afef",
      sage = "#98c379",
      whiskey = "#d19a66",
      violet = "#c678dd",
      darkBackground = "#21252b",
      highlightBackground = "#2c313a",
      background = "#282c34",
      selection = "#3E4451",
      cursor = "#528bff";

    /// The editor theme styles for One Dark.
    const oneDarkTheme = EditorView.theme({
      "&": {
        color: ivory,
        backgroundColor: background
      },

      ".cm-content": {
        caretColor: cursor
      },

      "&.cm-focused": {outline: "none", border: "none"},

      "&.cm-focused .cm-cursor": {borderLeftColor: cursor},
      "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, ::selection": {backgroundColor: selection},

      ".cm-panels": {backgroundColor: darkBackground, color: ivory},
      ".cm-panels.cm-panels-top": {borderBottom: "2px solid black"},
      ".cm-panels.cm-panels-bottom": {borderTop: "2px solid black"},

      ".cm-searchMatch": {
        backgroundColor: "#72a1ff59",
        outline: "1px solid #457dff"
      },
      ".cm-searchMatch.cm-searchMatch-selected": {
        backgroundColor: "#6199ff2f"
      },

      ".cm-activeLine": {backgroundColor: highlightBackground},
      ".cm-selectionMatch": {backgroundColor: "#aafe661a"},

      ".cm-matchingBracket, .cm-nonmatchingBracket": {
        backgroundColor: "#bad0f847",
        outline: "1px solid #515a6b"
      },

      ".cm-gutters": {
        backgroundColor: background,
        color: stone,
        border: "none"
      },

      ".cm-foldPlaceholder": {
        backgroundColor: "transparent",
        border: "none",
        color: "#ddd"
      },

      ".cm-tooltip": {
        border: "1px solid #181a1f",
        backgroundColor: darkBackground
      },
      ".cm-tooltip-autocomplete": {
        "& > ul > li[aria-selected]": {
          backgroundColor: highlightBackground,
          color: ivory
        }
      }
    }, {dark: true});

    /// The highlighting style for code in the One Dark theme.
    const oneDarkHighlightStyle = HighlightStyle.define([
      {tag: tags.keyword,
       color: violet},
      {tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
       color: coral},
      {tag: [tags.function(tags.variableName), tags.labelName],
       color: malibu},
      {tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
       color: whiskey},
      {tag: [tags.definition(tags.name), tags.separator],
       color: ivory},
      {tag: [tags.typeName, tags.className, tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
       color: chalky},
      {tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, tags.special(tags.string)],
       color: cyan},
      {tag: [tags.meta, tags.comment],
       color: stone},
      {tag: tags.strong,
       fontWeight: "bold"},
      {tag: tags.emphasis,
       fontStyle: "italic"},
      {tag: tags.link,
       color: stone,
       textDecoration: "underline"},
      {tag: tags.heading,
       fontWeight: "bold",
       color: coral},
      {tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
       color: whiskey },
      {tag: [tags.processingInstruction, tags.string, tags.inserted],
       color: sage},
      {tag: tags.invalid,
       color: invalid},
    ]);

    class LintMarker extends GutterMarker {
      constructor(show) {
        super();
        this.show = show;
      }

      eq(other) {return this.number == other.number}

      toDOM() {
        var el = document.createElement('span');
        el.setAttribute("class",this.show ? "active" : "");
        el.innerText = this.show ? "⬤" : "•";
        return el;
      }
    }


    var breakpoints = {};

    Facet.define();

    function lintGutter(view) { 

      return [
        gutter({
          class: "CodeMirror-lint-markers",
          renderEmptyElements: true,
          initialSpacer() {
            return new LintMarker(false)
          },
          domEventHandlers: {
            click: (view, line) => {
              
            }
          },
          lineMarker(view, line){
            var num = view.state.doc.lineAt(line.from).number;
            return new LintMarker(!!breakpoints[num]);
          },
        }),
      
      ]
    }


    /**
     * console.log(EditorView)
      update()

      ViewPlugin.fromClass(class {
        from
        markers
        constructor(view) {
          this.from = view.viewport.from
          this.markers = RangeSet.of(this.buildMarkers(view))
          console.log(from, markers)
        }
      })  

      return gutter({
        class: "CodeMirror-lint-markers",
        renderEmptyElements: true,

        domEventHandlers: {
          click: (view, line) => {
            var num = view.state.doc.lineAt(line.from).number;
            console.log(num);
            breakpoints[num] = !breakpoints[num];
            var changespec = {from: line.from, to: line.to};
            var updated = view.state.update([{changes: changespec}]);
            view.dispatch(updated);
          }
        },
        updateSpacer(spacer, update){
          console.log('spacer')
        },

        lineMarker(view, line) {
          var num = view.state.doc.lineAt(line.from).number;
          console.log(num)
          return new LintMarker(!!breakpoints[num]);
        }, 

      })
     */

    const lua$1 = require('luaparse');


    /// Connects an [lualint](https://lualint.org/) linter to CodeMirror's
    /// [lint](#lint) integration. `lualint` should be an instance of the
    /// [`Linter`](https://lualint.org/docs/developer-guide/nodejs-api#linter)
    /// class, and `config` an optional lualint configuration. The return
    /// value of this function can be passed to [`linter`](#lint.linter)
    /// to create a JavaScript linting extension.
    ///
    /// Note that lualint targets node, and is tricky to run in the
    /// browser. The [lualint4b](https://github.com/mysticatea/lualint4b)
    /// and
    /// [lualint4b-prebuilt](https://github.com/marijnh/lualint4b-prebuilt/)
    /// packages may help with that.
    function luaLint(lualint, config) {

      return (view) => {
        let {state} = view, found = [];
        for (let {from, to} of lua_language.findRegions(state)) {
          let fromLine = state.doc.lineAt(from), offset = {line: fromLine.number - 1, col: from - fromLine.from, pos: from};
          
          let code = state.doc.text.join('\n');
          console.log(code);
          console.log(lua$1.parse(code));
          //for (let d of lualint.verify(state.sliceDoc(from, to), config))
          found.push(translateDiagnostic(state.doc, offset));
        }
        return found
      }
    }

    function mapPos(line, col, doc, offset) {
      return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1)
    }

    function translateDiagnostic(input, doc, offset) {
      let start = mapPos(input.line, input.column, doc, offset);
      let result = {
        from: start,
        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
        message: input.message,
        source: input.ruleId ? "jshint:" + input.ruleId : "jshint",
        severity: input.severity == 1 ? "warning" : "error",
      };
      if (input.fix) {
        let {range, text} = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
        result.actions = [{
          name: "fix",
          apply(view, start) {
            view.dispatch({changes: {from: start + from, to: start + to, insert: text}, scrollIntoView: true});
          }
        }];
      }
      return result
    }

    function createDropStore(){

      const store = writable({
        disabledDropZones: []
      });

      return {
        ...store,
        disabledDropZones: () => {
          const actions = get_store_value(runtime);
          let disabled_blocks = [];
          let if_block = false;
          actions.forEach((a,index) => {

            // check if it's and if block
            if(a.component == 'IF'){
              if_block = true;
            }

            // don't add +1 id in the array (end)
            if(if_block && a.component !== 'END'){
              disabled_blocks.push(index);
            }
            
            // this is the last, as END has to be disabled too!
            if (a.component == 'END'){
              if_block = false;
            }

          });

          //disabled_blocks.sort((a, b)=>a-b)

          store.update(s => {s.disabledDropZones = disabled_blocks;return s;});
        }
      }
    }

    function createActionPrefStore(){

      const store = writable({
        advanced: {
          index: undefined, 
          visible: false,
        }
      });

      return {
        ...store,
        showAdvanced: (index, outside) => {
          store.update(s => {
            s.advanced = {
              index: index, 
              visible: !s.advanced.visible
            };
            return s
          });
        }
      }
    }

    const focusedCodeEditor = writable();

    const actionNodeBinding = writable([]);

    const dropStore = createDropStore();

    const actionPrefStore = createActionPrefStore();

    const actionIsDragged = writable(false);

    /* src\app\elements\app\user-interface\code-editor\CodeEditor.svelte generated by Svelte v3.35.0 */
    const file$n = "src\\app\\elements\\app\\user-interface\\code-editor\\CodeEditor.svelte";

    function create_fragment$n(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "w-full h-full");
    			add_location(div, file$n, 158, 0, 3827);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[6](div);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[6](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function countChars(doc) {
    	let count = 0, iter = doc.iter();

    	while (!iter.next().done) {
    		for (let i = 0; i < iter.value.length; i++) {
    			count++;
    		}
    	}

    	return `Char count: ${count}`;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $focusedCodeEditor;
    	validate_store(focusedCodeEditor, "focusedCodeEditor");
    	component_subscribe($$self, focusedCodeEditor, $$value => $$invalidate(10, $focusedCodeEditor = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CodeEditor", slots, []);
    	const dispatch = createEventDispatcher();
    	let { doc = "" } = $$props;
    	let { showCharCount = true } = $$props;
    	let { showLineNumbers = true } = $$props;
    	let { advancedClickAddon } = $$props;
    	let { index } = $$props;
    	let dataAtCursor;

    	function appendAtCursor() {
    		if ($focusedCodeEditor == index) {
    			editor.dispatch({
    				changes: {
    					from: dataAtCursor.cursor,
    					insert: advancedClickAddon.human
    				}
    			});
    		} //editor.dispatch({selection: {anchor: dataAtCursor.cursor + advancedClickAddon.human.length}})
    	}

    	function charCountPanel(view) {
    		// show this only in advanced large editor
    		if (showCharCount) {
    			let dom = document.createElement("div");
    			dom.textContent = countChars(view.state.doc);

    			return {
    				dom,
    				update(update) {
    					if (update.docChanged) dom.textContent = countChars(update.state.doc);
    				}
    			};
    		}
    	}

    	function charCounter() {
    		return showPanel.of(charCountPanel);
    	}

    	function luaParser(code) {
    		ast = parser.parse(code);
    		return 1;
    	}

    	let ast = undefined;

    	const wordHover = hoverTooltip((view, pos, side) => {
    		let { from, to, text } = view.state.doc.lineAt(pos);
    		let start = pos, end = pos;
    		while (start > from && (/[a-zA-Z_]/).test(text[start - from - 1])) start--;
    		while (end < to && (/[a-zA-Z_]/).test(text[end - from])) end++;
    		if (start == pos && side < 0 || end == pos && side > 0) return null;

    		return {
    			pos: start,
    			end,
    			above: true,
    			create(view) {
    				let dom = document.createElement("div");
    				dom.textContent = text.slice(start - from, end - from);
    				return { dom };
    			}
    		};
    	});

    	let codeblock;
    	let editor;
    	let widgets = [];

    	const initialState = EditorState.create({
    		doc,
    		extensions: [
    			basicSetup({ showLineNumbers }),
    			wordHover,
    			charCounter(),
    			lua$2(),
    			EditorView.updateListener.of(v => {
    				if (editor.hasFocus) {
    					focusedCodeEditor.set(index);
    				}

    				if (v.state.selection) {
    					let pos = v.state.selection.main.head;
    					dataAtCursor = { cursor: pos, ...v.state.doc.lineAt(pos) };
    				}

    				if (v.docChanged) {
    					// Document changed
    					const code = v.state.doc.text.join("\n");

    					dispatch("output", code);
    				}
    			}),
    			//linter(luaLint()),
    			oneDarkTheme,
    			oneDarkHighlightStyle
    		]
    	});

    	onMount(() => {
    		editor = new EditorView({ state: initialState, parent: codeblock });
    	});

    	const writable_props = ["doc", "showCharCount", "showLineNumbers", "advancedClickAddon", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CodeEditor> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			codeblock = $$value;
    			$$invalidate(0, codeblock);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("doc" in $$props) $$invalidate(1, doc = $$props.doc);
    		if ("showCharCount" in $$props) $$invalidate(2, showCharCount = $$props.showCharCount);
    		if ("showLineNumbers" in $$props) $$invalidate(3, showLineNumbers = $$props.showLineNumbers);
    		if ("advancedClickAddon" in $$props) $$invalidate(4, advancedClickAddon = $$props.advancedClickAddon);
    		if ("index" in $$props) $$invalidate(5, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		StreamLanguage,
    		EditorView,
    		EditorState,
    		basicSetup,
    		javascript,
    		esLint,
    		linter,
    		openLintPanel,
    		lua: lua$2,
    		oneDarkTheme,
    		oneDarkHighlightStyle,
    		hoverTooltip,
    		showPanel,
    		lintGutter,
    		luaLint,
    		focusedCodeEditor,
    		dispatch,
    		doc,
    		showCharCount,
    		showLineNumbers,
    		advancedClickAddon,
    		index,
    		dataAtCursor,
    		appendAtCursor,
    		countChars,
    		charCountPanel,
    		charCounter,
    		luaParser,
    		ast,
    		wordHover,
    		codeblock,
    		editor,
    		widgets,
    		initialState,
    		$focusedCodeEditor
    	});

    	$$self.$inject_state = $$props => {
    		if ("doc" in $$props) $$invalidate(1, doc = $$props.doc);
    		if ("showCharCount" in $$props) $$invalidate(2, showCharCount = $$props.showCharCount);
    		if ("showLineNumbers" in $$props) $$invalidate(3, showLineNumbers = $$props.showLineNumbers);
    		if ("advancedClickAddon" in $$props) $$invalidate(4, advancedClickAddon = $$props.advancedClickAddon);
    		if ("index" in $$props) $$invalidate(5, index = $$props.index);
    		if ("dataAtCursor" in $$props) dataAtCursor = $$props.dataAtCursor;
    		if ("ast" in $$props) ast = $$props.ast;
    		if ("codeblock" in $$props) $$invalidate(0, codeblock = $$props.codeblock);
    		if ("editor" in $$props) editor = $$props.editor;
    		if ("widgets" in $$props) widgets = $$props.widgets;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*advancedClickAddon*/ 16) {
    			if (advancedClickAddon) {
    				appendAtCursor();
    			}
    		}
    	};

    	return [
    		codeblock,
    		doc,
    		showCharCount,
    		showLineNumbers,
    		advancedClickAddon,
    		index,
    		div_binding
    	];
    }

    class CodeEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			doc: 1,
    			showCharCount: 2,
    			showLineNumbers: 3,
    			advancedClickAddon: 4,
    			index: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CodeEditor",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*advancedClickAddon*/ ctx[4] === undefined && !("advancedClickAddon" in props)) {
    			console.warn("<CodeEditor> was created without expected prop 'advancedClickAddon'");
    		}

    		if (/*index*/ ctx[5] === undefined && !("index" in props)) {
    			console.warn("<CodeEditor> was created without expected prop 'index'");
    		}
    	}

    	get doc() {
    		throw new Error("<CodeEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set doc(value) {
    		throw new Error("<CodeEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showCharCount() {
    		throw new Error("<CodeEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showCharCount(value) {
    		throw new Error("<CodeEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showLineNumbers() {
    		throw new Error("<CodeEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showLineNumbers(value) {
    		throw new Error("<CodeEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get advancedClickAddon() {
    		throw new Error("<CodeEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set advancedClickAddon(value) {
    		throw new Error("<CodeEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<CodeEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<CodeEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\CodeBlock.svelte generated by Svelte v3.35.0 */
    const file$m = "src\\app\\elements\\config-blocks\\CodeBlock.svelte";

    function create_fragment$m(ctx) {
    	let code_block;
    	let codeeditor;
    	let current;

    	codeeditor = new CodeEditor({
    			props: {
    				doc: /*action*/ ctx[0].script,
    				index: /*index*/ ctx[1],
    				showCharCount: false
    			},
    			$$inline: true
    		});

    	codeeditor.$on("output", /*output_handler*/ ctx[2]);

    	const block = {
    		c: function create() {
    			code_block = element("code-block");
    			create_component(codeeditor.$$.fragment);
    			set_custom_element_data(code_block, "class", "w-full flex p-4");
    			add_location(code_block, file$m, 20, 0, 380);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, code_block, anchor);
    			mount_component(codeeditor, code_block, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const codeeditor_changes = {};
    			if (dirty & /*action*/ 1) codeeditor_changes.doc = /*action*/ ctx[0].script;
    			if (dirty & /*index*/ 2) codeeditor_changes.index = /*index*/ ctx[1];
    			codeeditor.$set(codeeditor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codeeditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codeeditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(code_block);
    			destroy_component(codeeditor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information$5 = {
    	short: "cb",
    	groupType: "standard",
    	desc: "Code Block"
    };

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CodeBlock", slots, []);
    	let { action = { parameters: [], name: "", value: "" } } = $$props;
    	
    	let { index } = $$props;
    	const writable_props = ["action", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CodeBlock> was created with unknown prop '${key}'`);
    	});

    	function output_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({ information: information$5, CodeEditor, action, index });

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [action, index, output_handler];
    }

    class CodeBlock extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { action: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CodeBlock",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[1] === undefined && !("index" in props)) {
    			console.warn("<CodeBlock> was created without expected prop 'index'");
    		}
    	}

    	get action() {
    		throw new Error("<CodeBlock>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<CodeBlock>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<CodeBlock>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<CodeBlock>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\Locals.svelte generated by Svelte v3.35.0 */
    const file$l = "src\\app\\elements\\config-blocks\\Locals.svelte";

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    // (129:0) {:else}
    function create_else_block_1$1(ctx) {
    	let advanced_local_definitions;
    	let t0;
    	let div1;
    	let div0;
    	let t2;
    	let div3;
    	let div2;
    	let t4;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_2 = /*scriptSegments*/ ctx[2];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value_1 = /*scriptSegments*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			advanced_local_definitions = element("advanced-local-definitions");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space$1();
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Add local variable...";
    			t2 = space$1();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Output:";
    			t4 = space$1();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "group-hover:border-pick cursor-pointer group-hover:bg-select-saturate-10 border-secondary transition-colors duration-300 w-full border-l-4 text-white pl-4 py-0.5");
    			add_location(div0, file$l, 144, 4, 4929);
    			attr_dev(div1, "class", "w-full flex group py-2");
    			add_location(div1, file$l, 143, 2, 4887);
    			attr_dev(div2, "class", "font-bold");
    			add_location(div2, file$l, 150, 4, 5249);
    			attr_dev(div3, "class", "text-gray-300 flex flex-col py-2");
    			add_location(div3, file$l, 149, 2, 5197);
    			add_location(advanced_local_definitions, file$l, 129, 0, 4096);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, advanced_local_definitions, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(advanced_local_definitions, null);
    			}

    			append_dev(advanced_local_definitions, t0);
    			append_dev(advanced_local_definitions, div1);
    			append_dev(div1, div0);
    			append_dev(advanced_local_definitions, t2);
    			append_dev(advanced_local_definitions, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div3, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*click_handler_2*/ ctx[14], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*scriptSegments, advancedClickAddon, saveChangesOnInput*/ 14) {
    				each_value_2 = /*scriptSegments*/ ctx[2];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_2$2(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(advanced_local_definitions, t0);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*scriptSegments*/ 4) {
    				each_value_1 = /*scriptSegments*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(advanced_local_definitions);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(129:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (83:0) {#if !advanced}
    function create_if_block$c(ctx) {
    	let config_local_definitions;
    	let div0;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let div2;
    	let div1;
    	let mounted;
    	let dispose;
    	let each_value = /*scriptSegments*/ ctx[2];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*i*/ ctx[20];
    	validate_each_keys(ctx, each_value, get_each_context$a, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$a(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			config_local_definitions = element("config-local-definitions");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space$1();
    			div2 = element("div");
    			div1 = element("div");
    			div1.textContent = "Add local variable...";
    			attr_dev(div0, "class", "w-full flex flex-col");
    			add_location(div0, file$l, 84, 2, 2248);
    			attr_dev(div1, "class", "group-hover:border-pick cursor-pointer group-hover:bg-select-saturate-10 border-secondary transition-colors duration-300 w-full border-l-4 text-white pl-4 py-0.5");
    			add_location(div1, file$l, 122, 4, 3792);
    			attr_dev(div2, "class", "w-full flex group py-2");
    			add_location(div2, file$l, 121, 2, 3750);
    			set_custom_element_data(config_local_definitions, "class", "flex flex-col w-full p-2");
    			add_location(config_local_definitions, file$l, 83, 0, 2185);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, config_local_definitions, anchor);
    			append_dev(config_local_definitions, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(config_local_definitions, t0);
    			append_dev(config_local_definitions, div2);
    			append_dev(div2, div1);

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler_1*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*removeLocalVariable, scriptSegments, saveChangesOnInput*/ 44) {
    				each_value = /*scriptSegments*/ ctx[2];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$a, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block$a, null, get_each_context$a);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(config_local_definitions);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(83:0) {#if !advanced}",
    		ctx
    	});

    	return block;
    }

    // (131:2) {#each scriptSegments as script, i}
    function create_each_block_2$2(ctx) {
    	let segment;
    	let div2;
    	let div1;
    	let div0;
    	let t1;
    	let input;
    	let input_value_value;
    	let t2;
    	let span;
    	let t4;
    	let codeeditor;
    	let current;
    	let mounted;
    	let dispose;

    	function input_handler_2(...args) {
    		return /*input_handler_2*/ ctx[12](/*i*/ ctx[20], ...args);
    	}

    	function output_handler(...args) {
    		return /*output_handler*/ ctx[13](/*i*/ ctx[20], ...args);
    	}

    	codeeditor = new CodeEditor({
    			props: {
    				doc: `${/*script*/ ctx[18].value}`,
    				showLineNumbers: false,
    				showCharCount: false,
    				index: /*i*/ ctx[20],
    				advancedClickAddon: /*advancedClickAddon*/ ctx[1]
    			},
    			$$inline: true
    		});

    	codeeditor.$on("output", output_handler);

    	const block = {
    		c: function create() {
    			segment = element("segment");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "local";
    			t1 = space$1();
    			input = element("input");
    			t2 = space$1();
    			span = element("span");
    			span.textContent = "=";
    			t4 = space$1();
    			create_component(codeeditor.$$.fragment);
    			attr_dev(div0, "class", "pointer-events-none py-0.5 text-gray-500 px-1 bg-thirdery");
    			add_location(div0, file$l, 134, 10, 4308);
    			attr_dev(input, "style", "backround");
    			attr_dev(input, "class", "py-0.5 mb-1 pl-1 w-20 bg-secondary text-white");
    			input.value = input_value_value = /*script*/ ctx[18].variable;
    			add_location(input, file$l, 135, 10, 4403);
    			attr_dev(div1, "class", "flex items-baseline");
    			add_location(div1, file$l, 133, 8, 4263);
    			attr_dev(span, "class", "text-sm text-gray-500 px-1 py-0.5");
    			add_location(span, file$l, 137, 8, 4600);
    			attr_dev(div2, "class", "flex items-start");
    			add_location(div2, file$l, 132, 6, 4223);
    			attr_dev(segment, "class", "w-full block local-defs py-2 svelte-h3nosq");
    			add_location(segment, file$l, 131, 4, 4169);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, segment, anchor);
    			append_dev(segment, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, input);
    			append_dev(div2, t2);
    			append_dev(div2, span);
    			append_dev(div2, t4);
    			mount_component(codeeditor, div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", input_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty & /*scriptSegments*/ 4 && input_value_value !== (input_value_value = /*script*/ ctx[18].variable) && input.value !== input_value_value) {
    				prop_dev(input, "value", input_value_value);
    			}

    			const codeeditor_changes = {};
    			if (dirty & /*scriptSegments*/ 4) codeeditor_changes.doc = `${/*script*/ ctx[18].value}`;
    			if (dirty & /*advancedClickAddon*/ 2) codeeditor_changes.advancedClickAddon = /*advancedClickAddon*/ ctx[1];
    			codeeditor.$set(codeeditor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codeeditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codeeditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(segment);
    			destroy_component(codeeditor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(131:2) {#each scriptSegments as script, i}",
    		ctx
    	});

    	return block;
    }

    // (152:4) {#each scriptSegments as script}
    function create_each_block_1$3(ctx) {
    	let div;
    	let t_value = `local ${/*script*/ ctx[18].variable} = ${/*script*/ ctx[18].value} ` + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			add_location(div, file$l, 152, 6, 5331);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*scriptSegments*/ 4 && t_value !== (t_value = `local ${/*script*/ ctx[18].variable} = ${/*script*/ ctx[18].value} ` + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(152:4) {#each scriptSegments as script}",
    		ctx
    	});

    	return block;
    }

    // (111:8) {:else}
    function create_else_block$4(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "x";
    			attr_dev(div0, "class", "w-5 h-5 p-1");
    			add_location(div0, file$l, 112, 10, 3618);
    			attr_dev(div1, "class", " flex invisible items-center group cursor-pointer pl-1");
    			add_location(div1, file$l, 111, 8, 3538);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(111:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (104:8) {#if i !== 0}
    function create_if_block_1$8(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[10](/*i*/ ctx[20]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z");
    			add_location(path0, file$l, 106, 14, 3265);
    			attr_dev(path1, "d", "M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z");
    			add_location(path1, file$l, 107, 14, 3378);
    			attr_dev(svg, "class", "w-5 h-5 p-1 fill-current group-hover:text-white text-gray-500");
    			attr_dev(svg, "viewBox", "0 0 29 29");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$l, 105, 12, 3107);
    			attr_dev(div, "class", "flex items-center group cursor-pointer pl-1");
    			add_location(div, file$l, 104, 10, 2996);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(104:8) {#if i !== 0}",
    		ctx
    	});

    	return block;
    }

    // (86:4) {#each scriptSegments as script, i (i)}
    function create_each_block$a(key_1, ctx) {
    	let div2;
    	let div0;
    	let input0;
    	let input0_value_value;
    	let t0;
    	let div1;
    	let input1;
    	let input1_value_value;
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function input_handler(...args) {
    		return /*input_handler*/ ctx[8](/*i*/ ctx[20], ...args);
    	}

    	function input_handler_1(...args) {
    		return /*input_handler_1*/ ctx[9](/*i*/ ctx[20], ...args);
    	}

    	function select_block_type_1(ctx, dirty) {
    		if (/*i*/ ctx[20] !== 0) return create_if_block_1$8;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			input0 = element("input");
    			t0 = space$1();
    			div1 = element("div");
    			input1 = element("input");
    			t1 = space$1();
    			if_block.c();
    			t2 = space$1();
    			attr_dev(input0, "class", "py-0.5 pl-1 w-full bg-secondary text-white");
    			attr_dev(input0, "placeholder", "variable name");
    			input0.value = input0_value_value = /*script*/ ctx[18].variable;
    			add_location(input0, file$l, 88, 10, 2422);
    			attr_dev(div0, "class", "w-1/2 pr-1");
    			add_location(div0, file$l, 87, 8, 2386);
    			attr_dev(input1, "class", "py-0.5 pl-1 w-full bg-secondary text-white");
    			attr_dev(input1, "placeholder", "value");
    			input1.value = input1_value_value = /*script*/ ctx[18].value;
    			add_location(input1, file$l, 96, 10, 2722);
    			attr_dev(div1, "class", "w-1/2 pl-1");
    			add_location(div1, file$l, 95, 8, 2686);
    			attr_dev(div2, "class", "w-full flex local-defs py-2 svelte-h3nosq");
    			add_location(div2, file$l, 86, 6, 2335);
    			this.first = div2;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, input0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, input1);
    			append_dev(div2, t1);
    			if_block.m(div2, null);
    			append_dev(div2, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", input_handler, false, false, false),
    					listen_dev(input1, "input", input_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*scriptSegments*/ 4 && input0_value_value !== (input0_value_value = /*script*/ ctx[18].variable) && input0.value !== input0_value_value) {
    				prop_dev(input0, "value", input0_value_value);
    			}

    			if (dirty & /*scriptSegments*/ 4 && input1_value_value !== (input1_value_value = /*script*/ ctx[18].value) && input1.value !== input1_value_value) {
    				prop_dev(input1, "value", input1_value_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, t2);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(86:4) {#each scriptSegments as script, i (i)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$c, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*advanced*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information$4 = {
    	short: "l",
    	groupType: "standard",
    	desc: "Local Definitions"
    };

    function localArrayToScript(arr) {
    	let script = arr.map(segment => `local ${segment.variable}=${segment.value} `); // important to keep space before cat upper thingy
    	return script.join("");
    }

    function localsToConfig({ script }) {
    	// this had to be moved out of locals function, as array refresh was killed by $ with scriptSegments..
    	const text = script.split("local");

    	let config = [];

    	text.forEach(element => {
    		if (element !== "") {
    			const _split = element.split("=");

    			config.push({
    				variable: _split[0].trim(),
    				value: _split[1].trim()
    			});
    		}
    	});

    	return config;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Locals", slots, []);
    	let { config = "" } = $$props;
    	let { index } = $$props;
    	let { advanced = false } = $$props;
    	let { advancedClickAddon } = $$props;
    	const dispatch = createEventDispatcher();
    	const regex = new RegExp(/\blocal\b\s*[a-zA-Z]\s*[=].*[a-zA-Z0-9\-\+\(\)].*/, "g");

    	/**
     * Locals specific variables
     * @locals []
    */
    	let scriptSegments = [{ variable: "", value: "" }];

    	// DON'T USE $ BINDING! 
    	// It will trigger dom reactivity and will add everything 2 times, as its referenced on top incoming config reactivity.
    	function saveChangesOnInput(e, i, k) {
    		$$invalidate(2, scriptSegments[i][k] = e, scriptSegments);
    		sendData();
    	}

    	function sendData() {
    		dispatch("output", localArrayToScript(scriptSegments));
    	}

    	function addLocalVariable() {
    		$$invalidate(2, scriptSegments = [...scriptSegments, { variable: "", value: "" }]);
    	}

    	function removeLocalVariable(i) {
    		scriptSegments.splice(i, 1);
    		$$invalidate(2, scriptSegments = [...scriptSegments]);
    		sendData();
    	}

    	const writable_props = ["config", "index", "advanced", "advancedClickAddon"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Locals> was created with unknown prop '${key}'`);
    	});

    	const input_handler = (i, e) => {
    		saveChangesOnInput(e.target.value, i, "variable");
    	};

    	const input_handler_1 = (i, e) => {
    		saveChangesOnInput(e.target.value, i, "value");
    	};

    	const click_handler = i => {
    		removeLocalVariable(i);
    	};

    	const click_handler_1 = () => {
    		addLocalVariable();
    	};

    	const input_handler_2 = (i, e) => {
    		saveChangesOnInput(e.target.value, i, "variable");
    	};

    	const output_handler = (i, e) => {
    		saveChangesOnInput(e.detail, i, "value");
    	};

    	const click_handler_2 = () => {
    		addLocalVariable();
    	};

    	$$self.$$set = $$props => {
    		if ("config" in $$props) $$invalidate(6, config = $$props.config);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("advanced" in $$props) $$invalidate(0, advanced = $$props.advanced);
    		if ("advancedClickAddon" in $$props) $$invalidate(1, advancedClickAddon = $$props.advancedClickAddon);
    	};

    	$$self.$capture_state = () => ({
    		information: information$4,
    		onMount,
    		createEventDispatcher,
    		CodeEditor,
    		config,
    		index,
    		advanced,
    		advancedClickAddon,
    		dispatch,
    		regex,
    		scriptSegments,
    		saveChangesOnInput,
    		sendData,
    		localArrayToScript,
    		localsToConfig,
    		addLocalVariable,
    		removeLocalVariable
    	});

    	$$self.$inject_state = $$props => {
    		if ("config" in $$props) $$invalidate(6, config = $$props.config);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("advanced" in $$props) $$invalidate(0, advanced = $$props.advanced);
    		if ("advancedClickAddon" in $$props) $$invalidate(1, advancedClickAddon = $$props.advancedClickAddon);
    		if ("scriptSegments" in $$props) $$invalidate(2, scriptSegments = $$props.scriptSegments);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*config*/ 64) {
    			// config.script cannot be undefined
    			if (config.script) {
    				// this works differently from normal _utils...
    				// localsToConfig
    				$$invalidate(2, scriptSegments = localsToConfig({
    					script: config.script,
    					human: config.human
    				}));
    			}
    		}
    	};

    	return [
    		advanced,
    		advancedClickAddon,
    		scriptSegments,
    		saveChangesOnInput,
    		addLocalVariable,
    		removeLocalVariable,
    		config,
    		index,
    		input_handler,
    		input_handler_1,
    		click_handler,
    		click_handler_1,
    		input_handler_2,
    		output_handler,
    		click_handler_2
    	];
    }

    class Locals extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			config: 6,
    			index: 7,
    			advanced: 0,
    			advancedClickAddon: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Locals",
    			options,
    			id: create_fragment$l.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[7] === undefined && !("index" in props)) {
    			console.warn("<Locals> was created without expected prop 'index'");
    		}

    		if (/*advancedClickAddon*/ ctx[1] === undefined && !("advancedClickAddon" in props)) {
    			console.warn("<Locals> was created without expected prop 'advancedClickAddon'");
    		}
    	}

    	get config() {
    		throw new Error("<Locals>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<Locals>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Locals>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Locals>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get advanced() {
    		throw new Error("<Locals>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set advanced(value) {
    		throw new Error("<Locals>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get advancedClickAddon() {
    		throw new Error("<Locals>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set advancedClickAddon(value) {
    		throw new Error("<Locals>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /** Dispatch event on click outside of node */
    function clickOutside(node) {
      
      const handleClick = event => {
        if (node && !node.contains(event.target) && !event.defaultPrevented) {
          node.dispatchEvent(
            new CustomEvent('click-outside', node)
          );
        }
      };

    	document.addEventListener('click', handleClick, true);
      
      return {
        destroy() {
          document.removeEventListener('click', handleClick, true);
        }
    	}
    }

    /* src\app\elements\app\user-interface\AtomicInput.svelte generated by Svelte v3.35.0 */
    const file$k = "src\\app\\elements\\app\\user-interface\\AtomicInput.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	child_ctx[2] = i;
    	return child_ctx;
    }

    // (34:2) {#if disabled}
    function create_if_block_1$7(ctx) {
    	let div;
    	let t;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("Edit");

    			attr_dev(div, "class", div_class_value = "absolute cursor-pointer right-0 " + (/*$actionPrefStore*/ ctx[5].advanced.visible
    			? "invisible"
    			: "flex") + " items-center rounded-full py-0.5 px-2 text-white text-xs bg-green-600 hover:bg-green-700" + " svelte-e0t5tt");

    			add_location(div, file$k, 33, 16, 719);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$actionPrefStore*/ 32 && div_class_value !== (div_class_value = "absolute cursor-pointer right-0 " + (/*$actionPrefStore*/ ctx[5].advanced.visible
    			? "invisible"
    			: "flex") + " items-center rounded-full py-0.5 px-2 text-white text-xs bg-green-600 hover:bg-green-700" + " svelte-e0t5tt")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(34:2) {#if disabled}",
    		ctx
    	});

    	return block;
    }

    // (43:4) {#if focus}
    function create_if_block$b(ctx) {
    	let ul;
    	let each_value = /*suggestions*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(ul, "max-height", "250px");
    			set_style(ul, "min-width", "100px");
    			set_style(ul, "z-index", "9000");
    			attr_dev(ul, "class", "fixed scrollbar block border-t overflow-y-auto border-important text-white cursor-pointer  w-auto bg-secondary svelte-e0t5tt");
    			toggle_class(ul, "shadow", /*focus*/ ctx[4]);
    			add_location(ul, file$k, 43, 6, 1343);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*displayValue, suggestions, focus, handleChange*/ 153) {
    				each_value = /*suggestions*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*focus*/ 16) {
    				toggle_class(ul, "shadow", /*focus*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(43:4) {#if focus}",
    		ctx
    	});

    	return block;
    }

    // (45:8) {#each suggestions as suggestion, index}
    function create_each_block$9(ctx) {
    	let li;
    	let t_value = /*suggestion*/ ctx[17].info + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_2(...args) {
    		return /*click_handler_2*/ ctx[13](/*suggestion*/ ctx[17], ...args);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "hover:bg-black p-1 pl-2 svelte-e0t5tt");
    			add_location(li, file$k, 45, 10, 1605);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*suggestions*/ 1 && t_value !== (t_value = /*suggestion*/ ctx[17].info + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(45:8) {#each suggestions as suggestion, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div;
    	let t0;
    	let input;
    	let input_class_value;
    	let t1;
    	let mounted;
    	let dispose;
    	let if_block0 = /*disabled*/ ctx[6] && create_if_block_1$7(ctx);
    	let if_block1 = /*focus*/ ctx[4] && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space$1();
    			input = element("input");
    			t1 = space$1();
    			if (if_block1) if_block1.c();
    			input.disabled = /*disabled*/ ctx[6];
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", input_class_value = "" + (/*customClasses*/ ctx[1] + " w-full bg-secondary text-white py-0.5 pl-2 rounded-none focus:outline-none" + " svelte-e0t5tt"));
    			toggle_class(input, "shadow", /*focus*/ ctx[4]);
    			add_location(input, file$k, 34, 2, 991);
    			attr_dev(div, "class", "w-full relative svelte-e0t5tt");
    			add_location(div, file$k, 32, 0, 616);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, input);
    			set_input_value(input, /*displayValue*/ ctx[3]);
    			append_dev(div, t1);
    			if (if_block1) if_block1.m(div, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[10]),
    					listen_dev(input, "click", /*click_handler_1*/ ctx[11], false, false, false),
    					listen_dev(input, "change", /*handleChange*/ ctx[7], false, false, false),
    					listen_dev(input, "input", /*input_handler*/ ctx[12], false, false, false),
    					action_destroyer(clickOutside.call(null, div)),
    					listen_dev(div, "click-outside", /*click_outside_handler*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*disabled*/ ctx[6]) if_block0.p(ctx, dirty);

    			if (dirty & /*customClasses*/ 2 && input_class_value !== (input_class_value = "" + (/*customClasses*/ ctx[1] + " w-full bg-secondary text-white py-0.5 pl-2 rounded-none focus:outline-none" + " svelte-e0t5tt"))) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*displayValue*/ 8 && input.value !== /*displayValue*/ ctx[3]) {
    				set_input_value(input, /*displayValue*/ ctx[3]);
    			}

    			if (dirty & /*customClasses, focus*/ 18) {
    				toggle_class(input, "shadow", /*focus*/ ctx[4]);
    			}

    			if (/*focus*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$b(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $actionPrefStore;
    	validate_store(actionPrefStore, "actionPrefStore");
    	component_subscribe($$self, actionPrefStore, $$value => $$invalidate(5, $actionPrefStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("AtomicInput", slots, []);
    	const dispatch = createEventDispatcher();
    	let { inputValue = "" } = $$props;
    	let { suggestions = [] } = $$props;
    	let { customClasses = "" } = $$props;
    	let { index } = $$props;
    	let edited = false;
    	let disabled = false;
    	let displayValue = "";
    	let focus;

    	function handleChange() {
    		dispatch("change", displayValue);
    	}

    	const writable_props = ["inputValue", "suggestions", "customClasses", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AtomicInput> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		actionPrefStore.showAdvanced(index, true);
    	};

    	function input_input_handler() {
    		displayValue = this.value;
    		($$invalidate(3, displayValue), $$invalidate(8, inputValue));
    	}

    	const click_handler_1 = () => {
    		$$invalidate(4, focus = true);
    	};

    	const input_handler = e => {
    		$$invalidate(4, focus = false);
    		handleChange();
    	};

    	const click_handler_2 = (suggestion, e) => {
    		$$invalidate(3, displayValue = suggestion.info);
    		$$invalidate(4, focus = false);
    		handleChange();
    	};

    	const click_outside_handler = () => {
    		$$invalidate(4, focus = false);
    	};

    	$$self.$$set = $$props => {
    		if ("inputValue" in $$props) $$invalidate(8, inputValue = $$props.inputValue);
    		if ("suggestions" in $$props) $$invalidate(0, suggestions = $$props.suggestions);
    		if ("customClasses" in $$props) $$invalidate(1, customClasses = $$props.customClasses);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		actionPrefStore,
    		clickOutside,
    		createEventDispatcher,
    		dispatch,
    		inputValue,
    		suggestions,
    		customClasses,
    		index,
    		edited,
    		disabled,
    		displayValue,
    		focus,
    		handleChange,
    		$actionPrefStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("inputValue" in $$props) $$invalidate(8, inputValue = $$props.inputValue);
    		if ("suggestions" in $$props) $$invalidate(0, suggestions = $$props.suggestions);
    		if ("customClasses" in $$props) $$invalidate(1, customClasses = $$props.customClasses);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("edited" in $$props) edited = $$props.edited;
    		if ("disabled" in $$props) $$invalidate(6, disabled = $$props.disabled);
    		if ("displayValue" in $$props) $$invalidate(3, displayValue = $$props.displayValue);
    		if ("focus" in $$props) $$invalidate(4, focus = $$props.focus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*inputValue*/ 256) {
    			if (inputValue) {
    				$$invalidate(3, displayValue = inputValue);
    			}
    		}
    	};

    	return [
    		suggestions,
    		customClasses,
    		index,
    		displayValue,
    		focus,
    		$actionPrefStore,
    		disabled,
    		handleChange,
    		inputValue,
    		click_handler,
    		input_input_handler,
    		click_handler_1,
    		input_handler,
    		click_handler_2,
    		click_outside_handler
    	];
    }

    class AtomicInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			inputValue: 8,
    			suggestions: 0,
    			customClasses: 1,
    			index: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AtomicInput",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[2] === undefined && !("index" in props)) {
    			console.warn("<AtomicInput> was created without expected prop 'index'");
    		}
    	}

    	get inputValue() {
    		throw new Error("<AtomicInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputValue(value) {
    		throw new Error("<AtomicInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get suggestions() {
    		throw new Error("<AtomicInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set suggestions(value) {
    		throw new Error("<AtomicInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get customClasses() {
    		throw new Error("<AtomicInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set customClasses(value) {
    		throw new Error("<AtomicInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<AtomicInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<AtomicInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\If.svelte generated by Svelte v3.35.0 */
    const file$j = "src\\app\\elements\\config-blocks\\If.svelte";

    function create_fragment$j(ctx) {
    	let if_block;
    	let div1;
    	let span;
    	let t1;
    	let div0;
    	let atomicinput;
    	let current;

    	atomicinput = new AtomicInput({
    			props: {
    				inputValue: /*scriptSegment*/ ctx[1],
    				index: /*index*/ ctx[0],
    				customClasses: "bg-opacity-75 rounded-tr-lg"
    			},
    			$$inline: true
    		});

    	atomicinput.$on("change", /*change_handler*/ ctx[4]);

    	const block = {
    		c: function create() {
    			if_block = element("if-block");
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "IF";
    			t1 = space$1();
    			div0 = element("div");
    			create_component(atomicinput.$$.fragment);
    			attr_dev(span, "class", "font-bold py-1");
    			add_location(span, file$j, 39, 4, 856);
    			attr_dev(div0, "class", "pl-2 pr-1 w-full");
    			add_location(div0, file$j, 40, 4, 900);
    			attr_dev(div1, "class", "pl-2 flex items-center bg-yellow-500 rounded-t-lg");
    			add_location(div1, file$j, 38, 2, 787);
    			set_custom_element_data(if_block, "class", "w-full flex flex-col text-white");
    			add_location(if_block, file$j, 36, 0, 731);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, if_block, anchor);
    			append_dev(if_block, div1);
    			append_dev(div1, span);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(atomicinput, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const atomicinput_changes = {};
    			if (dirty & /*scriptSegment*/ 2) atomicinput_changes.inputValue = /*scriptSegment*/ ctx[1];
    			if (dirty & /*index*/ 1) atomicinput_changes.index = /*index*/ ctx[0];
    			atomicinput.$set(atomicinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(atomicinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(atomicinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(if_block);
    			destroy_component(atomicinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information$3 = {
    	short: "if",
    	groupType: "modifier",
    	desc: "If"
    };

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("If", slots, []);
    	let { action = "" } = $$props;
    	let { index } = $$props;
    	const dispatch = createEventDispatcher();
    	let scriptSegment = ""; // local script part

    	function sendData(e) {
    		if (e !== "") {
    			// if we let here empty strings, unexpexted things happen in _v parsing.
    			dispatch("output", `if (${e}) then`);
    		}
    	}

    	const writable_props = ["action", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<If> was created with unknown prop '${key}'`);
    	});

    	const change_handler = e => {
    		sendData(e.detail);
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(3, action = $$props.action);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		information: information$3,
    		createEventDispatcher,
    		AtomicInput,
    		action,
    		index,
    		dispatch,
    		scriptSegment,
    		sendData
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(3, action = $$props.action);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("scriptSegment" in $$props) $$invalidate(1, scriptSegment = $$props.scriptSegment);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*action*/ 8) {
    			if (action.script) {
    				$$invalidate(1, scriptSegment = action.script.slice(4, -6));
    			}
    		}
    	};

    	return [index, scriptSegment, sendData, action, change_handler];
    }

    class If extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { action: 3, index: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "If",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[0] === undefined && !("index" in props)) {
    			console.warn("<If> was created without expected prop 'index'");
    		}
    	}

    	get action() {
    		throw new Error("<If>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<If>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<If>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<If>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\LedPhase.svelte generated by Svelte v3.35.0 */
    const file$i = "src\\app\\elements\\config-blocks\\LedPhase.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	child_ctx[14] = i;
    	return child_ctx;
    }

    // (72:2) {#each scriptSegments as script, i}
    function create_each_block$8(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*parameterNames*/ ctx[3][/*i*/ ctx[14]] + "";
    	let t0;
    	let t1;
    	let atomicinput;
    	let t2;
    	let div1_class_value;
    	let current;

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[9](/*i*/ ctx[14], ...args);
    	}

    	atomicinput = new AtomicInput({
    			props: {
    				index: /*index*/ ctx[0],
    				inputValue: /*script*/ ctx[12],
    				suggestions: /*suggestions*/ ctx[1][/*i*/ ctx[14]]
    			},
    			$$inline: true
    		});

    	atomicinput.$on("change", change_handler);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			create_component(atomicinput.$$.fragment);
    			t2 = space$1();
    			attr_dev(div0, "class", "text-gray-500 text-sm pb-1");
    			add_location(div0, file$i, 73, 6, 1840);
    			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty("w-1/" + /*scriptSegments*/ ctx[2].length + " atomicInput") + " svelte-1wnz7v7"));
    			add_location(div1, file$i, 72, 4, 1773);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			mount_component(atomicinput, div1, null);
    			append_dev(div1, t2);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const atomicinput_changes = {};
    			if (dirty & /*index*/ 1) atomicinput_changes.index = /*index*/ ctx[0];
    			if (dirty & /*scriptSegments*/ 4) atomicinput_changes.inputValue = /*script*/ ctx[12];
    			if (dirty & /*suggestions*/ 2) atomicinput_changes.suggestions = /*suggestions*/ ctx[1][/*i*/ ctx[14]];
    			atomicinput.$set(atomicinput_changes);

    			if (!current || dirty & /*scriptSegments*/ 4 && div1_class_value !== (div1_class_value = "" + (null_to_empty("w-1/" + /*scriptSegments*/ ctx[2].length + " atomicInput") + " svelte-1wnz7v7"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(atomicinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(atomicinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(atomicinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(72:2) {#each scriptSegments as script, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let config_led_phase;
    	let current;
    	let each_value = /*scriptSegments*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			config_led_phase = element("config-led-phase");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_custom_element_data(config_led_phase, "class", "flex w-full p-2");
    			add_location(config_led_phase, file$i, 70, 0, 1686);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, config_led_phase, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(config_led_phase, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*scriptSegments, index, suggestions, sendData, parameterNames*/ 31) {
    				each_value = /*scriptSegments*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(config_led_phase, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(config_led_phase);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information$2 = {
    	short: "glp",
    	groupType: "standard",
    	desc: "LED Value"
    };

    function instance$i($$self, $$props, $$invalidate) {
    	let $localDefinitions;
    	validate_store(localDefinitions, "localDefinitions");
    	component_subscribe($$self, localDefinitions, $$value => $$invalidate(8, $localDefinitions = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("LedPhase", slots, []);
    	let { config } = $$props;
    	let { inputSet } = $$props;
    	let { blockAddedOnClick } = $$props;
    	let { index } = $$props;
    	const dispatch = createEventDispatcher();
    	const parameterNames = ["LED Number", "Layer", "Intensity"];
    	let scriptSegments = [];
    	

    	function sendData(e, index) {
    		$$invalidate(2, scriptSegments[index] = e, scriptSegments);

    		// important to set the function name = human readable for now
    		const script = _utils.segmentsToScript({
    			human: config.human,
    			array: scriptSegments
    		});

    		dispatch("output", script);
    	}

    	const _suggestions = [
    		// led number
    		[
    			{ value: "to do...", info: "to do..." },
    			{ value: "to do...", info: "to do..." }
    		],
    		// layer
    		[{ value: "to do...", info: "layer" }],
    		// intensity or value
    		[{ value: "to do...", info: "to do..." }]
    	];

    	let suggestions = [];

    	onMount(() => {
    		$$invalidate(1, suggestions = _suggestions);
    	});

    	const writable_props = ["config", "inputSet", "blockAddedOnClick", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LedPhase> was created with unknown prop '${key}'`);
    	});

    	const change_handler = (i, e) => {
    		sendData(e.detail, i);
    	};

    	$$self.$$set = $$props => {
    		if ("config" in $$props) $$invalidate(5, config = $$props.config);
    		if ("inputSet" in $$props) $$invalidate(6, inputSet = $$props.inputSet);
    		if ("blockAddedOnClick" in $$props) $$invalidate(7, blockAddedOnClick = $$props.blockAddedOnClick);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		information: information$2,
    		onMount,
    		createEventDispatcher,
    		AtomicInput,
    		_utils,
    		localDefinitions,
    		config,
    		inputSet,
    		blockAddedOnClick,
    		index,
    		dispatch,
    		parameterNames,
    		scriptSegments,
    		sendData,
    		_suggestions,
    		suggestions,
    		$localDefinitions
    	});

    	$$self.$inject_state = $$props => {
    		if ("config" in $$props) $$invalidate(5, config = $$props.config);
    		if ("inputSet" in $$props) $$invalidate(6, inputSet = $$props.inputSet);
    		if ("blockAddedOnClick" in $$props) $$invalidate(7, blockAddedOnClick = $$props.blockAddedOnClick);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("scriptSegments" in $$props) $$invalidate(2, scriptSegments = $$props.scriptSegments);
    		if ("suggestions" in $$props) $$invalidate(1, suggestions = $$props.suggestions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*config*/ 32) {
    			// config.script cannot be undefined
    			if (config.script) {
    				$$invalidate(2, scriptSegments = _utils.scriptToSegments({
    					human: config.human,
    					script: config.script
    				}));
    			}
    		}

    		if ($$self.$$.dirty & /*$localDefinitions, suggestions*/ 258) {
    			if ($localDefinitions) {
    				$$invalidate(1, suggestions = _suggestions.map(s => [...$localDefinitions, ...s]));
    				($$invalidate(1, suggestions), $$invalidate(8, $localDefinitions));
    			}
    		}
    	};

    	return [
    		index,
    		suggestions,
    		scriptSegments,
    		parameterNames,
    		sendData,
    		config,
    		inputSet,
    		blockAddedOnClick,
    		$localDefinitions,
    		change_handler
    	];
    }

    class LedPhase extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			config: 5,
    			inputSet: 6,
    			blockAddedOnClick: 7,
    			index: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LedPhase",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*config*/ ctx[5] === undefined && !("config" in props)) {
    			console.warn("<LedPhase> was created without expected prop 'config'");
    		}

    		if (/*inputSet*/ ctx[6] === undefined && !("inputSet" in props)) {
    			console.warn("<LedPhase> was created without expected prop 'inputSet'");
    		}

    		if (/*blockAddedOnClick*/ ctx[7] === undefined && !("blockAddedOnClick" in props)) {
    			console.warn("<LedPhase> was created without expected prop 'blockAddedOnClick'");
    		}

    		if (/*index*/ ctx[0] === undefined && !("index" in props)) {
    			console.warn("<LedPhase> was created without expected prop 'index'");
    		}
    	}

    	get config() {
    		throw new Error("<LedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<LedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputSet() {
    		throw new Error("<LedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputSet(value) {
    		throw new Error("<LedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blockAddedOnClick() {
    		throw new Error("<LedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blockAddedOnClick(value) {
    		throw new Error("<LedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<LedPhase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<LedPhase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\Midi.svelte generated by Svelte v3.35.0 */

    const { console: console_1$8 } = globals;
    const file$h = "src\\app\\elements\\config-blocks\\Midi.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[13] = i;
    	return child_ctx;
    }

    // (605:2) {#each configSegments as script, i}
    function create_each_block$7(ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*action*/ ctx[0].parameterNames[/*i*/ ctx[13]] + "";
    	let t0;
    	let t1;
    	let atomicinput;
    	let t2;
    	let div1_class_value;
    	let current;

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[6](/*i*/ ctx[13], ...args);
    	}

    	atomicinput = new AtomicInput({
    			props: {
    				inputValue: /*script*/ ctx[11],
    				index: /*index*/ ctx[1],
    				suggestions: /*suggestions*/ ctx[3][/*i*/ ctx[13]]
    			},
    			$$inline: true
    		});

    	atomicinput.$on("change", change_handler);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			create_component(atomicinput.$$.fragment);
    			t2 = space$1();
    			attr_dev(div0, "class", "text-gray-500 text-sm pb-1");
    			add_location(div0, file$h, 606, 6, 17014);
    			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty("w-1/" + /*configSegments*/ ctx[2].length + " atomicInput") + " svelte-1wnz7v7"));
    			add_location(div1, file$h, 605, 4, 16947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(div1, t1);
    			mount_component(atomicinput, div1, null);
    			append_dev(div1, t2);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*action*/ 1) && t0_value !== (t0_value = /*action*/ ctx[0].parameterNames[/*i*/ ctx[13]] + "")) set_data_dev(t0, t0_value);
    			const atomicinput_changes = {};
    			if (dirty & /*configSegments*/ 4) atomicinput_changes.inputValue = /*script*/ ctx[11];
    			if (dirty & /*index*/ 2) atomicinput_changes.index = /*index*/ ctx[1];
    			if (dirty & /*suggestions*/ 8) atomicinput_changes.suggestions = /*suggestions*/ ctx[3][/*i*/ ctx[13]];
    			atomicinput.$set(atomicinput_changes);

    			if (!current || dirty & /*configSegments*/ 4 && div1_class_value !== (div1_class_value = "" + (null_to_empty("w-1/" + /*configSegments*/ ctx[2].length + " atomicInput") + " svelte-1wnz7v7"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(atomicinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(atomicinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(atomicinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(605:2) {#each configSegments as script, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let action_midi;
    	let current;
    	let each_value = /*configSegments*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			action_midi = element("action-midi");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_custom_element_data(action_midi, "class", "flex w-full p-2");
    			add_location(action_midi, file$h, 603, 0, 16865);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, action_midi, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(action_midi, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*configSegments, index, suggestions, sendData, action*/ 31) {
    				each_value = /*configSegments*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(action_midi, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(action_midi);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information$1 = {
    	short: "gsm",
    	groupType: "standard",
    	desc: "MIDI"
    };

    function instance$h($$self, $$props, $$invalidate) {
    	let $localDefinitions;
    	validate_store(localDefinitions, "localDefinitions");
    	component_subscribe($$self, localDefinitions, $$value => $$invalidate(5, $localDefinitions = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Midi", slots, []);
    	let { action = "" } = $$props;
    	let { index } = $$props;
    	const dispatch = createEventDispatcher();
    	let configSegments = [];
    	

    	function sendData(e, index) {
    		$$invalidate(2, configSegments[index] = e, configSegments);

    		const script = _utils.segmentsToScript({
    			human: action.human,
    			array: configSegments
    		}); // important to set the function name

    		dispatch("output", script);
    	}

    	const channels = length => {
    		let arr = [];

    		for (let i = 0; i < length; i++) {
    			arr[i] = { value: i, info: `Channel ${i}` };
    		}

    		return arr;
    	};

    	const _suggestions = [
    		// channels
    		[...channels(15)],
    		// commands
    		[
    			{
    				value: "176",
    				info: "Control Change",
    				key: "control_change_messages"
    			},
    			{
    				value: "144",
    				info: "Note On",
    				key: "note_on_event"
    			},
    			{
    				value: "128",
    				info: "Note Off",
    				key: "note_off_event"
    			},
    			{
    				value: "192",
    				info: "Program Change",
    				key: "program_change_messages"
    			}
    		],
    		// param 1
    		{
    			control_change_messages: [
    				{ "value": 0, "info": "Bank Select" },
    				{
    					"value": 1,
    					"info": "Modulation Wheel or Lever"
    				},
    				{ "value": 2, "info": "Breath Controller" },
    				{ "value": 3, "info": "Undefined" },
    				{ "value": 4, "info": "Foot Controller" },
    				{ "value": 5, "info": "Portamento Time" },
    				{ "value": 6, "info": "Data Entry MSB" },
    				{
    					"value": 7,
    					"info": "Channel Volume (formerly Main Volume)"
    				},
    				{ "value": 8, "info": "Balance" },
    				{ "value": 9, "info": "Undefined" },
    				{ "value": 10, "info": "Pan" },
    				{
    					"value": 11,
    					"info": "Expression Controller"
    				},
    				{ "value": 12, "info": "Effect Control 1" },
    				{ "value": 13, "info": "Effect Control 2" },
    				{ "value": 14, "info": "Undefined" },
    				{ "value": 15, "info": "Undefined" },
    				{
    					"value": 16,
    					"info": "General Purpose Controller 1"
    				},
    				{
    					"value": 17,
    					"info": "General Purpose Controller 2"
    				},
    				{
    					"value": 18,
    					"info": "General Purpose Controller 3"
    				},
    				{
    					"value": 19,
    					"info": "General Purpose Controller 4"
    				},
    				{ "value": 20, "info": "Undefined" },
    				{ "value": 21, "info": "Undefined" },
    				{ "value": 22, "info": "Undefined" },
    				{ "value": 23, "info": "Undefined" },
    				{ "value": 24, "info": "Undefined" },
    				{ "value": 25, "info": "Undefined" },
    				{ "value": 26, "info": "Undefined" },
    				{ "value": 27, "info": "Undefined" },
    				{ "value": 28, "info": "Undefined" },
    				{ "value": 29, "info": "Undefined" },
    				{ "value": 30, "info": "Undefined" },
    				{ "value": 31, "info": "Undefined" },
    				{
    					"value": 32,
    					"info": "LSB for Control 0 (Bank Select)"
    				},
    				{
    					"value": 33,
    					"info": "LSB for Control 1 (Modulation Wheel or Lever)"
    				},
    				{
    					"value": 34,
    					"info": "LSB for Control 2 (Breath Controller)"
    				},
    				{
    					"value": 35,
    					"info": "LSB for Control 3 (Undefined)"
    				},
    				{
    					"value": 36,
    					"info": "LSB for Control 4 (Foot Controller)"
    				},
    				{
    					"value": 37,
    					"info": "LSB for Control 5 (Portamento Time)"
    				},
    				{
    					"value": 38,
    					"info": "LSB for Control 6 (Data Entry)"
    				},
    				{
    					"value": 39,
    					"info": "LSB for Control 7 (Channel Volume, formerly Main Volume)"
    				},
    				{
    					"value": 40,
    					"info": "LSB for Control 8 (Balance)"
    				},
    				{
    					"value": 41,
    					"info": "LSB for Control 9 (Undefined)"
    				},
    				{
    					"value": 42,
    					"info": "LSB for Control 10 (Pan)"
    				},
    				{
    					"value": 43,
    					"info": "LSB for Control 11 (Expression Controller)"
    				},
    				{
    					"value": 44,
    					"info": "LSB for Control 12 (Effect control 1)"
    				},
    				{
    					"value": 45,
    					"info": "LSB for Control 13 (Effect control 2)"
    				},
    				{
    					"value": 46,
    					"info": "LSB for Control 14 (Undefined)"
    				},
    				{
    					"value": 47,
    					"info": "LSB for Control 15 (Undefined)"
    				},
    				{
    					"value": 48,
    					"info": "LSB for Control 16 (General Purpose Controller 1)"
    				},
    				{
    					"value": 49,
    					"info": "LSB for Control 17 (General Purpose Controller 2)"
    				},
    				{
    					"value": 50,
    					"info": "LSB for Control 18 (General Purpose Controller 3)"
    				},
    				{
    					"value": 51,
    					"info": "LSB for Control 19 (General Purpose Controller 4)"
    				},
    				{
    					"value": 52,
    					"info": "LSB for Control 20 (Undefined)"
    				},
    				{
    					"value": 53,
    					"info": "LSB for Control 21 (Undefined)"
    				},
    				{
    					"value": 54,
    					"info": "LSB for Control 22 (Undefined)"
    				},
    				{
    					"value": 55,
    					"info": "LSB for Control 23 (Undefined)"
    				},
    				{
    					"value": 56,
    					"info": "LSB for Control 24 (Undefined)"
    				},
    				{
    					"value": 57,
    					"info": "LSB for Control 25 (Undefined)"
    				},
    				{
    					"value": 58,
    					"info": "LSB for Control 26 (Undefined)"
    				},
    				{
    					"value": 59,
    					"info": "LSB for Control 27 (Undefined)"
    				},
    				{
    					"value": 60,
    					"info": "LSB for Control 28 (Undefined)"
    				},
    				{
    					"value": 61,
    					"info": "LSB for Control 29 (Undefined)"
    				},
    				{
    					"value": 62,
    					"info": "LSB for Control 30 (Undefined)"
    				},
    				{
    					"value": 63,
    					"info": "LSB for Control 31 (Undefined)"
    				},
    				{
    					"value": 64,
    					"info": "Damper Pedal on/off (Sustain)"
    				},
    				{ "value": 65, "info": "Portamento On/Off" },
    				{ "value": 66, "info": "Sostenuto On/Off" },
    				{ "value": 67, "info": "Soft Pedal On/Off" },
    				{ "value": 68, "info": "Legato Footswitch" },
    				{ "value": 69, "info": "Hold 2" },
    				{
    					"value": 70,
    					"info": "Sound Controller 1 (default: Sound Variation)"
    				},
    				{
    					"value": 71,
    					"info": "Sound Controller 2 (default: Timbre/Harmonic Intens.)"
    				},
    				{
    					"value": 72,
    					"info": "Sound Controller 3 (default: Release Time)"
    				},
    				{
    					"value": 73,
    					"info": "Sound Controller 4 (default: Attack Time)"
    				},
    				{
    					"value": 74,
    					"info": "Sound Controller 5 (default: Brightness)"
    				},
    				{
    					"value": 75,
    					"info": "Sound Controller 6 (default: Decay Time - see MMA RP-021)"
    				},
    				{
    					"value": 76,
    					"info": "Sound Controller 7 (default: Vibrato Rate - see MMA RP-021)"
    				},
    				{
    					"value": 77,
    					"info": "Sound Controller 8 (default: Vibrato Depth - see MMA RP-021)"
    				},
    				{
    					"value": 78,
    					"info": "Sound Controller 9 (default: Vibrato Delay - see MMA RP-021)"
    				},
    				{
    					"value": 79,
    					"info": "Sound Controller 10 (default undefined - see MMA RP-021)"
    				},
    				{
    					"value": 80,
    					"info": "General Purpose Controller 5"
    				},
    				{
    					"value": 81,
    					"info": "General Purpose Controller 6"
    				},
    				{
    					"value": 82,
    					"info": "General Purpose Controller 7"
    				},
    				{
    					"value": 83,
    					"info": "General Purpose Controller 8"
    				},
    				{
    					"value": 84,
    					"info": "Portamento Control"
    				},
    				{ "value": 85, "info": "Undefined" },
    				{ "value": 86, "info": "Undefined" },
    				{ "value": 87, "info": "Undefined" },
    				{
    					"value": 88,
    					"info": "High Resolution Velocity Prefix"
    				},
    				{ "value": 89, "info": "Undefined" },
    				{ "value": 90, "info": "Undefined" },
    				{
    					"value": 91,
    					"info": "Effects 1 Depth \n(default: Reverb Send Level - see MMA RP-023) \n(formerly External Effects Depth)"
    				},
    				{
    					"value": 92,
    					"info": "Effects 2 Depth (formerly Tremolo Depth)"
    				},
    				{
    					"value": 93,
    					"info": "Effects 3 Depth \n(default: Chorus Send Level - see MMA RP-023) \n(formerly Chorus Depth)"
    				},
    				{
    					"value": 94,
    					"info": "Effects 4 Depth (formerly Celeste [Detune] Depth)"
    				},
    				{
    					"value": 95,
    					"info": "Effects 5 Depth (formerly Phaser Depth)"
    				},
    				{
    					"value": 96,
    					"info": "Data Increment (Data Entry +1) (see MMA RP-018)"
    				},
    				{
    					"value": 97,
    					"info": "Data Decrement (Data Entry -1) (see MMA RP-018)"
    				},
    				{
    					"value": 98,
    					"info": "Non-Registered Parameter Number (NRPN) - LSB"
    				},
    				{
    					"value": 99,
    					"info": "Non-Registered Parameter Number (NRPN) - MSB"
    				},
    				{
    					"value": 100,
    					"info": "Registered Parameter Number (RPN) - LSB*"
    				},
    				{
    					"value": 101,
    					"info": "Registered Parameter Number (RPN) - MSB*"
    				},
    				{ "value": 102, "info": "Undefined" },
    				{ "value": 103, "info": "Undefined" },
    				{ "value": 104, "info": "Undefined" },
    				{ "value": 105, "info": "Undefined" },
    				{ "value": 106, "info": "Undefined" },
    				{ "value": 107, "info": "Undefined" },
    				{ "value": 108, "info": "Undefined" },
    				{ "value": 109, "info": "Undefined" },
    				{ "value": 110, "info": "Undefined" },
    				{ "value": 111, "info": "Undefined" },
    				{ "value": 112, "info": "Undefined" },
    				{ "value": 113, "info": "Undefined" },
    				{ "value": 114, "info": "Undefined" },
    				{ "value": 115, "info": "Undefined" },
    				{ "value": 116, "info": "Undefined" },
    				{ "value": 117, "info": "Undefined" },
    				{ "value": 118, "info": "Undefined" },
    				{ "value": 119, "info": "Undefined" },
    				{
    					"value": 120,
    					"info": "[Channel Mode Message] All Sound Off"
    				},
    				{
    					"value": 121,
    					"info": "[Channel Mode Message] Reset All Controllers \n(See MMA RP-015)"
    				},
    				{
    					"value": 122,
    					"info": "[Channel Mode Message] Local Control On/Off"
    				},
    				{
    					"value": 123,
    					"info": "[Channel Mode Message] All Notes Off"
    				},
    				{
    					"value": 124,
    					"info": "[Channel Mode Message] Omni Mode Off (+ all notes off)"
    				},
    				{
    					"value": 125,
    					"info": "[Channel Mode Message] Omni Mode On (+ all notes off)"
    				},
    				{
    					"value": 126,
    					"info": "[Channel Mode Message] Mono Mode On (+ poly off, + all notes off)"
    				},
    				{
    					"value": 127,
    					"info": "[Channel Mode Message] Poly Mode On (+ mono off, +all notes off)"
    				}
    			]
    		},
    		// param 2
    		[{ value: "to do...", info: "to do..." }]
    	];

    	let suggestions = [];

    	function renderSuggestions() {
    		let selectedCommand = _suggestions[1].find(s => s.value == configSegments[1])?.key || "control_change_messages";

    		try {
    			let param_1 = _suggestions[2][selectedCommand];
    			$$invalidate(3, suggestions = [_suggestions[0], _suggestions[1], param_1 || [], _suggestions[3]]);
    		} catch(error) {
    			console.warn("error while creating midi suggetions");
    			$$invalidate(3, suggestions = _suggestions);
    		}
    	}

    	onMount(() => {
    		renderSuggestions();
    	});

    	const writable_props = ["action", "index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$8.warn(`<Midi> was created with unknown prop '${key}'`);
    	});

    	const change_handler = (i, e) => {
    		sendData(e.detail, i);
    	};

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		information: information$1,
    		onMount,
    		beforeUpdate,
    		afterUpdate,
    		createEventDispatcher,
    		AtomicInput,
    		_utils,
    		localDefinitions,
    		action,
    		index,
    		dispatch,
    		configSegments,
    		sendData,
    		channels,
    		_suggestions,
    		suggestions,
    		renderSuggestions,
    		$localDefinitions
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(0, action = $$props.action);
    		if ("index" in $$props) $$invalidate(1, index = $$props.index);
    		if ("configSegments" in $$props) $$invalidate(2, configSegments = $$props.configSegments);
    		if ("suggestions" in $$props) $$invalidate(3, suggestions = $$props.suggestions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*action*/ 1) {
    			// config.script cannot be undefined
    			if (config.script) {
    				$$invalidate(2, configSegments = _utils.scriptToSegments({
    					human: action.human,
    					script: action.script
    				}));
    			}
    		}

    		if ($$self.$$.dirty & /*configSegments, $localDefinitions, suggestions*/ 44) {
    			if (configSegments[1] || $localDefinitions) {
    				renderSuggestions();
    				$$invalidate(3, suggestions = suggestions.map(s => [...$localDefinitions, ...s]));
    			}
    		}
    	};

    	return [
    		action,
    		index,
    		configSegments,
    		suggestions,
    		sendData,
    		$localDefinitions,
    		change_handler
    	];
    }

    class Midi extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { action: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Midi",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[1] === undefined && !("index" in props)) {
    			console_1$8.warn("<Midi> was created without expected prop 'index'");
    		}
    	}

    	get action() {
    		throw new Error("<Midi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<Midi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Midi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Midi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\config-blocks\Macro.svelte generated by Svelte v3.35.0 */

    const { console: console_1$7 } = globals;

    const file$g = "src\\app\\elements\\config-blocks\\Macro.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (304:8) {#each keys as key, i (i)}
    function create_each_block$6(key_1, ctx) {
    	let div;
    	let raw_value = /*key*/ ctx[23] + "";
    	let div_data_index_value;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "data-index", div_data_index_value = /*i*/ ctx[25]);
    			attr_dev(div, "class", "svelte-1xs9d27");
    			toggle_class(div, "blink", /*caretPos*/ ctx[2] + /*caretPos*/ ctx[2] - 1 == /*i*/ ctx[25]);
    			add_location(div, file$g, 304, 10, 8356);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*keys*/ 2 && raw_value !== (raw_value = /*key*/ ctx[23] + "")) div.innerHTML = raw_value;
    			if (dirty & /*keys*/ 2 && div_data_index_value !== (div_data_index_value = /*i*/ ctx[25])) {
    				attr_dev(div, "data-index", div_data_index_value);
    			}

    			if (dirty & /*caretPos, keys*/ 6) {
    				toggle_class(div, "blink", /*caretPos*/ ctx[2] + /*caretPos*/ ctx[2] - 1 == /*i*/ ctx[25]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(304:8) {#each keys as key, i (i)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div4;
    	let div3;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t2;
    	let button0;
    	let t4;
    	let button1;
    	let mounted;
    	let dispose;
    	let each_value = /*keys*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*i*/ ctx[25];
    	validate_each_keys(ctx, each_value, get_each_context$6, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$6(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Key Type";
    			t1 = space$1();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space$1();
    			button0 = element("button");
    			button0.textContent = "caret";
    			t4 = space$1();
    			button1 = element("button");
    			button1.textContent = "Clear";
    			attr_dev(div0, "class", "text-gray-700 text-xs");
    			add_location(div0, file$g, 294, 6, 7921);
    			attr_dev(div1, "id", "idk");
    			attr_dev(div1, "class", "editableDiv w-full secondary text-white p-2 pl-2 flex flex-row rounded-none focus:outline-none svelte-1xs9d27");
    			attr_dev(div1, "contenteditable", "true");
    			add_location(div1, file$g, 295, 6, 7978);
    			attr_dev(div2, "class", "w-full pr-2");
    			add_location(div2, file$g, 293, 4, 7888);
    			add_location(button0, file$g, 308, 4, 8483);
    			attr_dev(button1, "class", "bg-secondary hover:bg-highlight-400 text-white px-2 py-1 cursor-pointer border-none rounded focus:outline-none mr-2");
    			add_location(button1, file$g, 309, 4, 8533);
    			attr_dev(div3, "class", "w-full flex flex-row items-end");
    			add_location(div3, file$g, 292, 2, 7838);
    			attr_dev(div4, "class", "flex w-full flex-col");
    			add_location(div4, file$g, 291, 0, 7800);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			/*div1_binding*/ ctx[10](div1);
    			append_dev(div3, t2);
    			append_dev(div3, button0);
    			append_dev(div3, t4);
    			append_dev(div3, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "keydown", prevent_default(/*identifyKey*/ ctx[3]), false, true, false),
    					listen_dev(div1, "keyup", prevent_default(/*identifyKey*/ ctx[3]), false, true, false),
    					listen_dev(div1, "click", /*setCaret*/ ctx[4], false, false, false),
    					listen_dev(button0, "click", caretToEnd, false, false, false),
    					listen_dev(button1, "click", /*clearMacro*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*keys, caretPos*/ 6) {
    				each_value = /*keys*/ ctx[1];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$6, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block$6, null, get_each_context$6);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*div1_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const information = {
    	short: "gsk",
    	groupType: "standard",
    	desc: "Macro"
    };

    function sendData() {
    	
    } /**    dispatch('send', { 
      action: {
        value: action.value, 
        parameters: parameters
      }, 
      index: index 
    });
    */

    function putKeyInArray() {
    	
    }

    function cutQuickDownUp(args) {
    	// identify if the following element is a pair key, set type and cut point accordingly
    	let cuts = [];

    	args.forEach((arg, i) => {
    		//console.log(arg);
    		if (args[i + 1]) {
    			if (arg.info == args[i + 1].info && arg.type == "keydown" && args[i + 1].type == "keyup") {
    				arg.type = "keydownup";
    				cuts.push(i + 1);
    			}
    		}
    	});

    	// make the cuts, remove double elements from keydown-keyup pairs (remove the second, first contains 'keydownup' type for color)
    	cuts.forEach(cut => {
    		args.splice(cut, 1);
    	});

    	console.log(cuts, args);
    	return args;
    }

    function colorize(args) {
    	let svg = `
              <svg viewBox="0 0 95 95" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M48.5 0L8 32.5L8 52.5L48.5 20L48.5 0Z" fill="#C4C4C4"/>
                <path d="M48 0L88.5 32.5L88.5 52.5L48 20L48 0Z" fill="#C4C4C4"/>
                <rect x="40" y="14" width="16" height="81" fill="#C4C4C4"/>
              </svg>
              `;

    	// down = red
    	// up = yellow
    	// down-up = green
    	let coloredKeys = [];

    	args.forEach((arg, i) => {
    		if (arg.type == "keydownup") {
    			coloredKeys.push(`<div class="text-green-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-green-500 rounded-md">${arg.info}</div>`);
    		} else if (arg.type == "keydown") {
    			coloredKeys.push(`<div class="text-red-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-red-500 rounded-md">${arg.info} <span style="transform:rotate(180deg)" class="h-4 w-4 ml-1">${svg}</span></div>` + "  ");
    		} else if (arg.type == "keyup") {
    			coloredKeys.push(`<div class="text-yellow-500 px-2 mx-1 bg-primary flex items-center border cursor-default border-yellow-500  rounded-md">${arg.info} <span class="h-4 w-4 ml-1">${svg}</span></div>` + "  ");
    		}

    		coloredKeys.push(`<div data-caret="${i}" class="p-1 h-6 hover:bg-highlight"></div>`);
    	});

    	return coloredKeys;
    }

    function caretToEnd(el) {
    	el.focus();

    	if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
    		var range = document.createRange();
    		range.selectNodeContents(el);
    		range.collapse(false);
    		var sel = window.getSelection();
    		sel.removeAllRanges();
    		sel.addRange(range);
    	} else if (typeof document.body.createTextRange != "undefined") {
    		var textRange = document.body.createTextRange();
    		textRange.moveToElementText(el);
    		textRange.collapse(false);
    		textRange.select();
    	}
    } /**
    let div = macroInputField;
    const range = document.createRange();
    const sel = window.getSelection();
    range.selectNodeContents(div);
    range.collapse(false);
    console.log(sel)
    sel.removeAllRanges();
    sel.addRange(range);
    div.focus();
    range.detach(); // optimization

    div.scrollTop = div.scrollHeight;
    */

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Macro", slots, []);
    	const dispatch = createEventDispatcher();
    	let { action } = $$props;
    	let { index } = $$props;
    	let { eventInfo } = $$props;
    	let { elementInfo } = $$props;
    	let validator = [];
    	let macroInputField;
    	let orderChangeTrigger = null;

    	onMount(() => {
    	}); //loadMacros();

    	afterUpdate(() => {
    		if (orderChangeTrigger) {
    			manageMacro();
    		}
    	});

    	let keys = "";
    	let parameters = [];
    	let keydownBuffer = [];
    	let caretKeyBuffer = [];
    	let keyBuffer = [];
    	let keyMerge = [];
    	let normalKeys = [];
    	let caretArray = [];

    	function identifyKey(e) {
    		/**
    if(!e.repeat && e.type == 'keydown'){
      if(keydownBuffer.length > 0){
        caretPos += 1;
      }
    }
    */
    		// filter same keypress type
    		if (!e.repeat) {
    			if (e.keyCode == 8 && e.type == "keydown") {
    				keys.splice(-2, 2);
    				keyBuffer.splice(-2, 2);
    			} else {
    				if (caretPos) {
    					let key = map.find(key => key.js_value == e.keyCode);
    					const f_key = [...caretKeyBuffer].reverse().find(key => key.js_value == e.keyCode);

    					if (!f_key) {
    						caretKeyBuffer.push({ ...key, type: e.type });
    					} else if (f_key.type !== e.type) {
    						caretKeyBuffer.push({ ...key, type: e.type });
    					}

    					caretKeyBuffer = cutQuickDownUp(caretKeyBuffer);
    				} else {
    					let key = map.find(key => key.js_value == e.keyCode);
    					const f_key = [...keyBuffer].reverse().find(key => key.js_value == e.keyCode);

    					if (!f_key) {
    						keyBuffer.push({ ...key, type: e.type });
    					} else if (f_key.type !== e.type) {
    						keyBuffer.push({ ...key, type: e.type });
    					}

    					keyBuffer = cutQuickDownUp(keyBuffer);
    				}

    				// deep copy to create the needed keys from caret and standard array
    				let tempKeyBuffer = Array.from(keyBuffer);

    				tempKeyBuffer.splice(caretPos, 0, ...caretKeyBuffer);
    				$$invalidate(1, keys = colorize(tempKeyBuffer));
    			}
    		}
    	} /**
    if(!e.repeat && e.type == 'keyup'){
      if(keydownBuffer.length > 1){
        caretPos += 1;
      }
    }
    */ //manageMacro();

    	let caretPos = 0;

    	function setCaret(e) {
    		if (e.target.getAttribute("data-caret") !== null) {
    			keyBuffer.splice(caretPos, 0, ...caretKeyBuffer);
    			caretKeyBuffer = [];
    			$$invalidate(2, caretPos = +e.target.getAttribute("data-caret") + 1);
    		} else {
    			$$invalidate(2, caretPos = undefined);
    		}
    	}

    	function clearMacro() {
    		keyBuffer = [];
    		caretKeyBuffer = [];
    		$$invalidate(2, caretPos = undefined);
    		$$invalidate(1, keys = "");
    		manageMacro();
    	}

    	function loadMacros() {
    		// parseInt('0xff')
    		macro = [];

    		$$invalidate(1, keys = "");

    		for (const objKey in action.parameters) {
    			if (objKey.startsWith("KEYCODE")) {
    				let found = map.find(key => parseInt(key.value) == action.parameters[objKey] && key.is_modifier == action.parameters["KEYISMODIFIER" + objKey.slice(-1)]);

    				if (found) {
    					macro.push(found);
    				}
    			}
    		}

    		macro.forEach(key => $$invalidate(1, keys += key.info + "  "));
    	}

    	function manageMacro() {
    		parameters = [];

    		for (let i = 0; i < 6; i++) {
    			const key = keyBuffer[i];
    			const keyIsModifier = "KEYISMODIFIER" + i;
    			const keyCode = "KEYCODE" + i;
    			let obj = {};

    			if (key) {
    				let modifier = 0;
    				key.is_modifier ? modifier = 1 : modifier = 0;
    				obj[keyIsModifier] = parameter_parser(modifier);
    				obj[keyCode] = parameter_parser(key.value);
    				parameters.push(obj);
    			} else {
    				obj[keyIsModifier] = parameter_parser(0);
    				obj[keyCode] = parameter_parser(255);
    				parameters.push(obj);
    			}
    		}
    	}

    	const writable_props = ["action", "index", "eventInfo", "elementInfo"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$7.warn(`<Macro> was created with unknown prop '${key}'`);
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			macroInputField = $$value;
    			$$invalidate(0, macroInputField);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("action" in $$props) $$invalidate(6, action = $$props.action);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(8, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(9, elementInfo = $$props.elementInfo);
    	};

    	$$self.$capture_state = () => ({
    		information,
    		afterUpdate,
    		beforeUpdate,
    		createEventDispatcher,
    		onMount,
    		slide,
    		flip,
    		dispatch,
    		keyMap,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		validator,
    		macroInputField,
    		sendData,
    		orderChangeTrigger,
    		keys,
    		parameters,
    		keydownBuffer,
    		caretKeyBuffer,
    		keyBuffer,
    		keyMerge,
    		normalKeys,
    		caretArray,
    		putKeyInArray,
    		identifyKey,
    		cutQuickDownUp,
    		colorize,
    		caretPos,
    		setCaret,
    		caretToEnd,
    		clearMacro,
    		loadMacros,
    		manageMacro
    	});

    	$$self.$inject_state = $$props => {
    		if ("action" in $$props) $$invalidate(6, action = $$props.action);
    		if ("index" in $$props) $$invalidate(7, index = $$props.index);
    		if ("eventInfo" in $$props) $$invalidate(8, eventInfo = $$props.eventInfo);
    		if ("elementInfo" in $$props) $$invalidate(9, elementInfo = $$props.elementInfo);
    		if ("validator" in $$props) validator = $$props.validator;
    		if ("macroInputField" in $$props) $$invalidate(0, macroInputField = $$props.macroInputField);
    		if ("orderChangeTrigger" in $$props) orderChangeTrigger = $$props.orderChangeTrigger;
    		if ("keys" in $$props) $$invalidate(1, keys = $$props.keys);
    		if ("parameters" in $$props) parameters = $$props.parameters;
    		if ("keydownBuffer" in $$props) keydownBuffer = $$props.keydownBuffer;
    		if ("caretKeyBuffer" in $$props) caretKeyBuffer = $$props.caretKeyBuffer;
    		if ("keyBuffer" in $$props) keyBuffer = $$props.keyBuffer;
    		if ("keyMerge" in $$props) keyMerge = $$props.keyMerge;
    		if ("normalKeys" in $$props) normalKeys = $$props.normalKeys;
    		if ("caretArray" in $$props) caretArray = $$props.caretArray;
    		if ("caretPos" in $$props) $$invalidate(2, caretPos = $$props.caretPos);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		macroInputField,
    		keys,
    		caretPos,
    		identifyKey,
    		setCaret,
    		clearMacro,
    		action,
    		index,
    		eventInfo,
    		elementInfo,
    		div1_binding
    	];
    }

    class Macro extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			action: 6,
    			index: 7,
    			eventInfo: 8,
    			elementInfo: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Macro",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*action*/ ctx[6] === undefined && !("action" in props)) {
    			console_1$7.warn("<Macro> was created without expected prop 'action'");
    		}

    		if (/*index*/ ctx[7] === undefined && !("index" in props)) {
    			console_1$7.warn("<Macro> was created without expected prop 'index'");
    		}

    		if (/*eventInfo*/ ctx[8] === undefined && !("eventInfo" in props)) {
    			console_1$7.warn("<Macro> was created without expected prop 'eventInfo'");
    		}

    		if (/*elementInfo*/ ctx[9] === undefined && !("elementInfo" in props)) {
    			console_1$7.warn("<Macro> was created without expected prop 'elementInfo'");
    		}
    	}

    	get action() {
    		throw new Error("<Macro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<Macro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<Macro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Macro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventInfo() {
    		throw new Error("<Macro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventInfo(value) {
    		throw new Error("<Macro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get elementInfo() {
    		throw new Error("<Macro>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set elementInfo(value) {
    		throw new Error("<Macro>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const configComponents = {

      cb: {
        component: CodeBlock, 
        groupType: 'standard', 
        desc: 'Code Block'
      },

      l: {
        component: Locals,  
        groupType: 'standard', 
        info: information$4,

        desc: 'Local Definitions'
      },

      if: {
        component: If, 
        groupType: 'modifier', 
        desc: 'If'
      },

      glp: {
        component: LedPhase, 
        groupType: 'standard', 
        desc: 'LED Value'
      },

      gsm: {
        component: Midi, 
        groupType: 'standard', 
        desc: 'MIDI',
        icon:`
      <svg width="100%" height="100%" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M0.5 12.5C0.5 5.87294 5.87285 0.5 12.5 0.5C19.1274 0.5 24.5 5.87295 24.5 12.5C24.5 19.1275 19.1273 24.5 12.5 24.5C5.87287 24.5 0.5 19.1275 0.5 12.5ZM14.2071 23.3683L14.1413 22.8877C14.0304 22.0784 13.3373 21.4554 12.5003 21.4554C11.6623 21.4554 10.9695 22.0782 10.8585 22.8874L10.7925 23.3683C11.3489 23.455 11.9192 23.5 12.5 23.5C13.0806 23.5 13.6508 23.455 14.2071 23.3683ZM12.5001 2.46309C6.95685 2.46309 2.46281 6.95713 2.46281 12.5C2.46281 17.1783 5.66475 21.11 9.99693 22.2218C10.3636 21.193 11.3442 20.4554 12.5003 20.4554C13.6558 20.4554 14.6363 21.1933 15.0029 22.2221C19.3352 21.11 22.5371 17.1783 22.5371 12.5C22.537 6.9571 18.0433 2.46309 12.5001 2.46309ZM10.5432 6.33504C10.543 5.2543 11.4194 4.37819 12.5 4.37819C13.5809 4.37819 14.4568 5.25461 14.4568 6.33522C14.4568 7.41632 13.5802 8.29231 12.5001 8.29231C11.4191 8.29231 10.543 7.41615 10.5432 6.33504ZM12.5 5.37819C11.9715 5.37819 11.543 5.80679 11.5432 6.33504C11.543 6.86363 11.9711 7.29231 12.5001 7.29231C13.028 7.29231 13.4568 6.86399 13.4568 6.33522C13.4568 5.80668 13.0284 5.37819 12.5 5.37819ZM6.75623 6.75671C7.52044 5.99251 8.75968 5.99254 9.52391 6.75707C10.2884 7.52134 10.2878 8.76052 9.52415 9.52427C8.75967 10.2887 7.52074 10.2889 6.75643 9.5242C5.99204 8.76001 5.99209 7.52083 6.75623 6.75671ZM8.81667 7.46404C8.44294 7.09017 7.83697 7.09019 7.46333 7.46382C7.0897 7.83745 7.0897 8.44344 7.46353 8.81708C7.83718 9.19091 8.44297 9.19122 8.81703 8.81717C9.19041 8.44374 9.19041 7.83758 8.81667 7.46404ZM15.476 6.75778C16.24 5.9935 17.4794 5.9935 18.2432 6.75767C19.0074 7.52177 19.0074 8.76092 18.243 9.52514C17.4786 10.2898 16.2394 10.2893 15.4755 9.5255C14.711 8.76103 14.7109 7.52204 15.476 6.75778ZM17.536 7.46467C17.1627 7.09118 16.5566 7.0911 16.1831 7.46493C15.8091 7.83848 15.8086 8.44435 16.1826 8.81839C16.556 9.1918 17.162 9.19202 17.5357 8.81817C17.9096 8.44445 17.9095 7.83822 17.536 7.46467ZM4.3767 12.4998C4.3767 11.4193 5.2531 10.5431 6.33377 10.543C7.41486 10.543 8.29092 11.4194 8.29092 12.4998C8.29092 13.5807 7.41486 14.4567 6.33381 14.4567C5.25315 14.4567 4.3767 13.581 4.3767 12.4998ZM6.33381 11.543C5.80519 11.5431 5.3767 11.9718 5.3767 12.4998C5.3767 13.0284 5.80516 13.4567 6.33381 13.4567C6.86264 13.4567 7.29092 13.0283 7.29092 12.4998C7.29092 11.9717 6.86259 11.543 6.33381 11.543ZM16.7091 12.4998C16.7091 11.4193 17.5853 10.5431 18.6661 10.543C19.7471 10.543 20.6231 11.4194 20.6231 12.4998C20.6231 13.5806 19.7473 14.4567 18.6661 14.4567C17.5855 14.4567 16.7091 13.581 16.7091 12.4998ZM18.6661 11.543C18.1375 11.5431 17.7091 11.9717 17.7091 12.4998C17.7091 13.0284 18.1375 13.4567 18.6661 13.4567C19.1949 13.4567 19.6231 13.0284 19.6231 12.4998C19.6231 11.9717 19.1948 11.543 18.6661 11.543Z" fill="black"/>
        <path d="M11.5432 6.33504C11.543 5.80679 11.9715 5.37819 12.5 5.37819C13.0284 5.37819 13.4568 5.80668 13.4568 6.33522C13.4568 6.86399 13.028 7.29231 12.5001 7.29231C11.9711 7.29231 11.543 6.86363 11.5432 6.33504Z" fill="black"/>
        <path d="M16.1831 7.46493C16.5566 7.0911 17.1627 7.09118 17.536 7.46467C17.9095 7.83822 17.9096 8.44445 17.5357 8.81817C17.162 9.19202 16.556 9.1918 16.1826 8.81839C15.8086 8.44435 15.8091 7.83848 16.1831 7.46493Z" fill="black"/>
        <path d="M17.7091 12.4998C17.7091 11.9717 18.1375 11.5431 18.6661 11.543C19.1948 11.543 19.6231 11.9717 19.6231 12.4998C19.6231 13.0284 19.1949 13.4567 18.6661 13.4567C18.1375 13.4567 17.7091 13.0284 17.7091 12.4998Z" fill="black"/>
        <path d="M5.3767 12.4998C5.3767 11.9718 5.80519 11.5431 6.33381 11.543C6.86259 11.543 7.29092 11.9717 7.29092 12.4998C7.29092 13.0283 6.86264 13.4567 6.33381 13.4567C5.80516 13.4567 5.3767 13.0284 5.3767 12.4998Z" fill="black"/>
        <path d="M7.46333 7.46382C7.83697 7.09019 8.44294 7.09017 8.81667 7.46404C9.19041 7.83758 9.19041 8.44374 8.81703 8.81717C8.44297 9.19122 7.83718 9.19091 7.46353 8.81708C7.0897 8.44344 7.0897 7.83745 7.46333 7.46382Z" fill="black"/>
        <path d="M14.1413 22.8877L14.2071 23.3683C13.6508 23.455 13.0806 23.5 12.5 23.5C11.9192 23.5 11.3489 23.455 10.7925 23.3683L10.8585 22.8874C10.9695 22.0782 11.6623 21.4554 12.5003 21.4554C13.3373 21.4554 14.0304 22.0784 14.1413 22.8877Z" fill="black"/>
      </svg>`
      },

      gsk: {
        component: Macro, 
        groupType: 'standard', 
        desc: 'Keyboard Macro',
        icon: `
      <svg width="100%" height="100%"" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M1 0H16C16.5523 0 17 0.447715 17 1V16C17 16.5523 16.5523 17 16 17H1C0.447715 17 0 16.5523 0 16V1C0 0.447715 0.447715 0 1 0ZM14 1H3C2.44772 1 2 1.44772 2 2V13C2 13.5523 2.44772 14 3 14H14C14.5523 14 15 13.5523 15 13V2C15 1.44772 14.5523 1 14 1Z" fill="black"/>
        <path d="M4.5 12C4.22386 12 4 12.2239 4 12.5C4 12.7761 4.22386 13 4.5 13H12.5C12.7761 13 13 12.7761 13 12.5C13 12.2239 12.7761 12 12.5 12H4.5Z" fill="black"/>
        <path d="M4.66667 10.318V8.49984H3L5.5 5.31802L8 8.49984H6.33333V10.318H4.66667Z" fill="black"/>
      </svg>`
      }

    };

    function returnDeepestObjects (obj){
        var found = {};                
        let parent = '';

        function _find(obj, d) {       
            for (var key in obj) {     
                if(d == 0){
                  parent = key;
                  found[parent] = [];
                }
                
                if (typeof obj[key] === 'object') { 
                    _find(obj[key], d + 1);
                } else {
              
                if(found[parent].indexOf(obj) == -1){
                  found[parent].push(obj);
                }
              }
            }
        }
        _find(obj, 0);                 

        return found;
    }

    function mapObjectsToArray (array, object){

        function mapper(baseArray, type, allowed){
          return baseArray = baseArray.map((e, i) => {
            return {type: type, allowed: allowed, ...e }
          })
        }

        for (const key in object) {

          if(key == 'B'){
            array = [...array, ...mapper(object[key], 'button', ['button'])];
          }

          if(key == 'E'){
            array = [...array, ...mapper(object[key], 'encoder', ['encoder'])];
          }

          if(key == 'G'){
            array = [...array, ...mapper(object[key], 'global', ['encoder', 'button', 'potmeter'])];
          }

          if(key == 'P'){
            array = [...array, ...mapper(object[key], 'potmeter', ['potmeter'])];
          }

        }

        return array;
    }

    function createNestedObject( base, names, value ) {
        // If a value is given, remove the last name and keep it for later:
        var lastName = arguments.length === 3 ? names.pop() : false;

        // Walk the hierarchy, creating new objects where needed.
        // If the lastName was removed, then the last object is not set yet:
        for( var i = 0; i < names.length; i++ ) {
            base = base[ names[i] ] = base[ names[i] ] || {};
        }

        // If a value was given, set it to the last name:
        if( lastName ) base = base[ lastName ] = value;

        // Return the last object in the hierarchy:
        return base;
    }

    const editor_lua_properties = [
      // code OPERATORS https://www.tutorialspoint.com/code/code_operators.htm
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\*',  human:'*'}, 
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\+',  human:'+'}, 
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\-',  human:'-'}, 
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\%',  human:'%'},
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\/',  human:'/'},
      {type: 'arithmetic_operator', allowed: ['encoder', 'potmeter', 'button'], short: '\\^',  human:'^'},

      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '==',   human:'=='},
      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '~=',   human:'~='},
      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '>',    human:'>'},
      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '<',    human:'<'},
      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '>=',   human:'>='},
      {type: 'relational_operator', allowed: ['encoder', 'potmeter', 'button'], short: '<=',   human:'<='},

      {type: 'logical_operator', allowed: ['encoder', 'potmeter', 'button'],  short: 'and',  human:'and'},
      {type: 'logical_operator', allowed: ['encoder', 'potmeter', 'button'],  short: 'or',   human:'or'},
      {type: 'logical_operator', allowed: ['encoder', 'potmeter', 'button'],  short: 'not',  human:'not'},
      {type: 'global', allowed: ['encoder', 'potmeter', 'button'], short: 'l', human: 'locals'}
    ];

    const grid = {
      
      properties: (function (){

        let HWCFG = {};
        let CONST = {};
        let INSTR = {};
        let CLASSES = {};
        let LUA = {};
        let BRC = {};  
        let VERSION = {};
        let PARAMETERS = {};
        let HEARTBEAT_INTERVAL = 0;
        let PROTOCOL = {};

        for (const key in grid_protocol) {
          if(typeof grid_protocol[key] !== 'object'){

            // GRID MODULE HWCFGS
            if(key.startsWith('GRID_MODULE_')){
              let paramName = key.substr('GRID_MODULE_'.length);
              HWCFG[paramName] = +grid_protocol[key];
            }

            // GRID HEARTBEAT INTERVAL
            if(key == 'GRID_PARAMETER_HEARTBEAT_interval'){
              HEARTBEAT_INTERVAL = +grid_protocol[key];
            }

            // GRID INSTRUCTIONS
            if(key.startsWith('GRID_INSTR')){
              let paramName = key.slice(11).slice(0,-5);
              let dec = parseInt(grid_protocol[key], 16); 
              INSTR[paramName] = dec;
            }
            
            // GRID CONSTS TO CONSTRUCT SERIAL DATA
            if(key.startsWith('GRID_CONST')){
              let paramName = key.slice(11);
              let dec = parseInt(grid_protocol[key], 16); 
              CONST[paramName] = dec;
            } 

            // GRID TEMPLATE PARAMETERS
            if(key.startsWith('GRID_PARAMETER_TEMPLATEINDEX_')){
              const param = key.substr('GRID_PARAMETER_TEMPLATEINDEX_'.length).slice(0,-5);
              PARAMETERS[param] = grid_protocol[key];
            }

            // GRID PROTOCOL VERSION
            if(key.startsWith('GRID_PROTOCOL_VERSION_')){
              const param = key.substr('GRID_PROTOCOL_VERSION_'.length);
              VERSION[param] = +grid_protocol[key];
            }

            // GRID BROADCAST PARAMETERS
            if(key.startsWith('GRID_BRC_') && key['GRID_BRC_'.length] == key['GRID_BRC_'.length].toUpperCase()){    
              const param = key.substr('GRID_BRC_'.length).split('_');
              BRC[param[0]] = {offset: 0, length: 0};
            } 

            // GRID CLASS XXX CODES
            if(key.startsWith('GRID_CLASS_') && key.slice(-4) == 'code'){
              CLASSES[key.slice('GRID_CLASS_'.length).slice(0,-5)] = +grid_protocol[key];
            }

            // GRID LUA PROPERTIES
            if(key.startsWith('GRID_LUA_')){
              let paramSet = key.split('_');
              let value = grid_protocol[key];
              createNestedObject( LUA, paramSet.slice(3,), value );
            }

            // LEGACY GRID CLASS CONSTRUCTION
            let param = '';
            if(key.startsWith('GRID_CLASS_')){
              param = key.split('_')[2];
              if(param[0] == param[0].toUpperCase()){
                if (!PROTOCOL.hasOwnProperty(param)) {
                  PROTOCOL[param] = {};
                }
              }
            }

          }
        } 

        return {
          ...PROTOCOL,
          BRC: BRC , 
          LUA: extendLua(LUA),
          CLASSES: CLASSES, 
          HWCFG: HWCFG, 
          CONST: CONST,
          INSTR: INSTR,
          VERSION: VERSION,
          PARAMETERS: PARAMETERS,
          HEARTBEAT_INTERVAL: HEARTBEAT_INTERVAL,
          AGE: Math.floor(Math.random()*255).toString(16).padStart(2, '0')
        }

        function extendLua(propObject){
          const deepObjects = returnDeepestObjects(propObject);
          const array = mapObjectsToArray(editor_lua_properties, deepObjects);
          return array;
        }
      }()),

      translate: {
        encode: function(){
          return 'decode not implemented';
        },
      
        decode: function(){
          return 'encode not implemented';
        },
      },

      device: {
        make: function(){
          return 'controller creation not implemented';
        }
      }

    };

    // es6 import

    // commonjs node require
    const lua = require('luaparse');

    const _utils = {

      /**
       * @configList  - This is the long <?lua ... ?>, where ... = n number of config
       * @config      - Single config with short comment "--[[@ short ]]" and script part
       * @script      - Script without the comment
       * @short       - Comment short script name
       * 
       * @config = --[[@ @short ]] + @script
       */

      // make smaller chunks from <?lua ... ?>, huge raw lua
      rawLuaToConfigList: function(rawLua){

        // get rid of new line, enter
        rawLua = rawLua.replace(/[\n\r]+/g, '');
        // get rid of more than 2 spaces
        rawLua = rawLua.replace(/\s{2,10}/g, ' ');

        // splt by meta comments
        let configList = rawLua.split('--[[@');

        // filter "*space*" with regex or empty string
        configList = configList.filter(function(el){ return !el.match(/(^\s+$)|(^$)/)});

        return configList;
      
      },

      // break down config to script and short properties
      configBreakDown: function(configList){

        // get the function name
        const regexp = /^([^\s]+)|([^\s].*)+/g; // pay attention to multiline or single line flag! "m"

        // make an array of action names and script parts
        configList = configList.map((element) => {
          let obj = {short: '', script: ''};

          let arr= [];
          let testy;
          while ((testy = regexp.exec(element)) !== null) {
            arr.push(testy[0]);
          }
          obj.short = arr[0].slice(0,-2); // remove tailing "]]"
          obj.script = arr[1];
          
          return obj;
        });

        return configList;

      },

      // add extra properties used in the app, like the id for listing and component
      extendProperties: function(configList){
        configList = configList.map((element,index) => {
          // TODO: if undefined find... revert to codeblock!
          return {
            short: element.short, 
            script: element.script, 
            id: index, 
            human: getHumanFunctionName({short: element.short}),
            ...getComponentInformation({short: element.short})
          }
        });
        return configList;
      },

      scriptToSegments: function({script, human}){
        console.log(script, human);
        // get the part after function name with parenthesis
        let config = [];
        config = script.split(human)[1];
        // remove parenthesis
        config = config.slice(1, -1);
        // split by comma to make array
        config = config.split(',');
      
        return config;
      },

      segmentsToScript: function({human = '', array = []}){
        let code = human; // prepend with type
        const _unformatted = JSON.stringify(array);
        [..._unformatted].forEach(e => {
          if(e == '['){ code += '('; }
          else if(e == ']') { code += ')';}
          else if(e == "\"") ;
          else { code += e; }
        });
        return code;
      }

    };

    function getComponentInformation({short, human}){
      const obj = configComponents[short];
      return obj;
    }

    function getHumanFunctionName({short}){
      const found = grid.properties.LUA.find(e => e.short == short);

      if(!found) return 'no human readable name found';

      return found.human;
    }


    function luaParser({config}){
      let parser = '';
      try {
        lua.parse(config);
        parser = 'ok';
      } catch (error) {
        console.log(error);
        parser = error.message;
      } 
      return parser;
    }

    /* src\app\elements\app\Debug.svelte generated by Svelte v3.35.0 */

    const { console: console_1$6 } = globals;
    const file$f = "src\\app\\elements\\app\\Debug.svelte";

    function create_fragment$f(ctx) {
    	let config_debug;
    	let div10;
    	let div1;
    	let div0;
    	let t1;
    	let input0;
    	let t2;
    	let div3;
    	let div2;
    	let t4;
    	let input1;
    	let t5;
    	let div5;
    	let div4;
    	let t7;
    	let input2;
    	let t8;
    	let div7;
    	let div6;
    	let t10;
    	let input3;
    	let t11;
    	let div9;
    	let div8;
    	let t13;
    	let input4;
    	let t14;
    	let textarea;
    	let t15;
    	let div12;
    	let div11;
    	let t17;
    	let input5;
    	let t18;
    	let div15;
    	let div13;
    	let t19;
    	let t20;
    	let t21;
    	let div14;
    	let t22;
    	let html_tag;

    	let raw_value = (charCount(/*runtimeScript*/ ctx[0]) > 120
    	? `<span class="text-yellow-400">${charCount(/*runtimeScript*/ ctx[0])}</span>`
    	: `${charCount(/*runtimeScript*/ ctx[0])}`) + "";

    	let t23;
    	let div16;
    	let button0;
    	let t25;
    	let button1;
    	let t27;
    	let button2;
    	let t29;
    	let button3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			config_debug = element("config-debug");
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "dx";
    			t1 = space$1();
    			input0 = element("input");
    			t2 = space$1();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "dy";
    			t4 = space$1();
    			input1 = element("input");
    			t5 = space$1();
    			div5 = element("div");
    			div4 = element("div");
    			div4.textContent = "age";
    			t7 = space$1();
    			input2 = element("input");
    			t8 = space$1();
    			div7 = element("div");
    			div6 = element("div");
    			div6.textContent = "rot";
    			t10 = space$1();
    			input3 = element("input");
    			t11 = space$1();
    			div9 = element("div");
    			div8 = element("div");
    			div8.textContent = "command 1";
    			t13 = space$1();
    			input4 = element("input");
    			t14 = space$1();
    			textarea = element("textarea");
    			t15 = space$1();
    			div12 = element("div");
    			div11 = element("div");
    			div11.textContent = "command 2";
    			t17 = space$1();
    			input5 = element("input");
    			t18 = space$1();
    			div15 = element("div");
    			div13 = element("div");
    			t19 = text("Syntax check: ");
    			t20 = text(/*runtimeParser*/ ctx[1]);
    			t21 = space$1();
    			div14 = element("div");
    			t22 = text("Char count: ");
    			t23 = space$1();
    			div16 = element("div");
    			button0 = element("button");
    			button0.textContent = "Send To Grid";
    			t25 = space$1();
    			button1 = element("button");
    			button1.textContent = "Store";
    			t27 = space$1();
    			button2 = element("button");
    			button2.textContent = "Clear";
    			t29 = space$1();
    			button3 = element("button");
    			button3.textContent = "Heartbeat ❤️";
    			add_location(div0, file$f, 71, 6, 1774);
    			attr_dev(input0, "class", "w-full md:w-10 p-1 text-black focus:outline-none");
    			add_location(input0, file$f, 72, 6, 1795);
    			attr_dev(div1, "class", "mr-1");
    			add_location(div1, file$f, 70, 4, 1748);
    			add_location(div2, file$f, 75, 6, 1923);
    			attr_dev(input1, "class", "w-full md:w-10 p-1 text-black focus:outline-none");
    			add_location(input1, file$f, 76, 6, 1944);
    			attr_dev(div3, "class", "mx-1");
    			add_location(div3, file$f, 74, 4, 1897);
    			add_location(div4, file$f, 79, 6, 2073);
    			attr_dev(input2, "class", "w-full md:w-10 p-1 text-black focus:outline-none");
    			add_location(input2, file$f, 80, 6, 2095);
    			attr_dev(div5, "class", "mx-1");
    			add_location(div5, file$f, 78, 4, 2047);
    			add_location(div6, file$f, 83, 6, 2224);
    			attr_dev(input3, "class", "w-full md:w-10 p-1 text-black focus:outline-none");
    			add_location(input3, file$f, 84, 6, 2246);
    			attr_dev(div7, "class", "mx-1");
    			add_location(div7, file$f, 82, 4, 2198);
    			add_location(div8, file$f, 87, 6, 2375);
    			attr_dev(input4, "class", "w-full md:w-32 p-1 text-black focus:outline-none");
    			add_location(input4, file$f, 88, 6, 2403);
    			attr_dev(div9, "class", "mx-1");
    			add_location(div9, file$f, 86, 4, 2349);
    			attr_dev(div10, "class", "flex flex-col md:flex-row text-white md:items-end p-2");
    			add_location(div10, file$f, 68, 2, 1673);
    			set_style(textarea, "min-height", "100px");
    			attr_dev(textarea, "spellcheck", "false");
    			attr_dev(textarea, "class", "w-full cursor-default bg-primary rounded px-1 my-2 text-white font-mono");
    			add_location(textarea, file$f, 93, 2, 2521);
    			attr_dev(div11, "class", "text-white");
    			add_location(div11, file$f, 96, 4, 2714);
    			attr_dev(input5, "class", "w-full md:w-32 p-1 text-black focus:outline-none");
    			add_location(input5, file$f, 97, 4, 2759);
    			attr_dev(div12, "class", "mx-1");
    			add_location(div12, file$f, 95, 2, 2690);
    			attr_dev(div13, "class", "text-white");
    			add_location(div13, file$f, 101, 4, 2892);
    			html_tag = new HtmlTag(null);
    			attr_dev(div14, "class", "text-white");
    			add_location(div14, file$f, 103, 4, 2959);
    			attr_dev(div15, "class", "mx-1 my-2");
    			add_location(div15, file$f, 100, 2, 2863);
    			attr_dev(button0, "class", "rounded my-2 bg-green-700 hover:bg-green-900 text-white px-2 py-2 w-32 mr-2");
    			add_location(button0, file$f, 107, 4, 3180);
    			attr_dev(button1, "class", "rounded my-2 bg-purple-700 hover:bg-purple-900 text-white px-2 py-2 w-32 mr-2");
    			add_location(button1, file$f, 108, 4, 3316);
    			attr_dev(button2, "class", "rounded my-2 bg-yellow-700 hover:bg-yellow-900 text-white px-2 py-2 w-32 mr-2");
    			add_location(button2, file$f, 109, 4, 3455);
    			attr_dev(button3, "class", "rounded my-2 bg-pink-700 hover:bg-pink-900 text-white px-2 py-2 w-32 mr-2");
    			add_location(button3, file$f, 110, 4, 3594);
    			attr_dev(div16, "class", "flex");
    			add_location(div16, file$f, 106, 2, 3156);
    			set_custom_element_data(config_debug, "class", "w-full flex flex-col p-4 z-10");
    			add_location(config_debug, file$f, 66, 0, 1615);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, config_debug, anchor);
    			append_dev(config_debug, div10);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, input0);
    			set_input_value(input0, /*brc*/ ctx[2][0]);
    			append_dev(div10, t2);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			append_dev(div3, t4);
    			append_dev(div3, input1);
    			set_input_value(input1, /*brc*/ ctx[2][1]);
    			append_dev(div10, t5);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			append_dev(div5, t7);
    			append_dev(div5, input2);
    			set_input_value(input2, /*brc*/ ctx[2][2]);
    			append_dev(div10, t8);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			append_dev(div7, t10);
    			append_dev(div7, input3);
    			set_input_value(input3, /*brc*/ ctx[2][3]);
    			append_dev(div10, t11);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div9, t13);
    			append_dev(div9, input4);
    			set_input_value(input4, /*command_1*/ ctx[3]);
    			append_dev(config_debug, t14);
    			append_dev(config_debug, textarea);
    			set_input_value(textarea, /*runtimeScript*/ ctx[0]);
    			append_dev(config_debug, t15);
    			append_dev(config_debug, div12);
    			append_dev(div12, div11);
    			append_dev(div12, t17);
    			append_dev(div12, input5);
    			set_input_value(input5, /*command_2*/ ctx[4]);
    			append_dev(config_debug, t18);
    			append_dev(config_debug, div15);
    			append_dev(div15, div13);
    			append_dev(div13, t19);
    			append_dev(div13, t20);
    			append_dev(div15, t21);
    			append_dev(div15, div14);
    			append_dev(div14, t22);
    			html_tag.m(raw_value, div14);
    			append_dev(config_debug, t23);
    			append_dev(config_debug, div16);
    			append_dev(div16, button0);
    			append_dev(div16, t25);
    			append_dev(div16, button1);
    			append_dev(div16, t27);
    			append_dev(div16, button2);
    			append_dev(div16, t29);
    			append_dev(div16, button3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[9]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[10]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[11]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[12]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[13]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[14]),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[15]),
    					listen_dev(button0, "click", /*debug*/ ctx[5], false, false, false),
    					listen_dev(button1, "click", /*click_handler*/ ctx[16], false, false, false),
    					listen_dev(button2, "click", /*click_handler_1*/ ctx[17], false, false, false),
    					listen_dev(button3, "click", /*click_handler_2*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*brc*/ 4 && input0.value !== /*brc*/ ctx[2][0]) {
    				set_input_value(input0, /*brc*/ ctx[2][0]);
    			}

    			if (dirty & /*brc*/ 4 && input1.value !== /*brc*/ ctx[2][1]) {
    				set_input_value(input1, /*brc*/ ctx[2][1]);
    			}

    			if (dirty & /*brc*/ 4 && input2.value !== /*brc*/ ctx[2][2]) {
    				set_input_value(input2, /*brc*/ ctx[2][2]);
    			}

    			if (dirty & /*brc*/ 4 && input3.value !== /*brc*/ ctx[2][3]) {
    				set_input_value(input3, /*brc*/ ctx[2][3]);
    			}

    			if (dirty & /*command_1*/ 8 && input4.value !== /*command_1*/ ctx[3]) {
    				set_input_value(input4, /*command_1*/ ctx[3]);
    			}

    			if (dirty & /*runtimeScript*/ 1) {
    				set_input_value(textarea, /*runtimeScript*/ ctx[0]);
    			}

    			if (dirty & /*command_2*/ 16 && input5.value !== /*command_2*/ ctx[4]) {
    				set_input_value(input5, /*command_2*/ ctx[4]);
    			}

    			if (dirty & /*runtimeParser*/ 2) set_data_dev(t20, /*runtimeParser*/ ctx[1]);

    			if (dirty & /*runtimeScript*/ 1 && raw_value !== (raw_value = (charCount(/*runtimeScript*/ ctx[0]) > 120
    			? `<span class="text-yellow-400">${charCount(/*runtimeScript*/ ctx[0])}</span>`
    			: `${charCount(/*runtimeScript*/ ctx[0])}`) + "")) html_tag.p(raw_value);
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(config_debug);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function charCount(text) {
    	return text.length;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Debug", slots, []);
    	let runtimeScript = "";
    	let runtimeParser = "";
    	let brc = [0, 0, 0, 0];
    	let [command_1, command_2] = ["", ""];

    	runtime.subscribe(s => {
    		let code = "";

    		s.forEach((e, i) => {
    			code += `--[[@${e.code}--]]` + e.script + "\n";
    		});

    		$$invalidate(0, runtimeScript = "<?lua " + code.replace(/(\r\n|\n|\r)/gm, "") + " ?>");
    		$$invalidate(1, runtimeParser = luaParser(code));
    	});

    	function debug() {
    		let data = GRID_PROTOCOL.encode_debugger(brc, command_1 + runtimeScript + command_2);
    		console.log(data);
    		serialComm.write(data);
    	}

    	function store() {
    		const command = GRID_PROTOCOL.encode("", `LOCALSTORE`, "EXECUTE", "", "");
    		console.log(command);
    		serialComm.write(command);
    	}

    	function clear() {
    		const command = GRID_PROTOCOL.encode("", `LOCALCLEAR`, "EXECUTE", "", "");
    		console.log(command);
    		serialComm.write(command);
    	}

    	function heartbeat() {
    		const command = GRID_PROTOCOL.encode(
    			{ dx: 0, dy: 0, rot: -0 },
    			`HEARTBEAT`,
    			"EXECUTE",
    			[
    				{ TYPE: parameter_parser(255) },
    				{ HWCFG: parameter_parser(255) },
    				{ VMAJOR: parameter_parser(1) },
    				{ VMINOR: parameter_parser(1) },
    				{ VPATCH: parameter_parser(9) }
    			],
    			"",
    			""
    		);

    		serialComm.write(command);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$6.warn(`<Debug> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		brc[0] = this.value;
    		$$invalidate(2, brc);
    	}

    	function input1_input_handler() {
    		brc[1] = this.value;
    		$$invalidate(2, brc);
    	}

    	function input2_input_handler() {
    		brc[2] = this.value;
    		$$invalidate(2, brc);
    	}

    	function input3_input_handler() {
    		brc[3] = this.value;
    		$$invalidate(2, brc);
    	}

    	function input4_input_handler() {
    		command_1 = this.value;
    		$$invalidate(3, command_1);
    	}

    	function textarea_input_handler() {
    		runtimeScript = this.value;
    		$$invalidate(0, runtimeScript);
    	}

    	function input5_input_handler() {
    		command_2 = this.value;
    		$$invalidate(4, command_2);
    	}

    	const click_handler = () => {
    		store();
    	};

    	const click_handler_1 = () => {
    		clear();
    	};

    	const click_handler_2 = () => {
    		heartbeat();
    	};

    	$$self.$capture_state = () => ({
    		GRID_PROTOCOL,
    		runtime,
    		luaParser,
    		runtimeScript,
    		runtimeParser,
    		brc,
    		command_1,
    		command_2,
    		debug,
    		store,
    		clear,
    		heartbeat,
    		charCount
    	});

    	$$self.$inject_state = $$props => {
    		if ("runtimeScript" in $$props) $$invalidate(0, runtimeScript = $$props.runtimeScript);
    		if ("runtimeParser" in $$props) $$invalidate(1, runtimeParser = $$props.runtimeParser);
    		if ("brc" in $$props) $$invalidate(2, brc = $$props.brc);
    		if ("command_1" in $$props) $$invalidate(3, command_1 = $$props.command_1);
    		if ("command_2" in $$props) $$invalidate(4, command_2 = $$props.command_2);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		runtimeScript,
    		runtimeParser,
    		brc,
    		command_1,
    		command_2,
    		debug,
    		store,
    		clear,
    		heartbeat,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		textarea_input_handler,
    		input5_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Debug extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Debug",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src\app\elements\app\panels\configuration\ConfigParameters.svelte generated by Svelte v3.35.0 */
    const file$e = "src\\app\\elements\\app\\panels\\configuration\\ConfigParameters.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (31:8) {#each [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] as element}
    function create_each_block_1$2(ctx) {
    	let option;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text("Element ");
    			t1 = text(/*element*/ ctx[10]);
    			attr_dev(option, "class", "text-white bg-secondary py-1");
    			option.__value = "Element " + /*element*/ ctx[10];
    			option.value = option.__value;
    			add_location(option, file$e, 31, 8, 1033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(31:8) {#each [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] as element}",
    		ctx
    	});

    	return block;
    }

    // (44:6) {#each events as event}
    function create_each_block$5(ctx) {
    	let button;
    	let t0_value = /*event*/ ctx[7].desc + "";
    	let t0;
    	let t1;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*event*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space$1();

    			attr_dev(button, "class", button_class_value = "" + ((/*selectedEvent*/ ctx[0] === /*event*/ ctx[7]
    			? "shadow-md bg-pick text-white"
    			: "hover:bg-pick-desaturate-10 text-gray-50") + " m-2 p-1 flex-grow border-0 rounded focus:outline-none"));

    			add_location(button, file$e, 44, 8, 1361);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*selectedEvent*/ 1 && button_class_value !== (button_class_value = "" + ((/*selectedEvent*/ ctx[0] === /*event*/ ctx[7]
    			? "shadow-md bg-pick text-white"
    			: "hover:bg-pick-desaturate-10 text-gray-50") + " m-2 p-1 flex-grow border-0 rounded focus:outline-none"))) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(44:6) {#each events as event}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div6;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let select;
    	let div2_class_value;
    	let t2;
    	let div5;
    	let div3;
    	let t4;
    	let div4;
    	let each_value_1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < 16; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = /*events*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Selected Element";
    			t1 = space$1();
    			div1 = element("div");
    			select = element("select");

    			for (let i = 0; i < 16; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t2 = space$1();
    			div5 = element("div");
    			div3 = element("div");
    			div3.textContent = "Events";
    			t4 = space$1();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "text-gray-600 py-1 text-sm");
    			add_location(div0, file$e, 24, 4, 717);
    			attr_dev(select, "class", "bg-secondary flex-grow text-white p-2 focus:outline-none");
    			add_location(select, file$e, 29, 6, 882);
    			attr_dev(div1, "class", "flex flex-col relative justify-between font-bold text-white");
    			add_location(div1, file$e, 28, 4, 801);

    			attr_dev(div2, "class", div2_class_value = "pb-2 " + (/*$appSettings*/ ctx[1].configType == "uiEvents"
    			? "block"
    			: "hidden"));

    			add_location(div2, file$e, 23, 2, 632);
    			attr_dev(div3, "class", "text-gray-600 py-1 text-sm");
    			add_location(div3, file$e, 38, 4, 1192);
    			attr_dev(div4, "class", "flex bg-secondary shadow overflow-x-auto");
    			add_location(div4, file$e, 42, 4, 1266);
    			attr_dev(div5, "class", "pb-2");
    			add_location(div5, file$e, 37, 2, 1168);
    			attr_dev(div6, "class", "flex flex-col bg-primary w-full p-4");
    			add_location(div6, file$e, 21, 0, 577);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, select);

    			for (let i = 0; i < 16; i += 1) {
    				each_blocks_1[i].m(select, null);
    			}

    			append_dev(div6, t2);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div5, t4);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div4, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$appSettings*/ 2 && div2_class_value !== (div2_class_value = "pb-2 " + (/*$appSettings*/ ctx[1].configType == "uiEvents"
    			? "block"
    			: "hidden"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (dirty & /*selectedEvent, events, handleSelectEvent*/ 13) {
    				each_value = /*events*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function manageActions(arg) {
    	
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(1, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ConfigParameters", slots, []);
    	let selectedAction;
    	let selectedEvent;
    	let arrayOfSelectableActions = [{ code: "AV7", name: "MIDI" }, { code: "HID", name: "Macro" }];

    	let events = [
    		{ value: "", desc: "bank init" },
    		{ value: "", desc: "down" },
    		{ value: "", desc: "up" }
    	];

    	function handleSelectEvent(arg) {
    		$$invalidate(0, selectedEvent = arg);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ConfigParameters> was created with unknown prop '${key}'`);
    	});

    	const click_handler = event => {
    		handleSelectEvent(event);
    	};

    	$$self.$capture_state = () => ({
    		ActionCommands,
    		appSettings,
    		fly,
    		fade,
    		selectedAction,
    		selectedEvent,
    		arrayOfSelectableActions,
    		events,
    		handleSelectEvent,
    		manageActions,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("selectedAction" in $$props) selectedAction = $$props.selectedAction;
    		if ("selectedEvent" in $$props) $$invalidate(0, selectedEvent = $$props.selectedEvent);
    		if ("arrayOfSelectableActions" in $$props) arrayOfSelectableActions = $$props.arrayOfSelectableActions;
    		if ("events" in $$props) $$invalidate(2, events = $$props.events);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedEvent, $appSettings, events, handleSelectEvent, click_handler];
    }

    class ConfigParameters extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConfigParameters",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* src\app\elements\app\user-interface\BtnAndPopUp.svelte generated by Svelte v3.35.0 */
    const file$d = "src\\app\\elements\\app\\user-interface\\BtnAndPopUp.svelte";
    const get_button_slot_changes = dirty => ({});
    const get_button_slot_context = ctx => ({});
    const get_popup_slot_changes = dirty => ({});
    const get_popup_slot_context = ctx => ({});

    // (23:2) {#if show}
    function create_if_block$a(ctx) {
    	let app_popup;
    	let app_popup_class_value;
    	let app_popup_intro;
    	let app_popup_outro;
    	let current;
    	const popup_slot_template = /*#slots*/ ctx[5].popup;
    	const popup_slot = create_slot(popup_slot_template, ctx, /*$$scope*/ ctx[4], get_popup_slot_context);

    	const block = {
    		c: function create() {
    			app_popup = element("app-popup");
    			if (popup_slot) popup_slot.c();
    			set_custom_element_data(app_popup, "class", app_popup_class_value = "absolute " + /*popStyle*/ ctx[1] + " rounded px-4 py-1 text-sm text-white -mt-12 z-10" + " svelte-16th9y3");
    			add_location(app_popup, file$d, 23, 2, 442);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, app_popup, anchor);

    			if (popup_slot) {
    				popup_slot.m(app_popup, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (popup_slot) {
    				if (popup_slot.p && dirty & /*$$scope*/ 16) {
    					update_slot(popup_slot, popup_slot_template, ctx, /*$$scope*/ ctx[4], dirty, get_popup_slot_changes, get_popup_slot_context);
    				}
    			}

    			if (!current || dirty & /*popStyle*/ 2 && app_popup_class_value !== (app_popup_class_value = "absolute " + /*popStyle*/ ctx[1] + " rounded px-4 py-1 text-sm text-white -mt-12 z-10" + " svelte-16th9y3")) {
    				set_custom_element_data(app_popup, "class", app_popup_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popup_slot, local);

    			add_render_callback(() => {
    				if (app_popup_outro) app_popup_outro.end(1);
    				if (!app_popup_intro) app_popup_intro = create_in_transition(app_popup, fade, { duration: 50 });
    				app_popup_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popup_slot, local);
    			if (app_popup_intro) app_popup_intro.invalidate();
    			app_popup_outro = create_out_transition(app_popup, fade, {});
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(app_popup);
    			if (popup_slot) popup_slot.d(detaching);
    			if (detaching && app_popup_outro) app_popup_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(23:2) {#if show}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div;
    	let t;
    	let button;
    	let button_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*show*/ ctx[2] && create_if_block$a(ctx);
    	const button_slot_template = /*#slots*/ ctx[5].button;
    	const button_slot = create_slot(button_slot_template, ctx, /*$$scope*/ ctx[4], get_button_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space$1();
    			button = element("button");
    			if (button_slot) button_slot.c();
    			attr_dev(button, "class", button_class_value = "" + (/*btnStyle*/ ctx[0] + " text-sm py-0.5 px-4 text-white rounded-full focus:ring-1 focus:outline-none border border-select-saturate-10 shadow hover:border-purple-500"));
    			add_location(button, file$d, 27, 2, 625);
    			attr_dev(div, "class", "relative flex justify-center");
    			add_location(div, file$d, 21, 0, 382);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);
    			append_dev(div, button);

    			if (button_slot) {
    				button_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*clicked*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*show*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*show*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (button_slot) {
    				if (button_slot.p && dirty & /*$$scope*/ 16) {
    					update_slot(button_slot, button_slot_template, ctx, /*$$scope*/ ctx[4], dirty, get_button_slot_changes, get_button_slot_context);
    				}
    			}

    			if (!current || dirty & /*btnStyle*/ 1 && button_class_value !== (button_class_value = "" + (/*btnStyle*/ ctx[0] + " text-sm py-0.5 px-4 text-white rounded-full focus:ring-1 focus:outline-none border border-select-saturate-10 shadow hover:border-purple-500"))) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(button_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(button_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (button_slot) button_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("BtnAndPopUp", slots, ['popup','button']);
    	const dispatch = createEventDispatcher();
    	let { btnStyle = "" } = $$props;
    	let { popStyle = "" } = $$props;
    	let show = false;

    	function clicked() {
    		dispatch("clicked");
    		$$invalidate(2, show = true);

    		setTimeout(
    			() => {
    				$$invalidate(2, show = false);
    			},
    			1000
    		);
    	}

    	const writable_props = ["btnStyle", "popStyle"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BtnAndPopUp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("btnStyle" in $$props) $$invalidate(0, btnStyle = $$props.btnStyle);
    		if ("popStyle" in $$props) $$invalidate(1, popStyle = $$props.popStyle);
    		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		createEventDispatcher,
    		dispatch,
    		btnStyle,
    		popStyle,
    		show,
    		clicked
    	});

    	$$self.$inject_state = $$props => {
    		if ("btnStyle" in $$props) $$invalidate(0, btnStyle = $$props.btnStyle);
    		if ("popStyle" in $$props) $$invalidate(1, popStyle = $$props.popStyle);
    		if ("show" in $$props) $$invalidate(2, show = $$props.show);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [btnStyle, popStyle, show, clicked, $$scope, slots];
    }

    class BtnAndPopUp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { btnStyle: 0, popStyle: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BtnAndPopUp",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get btnStyle() {
    		throw new Error("<BtnAndPopUp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set btnStyle(value) {
    		throw new Error("<BtnAndPopUp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get popStyle() {
    		throw new Error("<BtnAndPopUp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set popStyle(value) {
    		throw new Error("<BtnAndPopUp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\app\panels\configuration\components\MultiSelect.svelte generated by Svelte v3.35.0 */

    const { console: console_1$5 } = globals;
    const file$c = "src\\app\\elements\\app\\panels\\configuration\\components\\MultiSelect.svelte";

    // (32:2) {#if $appMultiSelect.selection.includes(true) && $appMultiSelect.enabled}
    function create_if_block$9(ctx) {
    	let btnandpopup0;
    	let t;
    	let btnandpopup1;
    	let current;

    	btnandpopup0 = new BtnAndPopUp({
    			props: {
    				btnStyle: "bg-red-500 hover:bg-red-600 mr-2",
    				popStyle: "bg-red-500 ",
    				$$slots: {
    					button: [create_button_slot_1],
    					popup: [create_popup_slot_1]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	btnandpopup1 = new BtnAndPopUp({
    			props: {
    				btnStyle: "bg-pick hover:bg-pick-saturate-10 mr-2",
    				popStyle: "bg-pick ",
    				$$slots: {
    					button: [create_button_slot],
    					popup: [create_popup_slot]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	btnandpopup1.$on("clicked", /*clicked_handler*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(btnandpopup0.$$.fragment);
    			t = space$1();
    			create_component(btnandpopup1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(btnandpopup0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(btnandpopup1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const btnandpopup0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				btnandpopup0_changes.$$scope = { dirty, ctx };
    			}

    			btnandpopup0.$set(btnandpopup0_changes);
    			const btnandpopup1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				btnandpopup1_changes.$$scope = { dirty, ctx };
    			}

    			btnandpopup1.$set(btnandpopup1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(btnandpopup0.$$.fragment, local);
    			transition_in(btnandpopup1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(btnandpopup0.$$.fragment, local);
    			transition_out(btnandpopup1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(btnandpopup0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(btnandpopup1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(32:2) {#if $appMultiSelect.selection.includes(true) && $appMultiSelect.enabled}",
    		ctx
    	});

    	return block;
    }

    // (34:6) 
    function create_popup_slot_1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Removed!";
    			attr_dev(span, "slot", "popup");
    			add_location(span, file$c, 33, 6, 879);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_popup_slot_1.name,
    		type: "slot",
    		source: "(34:6) ",
    		ctx
    	});

    	return block;
    }

    // (35:6) 
    function create_button_slot_1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Remove";
    			attr_dev(span, "slot", "button");
    			add_location(span, file$c, 34, 6, 921);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_button_slot_1.name,
    		type: "slot",
    		source: "(35:6) ",
    		ctx
    	});

    	return block;
    }

    // (39:6) 
    function create_popup_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Copied!";
    			attr_dev(span, "slot", "popup");
    			add_location(span, file$c, 38, 6, 1139);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_popup_slot.name,
    		type: "slot",
    		source: "(39:6) ",
    		ctx
    	});

    	return block;
    }

    // (40:6) 
    function create_button_slot(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Copy";
    			attr_dev(span, "slot", "button");
    			add_location(span, file$c, 39, 6, 1180);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_button_slot.name,
    		type: "slot",
    		source: "(40:6) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let app_action_multi_select;
    	let show_if = /*$appMultiSelect*/ ctx[0].selection.includes(true) && /*$appMultiSelect*/ ctx[0].enabled;
    	let t;
    	let button;

    	let raw_value = (/*$appMultiSelect*/ ctx[0].enabled
    	? `
        <svg class="w-5 h-5 p-1 fill-current text-white" viewBox="0 0 29 29" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z" />
          <path d="M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z" />
        </svg>
    `
    	: "Select") + "";

    	let current;
    	let mounted;
    	let dispose;
    	let if_block = show_if && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			app_action_multi_select = element("app-action-multi-select");
    			if (if_block) if_block.c();
    			t = space$1();
    			button = element("button");
    			attr_dev(button, "class", "text-sm py-0.5 px-4 text-white rounded-full hover:bg-select focus:ring-0 focus:outline-none border border-select-saturate-10 shadow hover:border-purple-500");
    			add_location(button, file$c, 42, 2, 1244);
    			set_custom_element_data(app_action_multi_select, "class", "flex");
    			add_location(app_action_multi_select, file$c, 29, 0, 614);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, app_action_multi_select, anchor);
    			if (if_block) if_block.m(app_action_multi_select, null);
    			append_dev(app_action_multi_select, t);
    			append_dev(app_action_multi_select, button);
    			button.innerHTML = raw_value;
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$appMultiSelect*/ 1) show_if = /*$appMultiSelect*/ ctx[0].selection.includes(true) && /*$appMultiSelect*/ ctx[0].enabled;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$appMultiSelect*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(app_action_multi_select, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*$appMultiSelect*/ 1) && raw_value !== (raw_value = (/*$appMultiSelect*/ ctx[0].enabled
    			? `
        <svg class="w-5 h-5 p-1 fill-current text-white" viewBox="0 0 29 29" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z" />
          <path d="M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z" />
        </svg>
    `
    			: "Select") + "")) button.innerHTML = raw_value;		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(app_action_multi_select);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $appMultiSelect;
    	validate_store(appMultiSelect, "appMultiSelect");
    	component_subscribe($$self, appMultiSelect, $$value => $$invalidate(0, $appMultiSelect = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MultiSelect", slots, []);
    	let multiSelectToggle = false;
    	appMultiSelect.subscribe(chg => console.log("appMultiSelect", chg));
    	let removeClick;
    	let copyClick;

    	function handleClick(e) {
    		if (e == "copy") {
    			appActionManagement$1.copy();
    		} else {
    			appActionManagement$1.remove();
    		}
    	}

    	function clearUpSelection() {
    		set_store_value(appMultiSelect, $appMultiSelect.selection = [], $appMultiSelect);
    		set_store_value(appMultiSelect, $appMultiSelect.enabled = false, $appMultiSelect);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$5.warn(`<MultiSelect> was created with unknown prop '${key}'`);
    	});

    	const clicked_handler = () => {
    		handleClick("copy");
    		clearUpSelection();
    	};

    	const click_handler = () => {
    		set_store_value(appMultiSelect, $appMultiSelect.enabled = !$appMultiSelect.enabled, $appMultiSelect);
    	};

    	$$self.$capture_state = () => ({
    		appMultiSelect,
    		appActionManagement: appActionManagement$1,
    		BtnAndPopUp,
    		multiSelectToggle,
    		removeClick,
    		copyClick,
    		handleClick,
    		clearUpSelection,
    		$appMultiSelect
    	});

    	$$self.$inject_state = $$props => {
    		if ("multiSelectToggle" in $$props) multiSelectToggle = $$props.multiSelectToggle;
    		if ("removeClick" in $$props) removeClick = $$props.removeClick;
    		if ("copyClick" in $$props) copyClick = $$props.copyClick;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$appMultiSelect, handleClick, clearUpSelection, clicked_handler, click_handler];
    }

    class MultiSelect extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiSelect",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src\app\elements\app\panels\configuration\components\Bin.svelte generated by Svelte v3.35.0 */
    const file$b = "src\\app\\elements\\app\\panels\\configuration\\components\\Bin.svelte";

    // (14:0) {#if ready}
    function create_if_block$8(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t1;
    	let svg;
    	let path;
    	let div1_class_value;
    	let div2_intro;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Remove action...";
    			t1 = space$1();
    			svg = svg_element("svg");
    			path = svg_element("path");
    			add_location(div0, file$b, 20, 6, 637);
    			attr_dev(path, "d", "m256 512c-68.378906 0-132.667969-26.628906-181.019531-74.980469-48.351563-48.351562-74.980469-112.640625-74.980469-181.019531s26.628906-132.667969 74.980469-181.019531c48.351562-48.351563 112.640625-74.980469 181.019531-74.980469s132.667969 26.628906 181.019531 74.980469c48.351563 48.351562 74.980469 112.640625 74.980469 181.019531s-26.628906 132.667969-74.980469 181.019531c-48.351562 48.351563-112.640625 74.980469-181.019531 74.980469zm0-472c-119.101562 0-216 96.898438-216 216s96.898438 216 216 216 216-96.898438 216-216-96.898438-216-216-216zm110 195.980469h-220v40h220zm0 0");
    			add_location(path, file$b, 22, 8, 790);
    			attr_dev(svg, "class", "ml-2 w-6 h-6 fill-current text-white");
    			attr_dev(svg, "viewBox", "0 0 512 512");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$b, 21, 6, 672);

    			attr_dev(div1, "class", div1_class_value = "" + ((/*isOverBin*/ ctx[0]
    			? "bg-opacity-100"
    			: "bg-opacity-50") + " transition-all duration-300 pointer-events-none p-2 flex w-full items-center justify-center rounded-lg bg-red-500 "));

    			add_location(div1, file$b, 19, 4, 452);
    			attr_dev(div2, "id", "action-bin");
    			attr_dev(div2, "class", "px-4 pt-1 pb-2 w-full text-white ");
    			add_location(div2, file$b, 14, 2, 216);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			append_dev(div1, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "mouseenter", /*mouseenter_handler*/ ctx[2], false, false, false),
    					listen_dev(div2, "mouseleave", /*mouseleave_handler*/ ctx[3], false, false, false),
    					listen_dev(div2, "mouseup", mouseup_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*isOverBin*/ 1 && div1_class_value !== (div1_class_value = "" + ((/*isOverBin*/ ctx[0]
    			? "bg-opacity-100"
    			: "bg-opacity-50") + " transition-all duration-300 pointer-events-none p-2 flex w-full items-center justify-center rounded-lg bg-red-500 "))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (!div2_intro) {
    				add_render_callback(() => {
    					div2_intro = create_in_transition(div2, fade, { delay: 100, duration: 150 });
    					div2_intro.start();
    				});
    			}
    		},
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(14:0) {#if ready}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;
    	let if_block = /*ready*/ ctx[1] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*ready*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*ready*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			transition_in(if_block);
    		},
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const mouseup_handler = e => {
    	
    };

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Bin", slots, []);
    	let isOverBin = false;
    	let ready = false;

    	onMount(() => {
    		$$invalidate(1, ready = true);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Bin> was created with unknown prop '${key}'`);
    	});

    	const mouseenter_handler = e => {
    		$$invalidate(0, isOverBin = true);
    	};

    	const mouseleave_handler = e => {
    		$$invalidate(0, isOverBin = false);
    	};

    	$$self.$capture_state = () => ({ onMount, fade, isOverBin, ready });

    	$$self.$inject_state = $$props => {
    		if ("isOverBin" in $$props) $$invalidate(0, isOverBin = $$props.isOverBin);
    		if ("ready" in $$props) $$invalidate(1, ready = $$props.ready);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isOverBin, ready, mouseenter_handler, mouseleave_handler];
    }

    class Bin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bin",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src\app\elements\app\panels\configuration\components\DropZone.svelte generated by Svelte v3.35.0 */
    const file$a = "src\\app\\elements\\app\\panels\\configuration\\components\\DropZone.svelte";

    function create_fragment$a(ctx) {
    	let drop_zone;
    	let div1;
    	let div0;
    	let div0_class_value;
    	let div1_class_value;
    	let drop_zone_id_value;

    	const block = {
    		c: function create() {
    			drop_zone = element("drop-zone");
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", div0_class_value = "h-2 w-full rounded-full " + (/*dropZoneEnabled*/ ctx[4] ? "bg-commit" : "bg-red-500"));
    			add_location(div0, file$a, 40, 4, 1225);

    			attr_dev(div1, "class", div1_class_value = "" + ((/*drop_target*/ ctx[2] == /*index*/ ctx[0] && /*drag_start*/ ctx[1] && !/*animation*/ ctx[3]
    			? "opacity-100 "
    			: "opacity-0 ") + " h-5 w-full pointer-events-none transition-opacity duration-300 flex items-center"));

    			add_location(div1, file$a, 39, 2, 1040);
    			set_custom_element_data(drop_zone, "id", drop_zone_id_value = "dz-" + /*index*/ ctx[0]);
    			set_custom_element_data(drop_zone, "class", "block select-none focus:outline-none border-none outline-none");
    			add_location(drop_zone, file$a, 38, 0, 939);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, drop_zone, anchor);
    			append_dev(drop_zone, div1);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dropZoneEnabled*/ 16 && div0_class_value !== (div0_class_value = "h-2 w-full rounded-full " + (/*dropZoneEnabled*/ ctx[4] ? "bg-commit" : "bg-red-500"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*drop_target, index, drag_start, animation*/ 15 && div1_class_value !== (div1_class_value = "" + ((/*drop_target*/ ctx[2] == /*index*/ ctx[0] && /*drag_start*/ ctx[1] && !/*animation*/ ctx[3]
    			? "opacity-100 "
    			: "opacity-0 ") + " h-5 w-full pointer-events-none transition-opacity duration-300 flex items-center"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (dirty & /*index*/ 1 && drop_zone_id_value !== (drop_zone_id_value = "dz-" + /*index*/ ctx[0])) {
    				set_custom_element_data(drop_zone, "id", drop_zone_id_value);
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(drop_zone);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $runtime;
    	let $dropStore;
    	validate_store(runtime, "runtime");
    	component_subscribe($$self, runtime, $$value => $$invalidate(6, $runtime = $$value));
    	validate_store(dropStore, "dropStore");
    	component_subscribe($$self, dropStore, $$value => $$invalidate(7, $dropStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("DropZone", slots, []);
    	let { index } = $$props;
    	let { drag_start } = $$props;
    	let { drop_target } = $$props;
    	let { drag_target } = $$props;
    	let { animation } = $$props;
    	let dropZoneEnabled = true;
    	const writable_props = ["index", "drag_start", "drop_target", "drag_target", "animation"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DropZone> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("drag_start" in $$props) $$invalidate(1, drag_start = $$props.drag_start);
    		if ("drop_target" in $$props) $$invalidate(2, drop_target = $$props.drop_target);
    		if ("drag_target" in $$props) $$invalidate(5, drag_target = $$props.drag_target);
    		if ("animation" in $$props) $$invalidate(3, animation = $$props.animation);
    	};

    	$$self.$capture_state = () => ({
    		index,
    		drag_start,
    		drop_target,
    		drag_target,
    		animation,
    		dropStore,
    		runtime,
    		dropZoneEnabled,
    		$runtime,
    		$dropStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("drag_start" in $$props) $$invalidate(1, drag_start = $$props.drag_start);
    		if ("drop_target" in $$props) $$invalidate(2, drop_target = $$props.drop_target);
    		if ("drag_target" in $$props) $$invalidate(5, drag_target = $$props.drag_target);
    		if ("animation" in $$props) $$invalidate(3, animation = $$props.animation);
    		if ("dropZoneEnabled" in $$props) $$invalidate(4, dropZoneEnabled = $$props.dropZoneEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*drag_target, $runtime, index, $dropStore*/ 225) {
    			if (drag_target.length > 0) {
    				const _index_low = $runtime.findIndex(a => a.id == Number(drag_target[0]));

    				if (_index_low == index || _index_low - 1 == index) {
    					$$invalidate(4, dropZoneEnabled = false);
    				}

    				if (drag_target.length > 1) {
    					const _index_high = $runtime.findIndex(a => a.id == Number(drag_target[drag_target.length - 1]));

    					if (_index_low <= index && index <= _index_high) {
    						$$invalidate(4, dropZoneEnabled = false);
    					}

    					if ($dropStore.disabledDropZones.includes(index)) {
    						$$invalidate(4, dropZoneEnabled = false);
    					}
    				}

    				
    			}
    		}
    	};

    	return [
    		index,
    		drag_start,
    		drop_target,
    		animation,
    		dropZoneEnabled,
    		drag_target,
    		$runtime,
    		$dropStore
    	];
    }

    class DropZone extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			index: 0,
    			drag_start: 1,
    			drop_target: 2,
    			drag_target: 5,
    			animation: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DropZone",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[0] === undefined && !("index" in props)) {
    			console.warn("<DropZone> was created without expected prop 'index'");
    		}

    		if (/*drag_start*/ ctx[1] === undefined && !("drag_start" in props)) {
    			console.warn("<DropZone> was created without expected prop 'drag_start'");
    		}

    		if (/*drop_target*/ ctx[2] === undefined && !("drop_target" in props)) {
    			console.warn("<DropZone> was created without expected prop 'drop_target'");
    		}

    		if (/*drag_target*/ ctx[5] === undefined && !("drag_target" in props)) {
    			console.warn("<DropZone> was created without expected prop 'drag_target'");
    		}

    		if (/*animation*/ ctx[3] === undefined && !("animation" in props)) {
    			console.warn("<DropZone> was created without expected prop 'animation'");
    		}
    	}

    	get index() {
    		throw new Error("<DropZone>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<DropZone>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get drag_start() {
    		throw new Error("<DropZone>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set drag_start(value) {
    		throw new Error("<DropZone>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get drop_target() {
    		throw new Error("<DropZone>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set drop_target(value) {
    		throw new Error("<DropZone>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get drag_target() {
    		throw new Error("<DropZone>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set drag_target(value) {
    		throw new Error("<DropZone>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get animation() {
    		throw new Error("<DropZone>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error("<DropZone>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\app\panels\configuration\components\DynamicWrapper.svelte generated by Svelte v3.35.0 */
    const file$9 = "src\\app\\elements\\app\\panels\\configuration\\components\\DynamicWrapper.svelte";
    const get_options_slot_changes = dirty => ({ toggle: dirty & /*toggle*/ 1 });
    const get_options_slot_context = ctx => ({ toggle: /*toggle*/ ctx[0] });
    const get_config_slot_changes_1 = dirty => ({});
    const get_config_slot_context_1 = ctx => ({});
    const get_config_slot_changes = dirty => ({});
    const get_config_slot_context = ctx => ({});

    // (67:4) {:else}
    function create_else_block$3(ctx) {
    	let div;
    	let current;
    	const config_slot_template = /*#slots*/ ctx[10].config;
    	const config_slot = create_slot(config_slot_template, ctx, /*$$scope*/ ctx[9], get_config_slot_context_1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (config_slot) config_slot.c();
    			attr_dev(div, "class", "flex w-full flex-col");
    			add_location(div, file$9, 67, 6, 2825);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (config_slot) {
    				config_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (config_slot) {
    				if (config_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(config_slot, config_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_config_slot_changes_1, get_config_slot_context_1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(config_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(config_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (config_slot) config_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(67:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (44:4) {#if config.groupType == 'standard'}
    function create_if_block$7(ctx) {
    	let carousel;
    	let icon;
    	let div;
    	let raw_value = (/*config*/ ctx[1].icon ? /*config*/ ctx[1].icon : " ") + "";
    	let t0;
    	let t1;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*toggle*/ ctx[0] && !/*advancedView*/ ctx[4] && create_if_block_2$6(ctx);
    	let if_block1 = (/*toggle*/ ctx[0] || /*advancedView*/ ctx[4]) && create_if_block_1$6(ctx);

    	const block = {
    		c: function create() {
    			carousel = element("carousel");
    			icon = element("icon");
    			div = element("div");
    			t0 = space$1();
    			if (if_block0) if_block0.c();
    			t1 = space$1();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$1();
    			attr_dev(div, "class", "w-6 h-6");
    			add_location(div, file$9, 46, 10, 1837);
    			set_style(icon, "background-color", /*color*/ ctx[6]());
    			attr_dev(icon, "class", "flex  items-center p-2");
    			add_location(icon, file$9, 45, 8, 1752);
    			attr_dev(carousel, "class", "flex flex-grow relative text-white cursor-pointer ");
    			add_location(carousel, file$9, 44, 6, 1628);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, carousel, anchor);
    			append_dev(carousel, icon);
    			append_dev(icon, div);
    			div.innerHTML = raw_value;
    			append_dev(carousel, t0);
    			if (if_block0) if_block0.m(carousel, null);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(carousel, "click", /*click_handler*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*config*/ 2) && raw_value !== (raw_value = (/*config*/ ctx[1].icon ? /*config*/ ctx[1].icon : " ") + "")) div.innerHTML = raw_value;
    			if (!/*toggle*/ ctx[0] && !/*advancedView*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$6(ctx);
    					if_block0.c();
    					if_block0.m(carousel, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*toggle*/ ctx[0] || /*advancedView*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*toggle, advancedView*/ 17) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(carousel);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(44:4) {#if config.groupType == 'standard'}",
    		ctx
    	});

    	return block;
    }

    // (51:8) {#if !toggle && !advancedView}
    function create_if_block_2$6(ctx) {
    	let name;
    	let span0;
    	let t0_value = /*config*/ ctx[1].desc + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2_value = /*config*/ ctx[1].script + "";
    	let t2;

    	const block = {
    		c: function create() {
    			name = element("name");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space$1();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "block");
    			add_location(span0, file$9, 52, 12, 2125);
    			set_style(span1, "overflow", "hidden", 1);
    			attr_dev(span1, "class", "pl-2 font-mono text-gray-500 inline-block max-w-xs overflow-ellipsis whitespace-nowrap");
    			add_location(span1, file$9, 53, 12, 2180);
    			attr_dev(name, "class", "pl-4 flex items-center w-full bg-secondary hover:bg-select-saturate-10 py-2");
    			add_location(name, file$9, 51, 10, 2021);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, name, anchor);
    			append_dev(name, span0);
    			append_dev(span0, t0);
    			append_dev(name, t1);
    			append_dev(name, span1);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*config*/ 2 && t0_value !== (t0_value = /*config*/ ctx[1].desc + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*config*/ 2 && t2_value !== (t2_value = /*config*/ ctx[1].script + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(name);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(51:8) {#if !toggle && !advancedView}",
    		ctx
    	});

    	return block;
    }

    // (59:6) {#if toggle || advancedView}
    function create_if_block_1$6(ctx) {
    	let container;
    	let fader_transition;
    	let fader_transition_intro;
    	let fader_transition_outro;
    	let container_class_value;
    	let container_intro;
    	let current;
    	const config_slot_template = /*#slots*/ ctx[10].config;
    	const config_slot = create_slot(config_slot_template, ctx, /*$$scope*/ ctx[9], get_config_slot_context);

    	const block = {
    		c: function create() {
    			container = element("container");
    			fader_transition = element("fader-transition");
    			if (config_slot) config_slot.c();
    			set_custom_element_data(fader_transition, "class", "w-full");
    			add_location(fader_transition, file$9, 60, 10, 2601);

    			attr_dev(container, "class", container_class_value = "" + ((/*advancedView*/ ctx[4]
    			? "opacity-50 pointer-events-none"
    			: "") + " w-full flex bg-secondary bg-opacity-25 rounded-b-lg"));

    			add_location(container, file$9, 59, 8, 2447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, container, anchor);
    			append_dev(container, fader_transition);

    			if (config_slot) {
    				config_slot.m(fader_transition, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (config_slot) {
    				if (config_slot.p && dirty & /*$$scope*/ 512) {
    					update_slot(config_slot, config_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_config_slot_changes, get_config_slot_context);
    				}
    			}

    			if (!current || dirty & /*advancedView*/ 16 && container_class_value !== (container_class_value = "" + ((/*advancedView*/ ctx[4]
    			? "opacity-50 pointer-events-none"
    			: "") + " w-full flex bg-secondary bg-opacity-25 rounded-b-lg"))) {
    				attr_dev(container, "class", container_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(config_slot, local);

    			add_render_callback(() => {
    				if (fader_transition_outro) fader_transition_outro.end(1);
    				if (!fader_transition_intro) fader_transition_intro = create_in_transition(fader_transition, fade, { delay: 200 });
    				fader_transition_intro.start();
    			});

    			if (!container_intro) {
    				add_render_callback(() => {
    					container_intro = create_in_transition(container, /*heightChange*/ ctx[7], {});
    					container_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(config_slot, local);
    			if (fader_transition_intro) fader_transition_intro.invalidate();
    			fader_transition_outro = create_out_transition(fader_transition, fade, { delay: 0, duration: 0 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(container);
    			if (config_slot) config_slot.d(detaching);
    			if (detaching && fader_transition_outro) fader_transition_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(59:6) {#if toggle || advancedView}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let wrapper;
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let div_class_value;
    	let wrapper_id_value;
    	let wrapper_movable_value;
    	let wrapper_config_component_value;
    	let wrapper_config_id_value;
    	let current;
    	const if_block_creators = [create_if_block$7, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*config*/ ctx[1].groupType == "standard") return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const options_slot_template = /*#slots*/ ctx[10].options;
    	const options_slot = create_slot(options_slot_template, ctx, /*$$scope*/ ctx[9], get_options_slot_context);

    	const block = {
    		c: function create() {
    			wrapper = element("wrapper");
    			div = element("div");
    			if_block.c();
    			t = space$1();
    			if (options_slot) options_slot.c();
    			attr_dev(div, "class", div_class_value = "flex relative " + (/*drag_start*/ ctx[3] ? "pointer-events-none" : ""));
    			add_location(div, file$9, 41, 2, 1507);
    			attr_dev(wrapper, "id", wrapper_id_value = "cfg-" + /*index*/ ctx[2]);

    			attr_dev(wrapper, "movable", wrapper_movable_value = /*config*/ ctx[1].groupType == "standard" || /*config*/ ctx[1].component.name == "If"
    			? true
    			: false);

    			attr_dev(wrapper, "config-component", wrapper_config_component_value = /*config*/ ctx[1].component.name);
    			attr_dev(wrapper, "config-id", wrapper_config_id_value = /*config*/ ctx[1].id);
    			attr_dev(wrapper, "class", "block border-none outline-none transition-opacity duration-300");
    			add_location(wrapper, file$9, 40, 0, 1211);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, wrapper, anchor);
    			append_dev(wrapper, div);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t);

    			if (options_slot) {
    				options_slot.m(div, null);
    			}

    			/*wrapper_binding*/ ctx[12](wrapper);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, t);
    			}

    			if (options_slot) {
    				if (options_slot.p && dirty & /*$$scope, toggle*/ 513) {
    					update_slot(options_slot, options_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_options_slot_changes, get_options_slot_context);
    				}
    			}

    			if (!current || dirty & /*drag_start*/ 8 && div_class_value !== (div_class_value = "flex relative " + (/*drag_start*/ ctx[3] ? "pointer-events-none" : ""))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*index*/ 4 && wrapper_id_value !== (wrapper_id_value = "cfg-" + /*index*/ ctx[2])) {
    				attr_dev(wrapper, "id", wrapper_id_value);
    			}

    			if (!current || dirty & /*config*/ 2 && wrapper_movable_value !== (wrapper_movable_value = /*config*/ ctx[1].groupType == "standard" || /*config*/ ctx[1].component.name == "If"
    			? true
    			: false)) {
    				attr_dev(wrapper, "movable", wrapper_movable_value);
    			}

    			if (!current || dirty & /*config*/ 2 && wrapper_config_component_value !== (wrapper_config_component_value = /*config*/ ctx[1].component.name)) {
    				attr_dev(wrapper, "config-component", wrapper_config_component_value);
    			}

    			if (!current || dirty & /*config*/ 2 && wrapper_config_id_value !== (wrapper_config_id_value = /*config*/ ctx[1].id)) {
    				attr_dev(wrapper, "config-id", wrapper_config_id_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(options_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(options_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(wrapper);
    			if_blocks[current_block_type_index].d();
    			if (options_slot) options_slot.d(detaching);
    			/*wrapper_binding*/ ctx[12](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $actionPrefStore;
    	let $actionNodeBinding;
    	validate_store(actionPrefStore, "actionPrefStore");
    	component_subscribe($$self, actionPrefStore, $$value => $$invalidate(8, $actionPrefStore = $$value));
    	validate_store(actionNodeBinding, "actionNodeBinding");
    	component_subscribe($$self, actionNodeBinding, $$value => $$invalidate(5, $actionNodeBinding = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("DynamicWrapper", slots, ['config','options']);
    	let { config = "" } = $$props; //{desc: 'unnamed', groupType: 'standard', id: ''};
    	let { index = undefined } = $$props;
    	let { drag_start = false } = $$props;
    	let { toggle = false } = $$props;
    	const color = () => "rgb(" + Math.floor(Math.random() * 256) + "," + Math.floor(Math.random() * 256) + "," + Math.floor(Math.random() * 256) + ")";

    	function heightChange(node, { delay = 0, duration = 200, position = "relative" }) {
    		let h = +getComputedStyle(node)["height"].slice(0, -2);

    		return {
    			delay,
    			duration,
    			css: t => {
    				return `position: ${position}; height: ${sineOut(t) * h}px;`;
    			}
    		};
    	}

    	// when the advanced options are open then show the actions with disabled user interactions
    	let advancedView = false;

    	const writable_props = ["config", "index", "drag_start", "toggle"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DynamicWrapper> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$$invalidate(0, toggle = !toggle);
    	};

    	function wrapper_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$actionNodeBinding[config.id] = $$value;
    			actionNodeBinding.set($actionNodeBinding);
    			$$invalidate(1, config);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("config" in $$props) $$invalidate(1, config = $$props.config);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("drag_start" in $$props) $$invalidate(3, drag_start = $$props.drag_start);
    		if ("toggle" in $$props) $$invalidate(0, toggle = $$props.toggle);
    		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		sineOut,
    		fade,
    		actionPrefStore,
    		actionNodeBinding,
    		appMultiSelect,
    		config,
    		index,
    		drag_start,
    		toggle,
    		color,
    		heightChange,
    		advancedView,
    		$actionPrefStore,
    		$actionNodeBinding
    	});

    	$$self.$inject_state = $$props => {
    		if ("config" in $$props) $$invalidate(1, config = $$props.config);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("drag_start" in $$props) $$invalidate(3, drag_start = $$props.drag_start);
    		if ("toggle" in $$props) $$invalidate(0, toggle = $$props.toggle);
    		if ("advancedView" in $$props) $$invalidate(4, advancedView = $$props.advancedView);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$actionPrefStore, index*/ 260) {
    			$actionPrefStore.advanced.index == index && $actionPrefStore.advanced.visible
    			? $$invalidate(4, advancedView = true)
    			: $$invalidate(4, advancedView = false);
    		}
    	};

    	return [
    		toggle,
    		config,
    		index,
    		drag_start,
    		advancedView,
    		$actionNodeBinding,
    		color,
    		heightChange,
    		$actionPrefStore,
    		$$scope,
    		slots,
    		click_handler,
    		wrapper_binding
    	];
    }

    class DynamicWrapper extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			config: 1,
    			index: 2,
    			drag_start: 3,
    			toggle: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DynamicWrapper",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get config() {
    		throw new Error("<DynamicWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<DynamicWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<DynamicWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<DynamicWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get drag_start() {
    		throw new Error("<DynamicWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set drag_start(value) {
    		throw new Error("<DynamicWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggle() {
    		throw new Error("<DynamicWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggle(value) {
    		throw new Error("<DynamicWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\app\elements\app\panels\configuration\components\Options.svelte generated by Svelte v3.35.0 */
    const file$8 = "src\\app\\elements\\app\\panels\\configuration\\components\\Options.svelte";

    // (88:0) {:else}
    function create_else_block$2(ctx) {
    	let select_box_palceholder;
    	let select_box;
    	let div;

    	const block = {
    		c: function create() {
    			select_box_palceholder = element("select-box-palceholder");
    			select_box = element("select-box");
    			div = element("div");
    			div.textContent = `${""}`;
    			attr_dev(div, "class", "flex items-center justify-center p-2 w-6 h-6 text-xs");
    			add_location(div, file$8, 90, 4, 3852);
    			set_custom_element_data(select_box, "class", "flex pl-2 group justify-center items-center bg-transparent");
    			add_location(select_box, file$8, 89, 2, 3767);
    			add_location(select_box_palceholder, file$8, 88, 0, 3739);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select_box_palceholder, anchor);
    			append_dev(select_box_palceholder, select_box);
    			append_dev(select_box, div);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select_box_palceholder);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(88:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (75:78) 
    function create_if_block_2$5(ctx) {
    	let select_box;
    	let div;

    	let t0_value = (/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    	? "✔"
    	: "") + "";

    	let t0;
    	let t1;
    	let div_class_value;
    	let mounted;
    	let dispose;
    	let if_block = /*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]] && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			select_box = element("select-box");
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space$1();
    			if (if_block) if_block.c();

    			attr_dev(div, "class", div_class_value = "" + ((/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "bg-pink-500"
    			: "") + "  flex items-center justify-center p-2 w-6 h-6 border-2 border-pink-500 rounded-full text-white text-xs"));

    			add_location(div, file$8, 76, 2, 3163);
    			set_custom_element_data(select_box, "class", "flex pl-2 group justify-center items-center bg-transparent");
    			add_location(select_box, file$8, 75, 0, 3080);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select_box, anchor);
    			append_dev(select_box, div);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler_2*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$appMultiSelect, index*/ 33 && t0_value !== (t0_value = (/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "✔"
    			: "") + "")) set_data_dev(t0, t0_value);

    			if (/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$2(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$appMultiSelect, index*/ 33 && div_class_value !== (div_class_value = "" + ((/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "bg-pink-500"
    			: "") + "  flex items-center justify-center p-2 w-6 h-6 border-2 border-pink-500 rounded-full text-white text-xs"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select_box);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(75:78) ",
    		ctx
    	});

    	return block;
    }

    // (67:80) 
    function create_if_block_1$5(ctx) {
    	let select_box;
    	let div;

    	let t_value = (/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    	? "✔"
    	: "") + "";

    	let t;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			select_box = element("select-box");
    			div = element("div");
    			t = text(t_value);

    			attr_dev(div, "class", div_class_value = "" + ((/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "bg-pick"
    			: "") + "  flex items-center justify-center p-2 w-6 h-6 border-2  border-pick rounded-full text-white text-xs"));

    			add_location(div, file$8, 68, 4, 2646);
    			set_custom_element_data(select_box, "class", "flex pl-2 group justify-center items-center bg-transparent");
    			add_location(select_box, file$8, 67, 2, 2561);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select_box, anchor);
    			append_dev(select_box, div);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler_1*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$appMultiSelect, index*/ 33 && t_value !== (t_value = (/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "✔"
    			: "") + "")) set_data_dev(t, t_value);

    			if (dirty & /*$appMultiSelect, index*/ 33 && div_class_value !== (div_class_value = "" + ((/*$appMultiSelect*/ ctx[5].selection[/*index*/ ctx[0]]
    			? "bg-pick"
    			: "") + "  flex items-center justify-center p-2 w-6 h-6 border-2  border-pick rounded-full text-white text-xs"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select_box);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(67:80) ",
    		ctx
    	});

    	return block;
    }

    // (59:0) {#if (componentName == 'Locals' || componentName == 'CodeBlock') && !$appMultiSelect.enabled}
    function create_if_block$6(ctx) {
    	let show_advanced;
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let svg_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			show_advanced = element("show-advanced");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M8 4C8 6.20914 6.20914 8 4 8C1.79086 8 0 6.20914 0 4C0 1.79086 1.79086 0 4 0C6.20914 0 8 1.79086 8 4Z");
    			attr_dev(path0, "fill", "#ffffff");
    			add_location(path0, file$8, 61, 6, 2025);
    			attr_dev(path1, "d", "M8 16C8 18.2091 6.20914 20 4 20C1.79086 20 0 18.2091 0 16C0 13.7909 1.79086 12 4 12C6.20914 12 8 13.7909 8 16Z");
    			attr_dev(path1, "fill", "#ffffff");
    			add_location(path1, file$8, 62, 6, 2161);
    			attr_dev(path2, "d", "M8 28C8 30.2091 6.20914 32 4 32C1.79086 32 0 30.2091 0 28C0 25.7909 1.79086 24 4 24C6.20914 24 8 25.7909 8 28Z");
    			attr_dev(path2, "fill", "#ffffff");
    			add_location(path2, file$8, 63, 6, 2306);
    			set_style(svg, "padding", "0.125rem");

    			attr_dev(svg, "class", svg_class_value = "" + ((/*$actionPrefStore*/ ctx[6].advanced.visible && /*$actionPrefStore*/ ctx[6].advanced.index == /*index*/ ctx[0]
    			? "bg-select-desaturate-10"
    			: "") + " h-6 w-6 pointer-events-none group-hover:bg-select-desaturate-10 group-hover:cursor-pointer rounded-full"));

    			attr_dev(svg, "viewBox", "0 0 8 32");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$8, 60, 4, 1696);
    			set_custom_element_data(show_advanced, "id", "show-advanced");
    			set_custom_element_data(show_advanced, "class", "flex pl-2 group justify-center  items-center bg-transparent");
    			add_location(show_advanced, file$8, 59, 2, 1532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, show_advanced, anchor);
    			append_dev(show_advanced, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);

    			if (!mounted) {
    				dispose = listen_dev(show_advanced, "click", /*click_handler*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$actionPrefStore, index*/ 65 && svg_class_value !== (svg_class_value = "" + ((/*$actionPrefStore*/ ctx[6].advanced.visible && /*$actionPrefStore*/ ctx[6].advanced.index == /*index*/ ctx[0]
    			? "bg-select-desaturate-10"
    			: "") + " h-6 w-6 pointer-events-none group-hover:bg-select-desaturate-10 group-hover:cursor-pointer rounded-full"))) {
    				attr_dev(svg, "class", svg_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(show_advanced);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(59:0) {#if (componentName == 'Locals' || componentName == 'CodeBlock') && !$appMultiSelect.enabled}",
    		ctx
    	});

    	return block;
    }

    // (81:4) {#if $appMultiSelect.selection[index]}
    function create_if_block_3$2(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "absolute bottom-0 rounded-full bg-pink-500 w-4 h-4");
    			add_location(div0, file$8, 82, 8, 3608);
    			set_style(div1, "height", /*ifBlockSize*/ ctx[4] * 40 + "px");
    			attr_dev(div1, "class", "absolute w-1 bg-pink-500 top-0 mt-7 flex justify-center");
    			add_location(div1, file$8, 81, 6, 3488);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ifBlockSize*/ 16) {
    				set_style(div1, "height", /*ifBlockSize*/ ctx[4] * 40 + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(81:4) {#if $appMultiSelect.selection[index]}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if ((/*componentName*/ ctx[2] == "Locals" || /*componentName*/ ctx[2] == "CodeBlock") && !/*$appMultiSelect*/ ctx[5].enabled) return create_if_block$6;
    		if (/*groupType*/ ctx[1] == "standard" && /*$appMultiSelect*/ ctx[5].enabled && /*showSelectBox*/ ctx[3]) return create_if_block_1$5;
    		if (/*componentName*/ ctx[2] == "If" && /*$appMultiSelect*/ ctx[5].enabled && /*showSelectBox*/ ctx[3]) return create_if_block_2$5;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $runtime;
    	let $appMultiSelect;
    	let $actionPrefStore;
    	validate_store(runtime, "runtime");
    	component_subscribe($$self, runtime, $$value => $$invalidate(8, $runtime = $$value));
    	validate_store(appMultiSelect, "appMultiSelect");
    	component_subscribe($$self, appMultiSelect, $$value => $$invalidate(5, $appMultiSelect = $$value));
    	validate_store(actionPrefStore, "actionPrefStore");
    	component_subscribe($$self, actionPrefStore, $$value => $$invalidate(6, $actionPrefStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Options", slots, []);
    	let { index } = $$props;
    	let { groupType } = $$props;
    	let { componentName } = $$props;
    	let showSelectBox = true;
    	let ifBlockSize = 0;

    	function ifBlockCheck(actions) {
    		let notInBlock = true;

    		// lookbefore
    		const lookbefore = actions.slice(0, index).reverse();

    		const if_index = lookbefore.findIndex(a => a.component == "IF");
    		const end_index = lookbefore.findIndex(a => a.component == "END");

    		if (if_index !== -1 && end_index !== -1) {
    			if (if_index < end_index) {
    				//console.log(index, " - ",  component, '<- this is in IF block')
    				notInBlock = false;
    			}
    		}

    		if (if_index !== -1 && end_index == -1) {
    			//console.log(index, " - ",  component, '<- this is in IF block')
    			notInBlock = false;
    		}

    		return notInBlock;
    	}

    	function handleMultiSelect() {
    		// called only on IF component
    		const lookafter = $runtime.slice(index);

    		const end_index = lookafter.findIndex(a => a.component == "END");
    		$$invalidate(4, ifBlockSize = end_index);

    		for (let i = index; i < index + end_index + 1; i++) {
    			set_store_value(appMultiSelect, $appMultiSelect.selection[i] = !$appMultiSelect.selection[i], $appMultiSelect);
    		}
    	}

    	const writable_props = ["index", "groupType", "componentName"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Options> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		actionPrefStore.showAdvanced(index);
    	};

    	const click_handler_1 = () => {
    		set_store_value(appMultiSelect, $appMultiSelect.selection[index] = !$appMultiSelect.selection[index], $appMultiSelect);
    	};

    	const click_handler_2 = () => {
    		handleMultiSelect();
    	};

    	$$self.$$set = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("groupType" in $$props) $$invalidate(1, groupType = $$props.groupType);
    		if ("componentName" in $$props) $$invalidate(2, componentName = $$props.componentName);
    	};

    	$$self.$capture_state = () => ({
    		appMultiSelect,
    		runtime,
    		actionPrefStore,
    		index,
    		groupType,
    		componentName,
    		showSelectBox,
    		ifBlockSize,
    		ifBlockCheck,
    		handleMultiSelect,
    		$runtime,
    		$appMultiSelect,
    		$actionPrefStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("groupType" in $$props) $$invalidate(1, groupType = $$props.groupType);
    		if ("componentName" in $$props) $$invalidate(2, componentName = $$props.componentName);
    		if ("showSelectBox" in $$props) $$invalidate(3, showSelectBox = $$props.showSelectBox);
    		if ("ifBlockSize" in $$props) $$invalidate(4, ifBlockSize = $$props.ifBlockSize);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$runtime*/ 256) {
    			if ($runtime) {
    				$$invalidate(3, showSelectBox = ifBlockCheck($runtime));
    			}
    		}
    	};

    	return [
    		index,
    		groupType,
    		componentName,
    		showSelectBox,
    		ifBlockSize,
    		$appMultiSelect,
    		$actionPrefStore,
    		handleMultiSelect,
    		$runtime,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Options extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { index: 0, groupType: 1, componentName: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Options",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*index*/ ctx[0] === undefined && !("index" in props)) {
    			console.warn("<Options> was created without expected prop 'index'");
    		}

    		if (/*groupType*/ ctx[1] === undefined && !("groupType" in props)) {
    			console.warn("<Options> was created without expected prop 'groupType'");
    		}

    		if (/*componentName*/ ctx[2] === undefined && !("componentName" in props)) {
    			console.warn("<Options> was created without expected prop 'componentName'");
    		}
    	}

    	get index() {
    		throw new Error("<Options>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Options>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupType() {
    		throw new Error("<Options>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupType(value) {
    		throw new Error("<Options>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get componentName() {
    		throw new Error("<Options>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set componentName(value) {
    		throw new Error("<Options>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function menuBoundaries(node) {

      let rect = undefined;

      function init(){
        rect = node.getBoundingClientRect();
        if(window.innerHeight - rect.bottom < 20){
          node.style.top = -250 + (window.innerHeight - rect.bottom) - 20 + 'px';
        }
      }

      function getSize(){
        const h = window.innerHeight;
        const topOffset = h - rect.bottom;

        // 20 as a "padding on bottom"
        if(topOffset < 20){
          node.dispatchEvent(new CustomEvent('offset-top', {detail: topOffset - 20}));
        }    
      }

      init();

      getSize();

      window.addEventListener('resize', getSize);

      return {

        update(){
          node.dispatchEvent(new CustomEvent('offset-top', {detail: topOffset - 20}));
        },

        destroy() {
          window.removeEventListener('resize', getSize);
        }
      }
    }

    /* src\app\elements\app\panels\configuration\ConfigExtension.svelte generated by Svelte v3.35.0 */

    const { console: console_1$4 } = globals;
    const file$7 = "src\\app\\elements\\app\\panels\\configuration\\ConfigExtension.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    // (62:0) {#if ready}
    function create_if_block$5(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*index*/ ctx[0] == /*$actionPrefStore*/ ctx[6].advanced.index && /*$actionPrefStore*/ ctx[6].advanced.visible && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*index*/ ctx[0] == /*$actionPrefStore*/ ctx[6].advanced.index && /*$actionPrefStore*/ ctx[6].advanced.visible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*index, $actionPrefStore*/ 65) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(62:0) {#if ready}",
    		ctx
    	});

    	return block;
    }

    // (64:2) {#if index == $actionPrefStore.advanced.index && $actionPrefStore.advanced.visible}
    function create_if_block_1$4(ctx) {
    	let advanced_config;
    	let container;
    	let wrapper;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let svg;
    	let path0;
    	let path1;
    	let t2;
    	let div4;
    	let advanced_menu;
    	let select_config_suggestions;
    	let div3;
    	let t3;
    	let config_pool;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let advanced_code;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_5 = ["all", .../*filterDuplicateTypes*/ ctx[8]()];
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	let if_block0 = (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "arithmetic_operator") && create_if_block_10(ctx);
    	let if_block1 = (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "relational_operator") && create_if_block_8(ctx);
    	let if_block2 = (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "logical_operator") && create_if_block_6(ctx);
    	let if_block3 = (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "grid_function") && create_if_block_4$1(ctx);
    	let if_block4 = (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "encoder") && create_if_block_2$4(ctx);
    	var switch_value = /*config*/ ctx[1].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				slot: "config",
    				config: /*config*/ ctx[1],
    				advanced: true,
    				advancedClickAddon: /*advancedClickAddon*/ ctx[2],
    				index: /*index*/ ctx[0]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("output", /*output_handler*/ ctx[20]);
    	}

    	const block = {
    		c: function create() {
    			advanced_config = element("advanced-config");
    			container = element("container");
    			wrapper = element("wrapper");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Advanced";
    			t1 = space$1();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t2 = space$1();
    			div4 = element("div");
    			advanced_menu = element("advanced-menu");
    			select_config_suggestions = element("select-config-suggestions");
    			div3 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space$1();
    			config_pool = element("config-pool");
    			if (if_block0) if_block0.c();
    			t4 = space$1();
    			if (if_block1) if_block1.c();
    			t5 = space$1();
    			if (if_block2) if_block2.c();
    			t6 = space$1();
    			if (if_block3) if_block3.c();
    			t7 = space$1();
    			if (if_block4) if_block4.c();
    			t8 = space$1();
    			advanced_code = element("advanced-code");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div0, "class", "font-bold w-auto py-2 mx-2 border-b border-gray-700 text-white svelte-m3nicz");
    			add_location(div0, file$7, 78, 10, 2225);
    			attr_dev(path0, "d", "M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z");
    			attr_dev(path0, "class", "svelte-m3nicz");
    			add_location(path0, file$7, 81, 14, 2621);
    			attr_dev(path1, "d", "M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z");
    			attr_dev(path1, "class", "svelte-m3nicz");
    			add_location(path1, file$7, 82, 14, 2734);
    			attr_dev(svg, "class", "w-5 h-5 p-1 fill-current text-gray-500 svelte-m3nicz");
    			attr_dev(svg, "viewBox", "0 0 29 29");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$7, 80, 12, 2486);
    			attr_dev(div1, "id", "close-btn");
    			attr_dev(div1, "class", "p-1 mx-1 cursor-pointer not-draggable hover:bg-secondary svelte-m3nicz");
    			add_location(div1, file$7, 79, 10, 2327);
    			attr_dev(div2, "class", "flex items-center justify-between svelte-m3nicz");
    			add_location(div2, file$7, 77, 8, 2166);
    			attr_dev(div3, "class", " flex flex-row py-2 flex-wrap svelte-m3nicz");
    			add_location(div3, file$7, 92, 16, 3123);
    			set_custom_element_data(select_config_suggestions, "class", "w-full text-white flex flex-col text-sm svelte-m3nicz");
    			add_location(select_config_suggestions, file$7, 91, 14, 3030);
    			set_custom_element_data(config_pool, "class", "w-full flex flex-col overflow-y-scroll svelte-m3nicz");
    			add_location(config_pool, file$7, 99, 14, 3519);
    			set_custom_element_data(advanced_menu, "class", "w-3/12 flex flex-col  svelte-m3nicz");
    			add_location(advanced_menu, file$7, 89, 10, 2955);
    			set_custom_element_data(advanced_code, "class", "w-9/12 px-4 overflow-y-scroll svelte-m3nicz");
    			add_location(advanced_code, file$7, 159, 10, 7709);
    			attr_dev(div4, "class", "flex flex-grow overflow-y-scroll svelte-m3nicz");
    			add_location(div4, file$7, 87, 8, 2895);
    			attr_dev(wrapper, "class", "flex flex-col h-full font-mono svelte-m3nicz");
    			add_location(wrapper, file$7, 72, 6, 1988);
    			attr_dev(container, "id", "config-menu");
    			set_style(container, "right", "calc(100% + 2rem)");
    			set_style(container, "top", -150 + /*topOffset*/ ctx[3] + "px");
    			set_style(container, "width", "600px");
    			set_style(container, "height", "600px");
    			set_style(container, "position", "absolute");
    			attr_dev(container, "class", " shadow-md rounded-md bg-primary p-2 z-50 svelte-m3nicz");
    			add_location(container, file$7, 66, 4, 1698);
    			set_custom_element_data(advanced_config, "class", "relative w-full flex  svelte-m3nicz");
    			add_location(advanced_config, file$7, 65, 2, 1645);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, advanced_config, anchor);
    			append_dev(advanced_config, container);
    			append_dev(container, wrapper);
    			append_dev(wrapper, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(wrapper, t2);
    			append_dev(wrapper, div4);
    			append_dev(div4, advanced_menu);
    			append_dev(advanced_menu, select_config_suggestions);
    			append_dev(select_config_suggestions, div3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div3, null);
    			}

    			append_dev(advanced_menu, t3);
    			append_dev(advanced_menu, config_pool);
    			if (if_block0) if_block0.m(config_pool, null);
    			append_dev(config_pool, t4);
    			if (if_block1) if_block1.m(config_pool, null);
    			append_dev(config_pool, t5);
    			if (if_block2) if_block2.m(config_pool, null);
    			append_dev(config_pool, t6);
    			if (if_block3) if_block3.m(config_pool, null);
    			append_dev(config_pool, t7);
    			if (if_block4) if_block4.m(config_pool, null);
    			append_dev(div4, t8);
    			append_dev(div4, advanced_code);

    			if (switch_instance) {
    				mount_component(switch_instance, advanced_code, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*click_handler*/ ctx[10], false, false, false),
    					action_destroyer(clickOutside.call(null, wrapper)),
    					listen_dev(wrapper, "click-outside", /*click_outside_handler*/ ctx[21], false, false, false),
    					action_destroyer(menuBoundaries.call(null, container)),
    					listen_dev(container, "offset-top", /*offset_top_handler*/ ctx[22], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sg, filterDuplicateTypes*/ 272) {
    				each_value_5 = ["all", .../*filterDuplicateTypes*/ ctx[8]()];
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}

    			if (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "arithmetic_operator") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_10(ctx);
    					if_block0.c();
    					if_block0.m(config_pool, t4);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "relational_operator") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_8(ctx);
    					if_block1.c();
    					if_block1.m(config_pool, t5);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "logical_operator") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_6(ctx);
    					if_block2.c();
    					if_block2.m(config_pool, t6);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "grid_function") {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_4$1(ctx);
    					if_block3.c();
    					if_block3.m(config_pool, t7);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*sg*/ ctx[4] == "all" || /*sg*/ ctx[4] == "encoder") {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_2$4(ctx);
    					if_block4.c();
    					if_block4.m(config_pool, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			const switch_instance_changes = {};
    			if (dirty[0] & /*config*/ 2) switch_instance_changes.config = /*config*/ ctx[1];
    			if (dirty[0] & /*advancedClickAddon*/ 4) switch_instance_changes.advancedClickAddon = /*advancedClickAddon*/ ctx[2];
    			if (dirty[0] & /*index*/ 1) switch_instance_changes.index = /*index*/ ctx[0];

    			if (switch_value !== (switch_value = /*config*/ ctx[1].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("output", /*output_handler*/ ctx[20]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, advanced_code, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}

    			if (!current || dirty[0] & /*topOffset*/ 8) {
    				set_style(container, "top", -150 + /*topOffset*/ ctx[3] + "px");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(advanced_config);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(64:2) {#if index == $actionPrefStore.advanced.index && $actionPrefStore.advanced.visible}",
    		ctx
    	});

    	return block;
    }

    // (94:18) {#each ['all',...filterDuplicateTypes()] as key}
    function create_each_block_5(ctx) {
    	let div;
    	let t_value = /*key*/ ctx[34] + "";
    	let t;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[11](/*key*/ ctx[34]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);

    			attr_dev(div, "class", div_class_value = "" + ((/*sg*/ ctx[4] == /*key*/ ctx[34]
    			? "bg-select"
    			: "hover:bg-select-desaturate-10") + " m-1 px-2 py-1 rounded-lg cursor-pointer" + " svelte-m3nicz"));

    			add_location(div, file$7, 94, 20, 3256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*sg*/ 16 && div_class_value !== (div_class_value = "" + ((/*sg*/ ctx[4] == /*key*/ ctx[34]
    			? "bg-select"
    			: "hover:bg-select-desaturate-10") + " m-1 px-2 py-1 rounded-lg cursor-pointer" + " svelte-m3nicz"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(94:18) {#each ['all',...filterDuplicateTypes()] as key}",
    		ctx
    	});

    	return block;
    }

    // (101:16) {#if sg == "all" || sg == "arithmetic_operator"}
    function create_if_block_10(ctx) {
    	let basic_functions;
    	let t;
    	let div;
    	let if_block = /*sg*/ ctx[4] == "all" && create_if_block_11(ctx);
    	let each_value_4 = grid.properties.LUA.filter(/*func*/ ctx[12]);
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			basic_functions = element("basic-functions");
    			if (if_block) if_block.c();
    			t = space$1();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex -ml-1 items-start flex-wrap svelte-m3nicz");
    			add_location(div, file$7, 104, 20, 3866);
    			set_custom_element_data(basic_functions, "class", "w-full flex flex-col p-2 svelte-m3nicz");
    			add_location(basic_functions, file$7, 101, 18, 3665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, basic_functions, anchor);
    			if (if_block) if_block.m(basic_functions, null);
    			append_dev(basic_functions, t);
    			append_dev(basic_functions, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*sg*/ ctx[4] == "all") {
    				if (if_block) ; else {
    					if_block = create_if_block_11(ctx);
    					if_block.c();
    					if_block.m(basic_functions, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*addThisManually, $selectedControlElement*/ 640) {
    				each_value_4 = grid.properties.LUA.filter(/*func*/ ctx[12]);
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(basic_functions);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(101:16) {#if sg == \\\"all\\\" || sg == \\\"arithmetic_operator\\\"}",
    		ctx
    	});

    	return block;
    }

    // (104:20) {#if sg == "all"}
    function create_if_block_11(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Arithmetic Operators";
    			attr_dev(span, "class", "text-gray-500 text-sm svelte-m3nicz");
    			add_location(span, file$7, 103, 37, 3776);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(104:20) {#if sg == \\\"all\\\"}",
    		ctx
    	});

    	return block;
    }

    // (106:22) {#each grid.properties.LUA.filter(m => m.type === 'arithmetic_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}
    function create_each_block_4(ctx) {
    	let div;
    	let t_value = /*syntax*/ ctx[23].human + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[13](/*syntax*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "rounded-lg text-sm px-3 py-1 cursor-pointer hover:shadow-md border border-pick-saturate-20 hover:border-pick m-1 bg-gray-900 hover:bg-black text-white svelte-m3nicz");
    			add_location(div, file$7, 106, 24, 4099);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$selectedControlElement*/ 128 && t_value !== (t_value = /*syntax*/ ctx[23].human + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(106:22) {#each grid.properties.LUA.filter(m => m.type === 'arithmetic_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}",
    		ctx
    	});

    	return block;
    }

    // (113:16) {#if sg == "all" || sg == "relational_operator"}
    function create_if_block_8(ctx) {
    	let oparators;
    	let t;
    	let div;
    	let if_block = /*sg*/ ctx[4] == "all" && create_if_block_9(ctx);
    	let each_value_3 = grid.properties.LUA.filter(/*func_1*/ ctx[14]);
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			oparators = element("oparators");
    			if (if_block) if_block.c();
    			t = space$1();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex -ml-1 items-start flex-wrap svelte-m3nicz");
    			add_location(div, file$7, 115, 20, 4705);
    			attr_dev(oparators, "class", "w-full flex flex-col p-2 svelte-m3nicz");
    			add_location(oparators, file$7, 113, 18, 4532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, oparators, anchor);
    			if (if_block) if_block.m(oparators, null);
    			append_dev(oparators, t);
    			append_dev(oparators, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*sg*/ ctx[4] == "all") {
    				if (if_block) ; else {
    					if_block = create_if_block_9(ctx);
    					if_block.c();
    					if_block.m(oparators, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*addThisManually, $selectedControlElement*/ 640) {
    				each_value_3 = grid.properties.LUA.filter(/*func_1*/ ctx[14]);
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(oparators);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(113:16) {#if sg == \\\"all\\\" || sg == \\\"relational_operator\\\"}",
    		ctx
    	});

    	return block;
    }

    // (115:20) {#if sg == "all"}
    function create_if_block_9(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Relational Operators";
    			attr_dev(span, "class", "text-gray-500 text-sm svelte-m3nicz");
    			add_location(span, file$7, 114, 37, 4615);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(115:20) {#if sg == \\\"all\\\"}",
    		ctx
    	});

    	return block;
    }

    // (117:22) {#each grid.properties.LUA.filter(m => m.type === 'relational_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}
    function create_each_block_3(ctx) {
    	let div;
    	let t_value = /*syntax*/ ctx[23].human + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[15](/*syntax*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "rounded-lg text-sm px-3 py-1 cursor-pointer hover:shadow-md border border-pick-saturate-20 hover:border-pick m-1 bg-gray-900 hover:bg-black text-white svelte-m3nicz");
    			add_location(div, file$7, 117, 24, 4938);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_3, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$selectedControlElement*/ 128 && t_value !== (t_value = /*syntax*/ ctx[23].human + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(117:22) {#each grid.properties.LUA.filter(m => m.type === 'relational_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}",
    		ctx
    	});

    	return block;
    }

    // (124:16) {#if sg == "all" || sg == "logical_operator"}
    function create_if_block_6(ctx) {
    	let oparators;
    	let t;
    	let div;
    	let if_block = /*sg*/ ctx[4] == "all" && create_if_block_7(ctx);
    	let each_value_2 = grid.properties.LUA.filter(/*func_2*/ ctx[16]);
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			oparators = element("oparators");
    			if (if_block) if_block.c();
    			t = space$1();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex -ml-1 items-start flex-wrap svelte-m3nicz");
    			add_location(div, file$7, 126, 20, 5532);
    			attr_dev(oparators, "class", "w-full flex flex-col p-2 svelte-m3nicz");
    			add_location(oparators, file$7, 124, 18, 5362);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, oparators, anchor);
    			if (if_block) if_block.m(oparators, null);
    			append_dev(oparators, t);
    			append_dev(oparators, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*sg*/ ctx[4] == "all") {
    				if (if_block) ; else {
    					if_block = create_if_block_7(ctx);
    					if_block.c();
    					if_block.m(oparators, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*addThisManually, $selectedControlElement*/ 640) {
    				each_value_2 = grid.properties.LUA.filter(/*func_2*/ ctx[16]);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(oparators);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(124:16) {#if sg == \\\"all\\\" || sg == \\\"logical_operator\\\"}",
    		ctx
    	});

    	return block;
    }

    // (126:20) {#if sg == "all"}
    function create_if_block_7(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Logical Operators";
    			attr_dev(span, "class", "text-gray-500 text-sm svelte-m3nicz");
    			add_location(span, file$7, 125, 37, 5445);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(126:20) {#if sg == \\\"all\\\"}",
    		ctx
    	});

    	return block;
    }

    // (128:22) {#each grid.properties.LUA.filter(m => m.type === 'logical_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}
    function create_each_block_2$1(ctx) {
    	let div;
    	let t_value = /*syntax*/ ctx[23].human + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[17](/*syntax*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "rounded-lg text-sm px-3 py-1 cursor-pointer hover:shadow-md border border-pick-saturate-20 hover:border-pick m-1 bg-gray-900 hover:bg-black text-white svelte-m3nicz");
    			add_location(div, file$7, 128, 24, 5762);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$selectedControlElement*/ 128 && t_value !== (t_value = /*syntax*/ ctx[23].human + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(128:22) {#each grid.properties.LUA.filter(m => m.type === 'logical_operator' && m.allowed.find(a => a === $selectedControlElement)) as syntax}",
    		ctx
    	});

    	return block;
    }

    // (135:16) {#if sg == "all" || sg == "grid_function"}
    function create_if_block_4$1(ctx) {
    	let config_functions;
    	let t;
    	let div;
    	let if_block = /*sg*/ ctx[4] == "all" && create_if_block_5(ctx);
    	let each_value_1 = grid.properties.LUA.filter(func_3);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			config_functions = element("config-functions");
    			if (if_block) if_block.c();
    			t = space$1();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex -ml-1 items-start flex-wrap svelte-m3nicz");
    			add_location(div, file$7, 137, 20, 6357);
    			set_custom_element_data(config_functions, "class", "w-full flex flex-col p-2 svelte-m3nicz");
    			add_location(config_functions, file$7, 135, 18, 6183);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, config_functions, anchor);
    			if (if_block) if_block.m(config_functions, null);
    			append_dev(config_functions, t);
    			append_dev(config_functions, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*sg*/ ctx[4] == "all") {
    				if (if_block) ; else {
    					if_block = create_if_block_5(ctx);
    					if_block.c();
    					if_block.m(config_functions, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*addThisManually*/ 512) {
    				each_value_1 = grid.properties.LUA.filter(func_3);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(config_functions);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(135:16) {#if sg == \\\"all\\\" || sg == \\\"grid_function\\\"}",
    		ctx
    	});

    	return block;
    }

    // (137:20) {#if sg == "all"}
    function create_if_block_5(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Grid Functions";
    			attr_dev(span, "class", "text-gray-500 text-sm svelte-m3nicz");
    			add_location(span, file$7, 136, 37, 6273);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(137:20) {#if sg == \\\"all\\\"}",
    		ctx
    	});

    	return block;
    }

    // (139:22) {#each grid.properties.LUA.filter(m => m.type === 'global') as syntax}
    function create_each_block_1$1(ctx) {
    	let div;
    	let t_value = /*syntax*/ ctx[23].human + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[18](/*syntax*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "rounded-lg text-sm px-3 py-1 cursor-pointer hover:shadow-md border border-pick-saturate-20 hover:border-pick m-1 bg-gray-900 hover:bg-black " + colorByDesc(/*syntax*/ ctx[23].human) + " svelte-m3nicz");
    			add_location(div, file$7, 139, 24, 6523);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_5, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(139:22) {#each grid.properties.LUA.filter(m => m.type === 'global') as syntax}",
    		ctx
    	});

    	return block;
    }

    // (146:16) {#if sg == "all" || sg == "encoder"}
    function create_if_block_2$4(ctx) {
    	let variables;
    	let t;
    	let div;
    	let if_block = /*sg*/ ctx[4] == "all" && create_if_block_3$1(ctx);
    	let each_value = grid.properties.LUA.filter(func_4);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			variables = element("variables");
    			if (if_block) if_block.c();
    			t = space$1();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex -ml-1 items-start flex-wrap svelte-m3nicz");
    			add_location(div, file$7, 148, 20, 7123);
    			attr_dev(variables, "class", "w-full flex flex-col p-2 svelte-m3nicz");
    			add_location(variables, file$7, 146, 18, 6963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, variables, anchor);
    			if (if_block) if_block.m(variables, null);
    			append_dev(variables, t);
    			append_dev(variables, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*sg*/ ctx[4] == "all") {
    				if (if_block) ; else {
    					if_block = create_if_block_3$1(ctx);
    					if_block.c();
    					if_block.m(variables, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*addThisManually*/ 512) {
    				each_value = grid.properties.LUA.filter(func_4);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(variables);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(146:16) {#if sg == \\\"all\\\" || sg == \\\"encoder\\\"}",
    		ctx
    	});

    	return block;
    }

    // (148:20) {#if sg == "all"}
    function create_if_block_3$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Encoder";
    			attr_dev(span, "class", "text-gray-500 text-sm svelte-m3nicz");
    			add_location(span, file$7, 147, 37, 7046);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(148:20) {#if sg == \\\"all\\\"}",
    		ctx
    	});

    	return block;
    }

    // (150:22) {#each grid.properties.LUA.filter(m => m.type === 'encoder') as syntax}
    function create_each_block$4(ctx) {
    	let div;
    	let t_value = /*syntax*/ ctx[23].human + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_6() {
    		return /*click_handler_6*/ ctx[19](/*syntax*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "rounded-lg text-sm px-3 py-1 cursor-pointer hover:shadow-md border border-pick-saturate-20 hover:border-pick m-1 bg-gray-900 hover:bg-black text-white svelte-m3nicz");
    			add_location(div, file$7, 150, 24, 7290);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_6, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(150:22) {#each grid.properties.LUA.filter(m => m.type === 'encoder') as syntax}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*ready*/ ctx[5] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*ready*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*ready*/ 32) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function colorByDesc(desc) {
    	let color = "";

    	switch (desc.split("_")[0]) {
    		case "led":
    			color = "text-yellow-400";
    			break;
    		case "midi":
    			color = "text-indigo-400";
    			break;
    		case "keyboard":
    			color = "text-green-400";
    			break;
    		case "page":
    			color = "text-pink-400";
    			break;
    		default:
    			color = "text-white";
    			break;
    	}

    	return color;
    }

    const func_3 = m => m.type === "global";
    const func_4 = m => m.type === "encoder";

    function instance$7($$self, $$props, $$invalidate) {
    	let $actionPrefStore;
    	let $selectedControlElement;
    	validate_store(actionPrefStore, "actionPrefStore");
    	component_subscribe($$self, actionPrefStore, $$value => $$invalidate(6, $actionPrefStore = $$value));
    	validate_store(selectedControlElement, "selectedControlElement");
    	component_subscribe($$self, selectedControlElement, $$value => $$invalidate(7, $selectedControlElement = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ConfigExtension", slots, []);
    	let advancedClickAddon;
    	let { index = undefined } = $$props;
    	let { config = undefined } = $$props;
    	let topOffset = 0;

    	function filterDuplicateTypes() {
    		let arr = grid.properties.LUA;
    		console.log(arr);

    		// v, i, a = value, index, array
    		return arr.filter((v, i, a) => a.findIndex(t => t.type === v.type) === i).map(e => e.type);
    	}

    	function addThisManually(elem) {
    		$$invalidate(2, advancedClickAddon = elem);
    	}

    	let sg = "all"; // show suggestion

    	// managing lifecycle as child components dont receive data otherwise
    	let ready = false;

    	onMount(() => {
    		$$invalidate(5, ready = true);
    	});

    	const writable_props = ["index", "config"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn(`<ConfigExtension> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		actionPrefStore.showAdvanced(index, false);
    	};

    	const click_handler_1 = key => {
    		$$invalidate(4, sg = key);
    	};

    	const func = m => m.type === "arithmetic_operator" && m.allowed.find(a => a === $selectedControlElement);

    	const click_handler_2 = syntax => {
    		addThisManually(syntax);
    	};

    	const func_1 = m => m.type === "relational_operator" && m.allowed.find(a => a === $selectedControlElement);

    	const click_handler_3 = syntax => {
    		addThisManually(syntax);
    	};

    	const func_2 = m => m.type === "logical_operator" && m.allowed.find(a => a === $selectedControlElement);

    	const click_handler_4 = syntax => {
    		addThisManually(syntax);
    	};

    	const click_handler_5 = syntax => {
    		addThisManually(syntax);
    	};

    	const click_handler_6 = syntax => {
    		addThisManually(syntax);
    	};

    	function output_handler(event) {
    		bubble($$self, event);
    	}

    	const click_outside_handler = () => {
    		actionPrefStore.showAdvanced(index, "outside");
    	};

    	const offset_top_handler = e => {
    		$$invalidate(3, topOffset = e.detail);
    	};

    	$$self.$$set = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("config" in $$props) $$invalidate(1, config = $$props.config);
    	};

    	$$self.$capture_state = () => ({
    		actionNodeBinding,
    		actionPrefStore,
    		selectedControlElement,
    		clickOutside,
    		menuBoundaries,
    		onMount,
    		createEventDispatcher,
    		grid,
    		advancedClickAddon,
    		index,
    		config,
    		topOffset,
    		filterDuplicateTypes,
    		addThisManually,
    		colorByDesc,
    		sg,
    		ready,
    		$actionPrefStore,
    		$selectedControlElement
    	});

    	$$self.$inject_state = $$props => {
    		if ("advancedClickAddon" in $$props) $$invalidate(2, advancedClickAddon = $$props.advancedClickAddon);
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("config" in $$props) $$invalidate(1, config = $$props.config);
    		if ("topOffset" in $$props) $$invalidate(3, topOffset = $$props.topOffset);
    		if ("sg" in $$props) $$invalidate(4, sg = $$props.sg);
    		if ("ready" in $$props) $$invalidate(5, ready = $$props.ready);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		index,
    		config,
    		advancedClickAddon,
    		topOffset,
    		sg,
    		ready,
    		$actionPrefStore,
    		$selectedControlElement,
    		filterDuplicateTypes,
    		addThisManually,
    		click_handler,
    		click_handler_1,
    		func,
    		click_handler_2,
    		func_1,
    		click_handler_3,
    		func_2,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		output_handler,
    		click_outside_handler,
    		offset_top_handler
    	];
    }

    class ConfigExtension extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { index: 0, config: 1 }, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConfigExtension",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get index() {
    		throw new Error("<ConfigExtension>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ConfigExtension>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get config() {
    		throw new Error("<ConfigExtension>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<ConfigExtension>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // meta: *--[[@ + code]]* -> config identifier
    // must match naming conventions of grid-protocol.json
    const config_collection = [
        {category: ["Basic", "MIDI"],           name: "midi to do", configs: ["--[[@l]] local x = 1 local y = 2 local z = 3"]},
        {category: ["Basic", "LED Value"],      name: "led value to do", configs: ["--[[@glp]] glp(,,)"] },
        {category: ["Basic", "LED Color"],      name: "led color stuff", configs: ["--[[@glsc]] glsc(,,,,)"]},
        {category: ["Basic", "LED Color"],      name: "another led color stuff", configs: ["--[[@glsc]] glsc(,,,,)"]},
        {category: ["User", "Processing"],      name: "if cond", configs: ["to do 1...", "to do 2..."]},
        {category: ["User", "Ableton Live"],    name: "my first group", configs: ['first', "second", "third"]}
    ];

    /* src\app\elements\app\panels\configuration\ConfigPicker.svelte generated by Svelte v3.35.0 */

    const { Object: Object_1, console: console_1$3 } = globals;

    const file$6 = "src\\app\\elements\\app\\panels\\configuration\\ConfigPicker.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	child_ctx[2] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[33] = list[i];
    	child_ctx[2] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	child_ctx[2] = i;
    	return child_ctx;
    }

    // (209:0) {:else}
    function create_else_block$1(ctx) {
    	let action_placeholder;
    	let div;
    	let t;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			action_placeholder = element("action-placeholder");
    			div = element("div");
    			t = text("Add action...");

    			attr_dev(div, "class", div_class_value = "" + (((/*visible*/ ctx[4] || /*actionSelection*/ ctx[3]) && !/*animation*/ ctx[0]
    			? "border-pick bg-select-saturate-10"
    			: "border-secondary") + " transition-colors duration-300 w-full border-l-4 text-white pl-4 p-2"));

    			add_location(div, file$6, 216, 4, 6405);
    			set_custom_element_data(action_placeholder, "class", "cursor-pointer flex items-center relative mb-3");
    			add_location(action_placeholder, file$6, 210, 2, 6167);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, action_placeholder, anchor);
    			append_dev(action_placeholder, div);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(action_placeholder, "click", /*click_handler_1*/ ctx[16], false, false, false),
    					listen_dev(action_placeholder, "mouseenter", /*mouseenter_handler_1*/ ctx[17], false, false, false),
    					listen_dev(action_placeholder, "mouseleave", /*mouseleave_handler_1*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*visible, actionSelection, animation*/ 25 && div_class_value !== (div_class_value = "" + (((/*visible*/ ctx[4] || /*actionSelection*/ ctx[3]) && !/*animation*/ ctx[0]
    			? "border-pick bg-select-saturate-10"
    			: "border-secondary") + " transition-colors duration-300 w-full border-l-4 text-white pl-4 p-2"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(action_placeholder);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(209:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (192:0) {#if !userHelper}
    function create_if_block_2$3(ctx) {
    	let action_placeholder;
    	let div0;
    	let svg;
    	let path;
    	let t;
    	let div1;
    	let action_placeholder_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			action_placeholder = element("action-placeholder");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = space$1();
    			div1 = element("div");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M3.5 0.5C3.77614 0.5 4 0.723858 4 1V3H6C6.27614 3 6.5 3.22386 6.5 3.5C6.5 3.77614 6.27614 4 6 4H4V6C4 6.27614 3.77614 6.5 3.5 6.5C3.22386 6.5 3 6.27614 3 6V4H1C0.723858 4 0.5 3.77614 0.5 3.5C0.5 3.22386 0.723858 3 1 3H3V1C3 0.723858 3.22386 0.5 3.5 0.5Z");
    			attr_dev(path, "fill", "white");
    			add_location(path, file$6, 201, 8, 5714);
    			attr_dev(svg, "class", "w-5 h-5 p-1");
    			attr_dev(svg, "viewBox", "0 0 7 7");
    			attr_dev(svg, "fill", "white");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$6, 200, 6, 5613);
    			attr_dev(div0, "class", "h-5 w-5 rounded-full text-center flex items-center justify-center bg-pick z-10");
    			add_location(div0, file$6, 199, 4, 5513);
    			attr_dev(div1, "class", "h-2 w-full rounded-full bg-pick -ml-1");
    			add_location(div1, file$6, 205, 4, 6066);

    			set_custom_element_data(action_placeholder, "class", action_placeholder_class_value = "" + (((/*visible*/ ctx[4] || /*actionSelection*/ ctx[3]) && !/*animation*/ ctx[0]
    			? "opacity-100"
    			: "opacity-0") + " transition-opacity delay-100 duration-300 cursor-pointer flex items-center relative -ml-8"));

    			add_location(action_placeholder, file$6, 193, 2, 5155);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, action_placeholder, anchor);
    			append_dev(action_placeholder, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(action_placeholder, t);
    			append_dev(action_placeholder, div1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(action_placeholder, "click", /*click_handler*/ ctx[13], false, false, false),
    					listen_dev(action_placeholder, "mouseenter", /*mouseenter_handler*/ ctx[14], false, false, false),
    					listen_dev(action_placeholder, "mouseleave", /*mouseleave_handler*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*visible, actionSelection, animation*/ 25 && action_placeholder_class_value !== (action_placeholder_class_value = "" + (((/*visible*/ ctx[4] || /*actionSelection*/ ctx[3]) && !/*animation*/ ctx[0]
    			? "opacity-100"
    			: "opacity-0") + " transition-opacity delay-100 duration-300 cursor-pointer flex items-center relative -ml-8"))) {
    				set_custom_element_data(action_placeholder, "class", action_placeholder_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(action_placeholder);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(192:0) {#if !userHelper}",
    		ctx
    	});

    	return block;
    }

    // (225:0) {#if actionSelection}
    function create_if_block$4(ctx) {
    	let pick_action;
    	let menu;
    	let wrapper;
    	let div0;
    	let t1;
    	let quick_access;
    	let div1;
    	let t2;
    	let div2;
    	let t3;
    	let action_menu;
    	let list_of_actions;
    	let div3;
    	let t5;
    	let ul0;
    	let t6;
    	let list_of_presets;
    	let div4;
    	let t8;
    	let ul1;
    	let t9;
    	let div5;
    	let button;
    	let t10;
    	let button_disabled_value;
    	let mounted;
    	let dispose;
    	let each_value_2 = ["MIDI", "Macro"];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < 2; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let if_block = /*$appActionClipboard*/ ctx[8] && create_if_block_1$3(ctx);
    	let each_value_1 = config_collection;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*selectedConfig*/ ctx[5].configs;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			pick_action = element("pick-action");
    			menu = element("menu");
    			wrapper = element("wrapper");
    			div0 = element("div");
    			div0.textContent = "Quick Access";
    			t1 = space$1();
    			quick_access = element("quick-access");
    			div1 = element("div");

    			for (let i = 0; i < 2; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t2 = space$1();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			t3 = space$1();
    			action_menu = element("action-menu");
    			list_of_actions = element("list-of-actions");
    			div3 = element("div");
    			div3.textContent = "Actions";
    			t5 = space$1();
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t6 = space$1();
    			list_of_presets = element("list-of-presets");
    			div4 = element("div");
    			div4.textContent = "Presets";
    			t8 = space$1();
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space$1();
    			div5 = element("div");
    			button = element("button");
    			t10 = text("Add Action");
    			attr_dev(div0, "class", "py-1 text-gray-700 text-sm mb-1");
    			add_location(div0, file$6, 239, 8, 7221);
    			attr_dev(div1, "class", "w-1/2 flex");
    			add_location(div1, file$6, 241, 10, 7354);
    			attr_dev(div2, "class", "w-1/2 flex");
    			add_location(div2, file$6, 246, 10, 7583);
    			set_custom_element_data(quick_access, "class", "flex flex-row items-start");
    			add_location(quick_access, file$6, 240, 8, 7294);
    			attr_dev(div3, "class", " py-1 text-gray-700 text-sm mb-1");
    			add_location(div3, file$6, 255, 12, 8024);
    			attr_dev(ul0, "class", "bg-secondary mr-1 p-1 text-white  h-full flex flex-col items-start");
    			add_location(ul0, file$6, 256, 12, 8097);
    			set_custom_element_data(list_of_actions, "class", "w-1/2 flex flex-col");
    			add_location(list_of_actions, file$6, 254, 10, 7965);
    			attr_dev(div4, "class", "py-1 text-gray-700 text-sm mb-1");
    			add_location(div4, file$6, 272, 12, 9152);
    			attr_dev(ul1, "class", " bg-secondary ml-1 p-1 text-white h-full flex flex-col");
    			add_location(ul1, file$6, 273, 12, 9224);
    			set_custom_element_data(list_of_presets, "class", "w-1/2 flex flex-col");
    			add_location(list_of_presets, file$6, 271, 10, 9093);
    			set_custom_element_data(action_menu, "class", "flex flex-row w-full mt-4 flex-grow");
    			add_location(action_menu, file$6, 253, 8, 7896);
    			button.disabled = button_disabled_value = /*selectedConfig*/ ctx[5] === undefined;
    			attr_dev(button, "class", "bg-commit hover:bg-commit-saturate-20 text-white py-1 px-2 mr-1 rounded border-commit-saturate-10 hover:border-commit-desaturate-10 focus:outline-none");
    			toggle_class(button, "disabled", /*selectedConfig*/ ctx[5] === undefined);
    			add_location(button, file$6, 296, 8, 11442);
    			attr_dev(div5, "class", "w-full mt-2 flex items-end");
    			add_location(div5, file$6, 295, 8, 11392);
    			attr_dev(wrapper, "class", "flex flex-col flex-grow h-full");
    			add_location(wrapper, file$6, 234, 6, 7040);
    			attr_dev(menu, "id", "action-menu");
    			set_style(menu, "right", "calc(100% + 2rem)");
    			set_style(menu, "top", -250 + /*topOffset*/ ctx[7] + "px");
    			set_style(menu, "width", "300px");
    			set_style(menu, "height", "500px");
    			attr_dev(menu, "class", "absolute shadow-md rounded-md bg-primary p-4  z-50");
    			add_location(menu, file$6, 227, 4, 6746);
    			set_custom_element_data(pick_action, "class", "relative w-full flex ");
    			add_location(pick_action, file$6, 225, 2, 6695);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, pick_action, anchor);
    			append_dev(pick_action, menu);
    			append_dev(menu, wrapper);
    			append_dev(wrapper, div0);
    			append_dev(wrapper, t1);
    			append_dev(wrapper, quick_access);
    			append_dev(quick_access, div1);

    			for (let i = 0; i < 2; i += 1) {
    				each_blocks_2[i].m(div1, null);
    			}

    			append_dev(quick_access, t2);
    			append_dev(quick_access, div2);
    			if (if_block) if_block.m(div2, null);
    			append_dev(wrapper, t3);
    			append_dev(wrapper, action_menu);
    			append_dev(action_menu, list_of_actions);
    			append_dev(list_of_actions, div3);
    			append_dev(list_of_actions, t5);
    			append_dev(list_of_actions, ul0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul0, null);
    			}

    			append_dev(action_menu, t6);
    			append_dev(action_menu, list_of_presets);
    			append_dev(list_of_presets, div4);
    			append_dev(list_of_presets, t8);
    			append_dev(list_of_presets, ul1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul1, null);
    			}

    			append_dev(wrapper, t9);
    			append_dev(wrapper, div5);
    			append_dev(div5, button);
    			append_dev(button, t10);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*click_handler_7*/ ctx[23], false, false, false),
    					action_destroyer(clickOutside.call(null, wrapper)),
    					listen_dev(wrapper, "click-outside", /*click_outside_handler*/ ctx[24], false, false, false),
    					action_destroyer(menuBoundaries.call(null, menu, "init")),
    					listen_dev(menu, "offset-top", /*offset_top_handler*/ ctx[25], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*$appActionClipboard*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*selectedConfig*/ 32) {
    				each_value_1 = config_collection;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(ul0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*selectedActionPreset, selectedConfig, changeFavourite, checkIfPlacementPossible*/ 2656) {
    				each_value = /*selectedConfig*/ ctx[5].configs;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*selectedConfig*/ 32 && button_disabled_value !== (button_disabled_value = /*selectedConfig*/ ctx[5] === undefined)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty[0] & /*selectedConfig*/ 32) {
    				toggle_class(button, "disabled", /*selectedConfig*/ ctx[5] === undefined);
    			}

    			if (dirty[0] & /*topOffset*/ 128) {
    				set_style(menu, "top", -250 + /*topOffset*/ ctx[7] + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(pick_action);
    			destroy_each(each_blocks_2, detaching);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(225:0) {#if actionSelection}",
    		ctx
    	});

    	return block;
    }

    // (243:12) {#each ['MIDI', 'Macro'] as qu,index}
    function create_each_block_2(ctx) {
    	let div;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*qu*/ ctx[35]);
    			attr_dev(div, "class", "rounded-full p-2 mr-2 bg-secondary text-white");
    			add_location(div, file$6, 243, 14, 7445);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(243:12) {#each ['MIDI', 'Macro'] as qu,index}",
    		ctx
    	});

    	return block;
    }

    // (248:12) {#if $appActionClipboard}
    function create_if_block_1$3(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Paste";
    			attr_dev(div, "class", "rounded-full p-2 mr-2 cursor-pointer hover:bg-commit-saturate-20 bg-commit text-white");
    			add_location(div, file$6, 248, 14, 7662);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler_3*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(248:12) {#if $appActionClipboard}",
    		ctx
    	});

    	return block;
    }

    // (258:14) {#each config_collection as config, index}
    function create_each_block_1(ctx) {
    	let li;
    	let svg;
    	let path;
    	let svg_class_value;
    	let t0;
    	let div;
    	let t1_value = /*config*/ ctx[33].category[0] + "";
    	let t1;
    	let t2;
    	let li_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[20](/*config*/ ctx[33]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space$1();
    			div = element("div");
    			t1 = text(t1_value);
    			t2 = space$1();
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M4.30351 6L1.03864e-07 1.80265L1.84825 0L8 6L1.84825 12L0 10.1973L4.30351 6Z");
    			attr_dev(path, "fill", "#C9C8C8");
    			add_location(path, file$6, 262, 22, 8703);

    			attr_dev(svg, "class", svg_class_value = /*selectedConfig*/ ctx[5] == /*config*/ ctx[33]
    			? null
    			: "invisible");

    			attr_dev(svg, "width", "8");
    			attr_dev(svg, "height", "12");
    			attr_dev(svg, "viewBox", "0 0 8 12");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$6, 261, 20, 8530);
    			attr_dev(div, "class", "pl-2");
    			add_location(div, file$6, 264, 20, 8896);

    			attr_dev(li, "class", li_class_value = "" + ((/*selectedConfig*/ ctx[5] == /*config*/ ctx[33]
    			? "bg-select text-white"
    			: "hover:bg-select-saturate-10 text-gray-50") + " py-1 px-2 my-1 flex items-center rounded-lg cursor-pointer w-full"));

    			add_location(li, file$6, 258, 16, 8252);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, svg);
    			append_dev(svg, path);
    			append_dev(li, t0);
    			append_dev(li, div);
    			append_dev(div, t1);
    			append_dev(li, t2);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*selectedConfig*/ 32 && svg_class_value !== (svg_class_value = /*selectedConfig*/ ctx[5] == /*config*/ ctx[33]
    			? null
    			: "invisible")) {
    				attr_dev(svg, "class", svg_class_value);
    			}

    			if (dirty[0] & /*selectedConfig*/ 32 && li_class_value !== (li_class_value = "" + ((/*selectedConfig*/ ctx[5] == /*config*/ ctx[33]
    			? "bg-select text-white"
    			: "hover:bg-select-saturate-10 text-gray-50") + " py-1 px-2 my-1 flex items-center rounded-lg cursor-pointer w-full"))) {
    				attr_dev(li, "class", li_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(258:14) {#each config_collection as config, index}",
    		ctx
    	});

    	return block;
    }

    // (275:14) {#each selectedConfig.configs as preset,index}
    function create_each_block$3(ctx) {
    	let li;
    	let div1;
    	let svg0;
    	let path0;
    	let svg0_class_value;
    	let t0;
    	let div0;
    	let raw_value = /*checkIfPlacementPossible*/ ctx[11](/*preset*/ ctx[31].desc, /*preset*/ ctx[31].type) + "";
    	let t1;
    	let div2;
    	let svg1;
    	let path1;
    	let svg1_class_value;
    	let t2;
    	let li_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[21](/*preset*/ ctx[31]);
    	}

    	function click_handler_6() {
    		return /*click_handler_6*/ ctx[22](/*preset*/ ctx[31]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space$1();
    			div0 = element("div");
    			t1 = space$1();
    			div2 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t2 = space$1();
    			attr_dev(path0, "d", "M8 4C8 6.20914 6.20914 8 4 8C1.79086 8 0 6.20914 0 4C0 1.79086 1.79086 0 4 0C6.20914 0 8 1.79086 8 4Z");
    			attr_dev(path0, "fill", "#C9C8C8");
    			add_location(path0, file$6, 278, 24, 9874);

    			attr_dev(svg0, "class", svg0_class_value = /*selectedActionPreset*/ ctx[6] == /*preset*/ ctx[31]
    			? null
    			: "invisible");

    			attr_dev(svg0, "width", "8");
    			attr_dev(svg0, "height", "8");
    			attr_dev(svg0, "viewBox", "0 0 8 8");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$6, 277, 22, 9695);
    			attr_dev(div0, "class", "pl-2");
    			add_location(div0, file$6, 280, 22, 10056);
    			attr_dev(div1, "class", "flex items-center  py-1 px-2 ");
    			add_location(div1, file$6, 276, 20, 9627);
    			attr_dev(path1, "d", "M8.892 0.25813C8.82614 0.101837 8.67149 0 8.5 0C8.32851 0 8.17386 0.101837 8.108 0.25813L5.96169 5.3518L0.390642 5.79266C0.219701 5.80619 0.0737906 5.9199 0.0207975 6.08089C-0.0321956 6.24187 0.0181361 6.41852 0.148375 6.52864L4.39292 10.1176L3.09615 15.4837C3.05635 15.6484 3.12083 15.8205 3.25956 15.92C3.3983 16.0195 3.58406 16.0268 3.73041 15.9386L8.5 13.063L13.2696 15.9386C13.4159 16.0268 13.6017 16.0195 13.7404 15.92C13.8792 15.8205 13.9436 15.6484 13.9039 15.4837L12.6071 10.1176L16.8516 6.52864C16.9819 6.41852 17.0322 6.24187 16.9792 6.08089C16.9262 5.9199 16.7803 5.80619 16.6094 5.79266L11.0383 5.3518L8.892 0.25813Z");
    			add_location(path1, file$6, 286, 24, 10562);

    			attr_dev(svg1, "class", svg1_class_value = "fill-current " + (/*preset*/ ctx[31].isFav
    			? "text-yellow-300"
    			: "text-black") + " w-6 h-6 p-1 ");

    			attr_dev(svg1, "viewBox", "0 0 17 16");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg1, file$6, 285, 22, 10380);
    			attr_dev(div2, "class", "rounded-full hover:bg-select-desaturate-20 mx-1");
    			add_location(div2, file$6, 284, 20, 10238);

    			attr_dev(li, "class", li_class_value = "flex items-center my-1 cursor-pointer justify-between rounded-lg w-full " + (/*selectedActionPreset*/ ctx[6] == /*preset*/ ctx[31]
    			? "bg-select text-white"
    			: "hover:bg-select-saturate-10 text-gray-50"));

    			add_location(li, file$6, 275, 16, 9371);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(li, t1);
    			append_dev(li, div2);
    			append_dev(div2, svg1);
    			append_dev(svg1, path1);
    			append_dev(li, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "click", stop_propagation(click_handler_5), false, false, true),
    					listen_dev(li, "click", click_handler_6, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*selectedActionPreset, selectedConfig*/ 96 && svg0_class_value !== (svg0_class_value = /*selectedActionPreset*/ ctx[6] == /*preset*/ ctx[31]
    			? null
    			: "invisible")) {
    				attr_dev(svg0, "class", svg0_class_value);
    			}

    			if (dirty[0] & /*selectedConfig*/ 32 && raw_value !== (raw_value = /*checkIfPlacementPossible*/ ctx[11](/*preset*/ ctx[31].desc, /*preset*/ ctx[31].type) + "")) div0.innerHTML = raw_value;
    			if (dirty[0] & /*selectedConfig*/ 32 && svg1_class_value !== (svg1_class_value = "fill-current " + (/*preset*/ ctx[31].isFav
    			? "text-yellow-300"
    			: "text-black") + " w-6 h-6 p-1 ")) {
    				attr_dev(svg1, "class", svg1_class_value);
    			}

    			if (dirty[0] & /*selectedActionPreset, selectedConfig*/ 96 && li_class_value !== (li_class_value = "flex items-center my-1 cursor-pointer justify-between rounded-lg w-full " + (/*selectedActionPreset*/ ctx[6] == /*preset*/ ctx[31]
    			? "bg-select text-white"
    			: "hover:bg-select-saturate-10 text-gray-50"))) {
    				attr_dev(li, "class", li_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(275:14) {#each selectedConfig.configs as preset,index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let t;
    	let if_block1_anchor;

    	function select_block_type(ctx, dirty) {
    		if (!/*userHelper*/ ctx[1]) return create_if_block_2$3;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*actionSelection*/ ctx[3] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if_block0.c();
    			t = space$1();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			}

    			if (/*actionSelection*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$4(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const click_handler_2 = () => {
    	
    };

    function instance$6($$self, $$props, $$invalidate) {
    	let $appActionClipboard;
    	validate_store(appActionClipboard, "appActionClipboard");
    	component_subscribe($$self, appActionClipboard, $$value => $$invalidate(8, $appActionClipboard = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ConfigPicker", slots, []);
    	let { animation = false } = $$props;
    	let { actions } = $$props;
    	let { index } = $$props;
    	let { userHelper = false } = $$props;
    	const dispatch = createEventDispatcher();
    	let favourites = [];
    	let actionSelection;
    	let visible;
    	let configs = [];
    	let selectedConfig = config_collection[0];
    	let presetsOfSelectedAction = config_collection[0].configs;
    	let selectedActionPreset = presetsOfSelectedAction[0];

    	function parseConfigCollection() {
    		function parseConfigList(arr) {
    			arr = arr.join();
    			arr = _utils.rawLuaToConfigList(arr);
    			arr = _utils.configBreakDown(arr);
    			arr = _utils.extendProperties(arr);
    			return arr;
    		}
    		let tree = {};
    		let leafs = [];

    		config_collection.forEach(elem => {
    			const a = JSON.stringify(leafs);
    			const b = JSON.stringify(elem.category);
    			const c = a.indexOf(b);

    			if (c == -1) {
    				console.log("element not found!");
    				leafs.push(elem.category);

    				createNestedObject(tree, JSON.parse(JSON.stringify(elem.category)), [
    					{
    						name: elem.name,
    						configs: parseConfigList(elem.configs)
    					}
    				]);
    			} else {
    				console.log("element found!", elem.category);
    				let propName = elem.category.join(".");

    				function assign(obj, prop, value) {
    					if (typeof prop === "string") prop = prop.split(".");

    					if (prop.length > 1) {
    						var e = prop.shift();

    						assign(
    							obj[e] = Object.prototype.toString.call(obj[e]) === "[object Object]"
    							? obj[e]
    							: {},
    							prop,
    							value
    						);
    					} else obj[prop[0]] = value;
    				}

    				Object.byString = function (o, s) {
    					s = s.replace(/\[(\w+)\]/g, ".$1"); // convert indexes to properties
    					s = s.replace(/^\./, ""); // strip a leading dot
    					var a = s.split(".");
    					console.log(a, s);

    					for (var i = 0, n = a.length; i < n; ++i) {
    						var k = a[i];

    						if (k in o) {
    							o = o[k];
    							console.log(k, o);
    						} else {
    							return;
    						}
    					}

    					return o;
    				};

    				let x = Object.byString(tree, `${propName}`);

    				assign(tree, propName, [
    					...x,
    					{
    						name: elem.name,
    						configs: parseConfigList(elem.configs)
    					}
    				]);
    			}
    		});

    		console.log(tree);
    	} //console.log(configs);

    	console.log(parseConfigCollection());

    	function changeFavourite(preset) {
    		preset.isFav = !preset.isFav;
    		$$invalidate(5, selectedConfig);
    	}

    	function initAction() {
    		dispatch("new-action", { action: selectedActionPreset });
    		$$invalidate(3, actionSelection = false);
    		$$invalidate(4, visible = false);
    	}

    	let topOffset = 0;

    	function checkIfPlacementPossible(desc, type) {
    		// lookbefore
    		const lookbefore = actions.slice(0, index).reverse();

    		// lookafter
    		const lookafter = actions.slice(index);

    		let validPlacement = true;

    		if (type == "modifier") {
    			const fmlb = lookbefore.find(a => a.type == "modifier"); //firstModifierLookBefore
    			const fmla = lookafter.find(a => a.type == "modifier"); //firstModifierLookAfter

    			if (desc == "Else") {
    				try {
    					if ((fmlb.component == "THEN" || fmlb.component == "ELSEIF") && fmla.component == "END") {
    						validPlacement = true;
    					} else {
    						validPlacement = false;
    					}
    				} catch(error) {
    					validPlacement = false;
    				}
    			} else if (desc == "Else If") {
    				try {
    					if (fmlb.component == "IF" || fmlb.component == "ELSEIF") {
    						validPlacement = true;
    					} else {
    						validPlacement = false;
    					}
    				} catch(error) {
    					validPlacement = false;
    				}
    			} else if (desc == "If Block") {
    				try {
    					if (fmlb.component == "END" || fmla.component == "IF") {
    						validPlacement = true;
    					} else {
    						validPlacement = false;
    					}
    				} catch(error) {
    					validPlacement = true; // no match found (no if block), then it's a valid placement
    				}
    			}
    		}

    		const returnHtml = `<span class="${validPlacement ? "" : "text-red-500"}">${desc}</span>`;
    		return returnHtml;
    	}

    	const writable_props = ["animation", "actions", "index", "userHelper"];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<ConfigPicker> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		$$invalidate(3, actionSelection = !actionSelection);
    	};

    	const mouseenter_handler = () => {
    		$$invalidate(4, visible = true);
    	};

    	const mouseleave_handler = () => {
    		$$invalidate(4, visible = false);
    	};

    	const click_handler_1 = () => {
    		$$invalidate(3, actionSelection = !actionSelection);
    	};

    	const mouseenter_handler_1 = () => {
    		$$invalidate(4, visible = true);
    	};

    	const mouseleave_handler_1 = () => {
    		$$invalidate(4, visible = false);
    	};

    	const click_handler_3 = () => {
    		appActionManagement$1.paste(index);
    	};

    	const click_handler_4 = config => {
    		$$invalidate(5, selectedConfig = config);
    	};

    	const click_handler_5 = preset => {
    		changeFavourite(preset);
    	};

    	const click_handler_6 = preset => {
    		$$invalidate(6, selectedActionPreset = preset);
    	};

    	const click_handler_7 = () => {
    		initAction();
    	};

    	const click_outside_handler = () => {
    		$$invalidate(3, actionSelection = false);
    		$$invalidate(4, visible = false);
    	};

    	const offset_top_handler = e => {
    		$$invalidate(7, topOffset = e.detail);
    	};

    	$$self.$$set = $$props => {
    		if ("animation" in $$props) $$invalidate(0, animation = $$props.animation);
    		if ("actions" in $$props) $$invalidate(12, actions = $$props.actions);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("userHelper" in $$props) $$invalidate(1, userHelper = $$props.userHelper);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		clickOutside,
    		menuBoundaries,
    		appActionClipboard,
    		appActionManagement: appActionManagement$1,
    		config_collection,
    		_utils,
    		createNestedObject,
    		returnDeepestObjects,
    		animation,
    		actions,
    		index,
    		userHelper,
    		dispatch,
    		favourites,
    		actionSelection,
    		visible,
    		configs,
    		selectedConfig,
    		presetsOfSelectedAction,
    		selectedActionPreset,
    		parseConfigCollection,
    		changeFavourite,
    		initAction,
    		topOffset,
    		checkIfPlacementPossible,
    		$appActionClipboard
    	});

    	$$self.$inject_state = $$props => {
    		if ("animation" in $$props) $$invalidate(0, animation = $$props.animation);
    		if ("actions" in $$props) $$invalidate(12, actions = $$props.actions);
    		if ("index" in $$props) $$invalidate(2, index = $$props.index);
    		if ("userHelper" in $$props) $$invalidate(1, userHelper = $$props.userHelper);
    		if ("favourites" in $$props) favourites = $$props.favourites;
    		if ("actionSelection" in $$props) $$invalidate(3, actionSelection = $$props.actionSelection);
    		if ("visible" in $$props) $$invalidate(4, visible = $$props.visible);
    		if ("configs" in $$props) configs = $$props.configs;
    		if ("selectedConfig" in $$props) $$invalidate(5, selectedConfig = $$props.selectedConfig);
    		if ("presetsOfSelectedAction" in $$props) presetsOfSelectedAction = $$props.presetsOfSelectedAction;
    		if ("selectedActionPreset" in $$props) $$invalidate(6, selectedActionPreset = $$props.selectedActionPreset);
    		if ("topOffset" in $$props) $$invalidate(7, topOffset = $$props.topOffset);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		animation,
    		userHelper,
    		index,
    		actionSelection,
    		visible,
    		selectedConfig,
    		selectedActionPreset,
    		topOffset,
    		$appActionClipboard,
    		changeFavourite,
    		initAction,
    		checkIfPlacementPossible,
    		actions,
    		click_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		click_handler_1,
    		mouseenter_handler_1,
    		mouseleave_handler_1,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_outside_handler,
    		offset_top_handler
    	];
    }

    class ConfigPicker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$6,
    			create_fragment$6,
    			safe_not_equal,
    			{
    				animation: 0,
    				actions: 12,
    				index: 2,
    				userHelper: 1
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConfigPicker",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*actions*/ ctx[12] === undefined && !("actions" in props)) {
    			console_1$3.warn("<ConfigPicker> was created without expected prop 'actions'");
    		}

    		if (/*index*/ ctx[2] === undefined && !("index" in props)) {
    			console_1$3.warn("<ConfigPicker> was created without expected prop 'index'");
    		}
    	}

    	get animation() {
    		throw new Error("<ConfigPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animation(value) {
    		throw new Error("<ConfigPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get actions() {
    		throw new Error("<ConfigPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set actions(value) {
    		throw new Error("<ConfigPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ConfigPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ConfigPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userHelper() {
    		throw new Error("<ConfigPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userHelper(value) {
    		throw new Error("<ConfigPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function changeOrder(node, {configs}) {
      
      let drag = 0;
      let pos = {x:0, y: 0};
      const threshold = 4;

      let shiftX;
      let shiftY;

      let cursor = undefined;
      let dragged = undefined;

      let multiDragFlag = undefined;

      let moveDisabled = false;

      let drag_block = [];

      let _configs  = configs;

      let selectionLength = false;

      function createMultiDragCursor(targets, width){
        cursor = document.createElement('div');
        let copyGroup = document.createElement('div');

        cursor.id = 'drag-n-drop-cursor';
        
        for (const item of targets) {
          const copy = item.cloneNode(true);
          copyGroup.appendChild(copy);
        }

        cursor.appendChild(copyGroup);

        cursor.style.opacity = '0.75';
        cursor.style.position = "absolute";
        cursor.style.userSelect = "none";
        cursor.style.display = "none";
        cursor.style.pointerEvents = "none";
        cursor.style.width = width +'px';

        // put in app, so it wont overflow!
        document.getElementById('app').append(cursor);
      }

      function createCursor(target, width){
        cursor = target.cloneNode(true);
        cursor.id = 'drag-n-drop-cursor';
        cursor.style.opacity = '0.75';
        cursor.style.position = "absolute";
        cursor.style.userSelect = "none";
        cursor.style.display = "none";
        cursor.style.pointerEvents = "none";
        cursor.style.width =  width + 'px';

        // put in app, so it wont overflow!
        document.getElementById('app').append(cursor);
      }

      function handleMouseDown(e){
        pos.x = e.clientX;
        pos.y = e.clientY;
        
        shiftX = e.clientX - e.target.getBoundingClientRect().left;
        shiftY = e.clientY - e.target.getBoundingClientRect().top;
       
        node.addEventListener('mousemove', handleMouseMove);
      }

      function handleSelectionChange(e){
        selectionLength = document.getSelection().toString().length;
      }

      function handleMouseMove(e){

        // variables
        const { id, clientHeight }  = e.target;

        // smooth out drag start with threshold, track only up-down movement
        if(Math.abs(e.clientY - pos.y) > threshold && selectionLength < 1){
          drag += 1;
        }

        // emit dragstart only once, used to disabled pointer events
        if(drag == 1){
          console.log(e.target);

          node.dispatchEvent(new CustomEvent('drag-start'));      
        }

        // see if the target has movable attribute, so it can be moved...
        if(drag == 2){
          if(e.target.getAttribute('movable') == 'false' || e.target.getAttribute('movable') == undefined){
            moveDisabled = true;
            node.dispatchEvent(new CustomEvent('drag-end'));
            return;
          } 
        }

        // emit dragtarget once pointer events are disabled in drag mode
        if(drag == 2 && !moveDisabled){

          dragged = e.target;
          let _configIds = [];
          // multidrag, added component type on dynamic wrapper
          // if component is enabled for multidrag, create multidragcursor and set multiDragFlag to true
          const component = dragged.getAttribute('config-component');

          if(component == 'If'){
            let _id = id.substr(4,);
            const nodes = _configs.slice(_id);
            const end_of_if = nodes.findIndex(n => n.component.name === 'End');
            const drag_configs = nodes.slice(0,end_of_if + 1);
            multiDragFlag = true;
            for (const item of drag_configs) {
              // using configs array, so dom elements need to be discovered by custom id
              const drag_item = document.querySelectorAll(`[config-id="${item.id}"]`)[0];       
              // before starting cursor, set the "left behind" configs to half opacity
              drag_item.style.opacity = '0.2';
              // drag_block is a collection of config-ids, original gen unique key ids.
              drag_block.push(drag_item);
              // attribute "config-id" refers to initial keyed id of config
              _configIds.push(item.id);
            }
            createMultiDragCursor(drag_block, dragged.clientWidth);
          } else {
            // the id "cfg" refers to dynamic index position and attribute "config-id" refers to initial keyed id of config
            _configIds = [dragged.getAttribute('config-id')]; // this is used as an array, as multidrag is supported
            multiDragFlag = false;
            dragged.style.opacity = '0.2';
            createCursor(dragged);
          }

          node.dispatchEvent(new CustomEvent('drag-target', {
            detail: {id: _configIds}
          }));

        }

        // drag over section
        if(drag >= 2 && !moveDisabled){
          cursor.style.display = "block";
          cursor.style.left = shiftX + e.pageX - shiftX + 'px';
          cursor.style.top = shiftY + e.pageY - shiftY + 'px';

          if(id){
            let drop_target = '';
            // if its a modifier, the below helper shouldn't be used!
            if(id.startsWith('cfg-') && e.target.getAttribute('config-component') !== 'If' && e.target.getAttribute('config-component') !== 'Then'){
              if((clientHeight / 2) < e.offsetY){
                drop_target = Number(id.substr(4,));
              } else {
                drop_target = Number(id.substr(4,)) - 1;
              }
            } else if(id.substr(0,3) == 'dz-'){  
              drop_target = Number(id.substr(3,));
            } else if(id == 'config-bin'){
              drop_target = 'bin';
            }

            if(e.target.getAttribute('config-component') == 'If'){
              drop_target = Number(id.substr(4,)) - 1;
            }        
            if(drop_target !== ''){
              node.dispatchEvent(new CustomEvent('drop-target', {
                detail: {drop_target}
              }));
            }
          }
        }
      }

      function handleMouseUp(e){
        if(!moveDisabled){
          if(drag){
            node.dispatchEvent(new CustomEvent('drop', {detail: {multi: multiDragFlag}}));
            node.dispatchEvent(new CustomEvent('anim-start'));
          }

          if(document.getElementById("drag-n-drop-cursor")) document.getElementById("drag-n-drop-cursor").remove();

          node.dispatchEvent(new CustomEvent('drag-end', {}));

          // for fade in animation end sequencing
          setTimeout(()=>{
            if(dragged) dragged.style.opacity = '1.0';
            if(drag_block) {
              for (const item of drag_block) {
                item.style.opacity = '1.0';
              }
            }
            drag_block = [];
            node.dispatchEvent(new CustomEvent('anim-end'));
          },300);
        }

        node.removeEventListener('mousemove', handleMouseMove);
        moveDisabled = false;
        drag = 0;
        pos = {x: 0, y: 0};
        selectionLength = 0;
      }

      node.addEventListener('mousedown', handleMouseDown);
      document.addEventListener('mouseup', handleMouseUp);
      document.addEventListener('selectionchange', handleSelectionChange);

      return {

        update({configs}) {
          _configs = configs;
        },

        destroy() {
          document.removeEventListener('selectionchange',handleSelectionChange);
          document.removeEventListener('mouseup', handleMouseUp);
        }
      }
    }

    /* src\app\elements\app\panels\configuration\ConfigList.svelte generated by Svelte v3.35.0 */
    const file$5 = "src\\app\\elements\\app\\panels\\configuration\\ConfigList.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[24] = list;
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (127:6) {:else}
    function create_else_block_2(ctx) {
    	let dropzone;
    	let current;

    	dropzone = new DropZone({
    			props: {
    				index: -1,
    				drop_target: /*drop_target*/ ctx[4],
    				drag_target: /*drag_target*/ ctx[3],
    				animation: /*animation*/ ctx[1],
    				drag_start: /*drag_start*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(dropzone.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dropzone, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dropzone_changes = {};
    			if (dirty & /*drop_target*/ 16) dropzone_changes.drop_target = /*drop_target*/ ctx[4];
    			if (dirty & /*drag_target*/ 8) dropzone_changes.drag_target = /*drag_target*/ ctx[3];
    			if (dirty & /*animation*/ 2) dropzone_changes.animation = /*animation*/ ctx[1];
    			if (dirty & /*drag_start*/ 4) dropzone_changes.drag_start = /*drag_start*/ ctx[2];
    			dropzone.$set(dropzone_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropzone.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropzone.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dropzone, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(127:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (125:6) {#if !drag_start}
    function create_if_block_2$2(ctx) {
    	let configpicker;
    	let current;

    	configpicker = new ConfigPicker({
    			props: {
    				index: 0,
    				configs: /*configs*/ ctx[0],
    				animation: /*animation*/ ctx[1]
    			},
    			$$inline: true
    		});

    	configpicker.$on("new-config", /*new_config_handler*/ ctx[7]);

    	const block = {
    		c: function create() {
    			create_component(configpicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(configpicker, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const configpicker_changes = {};
    			if (dirty & /*configs*/ 1) configpicker_changes.configs = /*configs*/ ctx[0];
    			if (dirty & /*animation*/ 2) configpicker_changes.animation = /*animation*/ ctx[1];
    			configpicker.$set(configpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(configpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(configpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(configpicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(125:6) {#if !drag_start}",
    		ctx
    	});

    	return block;
    }

    // (134:14) 
    function create_config_slot(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	function output_handler(...args) {
    		return /*output_handler*/ ctx[8](/*config*/ ctx[23], /*each_value*/ ctx[24], /*index*/ ctx[25], ...args);
    	}

    	var switch_value = /*config*/ ctx[23].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				slot: "config",
    				config: /*config*/ ctx[23],
    				index: /*index*/ ctx[25]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    		switch_instance.$on("output", output_handler);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const switch_instance_changes = {};
    			if (dirty & /*configs*/ 1) switch_instance_changes.config = /*config*/ ctx[23];
    			if (dirty & /*configs*/ 1) switch_instance_changes.index = /*index*/ ctx[25];

    			if (switch_value !== (switch_value = /*config*/ ctx[23].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					switch_instance.$on("output", output_handler);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_config_slot.name,
    		type: "slot",
    		source: "(134:14) ",
    		ctx
    	});

    	return block;
    }

    // (135:14) 
    function create_options_slot(ctx) {
    	let options;
    	let current;

    	options = new Options({
    			props: {
    				slot: "options",
    				toggle: /*toggle*/ ctx[26],
    				index: /*index*/ ctx[25],
    				groupType: /*config*/ ctx[23].groupType,
    				componentName: /*config*/ ctx[23].component.name
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(options.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(options, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const options_changes = {};
    			if (dirty & /*toggle*/ 67108864) options_changes.toggle = /*toggle*/ ctx[26];
    			if (dirty & /*configs*/ 1) options_changes.index = /*index*/ ctx[25];
    			if (dirty & /*configs*/ 1) options_changes.groupType = /*config*/ ctx[23].groupType;
    			if (dirty & /*configs*/ 1) options_changes.componentName = /*config*/ ctx[23].component.name;
    			options.$set(options_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(options.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(options.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(options, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_options_slot.name,
    		type: "slot",
    		source: "(135:14) ",
    		ctx
    	});

    	return block;
    }

    // (142:10) {:else}
    function create_else_block_1(ctx) {
    	let dropzone;
    	let current;

    	dropzone = new DropZone({
    			props: {
    				index: /*index*/ ctx[25],
    				drag_target: /*drag_target*/ ctx[3],
    				drop_target: /*drop_target*/ ctx[4],
    				animation: /*animation*/ ctx[1],
    				drag_start: /*drag_start*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(dropzone.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dropzone, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dropzone_changes = {};
    			if (dirty & /*configs*/ 1) dropzone_changes.index = /*index*/ ctx[25];
    			if (dirty & /*drag_target*/ 8) dropzone_changes.drag_target = /*drag_target*/ ctx[3];
    			if (dirty & /*drop_target*/ 16) dropzone_changes.drop_target = /*drop_target*/ ctx[4];
    			if (dirty & /*animation*/ 2) dropzone_changes.animation = /*animation*/ ctx[1];
    			if (dirty & /*drag_start*/ 4) dropzone_changes.drag_start = /*drag_start*/ ctx[2];
    			dropzone.$set(dropzone_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dropzone.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dropzone.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dropzone, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(142:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (140:10) {#if !drag_start}
    function create_if_block_1$2(ctx) {
    	let configpicker;
    	let current;

    	function new_config_handler_1(...args) {
    		return /*new_config_handler_1*/ ctx[10](/*index*/ ctx[25], ...args);
    	}

    	configpicker = new ConfigPicker({
    			props: {
    				index: /*index*/ ctx[25] + 1,
    				animation: /*animation*/ ctx[1],
    				configs: /*configs*/ ctx[0]
    			},
    			$$inline: true
    		});

    	configpicker.$on("new-config", new_config_handler_1);

    	const block = {
    		c: function create() {
    			create_component(configpicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(configpicker, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const configpicker_changes = {};
    			if (dirty & /*configs*/ 1) configpicker_changes.index = /*index*/ ctx[25] + 1;
    			if (dirty & /*animation*/ 2) configpicker_changes.animation = /*animation*/ ctx[1];
    			if (dirty & /*configs*/ 1) configpicker_changes.configs = /*configs*/ ctx[0];
    			configpicker.$set(configpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(configpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(configpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(configpicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(140:10) {#if !drag_start}",
    		ctx
    	});

    	return block;
    }

    // (131:6) {#each configs as config, index (config.id)}
    function create_each_block$2(key_1, ctx) {
    	let anim_block;
    	let dynamicwrapper;
    	let t0;
    	let configextension;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let anim_block_intro;
    	let rect;
    	let stop_animation = noop$3;
    	let current;

    	dynamicwrapper = new DynamicWrapper({
    			props: {
    				drag_start: /*drag_start*/ ctx[2],
    				index: /*index*/ ctx[25],
    				config: /*config*/ ctx[23],
    				$$slots: {
    					options: [
    						create_options_slot,
    						({ toggle }) => ({ 26: toggle }),
    						({ toggle }) => toggle ? 67108864 : 0
    					],
    					config: [
    						create_config_slot,
    						({ toggle }) => ({ 26: toggle }),
    						({ toggle }) => toggle ? 67108864 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function output_handler_1(...args) {
    		return /*output_handler_1*/ ctx[9](/*config*/ ctx[23], /*each_value*/ ctx[24], /*index*/ ctx[25], ...args);
    	}

    	configextension = new ConfigExtension({
    			props: {
    				index: /*index*/ ctx[25],
    				config: /*config*/ ctx[23]
    			},
    			$$inline: true
    		});

    	configextension.$on("output", output_handler_1);
    	const if_block_creators = [create_if_block_1$2, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*drag_start*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			anim_block = element("anim-block");
    			create_component(dynamicwrapper.$$.fragment);
    			t0 = space$1();
    			create_component(configextension.$$.fragment);
    			t1 = space$1();
    			if_block.c();
    			set_custom_element_data(anim_block, "class", "block select-none");
    			add_location(anim_block, file$5, 131, 8, 4289);
    			this.first = anim_block;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, anim_block, anchor);
    			mount_component(dynamicwrapper, anim_block, null);
    			append_dev(anim_block, t0);
    			mount_component(configextension, anim_block, null);
    			append_dev(anim_block, t1);
    			if_blocks[current_block_type_index].m(anim_block, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dynamicwrapper_changes = {};
    			if (dirty & /*drag_start*/ 4) dynamicwrapper_changes.drag_start = /*drag_start*/ ctx[2];
    			if (dirty & /*configs*/ 1) dynamicwrapper_changes.index = /*index*/ ctx[25];
    			if (dirty & /*configs*/ 1) dynamicwrapper_changes.config = /*config*/ ctx[23];

    			if (dirty & /*$$scope, toggle, configs*/ 201326593) {
    				dynamicwrapper_changes.$$scope = { dirty, ctx };
    			}

    			dynamicwrapper.$set(dynamicwrapper_changes);
    			const configextension_changes = {};
    			if (dirty & /*configs*/ 1) configextension_changes.index = /*index*/ ctx[25];
    			if (dirty & /*configs*/ 1) configextension_changes.config = /*config*/ ctx[23];
    			configextension.$set(configextension_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(anim_block, null);
    			}
    		},
    		r: function measure() {
    			rect = anim_block.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(anim_block);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(anim_block, rect, flip, { duration: 300 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dynamicwrapper.$$.fragment, local);
    			transition_in(configextension.$$.fragment, local);
    			transition_in(if_block);

    			if (!anim_block_intro) {
    				add_render_callback(() => {
    					anim_block_intro = create_in_transition(anim_block, fade, { delay: 300 });
    					anim_block_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dynamicwrapper.$$.fragment, local);
    			transition_out(configextension.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(anim_block);
    			destroy_component(dynamicwrapper);
    			destroy_component(configextension);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(131:6) {#each configs as config, index (config.id)}",
    		ctx
    	});

    	return block;
    }

    // (151:6) {:else}
    function create_else_block(ctx) {
    	let bin;
    	let current;
    	bin = new Bin({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(bin.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bin, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bin.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bin.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bin, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(151:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (149:6) {#if !drag_start}
    function create_if_block$3(ctx) {
    	let configpicker;
    	let current;

    	configpicker = new ConfigPicker({
    			props: {
    				userHelper: true,
    				index: /*configs*/ ctx[0].length + 1,
    				animation: /*animation*/ ctx[1],
    				configs: /*configs*/ ctx[0]
    			},
    			$$inline: true
    		});

    	configpicker.$on("new-config", /*new_config_handler_2*/ ctx[11]);

    	const block = {
    		c: function create() {
    			create_component(configpicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(configpicker, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const configpicker_changes = {};
    			if (dirty & /*configs*/ 1) configpicker_changes.index = /*configs*/ ctx[0].length + 1;
    			if (dirty & /*animation*/ 2) configpicker_changes.animation = /*animation*/ ctx[1];
    			if (dirty & /*configs*/ 1) configpicker_changes.configs = /*configs*/ ctx[0];
    			configpicker.$set(configpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(configpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(configpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(configpicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(149:6) {#if !drag_start}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let actions;
    	let div1;
    	let div0;
    	let t1;
    	let multiselect;
    	let t2;
    	let div2;
    	let current_block_type_index;
    	let if_block0;
    	let t3;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t4;
    	let current_block_type_index_1;
    	let if_block1;
    	let changeOrder_action;
    	let current;
    	let mounted;
    	let dispose;
    	multiselect = new MultiSelect({ $$inline: true });
    	const if_block_creators = [create_if_block_2$2, create_else_block_2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*drag_start*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*configs*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*config*/ ctx[23].id;
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const if_block_creators_1 = [create_if_block$3, create_else_block];
    	const if_blocks_1 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (!/*drag_start*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_2(ctx);
    	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	const block = {
    		c: function create() {
    			actions = element("actions");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Configurations";
    			t1 = space$1();
    			create_component(multiselect.$$.fragment);
    			t2 = space$1();
    			div2 = element("div");
    			if_block0.c();
    			t3 = space$1();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space$1();
    			if_block1.c();
    			attr_dev(div0, "class", "text-gray-600 text-sm");
    			add_location(div0, file$5, 109, 4, 3374);
    			attr_dev(div1, "class", "pt-1 flex items-center justify-between");
    			add_location(div1, file$5, 108, 2, 3316);
    			attr_dev(div2, "class", "relative");
    			add_location(div2, file$5, 113, 4, 3467);
    			attr_dev(actions, "class", "w-full block px-4 bg-primary py-2 mt-4");
    			add_location(actions, file$5, 106, 0, 3254);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, actions, anchor);
    			append_dev(actions, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t1);
    			mount_component(multiselect, div1, null);
    			append_dev(actions, t2);
    			append_dev(actions, div2);
    			if_blocks[current_block_type_index].m(div2, null);
    			append_dev(div2, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div2, t4);
    			if_blocks_1[current_block_type_index_1].m(div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(changeOrder_action = changeOrder.call(null, div2, { configs: /*configs*/ ctx[0] })),
    					listen_dev(div2, "drag-start", /*drag_start_handler*/ ctx[12], false, false, false),
    					listen_dev(div2, "drag-target", /*drag_target_handler*/ ctx[13], false, false, false),
    					listen_dev(div2, "drop-target", /*drop_target_handler*/ ctx[14], false, false, false),
    					listen_dev(div2, "drop", /*handleDrop*/ ctx[6], false, false, false),
    					listen_dev(div2, "drag-end", /*drag_end_handler*/ ctx[15], false, false, false),
    					listen_dev(div2, "anim-start", /*anim_start_handler*/ ctx[16], false, false, false),
    					listen_dev(div2, "anim-end", /*anim_end_handler*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div2, t3);
    			}

    			if (dirty & /*configs, animation, addConfigAtPosition, drag_start, drag_target, drop_target, toggle, runtime*/ 67108927) {
    				each_value = /*configs*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div2, fix_and_outro_and_destroy_block, create_each_block$2, t4, get_each_context$2);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_2(ctx);

    			if (current_block_type_index_1 === previous_block_index_1) {
    				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks_1[current_block_type_index_1];

    				if (!if_block1) {
    					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div2, null);
    			}

    			if (changeOrder_action && is_function(changeOrder_action.update) && dirty & /*configs*/ 1) changeOrder_action.update.call(null, { configs: /*configs*/ ctx[0] });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect.$$.fragment, local);
    			transition_in(if_block0);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect.$$.fragment, local);
    			transition_out(if_block0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(actions);
    			destroy_component(multiselect);
    			if_blocks[current_block_type_index].d();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if_blocks_1[current_block_type_index_1].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function initConfigs(config) {
    	let arr = config.components.map((variables, index) => {
    		return { ...variables };
    	});

    	return arr;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $dropStore;
    	validate_store(dropStore, "dropStore");
    	component_subscribe($$self, dropStore, $$value => $$invalidate(18, $dropStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ConfigList", slots, []);
    	let configs = [];
    	let animation = false;
    	let drag_start = false;
    	let drag_target = "";
    	let drop_target = "";

    	runtime.subscribe(store => {
    		$$invalidate(0, configs = store);
    	});

    	function addConfigAtPosition(arg, index) {
    		const { config } = arg.detail;

    		$$invalidate(0, configs = [
    			...configs.slice(0, index),
    			...initConfigs(config),
    			...configs.slice(index, configs.length)
    		]);

    		configsChanged(configs);
    	}

    	function calcMultiChangeConfigs(drag_target, drop_target) {
    		if (isDropZoneAvailable(drop_target)) {
    			let grabbed = [];

    			drag_target.forEach(id => {
    				grabbed.push(configs.find(act => Number(id) === act.id));
    			});

    			const firstElem = configs.indexOf(grabbed[0]);
    			const lastElem = configs.indexOf(grabbed[grabbed.length - 1]);
    			let to = Number(drop_target) + 1;

    			// correction for multidrag
    			if (to > firstElem) {
    				to = to - drag_target.length;
    			}

    			$$invalidate(0, configs = [...configs.slice(0, firstElem), ...configs.slice(lastElem + 1)]);
    			$$invalidate(0, configs = [...configs.slice(0, to), ...grabbed, ...configs.slice(to)]);
    			configsChanged(configs);
    		}

    		
    	}

    	function calcSingleChangeConfigs(drag_target, drop_target) {
    		const grabbed = configs.find(act => Number(...drag_target) === act.id);
    		const from = configs.indexOf(grabbed);
    		let to = Number(drop_target);

    		if (to < from) {
    			to = to + 1;
    		}

    		
    		$$invalidate(0, configs = [...configs.slice(0, from), ...configs.slice(from + 1)]);
    		$$invalidate(0, configs = [...configs.slice(0, to), grabbed, ...configs.slice(to)]);
    		configsChanged(configs);
    	}

    	function isDropZoneAvailable(drop_target) {
    		if (drop_target < 0) drop_target += 1; // dont let negative drop target come into play
    		const target_index = configs.indexOf(drop_target);
    		const found = $dropStore.disabledDropZones.find(index => index == target_index);

    		if (found) {
    			return 0;
    		}

    		return 1;
    	}

    	function handleDrop(e) {
    		if (drop_target !== "bin") {
    			if (e.detail.multi) {
    				calcMultiChangeConfigs(drag_target, drop_target);
    			} else {
    				calcSingleChangeConfigs(drag_target, drop_target);
    			}
    		} else {
    			appActionManagement.remove(drag_target);
    		}
    	}

    	// actions changed
    	function configsChanged(configs) {
    		runtime.set(configs);
    		dropStore.disabledDropZones();
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ConfigList> was created with unknown prop '${key}'`);
    	});

    	const new_config_handler = e => {
    		addConfigAtPosition(e, 0);
    	};

    	const output_handler = (config, each_value, index, e) => {
    		$$invalidate(0, each_value[index].script = e.detail, configs);
    		$$invalidate(0, each_value[index] = config, configs);
    		runtime.set(configs);
    	};

    	const output_handler_1 = (config, each_value, index, e) => {
    		$$invalidate(0, each_value[index].script = e.detail, configs);
    		$$invalidate(0, each_value[index] = config, configs);
    	};

    	const new_config_handler_1 = (index, e) => {
    		addConfigAtPosition(e, index);
    	};

    	const new_config_handler_2 = e => {
    		addConfigAtPosition(e, configs.length + 1);
    	};

    	const drag_start_handler = e => {
    		$$invalidate(2, drag_start = true);
    		actionIsDragged.set(true);
    	};

    	const drag_target_handler = e => {
    		$$invalidate(3, drag_target = e.detail.id);
    	};

    	const drop_target_handler = e => {
    		$$invalidate(4, drop_target = e.detail.drop_target);
    	};

    	const drag_end_handler = e => {
    		$$invalidate(2, drag_start = false);
    		actionIsDragged.set(false);
    		$$invalidate(4, drop_target = undefined);
    		$$invalidate(3, drag_target = []);
    	};

    	const anim_start_handler = () => {
    		$$invalidate(1, animation = true);
    	};

    	const anim_end_handler = () => {
    		$$invalidate(1, animation = false);
    	};

    	$$self.$capture_state = () => ({
    		flip,
    		fade,
    		MultiSelect,
    		Bin,
    		DropZone,
    		DynamicWrapper,
    		Options,
    		ConfigExtension,
    		ConfigPicker,
    		changeOrder,
    		dropStore,
    		actionIsDragged,
    		runtime,
    		configs,
    		animation,
    		drag_start,
    		drag_target,
    		drop_target,
    		addConfigAtPosition,
    		initConfigs,
    		calcMultiChangeConfigs,
    		calcSingleChangeConfigs,
    		isDropZoneAvailable,
    		handleDrop,
    		configsChanged,
    		$dropStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("configs" in $$props) $$invalidate(0, configs = $$props.configs);
    		if ("animation" in $$props) $$invalidate(1, animation = $$props.animation);
    		if ("drag_start" in $$props) $$invalidate(2, drag_start = $$props.drag_start);
    		if ("drag_target" in $$props) $$invalidate(3, drag_target = $$props.drag_target);
    		if ("drop_target" in $$props) $$invalidate(4, drop_target = $$props.drop_target);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		configs,
    		animation,
    		drag_start,
    		drag_target,
    		drop_target,
    		addConfigAtPosition,
    		handleDrop,
    		new_config_handler,
    		output_handler,
    		output_handler_1,
    		new_config_handler_1,
    		new_config_handler_2,
    		drag_start_handler,
    		drag_target_handler,
    		drop_target_handler,
    		drag_end_handler,
    		anim_start_handler,
    		anim_end_handler
    	];
    }

    class ConfigList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConfigList",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src\app\elements\app\panels\configuration\Configuration.svelte generated by Svelte v3.35.0 */

    const { console: console_1$2 } = globals;
    const file$4 = "src\\app\\elements\\app\\panels\\configuration\\Configuration.svelte";

    // (58:2) {#key $appSettings.configType == 'uiEvents'}
    function create_key_block(ctx) {
    	let container;
    	let configparameters;
    	let t;
    	let configlist;
    	let container_intro;
    	let current;
    	configparameters = new ConfigParameters({ $$inline: true });
    	configlist = new ConfigList({ $$inline: true });

    	const block = {
    		c: function create() {
    			container = element("container");
    			create_component(configparameters.$$.fragment);
    			t = space$1();
    			create_component(configlist.$$.fragment);
    			add_location(container, file$4, 58, 4, 1613);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, container, anchor);
    			mount_component(configparameters, container, null);
    			append_dev(container, t);
    			mount_component(configlist, container, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(configparameters.$$.fragment, local);
    			transition_in(configlist.$$.fragment, local);

    			if (!container_intro) {
    				add_render_callback(() => {
    					container_intro = create_in_transition(container, fly, {
    						x: /*$appSettings*/ ctx[1].configType == "uiEvents"
    						? -5
    						: 5,
    						opacity: 0.5,
    						duration: 200,
    						delay: 0
    					});

    					container_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(configparameters.$$.fragment, local);
    			transition_out(configlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(container);
    			destroy_component(configparameters);
    			destroy_component(configlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(58:2) {#key $appSettings.configType == 'uiEvents'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let configuration;
    	let tabs;
    	let tab0;
    	let span0;
    	let tab0_class_value;
    	let t1;
    	let tab1;
    	let span1;
    	let tab1_class_value;
    	let t3;
    	let previous_key = /*$appSettings*/ ctx[1].configType == "uiEvents";
    	let current;
    	let mounted;
    	let dispose;
    	let key_block = create_key_block(ctx);

    	const block = {
    		c: function create() {
    			configuration = element("configuration");
    			tabs = element("tabs");
    			tab0 = element("tab");
    			span0 = element("span");
    			span0.textContent = "UI Events";
    			t1 = space$1();
    			tab1 = element("tab");
    			span1 = element("span");
    			span1.textContent = "System Events";
    			t3 = space$1();
    			key_block.c();
    			add_location(span0, file$4, 44, 6, 1225);

    			attr_dev(tab0, "class", tab0_class_value = "" + ((/*selectedConfig*/ ctx[0] == "uiEvents"
    			? "bg-primary"
    			: "bg-secondary") + " px-4 py-2 cursor-pointer text-white rounded-t-md"));

    			add_location(tab0, file$4, 41, 4, 1026);
    			add_location(span1, file$4, 51, 6, 1490);

    			attr_dev(tab1, "class", tab1_class_value = "" + ((/*selectedConfig*/ ctx[0] == "systemEvents"
    			? "bg-primary"
    			: "bg-secondary") + " px-4 py-2 cursor-pointer text-white rounded-t-md"));

    			add_location(tab1, file$4, 48, 4, 1283);
    			attr_dev(tabs, "class", "flex flex-row items-start mt-8");
    			add_location(tabs, file$4, 40, 2, 975);
    			attr_dev(configuration, "class", "w-full flex flex-col");
    			add_location(configuration, file$4, 38, 0, 925);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, configuration, anchor);
    			append_dev(configuration, tabs);
    			append_dev(tabs, tab0);
    			append_dev(tab0, span0);
    			append_dev(tabs, t1);
    			append_dev(tabs, tab1);
    			append_dev(tab1, span1);
    			append_dev(configuration, t3);
    			key_block.m(configuration, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(tab0, "click", /*click_handler*/ ctx[3], false, false, false),
    					listen_dev(tab1, "click", /*click_handler_1*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*selectedConfig*/ 1 && tab0_class_value !== (tab0_class_value = "" + ((/*selectedConfig*/ ctx[0] == "uiEvents"
    			? "bg-primary"
    			: "bg-secondary") + " px-4 py-2 cursor-pointer text-white rounded-t-md"))) {
    				attr_dev(tab0, "class", tab0_class_value);
    			}

    			if (!current || dirty & /*selectedConfig*/ 1 && tab1_class_value !== (tab1_class_value = "" + ((/*selectedConfig*/ ctx[0] == "systemEvents"
    			? "bg-primary"
    			: "bg-secondary") + " px-4 py-2 cursor-pointer text-white rounded-t-md"))) {
    				attr_dev(tab1, "class", tab1_class_value);
    			}

    			if (dirty & /*$appSettings*/ 2 && safe_not_equal(previous_key, previous_key = /*$appSettings*/ ctx[1].configType == "uiEvents")) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop$3);
    				check_outros();
    				key_block = create_key_block(ctx);
    				key_block.c();
    				transition_in(key_block);
    				key_block.m(configuration, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(configuration);
    			key_block.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(1, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Configuration", slots, []);

    	const grid_raw_actions = `
  --[[@l]]
  local x = 1 local y = -12 + elem_num(1 + 2)
  --[[@glp]]
  led_value(0,1,2)`;

    	let configs = _utils.rawLuaToConfigList(grid_raw_actions);
    	configs = _utils.configBreakDown(configs);
    	configs = _utils.extendProperties(configs);
    	console.log(configs);
    	runtime.set(configs);
    	let selectedConfig = "uiEvents";

    	function changeSelectedConfig(arg) {
    		$$invalidate(0, selectedConfig = arg);
    		set_store_value(appSettings, $appSettings.configType = selectedConfig, $appSettings);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<Configuration> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		changeSelectedConfig("uiEvents");
    	};

    	const click_handler_1 = () => {
    		changeSelectedConfig("systemEvents");
    	};

    	$$self.$capture_state = () => ({
    		fly,
    		appSettings,
    		Debug,
    		ConfigParameters,
    		ConfigList,
    		runtime,
    		_utils,
    		grid_raw_actions,
    		configs,
    		selectedConfig,
    		changeSelectedConfig,
    		$appSettings
    	});

    	$$self.$inject_state = $$props => {
    		if ("configs" in $$props) configs = $$props.configs;
    		if ("selectedConfig" in $$props) $$invalidate(0, selectedConfig = $$props.selectedConfig);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedConfig,
    		$appSettings,
    		changeSelectedConfig,
    		click_handler,
    		click_handler_1
    	];
    }

    class Configuration extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Configuration",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src\app\elements\app\panels\preferences\Preferences.svelte generated by Svelte v3.35.0 */

    const { console: console_1$1 } = globals;

    const file$3 = "src\\app\\elements\\app\\panels\\preferences\\Preferences.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (38:10) {#each preferences as preference, index}
    function create_each_block$1(ctx) {
    	let tab;
    	let t_value = /*preference*/ ctx[9] + "";
    	let t;
    	let tab_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[5](/*preference*/ ctx[9]);
    	}

    	const block = {
    		c: function create() {
    			tab = element("tab");
    			t = text(t_value);

    			attr_dev(tab, "class", tab_class_value = "" + ((/*selectedTab*/ ctx[0] == /*preference*/ ctx[9]
    			? "bg-secondary text-white"
    			: "text-gray-100 hover:bg-secondary") + " p-2 rounded-l-lg cursor-pointer" + " svelte-1xvof4c"));

    			add_location(tab, file$3, 38, 12, 1340);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tab, anchor);
    			append_dev(tab, t);

    			if (!mounted) {
    				dispose = listen_dev(tab, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*selectedTab*/ 1 && tab_class_value !== (tab_class_value = "" + ((/*selectedTab*/ ctx[0] == /*preference*/ ctx[9]
    			? "bg-secondary text-white"
    			: "text-gray-100 hover:bg-secondary") + " p-2 rounded-l-lg cursor-pointer" + " svelte-1xvof4c"))) {
    				attr_dev(tab, "class", tab_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tab);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(38:10) {#each preferences as preference, index}",
    		ctx
    	});

    	return block;
    }

    // (43:10) {#if selectedTab == 'MIDI Monitor'}
    function create_if_block$2(ctx) {
    	let div0;
    	let input0;
    	let input0_checked_value;
    	let t0;
    	let label0;
    	let t2;
    	let div1;
    	let input1;
    	let input1_checked_value;
    	let t3;
    	let label1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			input0 = element("input");
    			t0 = space$1();
    			label0 = element("label");
    			label0.textContent = "Show MIDI Monitor";
    			t2 = space$1();
    			div1 = element("div");
    			input1 = element("input");
    			t3 = space$1();
    			label1 = element("label");
    			label1.textContent = "Hex output";
    			input0.checked = input0_checked_value = /*$preferenceStore*/ ctx[1].midiMonitor.show;
    			attr_dev(input0, "type", "checkbox");
    			add_location(input0, file$3, 45, 14, 1879);
    			attr_dev(label0, "class", "ml-1");
    			add_location(label0, file$3, 46, 14, 2062);
    			attr_dev(div0, "class", "flex items-center p-1");
    			add_location(div0, file$3, 44, 12, 1828);
    			input1.checked = input1_checked_value = /*$preferenceStore*/ ctx[1].midiMonitor.option;
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$3, 50, 14, 2194);
    			attr_dev(label1, "class", "ml-1");
    			add_location(label1, file$3, 51, 14, 2381);
    			attr_dev(div1, "class", "flex items-center p-1");
    			add_location(div1, file$3, 49, 12, 2143);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, input0);
    			append_dev(div0, t0);
    			append_dev(div0, label0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, input1);
    			append_dev(div1, t3);
    			append_dev(div1, label1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input_handler*/ ctx[6], false, false, false),
    					listen_dev(input1, "input", /*input_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$preferenceStore*/ 2 && input0_checked_value !== (input0_checked_value = /*$preferenceStore*/ ctx[1].midiMonitor.show)) {
    				prop_dev(input0, "checked", input0_checked_value);
    			}

    			if (dirty & /*$preferenceStore*/ 2 && input1_checked_value !== (input1_checked_value = /*$preferenceStore*/ ctx[1].midiMonitor.option)) {
    				prop_dev(input1, "checked", input1_checked_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(43:10) {#if selectedTab == 'MIDI Monitor'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let preferences_1;
    	let container;
    	let top;
    	let div;
    	let t1;
    	let button;
    	let svg;
    	let path0;
    	let path1;
    	let t2;
    	let main;
    	let aside;
    	let t3;
    	let tab_container;
    	let mounted;
    	let dispose;
    	let each_value = /*preferences*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	let if_block = /*selectedTab*/ ctx[0] == "MIDI Monitor" && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			preferences_1 = element("preferences");
    			container = element("container");
    			top = element("top");
    			div = element("div");
    			div.textContent = "Preferences";
    			t1 = space$1();
    			button = element("button");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t2 = space$1();
    			main = element("main");
    			aside = element("aside");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space$1();
    			tab_container = element("tab-container");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "p-2");
    			add_location(div, file$3, 26, 8, 675);
    			attr_dev(path0, "d", "M2.37506 0.142151L28.4264 26.1935L26.1934 28.4264L0.142091 2.37512L2.37506 0.142151Z");
    			add_location(path0, file$3, 29, 12, 935);
    			attr_dev(path1, "d", "M28.4264 2.37512L2.37506 28.4264L0.14209 26.1935L26.1934 0.142151L28.4264 2.37512Z");
    			add_location(path1, file$3, 30, 12, 1046);
    			attr_dev(svg, "class", "w-5 h-5 p-1 fill-current text-gray-500");
    			attr_dev(svg, "viewBox", "0 0 29 29");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$3, 28, 10, 802);
    			attr_dev(button, "class", "border-none outline-none p-2");
    			add_location(button, file$3, 27, 8, 719);
    			set_style(top, "background-color", "rgb(25, 26, 32)");
    			attr_dev(top, "class", "flex justify-between ");
    			add_location(top, file$3, 25, 6, 588);
    			attr_dev(aside, "class", "flex flex-col ml-2");
    			add_location(aside, file$3, 36, 8, 1240);
    			set_custom_element_data(tab_container, "class", "" + ("rounded-r-lg" + " flex bg-secondary items-start justify-start flex-wrap w-full p-2 my-2 mr-2"));
    			add_location(tab_container, file$3, 41, 8, 1650);
    			attr_dev(main, "class", "flex flex-row");
    			add_location(main, file$3, 35, 6, 1202);
    			attr_dev(container, "class", "bg-primary w-96 m-2 shadow-lg text-white");
    			add_location(container, file$3, 24, 4, 520);
    			attr_dev(preferences_1, "class", "w-full h-full absolute flex items-center justify-center z-10");
    			add_location(preferences_1, file$3, 23, 2, 431);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, preferences_1, anchor);
    			append_dev(preferences_1, container);
    			append_dev(container, top);
    			append_dev(top, div);
    			append_dev(top, t1);
    			append_dev(top, button);
    			append_dev(button, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(container, t2);
    			append_dev(container, main);
    			append_dev(main, aside);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(aside, null);
    			}

    			append_dev(main, t3);
    			append_dev(main, tab_container);
    			if (if_block) if_block.m(tab_container, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedTab, preferences, preferenceStore*/ 5) {
    				each_value = /*preferences*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(aside, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*selectedTab*/ ctx[0] == "MIDI Monitor") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					if_block.m(tab_container, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(preferences_1);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $preferenceStore;
    	validate_store(preferenceStore, "preferenceStore");
    	component_subscribe($$self, preferenceStore, $$value => $$invalidate(1, $preferenceStore = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Preferences", slots, []);
    	let preferences = ["MIDI Monitor", "Debug", "Advanced"];
    	let selectedTab = preferences[0];

    	function handleInputChange(e) {
    		console.log($preferenceStore);
    	}

    	function close() {
    		appSettings.update(store => {
    			store.preferences = false;
    			return store;
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Preferences> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		close();
    	};

    	const click_handler_1 = preference => {
    		$$invalidate(0, selectedTab = preference);

    		preferenceStore.update(s => {
    			s.showTab = preference;
    			return s;
    		});
    	};

    	const input_handler = e => {
    		preferenceStore.update(s => {
    			s.midiMonitor.show = e.target.checked;
    			return s;
    		});
    	};

    	const input_handler_1 = e => {
    		preferenceStore.update(s => {
    			s.midiMonitor.option = e.target.checked;
    			return s;
    		});
    	};

    	$$self.$capture_state = () => ({
    		appSettings,
    		preferenceStore,
    		preferences,
    		selectedTab,
    		handleInputChange,
    		close,
    		$preferenceStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("preferences" in $$props) $$invalidate(2, preferences = $$props.preferences);
    		if ("selectedTab" in $$props) $$invalidate(0, selectedTab = $$props.selectedTab);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedTab,
    		$preferenceStore,
    		preferences,
    		close,
    		click_handler,
    		click_handler_1,
    		input_handler,
    		input_handler_1
    	];
    }

    class Preferences extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Preferences",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\app\elements\app\panels\midi-monitor\MidiMonitor.svelte generated by Svelte v3.35.0 */

    const file$2 = "src\\app\\elements\\app\\panels\\midi-monitor\\MidiMonitor.svelte";

    function create_fragment$2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Midi monitor coming here...";
    			attr_dev(div, "class", "bg-primary h-full text-white p-4");
    			add_location(div, file$2, 7, 0, 31);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("MidiMonitor", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MidiMonitor> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class MidiMonitor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MidiMonitor",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\app\elements\app\PanelContainer.svelte generated by Svelte v3.35.0 */
    const file$1 = "src\\app\\elements\\app\\PanelContainer.svelte";

    // (22:54) 
    function create_if_block_2$1(ctx) {
    	let midimonitor;
    	let current;
    	midimonitor = new MidiMonitor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(midimonitor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(midimonitor, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(midimonitor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(midimonitor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(midimonitor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(22:54) ",
    		ctx
    	});

    	return block;
    }

    // (18:54) 
    function create_if_block_1$1(ctx) {
    	let preferences;
    	let current;
    	preferences = new Preferences({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(preferences.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(preferences, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(preferences.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(preferences.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(preferences, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(18:54) ",
    		ctx
    	});

    	return block;
    }

    // (14:2) {#if $appSettings.activePanel == 'gridConfiguration'}
    function create_if_block$1(ctx) {
    	let configuration;
    	let current;
    	configuration = new Configuration({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(configuration.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(configuration, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(configuration.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(configuration.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(configuration, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(14:2) {#if $appSettings.activePanel == 'gridConfiguration'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let panel_container;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$1, create_if_block_1$1, create_if_block_2$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$appSettings*/ ctx[0].activePanel == "gridConfiguration") return 0;
    		if (/*$appSettings*/ ctx[0].activePanel == "preferences") return 1;
    		if (/*$appSettings*/ ctx[0].activePanel == "midiMonitor") return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			panel_container = element("panel-container");
    			if (if_block) if_block.c();
    			set_custom_element_data(panel_container, "class", "w-2/5");
    			add_location(panel_container, file$1, 11, 0, 317);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, panel_container, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(panel_container, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(panel_container, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(panel_container);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $appSettings;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(0, $appSettings = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PanelContainer", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PanelContainer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		appSettings,
    		Configuration,
    		Preferences,
    		MidiMonitor,
    		$appSettings
    	});

    	return [$appSettings];
    }

    class PanelContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PanelContainer",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.35.0 */

    const { console: console_1 } = globals;
    const file = "src\\App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[27] = list[i];
    	return child_ctx;
    }

    // (147:0) {#if $appSettings.isElectron}
    function create_if_block_4(ctx) {
    	let updater;
    	let current;
    	updater = new Updater({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(updater.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(updater, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(updater.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(updater.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(updater, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(147:0) {#if $appSettings.isElectron}",
    		ctx
    	});

    	return block;
    }

    // (151:0) {#if !$appSettings.isElectron}
    function create_if_block_3(ctx) {
    	let websitenav;
    	let t;
    	let tour;
    	let current;
    	websitenav = new WebsiteNav({ $$inline: true });
    	tour = new Tour({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(websitenav.$$.fragment);
    			t = space$1();
    			create_component(tour.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(websitenav, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(tour, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(websitenav.$$.fragment, local);
    			transition_in(tour.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(websitenav.$$.fragment, local);
    			transition_out(tour.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(websitenav, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(tour, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(151:0) {#if !$appSettings.isElectron}",
    		ctx
    	});

    	return block;
    }

    // (156:0) {#if $appSettings.isElectron}
    function create_if_block_2(ctx) {
    	let titlebar;
    	let t;
    	let serialport;
    	let updating_runtime;
    	let updating_layout;
    	let current;
    	titlebar = new Titlebar({ $$inline: true });

    	function serialport_runtime_binding(value) {
    		/*serialport_runtime_binding*/ ctx[12](value);
    	}

    	function serialport_layout_binding(value) {
    		/*serialport_layout_binding*/ ctx[13](value);
    	}

    	let serialport_props = {};

    	if (/*$runtime*/ ctx[10] !== void 0) {
    		serialport_props.runtime = /*$runtime*/ ctx[10];
    	}

    	if (/*$layout*/ ctx[9] !== void 0) {
    		serialport_props.layout = /*$layout*/ ctx[9];
    	}

    	serialport = new SerialPort_1({ props: serialport_props, $$inline: true });
    	binding_callbacks.push(() => bind(serialport, "runtime", serialport_runtime_binding));
    	binding_callbacks.push(() => bind(serialport, "layout", serialport_layout_binding));
    	serialport.$on("change", /*change_handler*/ ctx[14]);
    	serialport.$on("coroner", /*coroner_handler*/ ctx[15]);

    	const block = {
    		c: function create() {
    			create_component(titlebar.$$.fragment);
    			t = space$1();
    			create_component(serialport.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(titlebar, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(serialport, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const serialport_changes = {};

    			if (!updating_runtime && dirty & /*$runtime*/ 1024) {
    				updating_runtime = true;
    				serialport_changes.runtime = /*$runtime*/ ctx[10];
    				add_flush_callback(() => updating_runtime = false);
    			}

    			if (!updating_layout && dirty & /*$layout*/ 512) {
    				updating_layout = true;
    				serialport_changes.layout = /*$layout*/ ctx[9];
    				add_flush_callback(() => updating_layout = false);
    			}

    			serialport.$set(serialport_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titlebar.$$.fragment, local);
    			transition_in(serialport.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titlebar.$$.fragment, local);
    			transition_out(serialport.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titlebar, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(serialport, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(156:0) {#if $appSettings.isElectron}",
    		ctx
    	});

    	return block;
    }

    // (207:4) {#if $runtime.length > 0}
    function create_if_block_1(ctx) {
    	let paninfo;
    	let current;

    	paninfo = new PanInfo({
    			props: { os: /*$appSettings*/ ctx[0].os },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(paninfo.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(paninfo, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const paninfo_changes = {};
    			if (dirty & /*$appSettings*/ 1) paninfo_changes.os = /*$appSettings*/ ctx[0].os;
    			paninfo.$set(paninfo_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(paninfo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(paninfo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(paninfo, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(207:4) {#if $runtime.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (271:8) {#each $layout as cell}
    function create_each_block(ctx) {
    	let div;
    	let module;
    	let t;
    	let div_id_value;
    	let current;

    	module = new MODULE({
    			props: {
    				type: /*cell*/ ctx[27].id.substr(0, 4),
    				id: /*cell*/ ctx[27].id,
    				rotation: /*cell*/ ctx[27].rot
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(module.$$.fragment);
    			t = space$1();
    			attr_dev(div, "id", div_id_value = "grid-cell-" + ("dx:" + /*cell*/ ctx[27].dx + ";dy:" + /*cell*/ ctx[27].dy));
    			set_style(div, "--cell-size", /*gridsize*/ ctx[8] + "px");
    			set_style(div, "top", -1 * (/*cell*/ ctx[27].dy * 106.6 * /*$appSettings*/ ctx[0].size * 1.1) + "px");
    			set_style(div, "left", /*cell*/ ctx[27].dx * 106.6 * /*$appSettings*/ ctx[0].size * 1.1 + "px");
    			attr_dev(div, "class", "cell");
    			toggle_class(div, "freeToDrop", /*current*/ ctx[3] == "dx:" + /*cell*/ ctx[27].dx + ";dy:" + /*cell*/ ctx[27].dy);
    			toggle_class(div, "canBeUsed", /*cell*/ ctx[27].canBeUsed && /*$appSettings*/ ctx[0].layoutMode);
    			toggle_class(div, "fwMismatch", JSON.stringify(/*cell*/ ctx[27].fwVersion) !== JSON.stringify(/*fwVersion*/ ctx[2]));
    			toggle_class(div, "restricted-action", /*invalidDragHighlight*/ ctx[4] && /*movedCell*/ ctx[5].dx === /*cell*/ ctx[27].dx && /*movedCell*/ ctx[5].dy === /*cell*/ ctx[27].dy);
    			add_location(div, file, 271, 10, 7740);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(module, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const module_changes = {};
    			if (dirty & /*$layout*/ 512) module_changes.type = /*cell*/ ctx[27].id.substr(0, 4);
    			if (dirty & /*$layout*/ 512) module_changes.id = /*cell*/ ctx[27].id;
    			if (dirty & /*$layout*/ 512) module_changes.rotation = /*cell*/ ctx[27].rot;
    			module.$set(module_changes);

    			if (!current || dirty & /*$layout*/ 512 && div_id_value !== (div_id_value = "grid-cell-" + ("dx:" + /*cell*/ ctx[27].dx + ";dy:" + /*cell*/ ctx[27].dy))) {
    				attr_dev(div, "id", div_id_value);
    			}

    			if (!current || dirty & /*gridsize*/ 256) {
    				set_style(div, "--cell-size", /*gridsize*/ ctx[8] + "px");
    			}

    			if (!current || dirty & /*$layout, $appSettings*/ 513) {
    				set_style(div, "top", -1 * (/*cell*/ ctx[27].dy * 106.6 * /*$appSettings*/ ctx[0].size * 1.1) + "px");
    			}

    			if (!current || dirty & /*$layout, $appSettings*/ 513) {
    				set_style(div, "left", /*cell*/ ctx[27].dx * 106.6 * /*$appSettings*/ ctx[0].size * 1.1 + "px");
    			}

    			if (dirty & /*current, $layout*/ 520) {
    				toggle_class(div, "freeToDrop", /*current*/ ctx[3] == "dx:" + /*cell*/ ctx[27].dx + ";dy:" + /*cell*/ ctx[27].dy);
    			}

    			if (dirty & /*$layout, $appSettings*/ 513) {
    				toggle_class(div, "canBeUsed", /*cell*/ ctx[27].canBeUsed && /*$appSettings*/ ctx[0].layoutMode);
    			}

    			if (dirty & /*JSON, $layout, fwVersion*/ 516) {
    				toggle_class(div, "fwMismatch", JSON.stringify(/*cell*/ ctx[27].fwVersion) !== JSON.stringify(/*fwVersion*/ ctx[2]));
    			}

    			if (dirty & /*invalidDragHighlight, movedCell, $layout*/ 560) {
    				toggle_class(div, "restricted-action", /*invalidDragHighlight*/ ctx[4] && /*movedCell*/ ctx[5].dx === /*cell*/ ctx[27].dx && /*movedCell*/ ctx[5].dy === /*cell*/ ctx[27].dy);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(module.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(module.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(module);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(271:8) {#each $layout as cell}",
    		ctx
    	});

    	return block;
    }

    // (288:6) {#if $appSettings.layoutMode}
    function create_if_block(ctx) {
    	let div;
    	let removemodule;
    	let div_intro;
    	let current;
    	removemodule = new RemoveModule({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(removemodule.$$.fragment);
    			add_location(div, file, 288, 8, 8534);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(removemodule, div, null);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(removemodule.$$.fragment, local);

    			if (!div_intro) {
    				add_render_callback(() => {
    					div_intro = create_in_transition(div, fade, {});
    					div_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(removemodule.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(removemodule);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(288:6) {#if $appSettings.layoutMode}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let tailwindcss;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let main;
    	let navtabs;
    	let t4;
    	let runtimesync;
    	let t5;
    	let layout_container;
    	let t6;
    	let grid_layout_1;
    	let div;
    	let layoutMenu_action;
    	let t7;
    	let t8;
    	let panelcontainer;
    	let current;
    	let mounted;
    	let dispose;
    	tailwindcss = new Tailwindcss({ $$inline: true });
    	let if_block0 = /*$appSettings*/ ctx[0].isElectron && create_if_block_4(ctx);
    	let if_block1 = !/*$appSettings*/ ctx[0].isElectron && create_if_block_3(ctx);
    	let if_block2 = /*$appSettings*/ ctx[0].isElectron && create_if_block_2(ctx);
    	navtabs = new NavTabs({ $$inline: true });
    	runtimesync = new RuntimeSync({ $$inline: true });
    	let if_block3 = /*$runtime*/ ctx[10].length > 0 && create_if_block_1(ctx);
    	let each_value = /*$layout*/ ctx[9];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block4 = /*$appSettings*/ ctx[0].layoutMode && create_if_block(ctx);
    	panelcontainer = new PanelContainer({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(tailwindcss.$$.fragment);
    			t0 = space$1();
    			if (if_block0) if_block0.c();
    			t1 = space$1();
    			if (if_block1) if_block1.c();
    			t2 = space$1();
    			if (if_block2) if_block2.c();
    			t3 = space$1();
    			main = element("main");
    			create_component(navtabs.$$.fragment);
    			t4 = space$1();
    			create_component(runtimesync.$$.fragment);
    			t5 = space$1();
    			layout_container = element("layout-container");
    			if (if_block3) if_block3.c();
    			t6 = space$1();
    			grid_layout_1 = element("grid-layout");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space$1();
    			if (if_block4) if_block4.c();
    			t8 = space$1();
    			create_component(panelcontainer.$$.fragment);
    			attr_dev(div, "id", "grid-map");
    			set_style(div, "top", "0%");
    			set_style(div, "left", "0%");
    			attr_dev(div, "class", "w-full h-full flex relative focus:outline-none border-none outline-none justify-center items-center z-10");
    			add_location(div, file, 264, 6, 7323);
    			set_custom_element_data(grid_layout_1, "class", "absolute overflow-hidden w-full flex flex-col h-full focus:outline-none border-none outline-none");
    			add_location(grid_layout_1, file, 207, 4, 5546);
    			set_custom_element_data(layout_container, "class", "relative flex items-start justify-end w-3/5 h-full");
    			add_location(layout_container, file, 205, 2, 5396);
    			attr_dev(main, "id", "app");
    			attr_dev(main, "class", "relative flex w-full h-full flex-row justify-between overflow-hidden");
    			add_location(main, file, 183, 0, 4946);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(tailwindcss, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(navtabs, main, null);
    			append_dev(main, t4);
    			mount_component(runtimesync, main, null);
    			append_dev(main, t5);
    			append_dev(main, layout_container);
    			if (if_block3) if_block3.m(layout_container, null);
    			append_dev(layout_container, t6);
    			append_dev(layout_container, grid_layout_1);
    			append_dev(grid_layout_1, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			/*div_binding*/ ctx[16](div);
    			append_dev(grid_layout_1, t7);
    			if (if_block4) if_block4.m(grid_layout_1, null);
    			append_dev(main, t8);
    			mount_component(panelcontainer, main, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(layoutMenu_action = layoutMenu.call(null, div, /*$appSettings*/ ctx[0].layoutMode)),
    					listen_dev(div, "menu-open", /*menu_open_handler*/ ctx[17], false, false, false),
    					listen_dev(div, "menu-close", /*menu_close_handler*/ ctx[18], false, false, false),
    					action_destroyer(dragndrop.call(null, grid_layout_1, true)),
    					listen_dev(grid_layout_1, "dnd-dragstart", /*dnd_dragstart_handler*/ ctx[19], false, false, false),
    					listen_dev(grid_layout_1, "dnd-dragover", /*dnd_dragover_handler*/ ctx[20], false, false, false),
    					listen_dev(grid_layout_1, "dnd-drop", /*dnd_drop_handler*/ ctx[21], false, false, false),
    					listen_dev(grid_layout_1, "dnd-remove", /*dnd_remove_handler*/ ctx[22], false, false, false),
    					listen_dev(grid_layout_1, "dnd-invalid", /*dnd_invalid_handler*/ ctx[23], false, false, false),
    					listen_dev(grid_layout_1, "dnd-dragend", /*dnd_dragend_handler*/ ctx[24], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$appSettings*/ ctx[0].isElectron) {
    				if (if_block0) {
    					if (dirty & /*$appSettings*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!/*$appSettings*/ ctx[0].isElectron) {
    				if (if_block1) {
    					if (dirty & /*$appSettings*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t2.parentNode, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$appSettings*/ ctx[0].isElectron) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$appSettings*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t3.parentNode, t3);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*$runtime*/ ctx[10].length > 0) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*$runtime*/ 1024) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(layout_container, t6);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$layout, gridsize, $appSettings, current, JSON, fwVersion, invalidDragHighlight, movedCell*/ 829) {
    				each_value = /*$layout*/ ctx[9];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (layoutMenu_action && is_function(layoutMenu_action.update) && dirty & /*$appSettings*/ 1) layoutMenu_action.update.call(null, /*$appSettings*/ ctx[0].layoutMode);

    			if (/*$appSettings*/ ctx[0].layoutMode) {
    				if (if_block4) {
    					if (dirty & /*$appSettings*/ 1) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(grid_layout_1, null);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tailwindcss.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(navtabs.$$.fragment, local);
    			transition_in(runtimesync.$$.fragment, local);
    			transition_in(if_block3);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block4);
    			transition_in(panelcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tailwindcss.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(navtabs.$$.fragment, local);
    			transition_out(runtimesync.$$.fragment, local);
    			transition_out(if_block3);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block4);
    			transition_out(panelcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tailwindcss, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(main);
    			destroy_component(navtabs);
    			destroy_component(runtimesync);
    			if (if_block3) if_block3.d();
    			destroy_each(each_blocks, detaching);
    			/*div_binding*/ ctx[16](null);
    			if (if_block4) if_block4.d();
    			destroy_component(panelcontainer);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let gridsize;
    	let $appSettings;
    	let $layout;
    	let $runtime;
    	validate_store(appSettings, "appSettings");
    	component_subscribe($$self, appSettings, $$value => $$invalidate(0, $appSettings = $$value));
    	validate_store(layout, "layout");
    	component_subscribe($$self, layout, $$value => $$invalidate(9, $layout = $$value));
    	validate_store(runtime$1, "runtime");
    	component_subscribe($$self, runtime$1, $$value => $$invalidate(10, $runtime = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	const fs = require("fs");
    	let map;

    	/*
    *   variables
    */
    	// For rendering the "id=grid-cell-x:x;y:y" layout drop area.
    	let grid_layout = 5;

    	// code base versions
    	let fwVersion;

    	let raw_serial; // debug purposes

    	// The green highlight around grid for valid drop area.
    	let current = "";

    	// Red borders on cell if it's an invalid drag due to dnd-invalid.
    	let invalidDragHighlight = false;

    	// For adding red border in dnd-invalid.
    	let movedCell;

    	// Boolean state for right click context-menu override.
    	let isMenuOpen = false;

    	// Variable for context menu actions (set usb module).
    	let menuOnModuleWithId;

    	onMount(() => {
    		//gridSyncProcess.subscribe(()=>{})
    		panzoom(map, {
    			bounds: true,
    			boundsPadding: 0.1,
    			zoomDoubleClickSpeed: 1, //disable double click zoom
    			smoothScroll: false, // disable the smoothing effect
    			beforeMouseDown(e) {
    				// allow mouse-down panning only if altKey is down. Otherwise - ignore
    				var shouldIgnore = !e.altKey;

    				return shouldIgnore;
    			},
    			beforeWheel(e) {
    				// ignore wheel zoom
    				var shouldIgnore = true; //!e.altKey;

    				return shouldIgnore;
    			}
    		});

    		appSettings.subscribe(store => {
    			$$invalidate(2, fwVersion = store.version);

    			if (store.layoutMode) {
    				console.log(store.layoutMode);
    				set_store_value(layout, $layout = LAYOUT.drawPossiblePlacementOutlines($runtime, grid_layout), $layout);
    			} else {
    				set_store_value(layout, $layout = LAYOUT.removePossiblePlacementOutlines($layout), $layout);
    			}
    		});

    		appSettings.update(store => {
    			store.selectedDisplay = "settings";
    			return store;
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function serialport_runtime_binding(value) {
    		$runtime = value;
    		runtime$1.set($runtime);
    	}

    	function serialport_layout_binding(value) {
    		$layout = value;
    		layout.set($layout);
    	}

    	const change_handler = e => {
    		set_store_value(layout, $layout = LAYOUT.drawPossiblePlacementOutlines($runtime, grid_layout), $layout);
    	};

    	const coroner_handler = e => {
    		runtime$1.update(grid => {
    			grid = e.detail.usedgrid;
    			return grid;
    		});

    		layout.update(cell => {
    			let removed = cell.find(c => c.id == e.detail.removed.id);
    			removed.id = "";
    			removed.isConnectedByUsb = false;
    			return cell;
    		});

    		set_store_value(layout, $layout = LAYOUT.removeSurroundingPlacementOutlines($layout, e.detail.removed), $layout);
    	};

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			map = $$value;
    			$$invalidate(1, map);
    		});
    	}

    	const menu_open_handler = e => {
    		$$invalidate(6, isMenuOpen = true);
    		$$invalidate(7, menuOnModuleWithId = e.detail.target);
    	};

    	const menu_close_handler = () => {
    		$$invalidate(6, isMenuOpen = false);
    	};

    	const dnd_dragstart_handler = e => {
    		let moved = handledrag_1.start(e);

    		if ($runtime.length == 0) {
    			$$invalidate(3, current = "dx:0;dy:0");
    		}

    		if (moved !== "" || undefined) {
    			set_store_value(layout, $layout = LAYOUT.removeSurroundingPlacementOutlines($layout, moved), $layout);
    		}
    	};

    	const dnd_dragover_handler = e => {
    		$$invalidate(3, current = handledrag_1.over(e));
    	};

    	const dnd_drop_handler = e => {
    		// here we get back the dropped module id and drop target
    		let data = handledrag_1.drop(e);

    		LAYOUT.addToRuntime($runtime, data.modul, data.id, true);
    	};

    	const dnd_remove_handler = e => {
    		let data = handledrag_1.remove(e);

    		// remove ?? 
    		set_store_value(runtime$1, $runtime = $runtime.filter(gridController => gridController.id !== data.modul), $runtime);

    		layout.update(cell => {
    			cell = cell.map(_cell => {
    				if (_cell.id == data.modul) {
    					_cell.id = "";
    					_cell.isConnectedByUsb = false;
    				}

    				return _cell;
    			});

    			return cell;
    		});
    	};

    	const dnd_invalid_handler = e => {
    		let data = handledrag_1.invalid(e);

    		if (data !== undefined) {
    			$$invalidate(4, invalidDragHighlight = data.centerDragHighlight);
    			$$invalidate(5, movedCell = data.movedCell);

    			setTimeout(
    				() => {
    					$$invalidate(4, invalidDragHighlight = false);
    				},
    				500
    			);
    		}
    	};

    	const dnd_dragend_handler = e => {
    		const dragend = handledrag_1.end(e);
    		$$invalidate(3, current = dragend.current);
    		set_store_value(layout, $layout = LAYOUT.drawPossiblePlacementOutlines($runtime, grid_layout), $layout);
    		console.log($layout, $runtime);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		fs,
    		Tailwindcss,
    		createPanZoom: panzoom,
    		map,
    		appSettings,
    		layout,
    		runtime: runtime$1,
    		SerialPort: SerialPort_1,
    		GlobalSettings,
    		LocalSettings,
    		Profiles,
    		Debug: Debug$1,
    		Updater,
    		Tour,
    		FirmwareCheck,
    		DragModule,
    		RemoveModule,
    		KeyStatus,
    		Message,
    		MODULE,
    		NewMidi,
    		islanding: islanding_1,
    		handledrag: handledrag_1,
    		LAYOUT,
    		onMount,
    		layoutMenu,
    		dragndrop,
    		Titlebar,
    		PanInfo,
    		WebsiteNav,
    		NavTabs,
    		RuntimeSync,
    		PanelContainer,
    		grid_layout,
    		fwVersion,
    		raw_serial,
    		current,
    		invalidDragHighlight,
    		movedCell,
    		isMenuOpen,
    		menuOnModuleWithId,
    		gridsize,
    		$appSettings,
    		$layout,
    		$runtime
    	});

    	$$self.$inject_state = $$props => {
    		if ("map" in $$props) $$invalidate(1, map = $$props.map);
    		if ("grid_layout" in $$props) $$invalidate(11, grid_layout = $$props.grid_layout);
    		if ("fwVersion" in $$props) $$invalidate(2, fwVersion = $$props.fwVersion);
    		if ("raw_serial" in $$props) raw_serial = $$props.raw_serial;
    		if ("current" in $$props) $$invalidate(3, current = $$props.current);
    		if ("invalidDragHighlight" in $$props) $$invalidate(4, invalidDragHighlight = $$props.invalidDragHighlight);
    		if ("movedCell" in $$props) $$invalidate(5, movedCell = $$props.movedCell);
    		if ("isMenuOpen" in $$props) $$invalidate(6, isMenuOpen = $$props.isMenuOpen);
    		if ("menuOnModuleWithId" in $$props) $$invalidate(7, menuOnModuleWithId = $$props.menuOnModuleWithId);
    		if ("gridsize" in $$props) $$invalidate(8, gridsize = $$props.gridsize);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$appSettings*/ 1) {
    			$$invalidate(8, gridsize = $appSettings.size * 106.6 + 10);
    		}
    	};

    	return [
    		$appSettings,
    		map,
    		fwVersion,
    		current,
    		invalidDragHighlight,
    		movedCell,
    		isMenuOpen,
    		menuOnModuleWithId,
    		gridsize,
    		$layout,
    		$runtime,
    		grid_layout,
    		serialport_runtime_binding,
    		serialport_layout_binding,
    		change_handler,
    		coroner_handler,
    		div_binding,
    		menu_open_handler,
    		menu_close_handler,
    		dnd_dragstart_handler,
    		dnd_dragover_handler,
    		dnd_drop_handler,
    		dnd_remove_handler,
    		dnd_invalid_handler,
    		dnd_dragend_handler
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
